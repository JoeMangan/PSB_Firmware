
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b70  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d44  08004d44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d4c  08004d4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08004d60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004d60  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e513  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f37  00000000  00000000  0002e592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  000304d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ee  00000000  00000000  00031190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021471  00000000  00000000  00031b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f138  00000000  00000000  00052fef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdbce  00000000  00000000  00062127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034a8  00000000  00000000  0012fcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001331a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004ce4 	.word	0x08004ce4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004ce4 	.word	0x08004ce4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fcb2 	bl	8000e34 <HAL_Init>

  /* USER CODE BEGIN Init */
  i2c_tx_buffer[0] = 0xA5;
 80004d0:	4b1e      	ldr	r3, [pc, #120]	; (800054c <main+0x84>)
 80004d2:	22a5      	movs	r2, #165	; 0xa5
 80004d4:	701a      	strb	r2, [r3, #0]
  i2c_tx_buffer[1] = 0xB6;
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <main+0x84>)
 80004d8:	22b6      	movs	r2, #182	; 0xb6
 80004da:	705a      	strb	r2, [r3, #1]

  slv_i2C_clear_buffer(&i2c_tx_buffer[0], TXBUFFERSIZE);
 80004dc:	2102      	movs	r1, #2
 80004de:	481b      	ldr	r0, [pc, #108]	; (800054c <main+0x84>)
 80004e0:	f000 fa08 	bl	80008f4 <slv_i2C_clear_buffer>

  i2c_rx_buffer[0] = 0x85;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <main+0x88>)
 80004e6:	2285      	movs	r2, #133	; 0x85
 80004e8:	701a      	strb	r2, [r3, #0]
  i2c_rx_buffer[1] = 0x86;
 80004ea:	4b19      	ldr	r3, [pc, #100]	; (8000550 <main+0x88>)
 80004ec:	2286      	movs	r2, #134	; 0x86
 80004ee:	705a      	strb	r2, [r3, #1]
  i2c_rx_buffer[2] = 0x87;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <main+0x88>)
 80004f2:	2287      	movs	r2, #135	; 0x87
 80004f4:	709a      	strb	r2, [r3, #2]

  slv_i2C_clear_buffer(&i2c_rx_buffer[0], RXBUFFERSIZE);
 80004f6:	2103      	movs	r1, #3
 80004f8:	4815      	ldr	r0, [pc, #84]	; (8000550 <main+0x88>)
 80004fa:	f000 f9fb 	bl	80008f4 <slv_i2C_clear_buffer>
  //HAL_I2C_MspInit();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f82d 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f96d 	bl	80007e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000506:	f000 f93b 	bl	8000780 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800050a:	f000 f8f9 	bl	8000700 <MX_I2C3_Init>
  MX_I2C2_Init();
 800050e:	f000 f8b7 	bl	8000680 <MX_I2C2_Init>
  MX_I2C1_Init();
 8000512:	f000 f875 	bl	8000600 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000516:	480f      	ldr	r0, [pc, #60]	; (8000554 <main+0x8c>)
 8000518:	f001 fa1e 	bl	8001958 <HAL_I2C_EnableListen_IT>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <main+0x5e>
  {
	/* Transfer error in reception process */
	Error_Handler();
 8000522:	f000 fa8f 	bl	8000a44 <Error_Handler>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

		if (Xfer_Complete ==1)
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <main+0x90>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d1fb      	bne.n	8000526 <main+0x5e>
		{

			HAL_Delay(1); // Delay for 1 ms
 800052e:	2001      	movs	r0, #1
 8000530:	f000 fcfc 	bl	8000f2c <HAL_Delay>

			/*##- Put I2C peripheral in listen mode process ###########################*/
			if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <main+0x8c>)
 8000536:	f001 fa0f 	bl	8001958 <HAL_I2C_EnableListen_IT>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <main+0x7c>
			{
				/* Transfer error in reception process */
				Error_Handler();
 8000540:	f000 fa80 	bl	8000a44 <Error_Handler>
			}
			Xfer_Complete =0;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <main+0x90>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
		if (Xfer_Complete ==1)
 800054a:	e7ec      	b.n	8000526 <main+0x5e>
 800054c:	20000030 	.word	0x20000030
 8000550:	20000034 	.word	0x20000034
 8000554:	20000038 	.word	0x20000038
 8000558:	2000002c 	.word	0x2000002c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	; 0x58
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2244      	movs	r2, #68	; 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f004 fb8d 	bl	8004c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000582:	f002 fcfb 	bl	8002f7c <HAL_PWREx_ControlVoltageScaling>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800058c:	f000 fa5a 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2310      	movs	r3, #16
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005aa:	230a      	movs	r3, #10
 80005ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4618      	mov	r0, r3
 80005c0:	f002 fd32 	bl	8003028 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ca:	f000 fa3b 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f003 f932 	bl	8003850 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f2:	f000 fa27 	bl	8000a44 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3758      	adds	r7, #88	; 0x58
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_I2C1_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_I2C1_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_I2C1_Init+0x74>)
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <MX_I2C1_Init+0x7c>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 50;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_I2C1_Init+0x74>)
 8000612:	2232      	movs	r2, #50	; 0x32
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_I2C1_Init+0x74>)
 8000618:	2201      	movs	r2, #1
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_I2C1_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_I2C1_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063a:	480e      	ldr	r0, [pc, #56]	; (8000674 <MX_I2C1_Init+0x74>)
 800063c:	f000 ff8c 	bl	8001558 <HAL_I2C_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000646:	f000 f9fd 	bl	8000a44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064a:	2100      	movs	r1, #0
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_I2C1_Init+0x74>)
 800064e:	f002 fbef 	bl	8002e30 <HAL_I2CEx_ConfigAnalogFilter>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000658:	f000 f9f4 	bl	8000a44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800065c:	2100      	movs	r1, #0
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_I2C1_Init+0x74>)
 8000660:	f002 fc31 	bl	8002ec6 <HAL_I2CEx_ConfigDigitalFilter>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 f9eb 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000038 	.word	0x20000038
 8000678:	40005400 	.word	0x40005400
 800067c:	10909cec 	.word	0x10909cec

08000680 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C2_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <MX_I2C2_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_I2C2_Init+0x74>)
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <MX_I2C2_Init+0x7c>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_I2C2_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_I2C2_Init+0x74>)
 8000698:	2201      	movs	r2, #1
 800069a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_I2C2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006ba:	480e      	ldr	r0, [pc, #56]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006bc:	f000 ff4c 	bl	8001558 <HAL_I2C_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006c6:	f000 f9bd 	bl	8000a44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ca:	2100      	movs	r1, #0
 80006cc:	4809      	ldr	r0, [pc, #36]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006ce:	f002 fbaf 	bl	8002e30 <HAL_I2CEx_ConfigAnalogFilter>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006d8:	f000 f9b4 	bl	8000a44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_I2C2_Init+0x74>)
 80006e0:	f002 fbf1 	bl	8002ec6 <HAL_I2CEx_ConfigDigitalFilter>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f9ab 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	40005800 	.word	0x40005800
 80006fc:	10909cec 	.word	0x10909cec

08000700 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000704:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_I2C3_Init+0x74>)
 8000706:	4a1c      	ldr	r2, [pc, #112]	; (8000778 <MX_I2C3_Init+0x78>)
 8000708:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800070a:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_I2C3_Init+0x74>)
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <MX_I2C3_Init+0x7c>)
 800070e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <MX_I2C3_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_I2C3_Init+0x74>)
 8000718:	2201      	movs	r2, #1
 800071a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_I2C3_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_I2C3_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000728:	4b12      	ldr	r3, [pc, #72]	; (8000774 <MX_I2C3_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_I2C3_Init+0x74>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_I2C3_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <MX_I2C3_Init+0x74>)
 800073c:	f000 ff0c 	bl	8001558 <HAL_I2C_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000746:	f000 f97d 	bl	8000a44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074a:	2100      	movs	r1, #0
 800074c:	4809      	ldr	r0, [pc, #36]	; (8000774 <MX_I2C3_Init+0x74>)
 800074e:	f002 fb6f 	bl	8002e30 <HAL_I2CEx_ConfigAnalogFilter>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000758:	f000 f974 	bl	8000a44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800075c:	2100      	movs	r1, #0
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_I2C3_Init+0x74>)
 8000760:	f002 fbb1 	bl	8002ec6 <HAL_I2CEx_ConfigDigitalFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800076a:	f000 f96b 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000e0 	.word	0x200000e0
 8000778:	40005c00 	.word	0x40005c00
 800077c:	10909cec 	.word	0x10909cec

08000780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000786:	4a15      	ldr	r2, [pc, #84]	; (80007dc <MX_USART2_UART_Init+0x5c>)
 8000788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_USART2_UART_Init+0x58>)
 80007c4:	f003 fda4 	bl	8004310 <HAL_UART_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f939 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000134 	.word	0x20000134
 80007dc:	40004400 	.word	0x40004400

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f6:	4b3c      	ldr	r3, [pc, #240]	; (80008e8 <MX_GPIO_Init+0x108>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a3b      	ldr	r2, [pc, #236]	; (80008e8 <MX_GPIO_Init+0x108>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <MX_GPIO_Init+0x108>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <MX_GPIO_Init+0x108>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a35      	ldr	r2, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x108>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <MX_GPIO_Init+0x108>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <MX_GPIO_Init+0x108>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <MX_GPIO_Init+0x108>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_GPIO_Init+0x108>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <MX_GPIO_Init+0x108>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a29      	ldr	r2, [pc, #164]	; (80008e8 <MX_GPIO_Init+0x108>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b27      	ldr	r3, [pc, #156]	; (80008e8 <MX_GPIO_Init+0x108>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	21b0      	movs	r1, #176	; 0xb0
 800085a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085e:	f000 fe63 	bl	8001528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 8000862:	2200      	movs	r2, #0
 8000864:	f243 31e0 	movw	r1, #13280	; 0x33e0
 8000868:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x10c>)
 800086a:	f000 fe5d 	bl	8001528 <HAL_GPIO_WritePin>
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000874:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x110>)
 8000886:	f000 fcd5 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800088a:	23b0      	movs	r3, #176	; 0xb0
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a4:	f000 fcc6 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f000 fcb9 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_HT_Pin LD4_Pin ENABLE_1_FPGA_Pin ENABLE_2_IJC_Pin
                           ENABLE_3_CEA_Pin ENABLE_4_Pin ENABLE_5_UCD_Pin */
  GPIO_InitStruct.Pin = ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 80008c2:	f243 33e0 	movw	r3, #13280	; 0x33e0
 80008c6:	617b      	str	r3, [r7, #20]
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_GPIO_Init+0x10c>)
 80008dc:	f000 fcaa 	bl	8001234 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000400 	.word	0x48000400
 80008f0:	48000800 	.word	0x48000800

080008f4 <slv_i2C_clear_buffer>:
{
	//
}

void slv_i2C_clear_buffer(uint8_t* buffer, uint8_t size)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]

	uint8_t idx = 0; // An index
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]

	for(idx = 0; idx < size; idx++)
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]
 8000908:	e008      	b.n	800091c <slv_i2C_clear_buffer+0x28>
	{
		// Cycle through and clear the buffer array
		*buffer = 0x00;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
		buffer++;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3301      	adds	r3, #1
 8000914:	607b      	str	r3, [r7, #4]
	for(idx = 0; idx < size; idx++)
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	3301      	adds	r3, #1
 800091a:	73fb      	strb	r3, [r7, #15]
 800091c:	7bfa      	ldrb	r2, [r7, #15]
 800091e:	78fb      	ldrb	r3, [r7, #3]
 8000920:	429a      	cmp	r2, r3
 8000922:	d3f2      	bcc.n	800090a <slv_i2C_clear_buffer+0x16>
	}

}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
	...

08000934 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in transmission process is correct */

  Xfer_Complete = 1;
 800093c:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_I2C_SlaveTxCpltCallback+0x4c>)
 800093e:	2201      	movs	r2, #1
 8000940:	601a      	str	r2, [r3, #0]
  i2c_tx_buffer[0]++;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	3301      	adds	r3, #1
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 800094c:	701a      	strb	r2, [r3, #0]
  i2c_tx_buffer[1]++;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	3301      	adds	r3, #1
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000958:	705a      	strb	r2, [r3, #1]
  i2c_tx_buffer[2]++;
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 800095c:	789b      	ldrb	r3, [r3, #2]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000964:	709a      	strb	r2, [r3, #2]
  i2c_tx_buffer[3]++;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000968:	78db      	ldrb	r3, [r3, #3]
 800096a:	3301      	adds	r3, #1
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000970:	70da      	strb	r2, [r3, #3]

}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	2000002c 	.word	0x2000002c
 8000984:	20000030 	.word	0x20000030

08000988 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in reception process is correct */

  Xfer_Complete = 1;
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 8000992:	2201      	movs	r2, #1
 8000994:	601a      	str	r2, [r3, #0]

}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	2000002c 	.word	0x2000002c

080009a8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
 80009b4:	4613      	mov	r3, r2
 80009b6:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <HAL_I2C_AddrCallback+0x58>)
 80009bc:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_I2C_AddrCallback+0x58>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d00c      	beq.n	80009e0 <HAL_I2C_AddrCallback+0x38>
  {
     /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "i2c_tx_buffer" buffer */
  if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)i2c_tx_buffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80009c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009ca:	2202      	movs	r2, #2
 80009cc:	490d      	ldr	r1, [pc, #52]	; (8000a04 <HAL_I2C_AddrCallback+0x5c>)
 80009ce:	480e      	ldr	r0, [pc, #56]	; (8000a08 <HAL_I2C_AddrCallback+0x60>)
 80009d0:	f000 fe5e 	bl	8001690 <HAL_I2C_Slave_Seq_Transmit_IT>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00e      	beq.n	80009f8 <HAL_I2C_AddrCallback+0x50>

    {
    /* Transfer error in transmission process */
    Error_Handler();
 80009da:	f000 f833 	bl	8000a44 <Error_Handler>
    Error_Handler();
  }

  }

}
 80009de:	e00b      	b.n	80009f8 <HAL_I2C_AddrCallback+0x50>
  if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)i2c_rx_buffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80009e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009e4:	2203      	movs	r2, #3
 80009e6:	4909      	ldr	r1, [pc, #36]	; (8000a0c <HAL_I2C_AddrCallback+0x64>)
 80009e8:	4807      	ldr	r0, [pc, #28]	; (8000a08 <HAL_I2C_AddrCallback+0x60>)
 80009ea:	f000 ff03 	bl	80017f4 <HAL_I2C_Slave_Seq_Receive_IT>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_I2C_AddrCallback+0x50>
    Error_Handler();
 80009f4:	f000 f826 	bl	8000a44 <Error_Handler>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000028 	.word	0x20000028
 8000a04:	20000030 	.word	0x20000030
 8000a08:	20000038 	.word	0x20000038
 8000a0c:	20000034 	.word	0x20000034

08000a10 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	//HAL_I2C_EnableListen_IT(&hi2c1);
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f001 f85a 	bl	8001ae6 <HAL_I2C_GetError>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d001      	beq.n	8000a3c <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8000a38:	f000 f804 	bl	8000a44 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6613      	str	r3, [r2, #96]	; 0x60
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x44>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0a6      	sub	sp, #152	; 0x98
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	2260      	movs	r2, #96	; 0x60
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 f8e6 	bl	8004c8a <memset>
  if(hi2c->Instance==I2C1)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a6c      	ldr	r2, [pc, #432]	; (8000c74 <HAL_I2C_MspInit+0x1dc>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d14d      	bne.n	8000b64 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ac8:	2340      	movs	r3, #64	; 0x40
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f003 f8df 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ae0:	f7ff ffb0 	bl	8000a44 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae8:	4a63      	ldr	r2, [pc, #396]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af0:	4b61      	ldr	r3, [pc, #388]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
 8000afa:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000afc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b16:	2304      	movs	r3, #4
 8000b18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 fb85 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b2a:	4b53      	ldr	r3, [pc, #332]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a52      	ldr	r2, [pc, #328]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b50      	ldr	r3, [pc, #320]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	201f      	movs	r0, #31
 8000b48:	f000 faef 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b4c:	201f      	movs	r0, #31
 8000b4e:	f000 fb08 	bl	8001162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	2020      	movs	r0, #32
 8000b58:	f000 fae7 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f000 fb00 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b62:	e082      	b.n	8000c6a <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a44      	ldr	r2, [pc, #272]	; (8000c7c <HAL_I2C_MspInit+0x1e4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d13c      	bne.n	8000be8 <HAL_I2C_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 f88c 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8000b86:	f7ff ff5d 	bl	8000a44 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b3b      	ldr	r3, [pc, #236]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a3a      	ldr	r2, [pc, #232]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ba2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000baa:	2312      	movs	r3, #18
 8000bac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	482d      	ldr	r0, [pc, #180]	; (8000c80 <HAL_I2C_MspInit+0x1e8>)
 8000bca:	f000 fb33 	bl	8001234 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000bd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
}
 8000be6:	e040      	b.n	8000c6a <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a25      	ldr	r2, [pc, #148]	; (8000c84 <HAL_I2C_MspInit+0x1ec>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d13b      	bne.n	8000c6a <HAL_I2C_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 f849 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_I2C_MspInit+0x178>
      Error_Handler();
 8000c0c:	f7ff ff1a 	bl	8000a44 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c14:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000c16:	f043 0304 	orr.w	r3, r3, #4
 8000c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c40:	2304      	movs	r3, #4
 8000c42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480e      	ldr	r0, [pc, #56]	; (8000c88 <HAL_I2C_MspInit+0x1f0>)
 8000c4e:	f000 faf1 	bl	8001234 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000c58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_I2C_MspInit+0x1e0>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
}
 8000c6a:	bf00      	nop
 8000c6c:	3798      	adds	r7, #152	; 0x98
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40005400 	.word	0x40005400
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40005800 	.word	0x40005800
 8000c80:	48000400 	.word	0x48000400
 8000c84:	40005c00 	.word	0x40005c00
 8000c88:	48000800 	.word	0x48000800

08000c8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0a2      	sub	sp, #136	; 0x88
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2260      	movs	r2, #96	; 0x60
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 ffec 	bl	8004c8a <memset>
  if(huart->Instance==USART2)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a20      	ldr	r2, [pc, #128]	; (8000d38 <HAL_UART_MspInit+0xac>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d138      	bne.n	8000d2e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f002 ffe5 	bl	8003c98 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cd4:	f7ff feb6 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_UART_MspInit+0xb0>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cdc:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_UART_MspInit+0xb0>)
 8000cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_UART_MspInit+0xb0>)
 8000ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_UART_MspInit+0xb0>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <HAL_UART_MspInit+0xb0>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_UART_MspInit+0xb0>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d08:	230c      	movs	r3, #12
 8000d0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f000 fa83 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3788      	adds	r7, #136	; 0x88
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	40021000 	.word	0x40021000

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f8ae 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <I2C1_EV_IRQHandler+0x10>)
 8000d9a:	f000 fdfd 	bl	8001998 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000038 	.word	0x20000038

08000da8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <I2C1_ER_IRQHandler+0x10>)
 8000dae:	f000 fe0d 	bl	80019cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000038 	.word	0x20000038

08000dbc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	; (8000e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	; (8000e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <LoopForever+0xe>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	; (8000e2c <LoopForever+0x16>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f003 ff45 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e12:	f7ff fb59 	bl	80004c8 <main>

08000e16 <LoopForever>:

LoopForever:
    b LoopForever
 8000e16:	e7fe      	b.n	8000e16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e24:	08004d54 	.word	0x08004d54
  ldr r2, =_sbss
 8000e28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e2c:	200001c0 	.word	0x200001c0

08000e30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_Init+0x3c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_Init+0x3c>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f000 f962 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f80f 	bl	8000e74 <HAL_InitTick>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d002      	beq.n	8000e62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	e001      	b.n	8000e66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e62:	f7ff fdf5 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e80:	4b17      	ldr	r3, [pc, #92]	; (8000ee0 <HAL_InitTick+0x6c>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d023      	beq.n	8000ed0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_InitTick+0x70>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <HAL_InitTick+0x6c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f96d 	bl	800117e <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10f      	bne.n	8000eca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d809      	bhi.n	8000ec4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb8:	f000 f937 	bl	800112a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_InitTick+0x74>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e007      	b.n	8000ed4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e004      	b.n	8000ed4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	73fb      	strb	r3, [r7, #15]
 8000ece:	e001      	b.n	8000ed4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	200001bc 	.word	0x200001bc

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	200001bc 	.word	0x200001bc

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d005      	beq.n	80011ba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2204      	movs	r2, #4
 80011b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e029      	b.n	800120e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 020e 	bic.w	r2, r2, #14
 80011c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f003 021c 	and.w	r2, r3, #28
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	4798      	blx	r3
    }
  }
  return status;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001226:	b2db      	uxtb	r3, r3
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e154      	b.n	80014ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8146 	beq.w	80014e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x40>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d123      	bne.n	8001366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	6939      	ldr	r1, [r7, #16]
 8001362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 80a0 	beq.w	80014e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_GPIO_Init+0x2d8>)
 80013aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ac:	4a57      	ldr	r2, [pc, #348]	; (800150c <HAL_GPIO_Init+0x2d8>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6613      	str	r3, [r2, #96]	; 0x60
 80013b4:	4b55      	ldr	r3, [pc, #340]	; (800150c <HAL_GPIO_Init+0x2d8>)
 80013b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c0:	4a53      	ldr	r2, [pc, #332]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ea:	d019      	beq.n	8001420 <HAL_GPIO_Init+0x1ec>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a49      	ldr	r2, [pc, #292]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d013      	beq.n	800141c <HAL_GPIO_Init+0x1e8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a48      	ldr	r2, [pc, #288]	; (8001518 <HAL_GPIO_Init+0x2e4>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d00d      	beq.n	8001418 <HAL_GPIO_Init+0x1e4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a47      	ldr	r2, [pc, #284]	; (800151c <HAL_GPIO_Init+0x2e8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d007      	beq.n	8001414 <HAL_GPIO_Init+0x1e0>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a46      	ldr	r2, [pc, #280]	; (8001520 <HAL_GPIO_Init+0x2ec>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d101      	bne.n	8001410 <HAL_GPIO_Init+0x1dc>
 800140c:	2304      	movs	r3, #4
 800140e:	e008      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001410:	2307      	movs	r3, #7
 8001412:	e006      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001414:	2303      	movs	r3, #3
 8001416:	e004      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001418:	2302      	movs	r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_GPIO_Init+0x1ee>
 8001420:	2300      	movs	r3, #0
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	f002 0203 	and.w	r2, r2, #3
 8001428:	0092      	lsls	r2, r2, #2
 800142a:	4093      	lsls	r3, r2
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001432:	4937      	ldr	r1, [pc, #220]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	089b      	lsrs	r3, r3, #2
 8001438:	3302      	adds	r3, #2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001440:	4b38      	ldr	r3, [pc, #224]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001464:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800146a:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800148e:	4a25      	ldr	r2, [pc, #148]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001494:	4b23      	ldr	r3, [pc, #140]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014e2:	4a10      	ldr	r2, [pc, #64]	; (8001524 <HAL_GPIO_Init+0x2f0>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	3301      	adds	r3, #1
 80014ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa22 f303 	lsr.w	r3, r2, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f47f aea3 	bne.w	8001244 <HAL_GPIO_Init+0x10>
  }
}
 80014fe:	bf00      	nop
 8001500:	bf00      	nop
 8001502:	371c      	adds	r7, #28
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40021000 	.word	0x40021000
 8001510:	40010000 	.word	0x40010000
 8001514:	48000400 	.word	0x48000400
 8001518:	48000800 	.word	0x48000800
 800151c:	48000c00 	.word	0x48000c00
 8001520:	48001000 	.word	0x48001000
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001544:	e002      	b.n	800154c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e08d      	b.n	8001686 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d106      	bne.n	8001584 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff fa8a 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2224      	movs	r2, #36	; 0x24
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d107      	bne.n	80015d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d108      	bne.n	80015fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	e007      	b.n	800160a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001618:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800162c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69d9      	ldr	r1, [r3, #28]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2220      	movs	r2, #32
 8001672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	4613      	mov	r3, r2
 800169e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80016ac:	2b28      	cmp	r3, #40	; 0x28
 80016ae:	f040 8098 	bne.w	80017e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e08c      	b.n	80017e4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80016ca:	f248 0101 	movw	r1, #32769	; 0x8001
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f001 fb50 	bl	8002d74 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80016de:	2302      	movs	r3, #2
 80016e0:	e080      	b.n	80017e4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b2a      	cmp	r3, #42	; 0x2a
 80016f4:	d12a      	bne.n	800174c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80016f6:	2102      	movs	r1, #2
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f001 fb3b 	bl	8002d74 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800170c:	d11e      	bne.n	800174c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800171c:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d012      	beq.n	800174c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172a:	4a30      	ldr	r2, [pc, #192]	; (80017ec <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 800172c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fd2f 	bl	8001196 <HAL_DMA_Abort_IT>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001748:	4610      	mov	r0, r2
 800174a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2229      	movs	r2, #41	; 0x29
 8001750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001770:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8001792:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b08      	cmp	r3, #8
 80017a0:	bf0c      	ite	eq
 80017a2:	2301      	moveq	r3, #1
 80017a4:	2300      	movne	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	0c1b      	lsrs	r3, r3, #16
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d106      	bne.n	80017cc <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 80017be:	7dfb      	ldrb	r3, [r7, #23]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2208      	movs	r2, #8
 80017ca:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80017d4:	f248 0101 	movw	r1, #32769	; 0x8001
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f001 fa47 	bl	8002c6c <I2C_Enable_IRQ>

    return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
  }
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	08002bcb 	.word	0x08002bcb
 80017f0:	08001aff 	.word	0x08001aff

080017f4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	4613      	mov	r3, r2
 8001802:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001810:	2b28      	cmp	r3, #40	; 0x28
 8001812:	f040 8098 	bne.w	8001946 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d002      	beq.n	8001822 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001828:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e08c      	b.n	8001948 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800182e:	f248 0102 	movw	r1, #32770	; 0x8002
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f001 fa9e 	bl	8002d74 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8001842:	2302      	movs	r3, #2
 8001844:	e080      	b.n	8001948 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2b29      	cmp	r3, #41	; 0x29
 8001858:	d12a      	bne.n	80018b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800185a:	2101      	movs	r1, #1
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f001 fa89 	bl	8002d74 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001870:	d11e      	bne.n	80018b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001880:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	2b00      	cmp	r3, #0
 8001888:	d012      	beq.n	80018b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	4a30      	ldr	r2, [pc, #192]	; (8001950 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001890:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fc7d 	bl	8001196 <HAL_DMA_Abort_IT>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018ac:	4610      	mov	r0, r2
 80018ae:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	222a      	movs	r2, #42	; 0x2a
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2220      	movs	r2, #32
 80018bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018d4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	88fa      	ldrh	r2, [r7, #6]
 80018e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b08      	cmp	r3, #8
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	0c1b      	lsrs	r3, r3, #16
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8001922:	7dfb      	ldrb	r3, [r7, #23]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2208      	movs	r2, #8
 800192e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001938:	f248 0102 	movw	r1, #32770	; 0x8002
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f001 f995 	bl	8002c6c <I2C_Enable_IRQ>

    return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
  }
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	08002bcb 	.word	0x08002bcb
 8001954:	08001aff 	.word	0x08001aff

08001958 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b20      	cmp	r3, #32
 800196a:	d10d      	bne.n	8001988 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2228      	movs	r2, #40	; 0x28
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_I2C_EnableListen_IT+0x3c>)
 8001978:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800197a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f001 f974 	bl	8002c6c <I2C_Enable_IRQ>

    return HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	e000      	b.n	800198a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001988:	2302      	movs	r3, #2
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08001aff 	.word	0x08001aff

08001998 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	68f9      	ldr	r1, [r7, #12]
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
  }
}
 80019c4:	bf00      	nop
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00f      	beq.n	8001a0e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00a      	beq.n	8001a0e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00f      	beq.n	8001a38 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00a      	beq.n	8001a38 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f043 0208 	orr.w	r2, r3, #8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a36:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00f      	beq.n	8001a62 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00a      	beq.n	8001a62 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f043 0202 	orr.w	r2, r3, #2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a60:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 030b 	and.w	r3, r3, #11
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001a72:	68f9      	ldr	r1, [r7, #12]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 ff6d 	bl	8002954 <I2C_ITError>
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <I2C_Slave_ISR_IT+0x24>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e0e1      	b.n	8001ce6 <I2C_Slave_ISR_IT+0x1e8>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f003 0320 	and.w	r3, r3, #32
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001b3e:	6939      	ldr	r1, [r7, #16]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 fda1 	bl	8002688 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d04b      	beq.n	8001be8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d046      	beq.n	8001be8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d128      	bne.n	8001bb6 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b28      	cmp	r3, #40	; 0x28
 8001b6e:	d108      	bne.n	8001b82 <I2C_Slave_ISR_IT+0x84>
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b76:	d104      	bne.n	8001b82 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001b78:	6939      	ldr	r1, [r7, #16]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fe96 	bl	80028ac <I2C_ITListenCplt>
 8001b80:	e031      	b.n	8001be6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b29      	cmp	r3, #41	; 0x29
 8001b8c:	d10e      	bne.n	8001bac <I2C_Slave_ISR_IT+0xae>
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b94:	d00a      	beq.n	8001bac <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 ffef 	bl	8002b82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fc4a 	bl	800243e <I2C_ITSlaveSeqCplt>
 8001baa:	e01c      	b.n	8001be6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2210      	movs	r2, #16
 8001bb2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001bb4:	e08f      	b.n	8001cd6 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2210      	movs	r2, #16
 8001bbc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f043 0204 	orr.w	r2, r3, #4
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <I2C_Slave_ISR_IT+0xda>
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd6:	d17e      	bne.n	8001cd6 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	4619      	mov	r1, r3
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f000 feb8 	bl	8002954 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001be4:	e077      	b.n	8001cd6 <I2C_Slave_ISR_IT+0x1d8>
 8001be6:	e076      	b.n	8001cd6 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d02f      	beq.n	8001c52 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d02a      	beq.n	8001c52 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d018      	beq.n	8001c38 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d14b      	bne.n	8001cda <I2C_Slave_ISR_IT+0x1dc>
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c48:	d047      	beq.n	8001cda <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fbf7 	bl	800243e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001c50:	e043      	b.n	8001cda <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d009      	beq.n	8001c70 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001c66:	6939      	ldr	r1, [r7, #16]
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fb27 	bl	80022bc <I2C_ITAddrCplt>
 8001c6e:	e035      	b.n	8001cdc <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d030      	beq.n	8001cdc <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d02b      	beq.n	8001cdc <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d018      	beq.n	8001cc0 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	851a      	strh	r2, [r3, #40]	; 0x28
 8001cbe:	e00d      	b.n	8001cdc <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cc6:	d002      	beq.n	8001cce <I2C_Slave_ISR_IT+0x1d0>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fbb5 	bl	800243e <I2C_ITSlaveSeqCplt>
 8001cd4:	e002      	b.n	8001cdc <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001cd6:	bf00      	nop
 8001cd8:	e000      	b.n	8001cdc <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001cda:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b088      	sub	sp, #32
 8001cf2:	af02      	add	r7, sp, #8
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <I2C_Master_ISR_DMA+0x1a>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e0d9      	b.n	8001ebc <I2C_Master_ISR_DMA+0x1ce>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d016      	beq.n	8001d48 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d011      	beq.n	8001d48 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f043 0204 	orr.w	r2, r3, #4
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d38:	2120      	movs	r1, #32
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 ff96 	bl	8002c6c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f000 ff1e 	bl	8002b82 <I2C_Flush_TXDR>
 8001d46:	e0b4      	b.n	8001eb2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d071      	beq.n	8001e36 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d06c      	beq.n	8001e36 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d6a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d04e      	beq.n	8001e14 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d82:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	2bff      	cmp	r3, #255	; 0xff
 8001d8c:	d906      	bls.n	8001d9c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	22ff      	movs	r2, #255	; 0xff
 8001d92:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001d94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e010      	b.n	8001dbe <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001dae:	d003      	beq.n	8001db8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e002      	b.n	8001dbe <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dbc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	8a79      	ldrh	r1, [r7, #18]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 ff1b 	bl	8002c08 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b22      	cmp	r3, #34	; 0x22
 8001dee:	d108      	bne.n	8001e02 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dfe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e00:	e057      	b.n	8001eb2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e10:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e12:	e04e      	b.n	8001eb2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e22:	d003      	beq.n	8001e2c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 facd 	bl	80023c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001e2a:	e042      	b.n	8001eb2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e2c:	2140      	movs	r1, #64	; 0x40
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fd90 	bl	8002954 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001e34:	e03d      	b.n	8001eb2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d028      	beq.n	8001e92 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d023      	beq.n	8001e92 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d119      	bne.n	8001e88 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e62:	d025      	beq.n	8001eb0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e6c:	d108      	bne.n	8001e80 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e7c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001e7e:	e017      	b.n	8001eb0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fa9f 	bl	80023c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001e86:	e013      	b.n	8001eb0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e88:	2140      	movs	r1, #64	; 0x40
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fd62 	bl	8002954 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e90:	e00e      	b.n	8001eb0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001ea6:	68b9      	ldr	r1, [r7, #8]
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 fb25 	bl	80024f8 <I2C_ITMasterCplt>
 8001eae:	e000      	b.n	8001eb2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8001eb0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001ed0:	4b8d      	ldr	r3, [pc, #564]	; (8002108 <I2C_Mem_ISR_DMA+0x244>)
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <I2C_Mem_ISR_DMA+0x1e>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e10e      	b.n	8002100 <I2C_Mem_ISR_DMA+0x23c>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d016      	beq.n	8001f22 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d011      	beq.n	8001f22 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2210      	movs	r2, #16
 8001f04:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f043 0204 	orr.w	r2, r3, #4
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f12:	2120      	movs	r1, #32
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 fea9 	bl	8002c6c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fe31 	bl	8002b82 <I2C_Flush_TXDR>
 8001f20:	e0e9      	b.n	80020f6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00e      	beq.n	8001f4a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d009      	beq.n	8001f4a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f46:	651a      	str	r2, [r3, #80]	; 0x50
 8001f48:	e0d5      	b.n	80020f6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d05f      	beq.n	8002014 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d05a      	beq.n	8002014 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f5e:	2101      	movs	r1, #1
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 ff07 	bl	8002d74 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001f66:	2110      	movs	r1, #16
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fe7f 	bl	8002c6c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d048      	beq.n	800200a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2bff      	cmp	r3, #255	; 0xff
 8001f80:	d910      	bls.n	8001fa4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	22ff      	movs	r2, #255	; 0xff
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	b299      	uxth	r1, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fe33 	bl	8002c08 <I2C_TransferConfig>
 8001fa2:	e011      	b.n	8001fc8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	2300      	movs	r3, #0
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 fe20 	bl	8002c08 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b22      	cmp	r3, #34	; 0x22
 8001fe4:	d108      	bne.n	8001ff8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ff4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001ff6:	e07e      	b.n	80020f6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002006:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002008:	e075      	b.n	80020f6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800200a:	2140      	movs	r1, #64	; 0x40
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fca1 	bl	8002954 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002012:	e070      	b.n	80020f6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d05d      	beq.n	80020da <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002024:	2b00      	cmp	r3, #0
 8002026:	d058      	beq.n	80020da <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002028:	2101      	movs	r1, #1
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fea2 	bl	8002d74 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002030:	2110      	movs	r1, #16
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fe1a 	bl	8002c6c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b22      	cmp	r3, #34	; 0x22
 8002042:	d101      	bne.n	8002048 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <I2C_Mem_ISR_DMA+0x248>)
 8002046:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2bff      	cmp	r3, #255	; 0xff
 8002050:	d910      	bls.n	8002074 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	22ff      	movs	r2, #255	; 0xff
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	b299      	uxth	r1, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002062:	b2da      	uxtb	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fdcb 	bl	8002c08 <I2C_TransferConfig>
 8002072:	e011      	b.n	8002098 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	b299      	uxth	r1, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	b2da      	uxtb	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 fdb8 	bl	8002c08 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b22      	cmp	r3, #34	; 0x22
 80020b4:	d108      	bne.n	80020c8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020c6:	e016      	b.n	80020f6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020d8:	e00d      	b.n	80020f6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d008      	beq.n	80020f6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fa01 	bl	80024f8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	80002000 	.word	0x80002000
 800210c:	80002400 	.word	0x80002400

08002110 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <I2C_Slave_ISR_DMA+0x24>
 8002130:	2302      	movs	r3, #2
 8002132:	e0bf      	b.n	80022b4 <I2C_Slave_ISR_DMA+0x1a4>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fa98 	bl	8002688 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 8095 	beq.w	800228e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 808f 	beq.w	800228e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d104      	bne.n	8002184 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002180:	2b00      	cmp	r3, #0
 8002182:	d07d      	beq.n	8002280 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00c      	beq.n	80021a6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80021a2:	2301      	movs	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00c      	beq.n	80021c8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d128      	bne.n	8002220 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b28      	cmp	r3, #40	; 0x28
 80021d8:	d108      	bne.n	80021ec <I2C_Slave_ISR_DMA+0xdc>
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021e0:	d104      	bne.n	80021ec <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 fb61 	bl	80028ac <I2C_ITListenCplt>
 80021ea:	e048      	b.n	800227e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b29      	cmp	r3, #41	; 0x29
 80021f6:	d10e      	bne.n	8002216 <I2C_Slave_ISR_DMA+0x106>
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021fe:	d00a      	beq.n	8002216 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2210      	movs	r2, #16
 8002206:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f000 fcba 	bl	8002b82 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	f000 f915 	bl	800243e <I2C_ITSlaveSeqCplt>
 8002214:	e033      	b.n	800227e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2210      	movs	r2, #16
 800221c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800221e:	e034      	b.n	800228a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2210      	movs	r2, #16
 8002226:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	f043 0204 	orr.w	r2, r3, #4
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800223a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <I2C_Slave_ISR_DMA+0x13a>
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002248:	d11f      	bne.n	800228a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	2b21      	cmp	r3, #33	; 0x21
 800224e:	d002      	beq.n	8002256 <I2C_Slave_ISR_DMA+0x146>
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b29      	cmp	r3, #41	; 0x29
 8002254:	d103      	bne.n	800225e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2221      	movs	r2, #33	; 0x21
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
 800225c:	e008      	b.n	8002270 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800225e:	7dfb      	ldrb	r3, [r7, #23]
 8002260:	2b22      	cmp	r3, #34	; 0x22
 8002262:	d002      	beq.n	800226a <I2C_Slave_ISR_DMA+0x15a>
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	2b2a      	cmp	r3, #42	; 0x2a
 8002268:	d102      	bne.n	8002270 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2222      	movs	r2, #34	; 0x22
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002274:	4619      	mov	r1, r3
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fb6c 	bl	8002954 <I2C_ITError>
      if (treatdmanack == 1U)
 800227c:	e005      	b.n	800228a <I2C_Slave_ISR_DMA+0x17a>
 800227e:	e004      	b.n	800228a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2210      	movs	r2, #16
 8002286:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002288:	e00f      	b.n	80022aa <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 800228a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800228c:	e00d      	b.n	80022aa <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f003 0308 	and.w	r3, r3, #8
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 f809 	bl	80022bc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3720      	adds	r7, #32
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022d2:	2b28      	cmp	r3, #40	; 0x28
 80022d4:	d16a      	bne.n	80023ac <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	0c1b      	lsrs	r3, r3, #16
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80022f4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002302:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	b29b      	uxth	r3, r3
 800230c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002310:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d138      	bne.n	800238c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800231a:	897b      	ldrh	r3, [r7, #10]
 800231c:	09db      	lsrs	r3, r3, #7
 800231e:	b29a      	uxth	r2, r3
 8002320:	89bb      	ldrh	r3, [r7, #12]
 8002322:	4053      	eors	r3, r2
 8002324:	b29b      	uxth	r3, r3
 8002326:	f003 0306 	and.w	r3, r3, #6
 800232a:	2b00      	cmp	r3, #0
 800232c:	d11c      	bne.n	8002368 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800232e:	897b      	ldrh	r3, [r7, #10]
 8002330:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002340:	2b02      	cmp	r3, #2
 8002342:	d13b      	bne.n	80023bc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2208      	movs	r2, #8
 8002350:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800235a:	89ba      	ldrh	r2, [r7, #12]
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	4619      	mov	r1, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7fe fb21 	bl	80009a8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002366:	e029      	b.n	80023bc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002368:	893b      	ldrh	r3, [r7, #8]
 800236a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800236c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fcff 	bl	8002d74 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800237e:	89ba      	ldrh	r2, [r7, #12]
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	4619      	mov	r1, r3
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7fe fb0f 	bl	80009a8 <HAL_I2C_AddrCallback>
}
 800238a:	e017      	b.n	80023bc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800238c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fcef 	bl	8002d74 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800239e:	89ba      	ldrh	r2, [r7, #12]
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	4619      	mov	r1, r3
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7fe faff 	bl	80009a8 <HAL_I2C_AddrCallback>
}
 80023aa:	e007      	b.n	80023bc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2208      	movs	r2, #8
 80023b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80023bc:	bf00      	nop
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b21      	cmp	r3, #33	; 0x21
 80023de:	d115      	bne.n	800240c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2211      	movs	r2, #17
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80023f4:	2101      	movs	r1, #1
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fcbc 	bl	8002d74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fb3c 	bl	8001a82 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800240a:	e014      	b.n	8002436 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2212      	movs	r2, #18
 8002418:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002420:	2102      	movs	r1, #2
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 fca6 	bl	8002d74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fb30 	bl	8001a96 <HAL_I2C_MasterRxCpltCallback>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e00c      	b.n	800248c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d007      	beq.n	800248c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800248a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b29      	cmp	r3, #41	; 0x29
 8002496:	d112      	bne.n	80024be <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2228      	movs	r2, #40	; 0x28
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2221      	movs	r2, #33	; 0x21
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024a6:	2101      	movs	r1, #1
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fc63 	bl	8002d74 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fa3c 	bl	8000934 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80024bc:	e017      	b.n	80024ee <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b2a      	cmp	r3, #42	; 0x2a
 80024c8:	d111      	bne.n	80024ee <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2228      	movs	r2, #40	; 0x28
 80024ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2222      	movs	r2, #34	; 0x22
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80024d8:	2102      	movs	r1, #2
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fc4a 	bl	8002d74 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fe fa4d 	bl	8000988 <HAL_I2C_SlaveRxCpltCallback>
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2220      	movs	r2, #32
 800250c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b21      	cmp	r3, #33	; 0x21
 8002518:	d107      	bne.n	800252a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800251a:	2101      	movs	r1, #1
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fc29 	bl	8002d74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2211      	movs	r2, #17
 8002526:	631a      	str	r2, [r3, #48]	; 0x30
 8002528:	e00c      	b.n	8002544 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b22      	cmp	r3, #34	; 0x22
 8002534:	d106      	bne.n	8002544 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002536:	2102      	movs	r1, #2
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fc1b 	bl	8002d74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2212      	movs	r2, #18
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <I2C_ITMasterCplt+0x188>)
 8002550:	400b      	ands	r3, r1
 8002552:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a49      	ldr	r2, [pc, #292]	; (8002684 <I2C_ITMasterCplt+0x18c>)
 800255e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2210      	movs	r2, #16
 8002570:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f043 0204 	orr.w	r2, r3, #4
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b60      	cmp	r3, #96	; 0x60
 8002588:	d10a      	bne.n	80025a0 <I2C_ITMasterCplt+0xa8>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	b2db      	uxtb	r3, r3
 800259c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800259e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 faee 	bl	8002b82 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b60      	cmp	r3, #96	; 0x60
 80025b6:	d002      	beq.n	80025be <I2C_ITMasterCplt+0xc6>
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d006      	beq.n	80025cc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	4619      	mov	r1, r3
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f9c5 	bl	8002954 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80025ca:	e054      	b.n	8002676 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b21      	cmp	r3, #33	; 0x21
 80025d6:	d124      	bne.n	8002622 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b40      	cmp	r3, #64	; 0x40
 80025f0:	d10b      	bne.n	800260a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fa51 	bl	8001aaa <HAL_I2C_MemTxCpltCallback>
}
 8002608:	e035      	b.n	8002676 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff fa31 	bl	8001a82 <HAL_I2C_MasterTxCpltCallback>
}
 8002620:	e029      	b.n	8002676 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b22      	cmp	r3, #34	; 0x22
 800262c:	d123      	bne.n	8002676 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2220      	movs	r2, #32
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b40      	cmp	r3, #64	; 0x40
 8002646:	d10b      	bne.n	8002660 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fa30 	bl	8001abe <HAL_I2C_MemRxCpltCallback>
}
 800265e:	e00a      	b.n	8002676 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fa10 	bl	8001a96 <HAL_I2C_MasterRxCpltCallback>
}
 8002676:	bf00      	nop
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	fe00e800 	.word	0xfe00e800
 8002684:	ffff0000 	.word	0xffff0000

08002688 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2220      	movs	r2, #32
 80026ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b21      	cmp	r3, #33	; 0x21
 80026b2:	d002      	beq.n	80026ba <I2C_ITSlaveCplt+0x32>
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	2b29      	cmp	r3, #41	; 0x29
 80026b8:	d108      	bne.n	80026cc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80026ba:	f248 0101 	movw	r1, #32769	; 0x8001
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fb58 	bl	8002d74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2221      	movs	r2, #33	; 0x21
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
 80026ca:	e019      	b.n	8002700 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b22      	cmp	r3, #34	; 0x22
 80026d0:	d002      	beq.n	80026d8 <I2C_ITSlaveCplt+0x50>
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b2a      	cmp	r3, #42	; 0x2a
 80026d6:	d108      	bne.n	80026ea <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80026d8:	f248 0102 	movw	r1, #32770	; 0x8002
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fb49 	bl	8002d74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2222      	movs	r2, #34	; 0x22
 80026e6:	631a      	str	r2, [r3, #48]	; 0x30
 80026e8:	e00a      	b.n	8002700 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b28      	cmp	r3, #40	; 0x28
 80026ee:	d107      	bne.n	8002700 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80026f0:	f248 0103 	movw	r1, #32771	; 0x8003
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fb3d 	bl	8002d74 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800270e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b62      	ldr	r3, [pc, #392]	; (80028a4 <I2C_ITSlaveCplt+0x21c>)
 800271c:	400b      	ands	r3, r1
 800271e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 fa2e 	bl	8002b82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800273e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01f      	beq.n	8002788 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	b29a      	uxth	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002756:	e017      	b.n	8002788 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d012      	beq.n	8002788 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002770:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d006      	beq.n	8002788 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	b29a      	uxth	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	d020      	beq.n	80027d4 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f023 0304 	bic.w	r3, r3, #4
 8002798:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00c      	beq.n	80027d4 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f043 0204 	orr.w	r2, r3, #4
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d010      	beq.n	8002822 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	4619      	mov	r1, r3
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f8a4 	bl	8002954 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b28      	cmp	r3, #40	; 0x28
 8002816:	d141      	bne.n	800289c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002818:	6979      	ldr	r1, [r7, #20]
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f846 	bl	80028ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002820:	e03c      	b.n	800289c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800282a:	d014      	beq.n	8002856 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fe06 	bl	800243e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1c      	ldr	r2, [pc, #112]	; (80028a8 <I2C_ITSlaveCplt+0x220>)
 8002836:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7fe f8de 	bl	8000a10 <HAL_I2C_ListenCpltCallback>
}
 8002854:	e022      	b.n	800289c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b22      	cmp	r3, #34	; 0x22
 8002860:	d10e      	bne.n	8002880 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7fe f885 	bl	8000988 <HAL_I2C_SlaveRxCpltCallback>
}
 800287e:	e00d      	b.n	800289c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fe f84c 	bl	8000934 <HAL_I2C_SlaveTxCpltCallback>
}
 800289c:	bf00      	nop
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	fe00e800 	.word	0xfe00e800
 80028a8:	ffff0000 	.word	0xffff0000

080028ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a25      	ldr	r2, [pc, #148]	; (8002950 <I2C_ITListenCplt+0xa4>)
 80028ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d022      	beq.n	8002928 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d012      	beq.n	8002928 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f043 0204 	orr.w	r2, r3, #4
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002928:	f248 0103 	movw	r1, #32771	; 0x8003
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fa21 	bl	8002d74 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2210      	movs	r2, #16
 8002938:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7fe f864 	bl	8000a10 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	ffff0000 	.word	0xffff0000

08002954 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002964:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a6d      	ldr	r2, [pc, #436]	; (8002b28 <I2C_ITError+0x1d4>)
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b28      	cmp	r3, #40	; 0x28
 800298a:	d005      	beq.n	8002998 <I2C_ITError+0x44>
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b29      	cmp	r3, #41	; 0x29
 8002990:	d002      	beq.n	8002998 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	2b2a      	cmp	r3, #42	; 0x2a
 8002996:	d10b      	bne.n	80029b0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002998:	2103      	movs	r1, #3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f9ea 	bl	8002d74 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2228      	movs	r2, #40	; 0x28
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a60      	ldr	r2, [pc, #384]	; (8002b2c <I2C_ITError+0x1d8>)
 80029ac:	635a      	str	r2, [r3, #52]	; 0x34
 80029ae:	e030      	b.n	8002a12 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029b0:	f248 0103 	movw	r1, #32771	; 0x8003
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f9dd 	bl	8002d74 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8e1 	bl	8002b82 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b60      	cmp	r3, #96	; 0x60
 80029ca:	d01f      	beq.n	8002a0c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f003 0320 	and.w	r3, r3, #32
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d114      	bne.n	8002a0c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d109      	bne.n	8002a04 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2210      	movs	r2, #16
 80029f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f043 0204 	orr.w	r2, r3, #4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d039      	beq.n	8002a94 <I2C_ITError+0x140>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	2b11      	cmp	r3, #17
 8002a24:	d002      	beq.n	8002a2c <I2C_ITError+0xd8>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b21      	cmp	r3, #33	; 0x21
 8002a2a:	d133      	bne.n	8002a94 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a3a:	d107      	bne.n	8002a4c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe fbe1 	bl	8001218 <HAL_DMA_GetState>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d017      	beq.n	8002a8c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	4a33      	ldr	r2, [pc, #204]	; (8002b30 <I2C_ITError+0x1dc>)
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe fb90 	bl	8001196 <HAL_DMA_Abort_IT>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d04d      	beq.n	8002b18 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a86:	4610      	mov	r0, r2
 8002a88:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a8a:	e045      	b.n	8002b18 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f851 	bl	8002b34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a92:	e041      	b.n	8002b18 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d039      	beq.n	8002b10 <I2C_ITError+0x1bc>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b12      	cmp	r3, #18
 8002aa0:	d002      	beq.n	8002aa8 <I2C_ITError+0x154>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b22      	cmp	r3, #34	; 0x22
 8002aa6:	d133      	bne.n	8002b10 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ab6:	d107      	bne.n	8002ac8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ac6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe fba3 	bl	8001218 <HAL_DMA_GetState>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d017      	beq.n	8002b08 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <I2C_ITError+0x1dc>)
 8002ade:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe fb52 	bl	8001196 <HAL_DMA_Abort_IT>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d011      	beq.n	8002b1c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b02:	4610      	mov	r0, r2
 8002b04:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b06:	e009      	b.n	8002b1c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f813 	bl	8002b34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b0e:	e005      	b.n	8002b1c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f80f 	bl	8002b34 <I2C_TreatErrorCallback>
  }
}
 8002b16:	e002      	b.n	8002b1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b18:	bf00      	nop
 8002b1a:	e000      	b.n	8002b1e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b1c:	bf00      	nop
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	ffff0000 	.word	0xffff0000
 8002b2c:	08001aff 	.word	0x08001aff
 8002b30:	08002bcb 	.word	0x08002bcb

08002b34 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b60      	cmp	r3, #96	; 0x60
 8002b46:	d10e      	bne.n	8002b66 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7fe ffb7 	bl	8001ad2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b64:	e009      	b.n	8002b7a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7fd ff55 	bl	8000a24 <HAL_I2C_ErrorCallback>
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d103      	bne.n	8002ba0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d007      	beq.n	8002bbe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	619a      	str	r2, [r3, #24]
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	2200      	movs	r2, #0
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff ff9b 	bl	8002b34 <I2C_TreatErrorCallback>
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	817b      	strh	r3, [r7, #10]
 8002c16:	4613      	mov	r3, r2
 8002c18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c20:	7a7b      	ldrb	r3, [r7, #9]
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	0d5b      	lsrs	r3, r3, #21
 8002c42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <I2C_TransferConfig+0x60>)
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	ea02 0103 	and.w	r1, r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	03ff63ff 	.word	0x03ff63ff

08002c6c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	4a39      	ldr	r2, [pc, #228]	; (8002d68 <I2C_Enable_IRQ+0xfc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d032      	beq.n	8002cec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002c8a:	4a38      	ldr	r2, [pc, #224]	; (8002d6c <I2C_Enable_IRQ+0x100>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d02d      	beq.n	8002cec <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002c94:	4a36      	ldr	r2, [pc, #216]	; (8002d70 <I2C_Enable_IRQ+0x104>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d028      	beq.n	8002cec <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da03      	bge.n	8002caa <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002ca8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002caa:	887b      	ldrh	r3, [r7, #2]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002cba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002cbc:	887b      	ldrh	r3, [r7, #2]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002ccc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d103      	bne.n	8002cdc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002cda:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002cdc:	887b      	ldrh	r3, [r7, #2]
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d133      	bne.n	8002d4a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f043 0320 	orr.w	r3, r3, #32
 8002ce8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002cea:	e02e      	b.n	8002d4a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002cec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	da03      	bge.n	8002cfc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002cfa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002d0c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002d1e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d103      	bne.n	8002d2e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002d2c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d2e:	887b      	ldrh	r3, [r7, #2]
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d103      	bne.n	8002d3c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002d3c:	887b      	ldrh	r3, [r7, #2]
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d103      	bne.n	8002d4a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d48:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6819      	ldr	r1, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	08001cef 	.word	0x08001cef
 8002d6c:	08002111 	.word	0x08002111
 8002d70:	08001ec5 	.word	0x08001ec5

08002d74 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d84:	887b      	ldrh	r3, [r7, #2]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00f      	beq.n	8002dae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002d94:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002da2:	2b28      	cmp	r3, #40	; 0x28
 8002da4:	d003      	beq.n	8002dae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002dac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00f      	beq.n	8002dd8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002dbe:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dcc:	2b28      	cmp	r3, #40	; 0x28
 8002dce:	d003      	beq.n	8002dd8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002dd6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002dd8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	da03      	bge.n	8002de8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002de6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d103      	bne.n	8002df6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002df6:	887b      	ldrh	r3, [r7, #2]
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d103      	bne.n	8002e04 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f043 0320 	orr.w	r3, r3, #32
 8002e02:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	2b40      	cmp	r3, #64	; 0x40
 8002e08:	d103      	bne.n	8002e12 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6819      	ldr	r1, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43da      	mvns	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	400a      	ands	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b20      	cmp	r3, #32
 8002e44:	d138      	bne.n	8002eb8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e032      	b.n	8002eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e82:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e000      	b.n	8002eba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
  }
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d139      	bne.n	8002f50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e033      	b.n	8002f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2224      	movs	r2, #36	; 0x24
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	021b      	lsls	r3, r3, #8
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e000      	b.n	8002f52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f50:	2302      	movs	r3, #2
  }
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40007000 	.word	0x40007000

08002f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f8a:	d130      	bne.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f8c:	4b23      	ldr	r3, [pc, #140]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f98:	d038      	beq.n	800300c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2232      	movs	r2, #50	; 0x32
 8002fb0:	fb02 f303 	mul.w	r3, r2, r3
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	; (8003024 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	0c9b      	lsrs	r3, r3, #18
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc0:	e002      	b.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc8:	4b14      	ldr	r3, [pc, #80]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd4:	d102      	bne.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1f2      	bne.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe8:	d110      	bne.n	800300c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e00f      	b.n	800300e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffa:	d007      	beq.n	800300c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003004:	4a05      	ldr	r2, [pc, #20]	; (800301c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800300a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40007000 	.word	0x40007000
 8003020:	20000000 	.word	0x20000000
 8003024:	431bde83 	.word	0x431bde83

08003028 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f000 bc02 	b.w	8003840 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303c:	4b96      	ldr	r3, [pc, #600]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003046:	4b94      	ldr	r3, [pc, #592]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80e4 	beq.w	8003226 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d007      	beq.n	8003074 <HAL_RCC_OscConfig+0x4c>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	f040 808b 	bne.w	8003182 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2b01      	cmp	r3, #1
 8003070:	f040 8087 	bne.w	8003182 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003074:	4b88      	ldr	r3, [pc, #544]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_OscConfig+0x64>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e3d9      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1a      	ldr	r2, [r3, #32]
 8003090:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d004      	beq.n	80030a6 <HAL_RCC_OscConfig+0x7e>
 800309c:	4b7e      	ldr	r3, [pc, #504]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a4:	e005      	b.n	80030b2 <HAL_RCC_OscConfig+0x8a>
 80030a6:	4b7c      	ldr	r3, [pc, #496]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80030a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d223      	bcs.n	80030fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fd8c 	bl	8003bd8 <RCC_SetFlashLatencyFromMSIRange>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d001      	beq.n	80030ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e3ba      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030ca:	4b73      	ldr	r3, [pc, #460]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a72      	ldr	r2, [pc, #456]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80030d0:	f043 0308 	orr.w	r3, r3, #8
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	4b70      	ldr	r3, [pc, #448]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	496d      	ldr	r1, [pc, #436]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e8:	4b6b      	ldr	r3, [pc, #428]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	021b      	lsls	r3, r3, #8
 80030f6:	4968      	ldr	r1, [pc, #416]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
 80030fc:	e025      	b.n	800314a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fe:	4b66      	ldr	r3, [pc, #408]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a65      	ldr	r2, [pc, #404]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003104:	f043 0308 	orr.w	r3, r3, #8
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b63      	ldr	r3, [pc, #396]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4960      	ldr	r1, [pc, #384]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003118:	4313      	orrs	r3, r2
 800311a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311c:	4b5e      	ldr	r3, [pc, #376]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	495b      	ldr	r1, [pc, #364]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 800312c:	4313      	orrs	r3, r2
 800312e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4618      	mov	r0, r3
 800313c:	f000 fd4c 	bl	8003bd8 <RCC_SetFlashLatencyFromMSIRange>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e37a      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800314a:	f000 fc81 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b51      	ldr	r3, [pc, #324]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4950      	ldr	r1, [pc, #320]	; (800329c <HAL_RCC_OscConfig+0x274>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a4e      	ldr	r2, [pc, #312]	; (80032a0 <HAL_RCC_OscConfig+0x278>)
 8003168:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800316a:	4b4e      	ldr	r3, [pc, #312]	; (80032a4 <HAL_RCC_OscConfig+0x27c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd fe80 	bl	8000e74 <HAL_InitTick>
 8003174:	4603      	mov	r3, r0
 8003176:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d052      	beq.n	8003224 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	e35e      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d032      	beq.n	80031f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a42      	ldr	r2, [pc, #264]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003196:	f7fd febd 	bl	8000f14 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800319e:	f7fd feb9 	bl	8000f14 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e347      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b0:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a35      	ldr	r2, [pc, #212]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80031c2:	f043 0308 	orr.w	r3, r3, #8
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	4b33      	ldr	r3, [pc, #204]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	4930      	ldr	r1, [pc, #192]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031da:	4b2f      	ldr	r3, [pc, #188]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	021b      	lsls	r3, r3, #8
 80031e8:	492b      	ldr	r1, [pc, #172]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]
 80031ee:	e01a      	b.n	8003226 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031f0:	4b29      	ldr	r3, [pc, #164]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a28      	ldr	r2, [pc, #160]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031fc:	f7fd fe8a 	bl	8000f14 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003204:	f7fd fe86 	bl	8000f14 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e314      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x1dc>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d073      	beq.n	800331a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b08      	cmp	r3, #8
 8003236:	d005      	beq.n	8003244 <HAL_RCC_OscConfig+0x21c>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d10e      	bne.n	800325c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d10b      	bne.n	800325c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d063      	beq.n	8003318 <HAL_RCC_OscConfig+0x2f0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d15f      	bne.n	8003318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e2f1      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d106      	bne.n	8003274 <HAL_RCC_OscConfig+0x24c>
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a0b      	ldr	r2, [pc, #44]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e025      	b.n	80032c0 <HAL_RCC_OscConfig+0x298>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d114      	bne.n	80032a8 <HAL_RCC_OscConfig+0x280>
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b03      	ldr	r3, [pc, #12]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a02      	ldr	r2, [pc, #8]	; (8003298 <HAL_RCC_OscConfig+0x270>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e013      	b.n	80032c0 <HAL_RCC_OscConfig+0x298>
 8003298:	40021000 	.word	0x40021000
 800329c:	08004cfc 	.word	0x08004cfc
 80032a0:	20000000 	.word	0x20000000
 80032a4:	20000004 	.word	0x20000004
 80032a8:	4ba0      	ldr	r3, [pc, #640]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a9f      	ldr	r2, [pc, #636]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80032ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b9d      	ldr	r3, [pc, #628]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a9c      	ldr	r2, [pc, #624]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80032ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d013      	beq.n	80032f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fd fe24 	bl	8000f14 <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032d0:	f7fd fe20 	bl	8000f14 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b64      	cmp	r3, #100	; 0x64
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e2ae      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032e2:	4b92      	ldr	r3, [pc, #584]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0f0      	beq.n	80032d0 <HAL_RCC_OscConfig+0x2a8>
 80032ee:	e014      	b.n	800331a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd fe10 	bl	8000f14 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f8:	f7fd fe0c 	bl	8000f14 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e29a      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800330a:	4b88      	ldr	r3, [pc, #544]	; (800352c <HAL_RCC_OscConfig+0x504>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x2d0>
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d060      	beq.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d005      	beq.n	8003338 <HAL_RCC_OscConfig+0x310>
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	2b0c      	cmp	r3, #12
 8003330:	d119      	bne.n	8003366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d116      	bne.n	8003366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003338:	4b7c      	ldr	r3, [pc, #496]	; (800352c <HAL_RCC_OscConfig+0x504>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x328>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e277      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b76      	ldr	r3, [pc, #472]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	4973      	ldr	r1, [pc, #460]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003364:	e040      	b.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d023      	beq.n	80033b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336e:	4b6f      	ldr	r3, [pc, #444]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6e      	ldr	r2, [pc, #440]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd fdcb 	bl	8000f14 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003382:	f7fd fdc7 	bl	8000f14 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e255      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003394:	4b65      	ldr	r3, [pc, #404]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b62      	ldr	r3, [pc, #392]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	061b      	lsls	r3, r3, #24
 80033ae:	495f      	ldr	r1, [pc, #380]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
 80033b4:	e018      	b.n	80033e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b5d      	ldr	r3, [pc, #372]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5c      	ldr	r2, [pc, #368]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80033bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fd fda7 	bl	8000f14 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ca:	f7fd fda3 	bl	8000f14 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e231      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033dc:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f0      	bne.n	80033ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d03c      	beq.n	800346e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01c      	beq.n	8003436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033fc:	4b4b      	ldr	r3, [pc, #300]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003402:	4a4a      	ldr	r2, [pc, #296]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fd fd82 	bl	8000f14 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003414:	f7fd fd7e 	bl	8000f14 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e20c      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ef      	beq.n	8003414 <HAL_RCC_OscConfig+0x3ec>
 8003434:	e01b      	b.n	800346e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003436:	4b3d      	ldr	r3, [pc, #244]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343c:	4a3b      	ldr	r2, [pc, #236]	; (800352c <HAL_RCC_OscConfig+0x504>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003446:	f7fd fd65 	bl	8000f14 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344e:	f7fd fd61 	bl	8000f14 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e1ef      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1ef      	bne.n	800344e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 80a6 	beq.w	80035c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347c:	2300      	movs	r3, #0
 800347e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10d      	bne.n	80034a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_RCC_OscConfig+0x504>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	4a26      	ldr	r2, [pc, #152]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003496:	6593      	str	r3, [r2, #88]	; 0x58
 8003498:	4b24      	ldr	r3, [pc, #144]	; (800352c <HAL_RCC_OscConfig+0x504>)
 800349a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a4:	2301      	movs	r3, #1
 80034a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a8:	4b21      	ldr	r3, [pc, #132]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d118      	bne.n	80034e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80034ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c0:	f7fd fd28 	bl	8000f14 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c8:	f7fd fd24 	bl	8000f14 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1b2      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <HAL_RCC_OscConfig+0x508>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d108      	bne.n	8003500 <HAL_RCC_OscConfig+0x4d8>
 80034ee:	4b0f      	ldr	r3, [pc, #60]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	4a0d      	ldr	r2, [pc, #52]	; (800352c <HAL_RCC_OscConfig+0x504>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034fe:	e029      	b.n	8003554 <HAL_RCC_OscConfig+0x52c>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d115      	bne.n	8003534 <HAL_RCC_OscConfig+0x50c>
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <HAL_RCC_OscConfig+0x504>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <HAL_RCC_OscConfig+0x504>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351e:	4a03      	ldr	r2, [pc, #12]	; (800352c <HAL_RCC_OscConfig+0x504>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003528:	e014      	b.n	8003554 <HAL_RCC_OscConfig+0x52c>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	40007000 	.word	0x40007000
 8003534:	4b9a      	ldr	r3, [pc, #616]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353a:	4a99      	ldr	r2, [pc, #612]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003544:	4b96      	ldr	r3, [pc, #600]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	4a95      	ldr	r2, [pc, #596]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d016      	beq.n	800358a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fd fcda 	bl	8000f14 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fd fcd6 	bl	8000f14 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e162      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357a:	4b89      	ldr	r3, [pc, #548]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 800357c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ed      	beq.n	8003564 <HAL_RCC_OscConfig+0x53c>
 8003588:	e015      	b.n	80035b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fd fcc3 	bl	8000f14 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fd fcbf 	bl	8000f14 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e14b      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a8:	4b7d      	ldr	r3, [pc, #500]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1ed      	bne.n	8003592 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b6:	7ffb      	ldrb	r3, [r7, #31]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d105      	bne.n	80035c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035bc:	4b78      	ldr	r3, [pc, #480]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	4a77      	ldr	r2, [pc, #476]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 80035c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0320 	and.w	r3, r3, #32
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d03c      	beq.n	800364e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01c      	beq.n	8003616 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035dc:	4b70      	ldr	r3, [pc, #448]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 80035de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035e2:	4a6f      	ldr	r2, [pc, #444]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fd fc92 	bl	8000f14 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035f4:	f7fd fc8e 	bl	8000f14 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e11c      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003606:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 8003608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0ef      	beq.n	80035f4 <HAL_RCC_OscConfig+0x5cc>
 8003614:	e01b      	b.n	800364e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003616:	4b62      	ldr	r3, [pc, #392]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 8003618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800361c:	4a60      	ldr	r2, [pc, #384]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003626:	f7fd fc75 	bl	8000f14 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800362e:	f7fd fc71 	bl	8000f14 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0ff      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003640:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 8003642:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1ef      	bne.n	800362e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80f3 	beq.w	800383e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	2b02      	cmp	r3, #2
 800365e:	f040 80c9 	bne.w	80037f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003662:	4b4f      	ldr	r3, [pc, #316]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f003 0203 	and.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	429a      	cmp	r2, r3
 8003674:	d12c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	3b01      	subs	r3, #1
 8003682:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d123      	bne.n	80036d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003692:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d11b      	bne.n	80036d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d113      	bne.n	80036d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	085b      	lsrs	r3, r3, #1
 80036b4:	3b01      	subs	r3, #1
 80036b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d109      	bne.n	80036d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	085b      	lsrs	r3, r3, #1
 80036c8:	3b01      	subs	r3, #1
 80036ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d06b      	beq.n	80037a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	2b0c      	cmp	r3, #12
 80036d4:	d062      	beq.n	800379c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036d6:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0ac      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2d      	ldr	r2, [pc, #180]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 80036ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036f2:	f7fd fc0f 	bl	8000f14 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fd fc0b 	bl	8000f14 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e099      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <HAL_RCC_OscConfig+0x77c>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003728:	3a01      	subs	r2, #1
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003732:	0212      	lsls	r2, r2, #8
 8003734:	4311      	orrs	r1, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800373a:	0852      	lsrs	r2, r2, #1
 800373c:	3a01      	subs	r2, #1
 800373e:	0552      	lsls	r2, r2, #21
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003746:	0852      	lsrs	r2, r2, #1
 8003748:	3a01      	subs	r2, #1
 800374a:	0652      	lsls	r2, r2, #25
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003752:	06d2      	lsls	r2, r2, #27
 8003754:	430a      	orrs	r2, r1
 8003756:	4912      	ldr	r1, [pc, #72]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 8003758:	4313      	orrs	r3, r2
 800375a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003774:	f7fd fbce 	bl	8000f14 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fd fbca 	bl	8000f14 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e058      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCC_OscConfig+0x778>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379a:	e050      	b.n	800383e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04f      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d144      	bne.n	800383e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a23      	ldr	r2, [pc, #140]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 80037ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 80037c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037cc:	f7fd fba2 	bl	8000f14 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fd fb9e 	bl	8000f14 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e02c      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	4b18      	ldr	r3, [pc, #96]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x7ac>
 80037f2:	e024      	b.n	800383e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d01f      	beq.n	800383a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 8003800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fd fb85 	bl	8000f14 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380e:	f7fd fb81 	bl	8000f14 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e00f      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4905      	ldr	r1, [pc, #20]	; (8003848 <HAL_RCC_OscConfig+0x820>)
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_OscConfig+0x824>)
 8003834:	4013      	ands	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
 8003838:	e001      	b.n	800383e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	feeefffc 	.word	0xfeeefffc

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0e7      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003864:	4b75      	ldr	r3, [pc, #468]	; (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d910      	bls.n	8003894 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b72      	ldr	r3, [pc, #456]	; (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	4970      	ldr	r1, [pc, #448]	; (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	4313      	orrs	r3, r2
 8003880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	4b6e      	ldr	r3, [pc, #440]	; (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0cf      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	4b66      	ldr	r3, [pc, #408]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d908      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b0:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4960      	ldr	r1, [pc, #384]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04c      	beq.n	8003968 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d107      	bne.n	80038e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d6:	4b5a      	ldr	r3, [pc, #360]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d121      	bne.n	8003926 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0a6      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d107      	bne.n	80038fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ee:	4b54      	ldr	r3, [pc, #336]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d115      	bne.n	8003926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e09a      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003906:	4b4e      	ldr	r3, [pc, #312]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e08e      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003916:	4b4a      	ldr	r3, [pc, #296]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e086      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003926:	4b46      	ldr	r3, [pc, #280]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4943      	ldr	r1, [pc, #268]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003934:	4313      	orrs	r3, r2
 8003936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003938:	f7fd faec 	bl	8000f14 <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	e00a      	b.n	8003956 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003940:	f7fd fae8 	bl	8000f14 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e06e      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 020c 	and.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	429a      	cmp	r2, r3
 8003966:	d1eb      	bne.n	8003940 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d010      	beq.n	8003996 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003980:	429a      	cmp	r2, r3
 8003982:	d208      	bcs.n	8003996 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003984:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	492b      	ldr	r1, [pc, #172]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003996:	4b29      	ldr	r3, [pc, #164]	; (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d210      	bcs.n	80039c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 0207 	bic.w	r2, r3, #7
 80039ac:	4923      	ldr	r1, [pc, #140]	; (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b4:	4b21      	ldr	r3, [pc, #132]	; (8003a3c <HAL_RCC_ClockConfig+0x1ec>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e036      	b.n	8003a34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d008      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	4918      	ldr	r1, [pc, #96]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4910      	ldr	r1, [pc, #64]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a04:	f000 f824 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	490b      	ldr	r1, [pc, #44]	; (8003a44 <HAL_RCC_ClockConfig+0x1f4>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	4a09      	ldr	r2, [pc, #36]	; (8003a48 <HAL_RCC_ClockConfig+0x1f8>)
 8003a22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x1fc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7fd fa23 	bl	8000e74 <HAL_InitTick>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a32:	7afb      	ldrb	r3, [r7, #11]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40022000 	.word	0x40022000
 8003a40:	40021000 	.word	0x40021000
 8003a44:	08004cfc 	.word	0x08004cfc
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	20000004 	.word	0x20000004

08003a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a68:	4b3b      	ldr	r3, [pc, #236]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x34>
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d121      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d11e      	bne.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a84:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a90:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a96:	0a1b      	lsrs	r3, r3, #8
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	61fb      	str	r3, [r7, #28]
 8003a9e:	e005      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003aac:	4a2b      	ldr	r2, [pc, #172]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ac8:	4b25      	ldr	r3, [pc, #148]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003aca:	61bb      	str	r3, [r7, #24]
 8003acc:	e004      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ad4:	4b23      	ldr	r3, [pc, #140]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ad6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b0c      	cmp	r3, #12
 8003adc:	d134      	bne.n	8003b48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d003      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0xac>
 8003af4:	e005      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003af6:	4b1a      	ldr	r3, [pc, #104]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x110>)
 8003af8:	617b      	str	r3, [r7, #20]
      break;
 8003afa:	e005      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003afc:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x114>)
 8003afe:	617b      	str	r3, [r7, #20]
      break;
 8003b00:	e002      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	617b      	str	r3, [r7, #20]
      break;
 8003b06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	3301      	adds	r3, #1
 8003b14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	fb03 f202 	mul.w	r2, r3, r2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	0e5b      	lsrs	r3, r3, #25
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	3301      	adds	r3, #1
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b48:	69bb      	ldr	r3, [r7, #24]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	08004d14 	.word	0x08004d14
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	007a1200 	.word	0x007a1200

08003b68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	08004d0c 	.word	0x08004d0c

08003bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bb0:	f7ff ffda 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	0adb      	lsrs	r3, r3, #11
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	4904      	ldr	r1, [pc, #16]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bc2:	5ccb      	ldrb	r3, [r1, r3]
 8003bc4:	f003 031f 	and.w	r3, r3, #31
 8003bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000
 8003bd4:	08004d0c 	.word	0x08004d0c

08003bd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003be4:	4b2a      	ldr	r3, [pc, #168]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bf0:	f7ff f9b6 	bl	8002f60 <HAL_PWREx_GetVoltageRange>
 8003bf4:	6178      	str	r0, [r7, #20]
 8003bf6:	e014      	b.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	4a24      	ldr	r2, [pc, #144]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c02:	6593      	str	r3, [r2, #88]	; 0x58
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c10:	f7ff f9a6 	bl	8002f60 <HAL_PWREx_GetVoltageRange>
 8003c14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c16:	4b1e      	ldr	r3, [pc, #120]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c28:	d10b      	bne.n	8003c42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b80      	cmp	r3, #128	; 0x80
 8003c2e:	d919      	bls.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2ba0      	cmp	r3, #160	; 0xa0
 8003c34:	d902      	bls.n	8003c3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c36:	2302      	movs	r3, #2
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	e013      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	e010      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b80      	cmp	r3, #128	; 0x80
 8003c46:	d902      	bls.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c48:	2303      	movs	r3, #3
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	e00a      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b80      	cmp	r3, #128	; 0x80
 8003c52:	d102      	bne.n	8003c5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c54:	2302      	movs	r3, #2
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	e004      	b.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b70      	cmp	r3, #112	; 0x70
 8003c5e:	d101      	bne.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c60:	2301      	movs	r3, #1
 8003c62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 0207 	bic.w	r2, r3, #7
 8003c6c:	4909      	ldr	r1, [pc, #36]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c74:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40022000 	.word	0x40022000

08003c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d031      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cbc:	d01a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003cbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cc2:	d814      	bhi.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ccc:	d10f      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003cce:	4b5d      	ldr	r3, [pc, #372]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	4a5c      	ldr	r2, [pc, #368]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cda:	e00c      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fa22 	bl	800412c <RCCEx_PLLSAI1_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003cf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf6:	7cfb      	ldrb	r3, [r7, #19]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10b      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cfc:	4b51      	ldr	r3, [pc, #324]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	494e      	ldr	r1, [pc, #312]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7cfb      	ldrb	r3, [r7, #19]
 8003d16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 809e 	beq.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d26:	2300      	movs	r3, #0
 8003d28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d2a:	4b46      	ldr	r3, [pc, #280]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d40:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	4a3f      	ldr	r2, [pc, #252]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d4c:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d5c:	4b3a      	ldr	r3, [pc, #232]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a39      	ldr	r2, [pc, #228]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d68:	f7fd f8d4 	bl	8000f14 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d6e:	e009      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d70:	f7fd f8d0 	bl	8000f14 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d902      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	74fb      	strb	r3, [r7, #19]
        break;
 8003d82:	e005      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d84:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ef      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003d90:	7cfb      	ldrb	r3, [r7, #19]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d15a      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d96:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01e      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d019      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dbc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc4:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dce:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd4:	4a1b      	ldr	r2, [pc, #108]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dde:	4a19      	ldr	r2, [pc, #100]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d016      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fd f890 	bl	8000f14 <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df6:	e00b      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fd f88c 	bl	8000f14 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d902      	bls.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	74fb      	strb	r3, [r7, #19]
            break;
 8003e0e:	e006      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e10:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0ec      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10b      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e24:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e32:	4904      	ldr	r1, [pc, #16]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e3a:	e009      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	74bb      	strb	r3, [r7, #18]
 8003e40:	e006      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e42:	bf00      	nop
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e50:	7c7b      	ldrb	r3, [r7, #17]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d105      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e56:	4b8d      	ldr	r3, [pc, #564]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	4a8c      	ldr	r2, [pc, #560]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e6e:	4b87      	ldr	r3, [pc, #540]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f023 0203 	bic.w	r2, r3, #3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	4983      	ldr	r1, [pc, #524]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e90:	4b7e      	ldr	r3, [pc, #504]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	f023 020c 	bic.w	r2, r3, #12
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	497b      	ldr	r1, [pc, #492]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003eb2:	4b76      	ldr	r3, [pc, #472]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	4972      	ldr	r1, [pc, #456]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ed4:	4b6d      	ldr	r3, [pc, #436]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	496a      	ldr	r1, [pc, #424]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	4961      	ldr	r1, [pc, #388]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f18:	4b5c      	ldr	r3, [pc, #368]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4959      	ldr	r1, [pc, #356]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f3a:	4b54      	ldr	r3, [pc, #336]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	4950      	ldr	r1, [pc, #320]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f5c:	4b4b      	ldr	r3, [pc, #300]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6a:	4948      	ldr	r1, [pc, #288]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f7e:	4b43      	ldr	r3, [pc, #268]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8c:	493f      	ldr	r1, [pc, #252]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d028      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fa0:	4b3a      	ldr	r3, [pc, #232]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fae:	4937      	ldr	r1, [pc, #220]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fbe:	d106      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fc0:	4b32      	ldr	r3, [pc, #200]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4a31      	ldr	r2, [pc, #196]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fca:	60d3      	str	r3, [r2, #12]
 8003fcc:	e011      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fd6:	d10c      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 f8a4 	bl	800412c <RCCEx_PLLSAI1_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003fee:	7cfb      	ldrb	r3, [r7, #19]
 8003ff0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d028      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ffe:	4b23      	ldr	r3, [pc, #140]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400c:	491f      	ldr	r1, [pc, #124]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401c:	d106      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800401e:	4b1b      	ldr	r3, [pc, #108]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004024:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004028:	60d3      	str	r3, [r2, #12]
 800402a:	e011      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004030:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004034:	d10c      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3304      	adds	r3, #4
 800403a:	2101      	movs	r1, #1
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f875 	bl	800412c <RCCEx_PLLSAI1_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02b      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004062:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	4908      	ldr	r1, [pc, #32]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407a:	d109      	bne.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407c:	4b03      	ldr	r3, [pc, #12]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4a02      	ldr	r2, [pc, #8]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004082:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004086:	60d3      	str	r3, [r2, #12]
 8004088:	e014      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004094:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	2101      	movs	r1, #1
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 f843 	bl	800412c <RCCEx_PLLSAI1_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80040b0:	7cfb      	ldrb	r3, [r7, #19]
 80040b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d01c      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	4916      	ldr	r1, [pc, #88]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040de:	d10c      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f820 	bl	800412c <RCCEx_PLLSAI1_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004106:	4b08      	ldr	r3, [pc, #32]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	4904      	ldr	r1, [pc, #16]	; (8004128 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800411c:	7cbb      	ldrb	r3, [r7, #18]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40021000 	.word	0x40021000

0800412c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800413a:	4b74      	ldr	r3, [pc, #464]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d018      	beq.n	8004178 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004146:	4b71      	ldr	r3, [pc, #452]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f003 0203 	and.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d10d      	bne.n	8004172 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
       ||
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800415e:	4b6b      	ldr	r3, [pc, #428]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
       ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d047      	beq.n	8004202 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	e044      	b.n	8004202 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b03      	cmp	r3, #3
 800417e:	d018      	beq.n	80041b2 <RCCEx_PLLSAI1_Config+0x86>
 8004180:	2b03      	cmp	r3, #3
 8004182:	d825      	bhi.n	80041d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004184:	2b01      	cmp	r3, #1
 8004186:	d002      	beq.n	800418e <RCCEx_PLLSAI1_Config+0x62>
 8004188:	2b02      	cmp	r3, #2
 800418a:	d009      	beq.n	80041a0 <RCCEx_PLLSAI1_Config+0x74>
 800418c:	e020      	b.n	80041d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800418e:	4b5f      	ldr	r3, [pc, #380]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d11d      	bne.n	80041d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419e:	e01a      	b.n	80041d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041a0:	4b5a      	ldr	r3, [pc, #360]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d116      	bne.n	80041da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041b0:	e013      	b.n	80041da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041b2:	4b56      	ldr	r3, [pc, #344]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041be:	4b53      	ldr	r3, [pc, #332]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041ce:	e006      	b.n	80041de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
      break;
 80041d4:	e004      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041d6:	bf00      	nop
 80041d8:	e002      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041da:	bf00      	nop
 80041dc:	e000      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041de:	bf00      	nop
    }

    if(status == HAL_OK)
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041e6:	4b49      	ldr	r3, [pc, #292]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	011b      	lsls	r3, r3, #4
 80041fa:	430b      	orrs	r3, r1
 80041fc:	4943      	ldr	r1, [pc, #268]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d17c      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004208:	4b40      	ldr	r3, [pc, #256]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3f      	ldr	r2, [pc, #252]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 800420e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7fc fe7e 	bl	8000f14 <HAL_GetTick>
 8004218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800421a:	e009      	b.n	8004230 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800421c:	f7fc fe7a 	bl	8000f14 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d902      	bls.n	8004230 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	73fb      	strb	r3, [r7, #15]
        break;
 800422e:	e005      	b.n	800423c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004230:	4b36      	ldr	r3, [pc, #216]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ef      	bne.n	800421c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d15f      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d110      	bne.n	800426a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004248:	4b30      	ldr	r3, [pc, #192]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004250:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6892      	ldr	r2, [r2, #8]
 8004258:	0211      	lsls	r1, r2, #8
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68d2      	ldr	r2, [r2, #12]
 800425e:	06d2      	lsls	r2, r2, #27
 8004260:	430a      	orrs	r2, r1
 8004262:	492a      	ldr	r1, [pc, #168]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
 8004268:	e027      	b.n	80042ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d112      	bne.n	8004296 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004270:	4b26      	ldr	r3, [pc, #152]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004278:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6892      	ldr	r2, [r2, #8]
 8004280:	0211      	lsls	r1, r2, #8
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6912      	ldr	r2, [r2, #16]
 8004286:	0852      	lsrs	r2, r2, #1
 8004288:	3a01      	subs	r2, #1
 800428a:	0552      	lsls	r2, r2, #21
 800428c:	430a      	orrs	r2, r1
 800428e:	491f      	ldr	r1, [pc, #124]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	610b      	str	r3, [r1, #16]
 8004294:	e011      	b.n	80042ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004296:	4b1d      	ldr	r3, [pc, #116]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800429e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6892      	ldr	r2, [r2, #8]
 80042a6:	0211      	lsls	r1, r2, #8
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6952      	ldr	r2, [r2, #20]
 80042ac:	0852      	lsrs	r2, r2, #1
 80042ae:	3a01      	subs	r2, #1
 80042b0:	0652      	lsls	r2, r2, #25
 80042b2:	430a      	orrs	r2, r1
 80042b4:	4915      	ldr	r1, [pc, #84]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a13      	ldr	r2, [pc, #76]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fc fe25 	bl	8000f14 <HAL_GetTick>
 80042ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042cc:	e009      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042ce:	f7fc fe21 	bl	8000f14 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d902      	bls.n	80042e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	73fb      	strb	r3, [r7, #15]
          break;
 80042e0:	e005      	b.n	80042ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0ef      	beq.n	80042ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	4903      	ldr	r1, [pc, #12]	; (800430c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004302:	7bfb      	ldrb	r3, [r7, #15]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40021000 	.word	0x40021000

08004310 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e040      	b.n	80043a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fcaa 	bl	8000c8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2224      	movs	r2, #36	; 0x24
 800433c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa82 	bl	8004860 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 f825 	bl	80043ac <UART_SetConfig>
 8004362:	4603      	mov	r3, r0
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e01b      	b.n	80043a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800437a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800438a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb01 	bl	80049a4 <UART_CheckIdleState>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b0:	b08a      	sub	sp, #40	; 0x28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b9e      	ldr	r3, [pc, #632]	; (8004654 <UART_SetConfig+0x2a8>)
 80043dc:	4013      	ands	r3, r2
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a93      	ldr	r2, [pc, #588]	; (8004658 <UART_SetConfig+0x2ac>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004414:	4313      	orrs	r3, r2
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a8a      	ldr	r2, [pc, #552]	; (800465c <UART_SetConfig+0x2b0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d126      	bne.n	8004484 <UART_SetConfig+0xd8>
 8004436:	4b8a      	ldr	r3, [pc, #552]	; (8004660 <UART_SetConfig+0x2b4>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b03      	cmp	r3, #3
 8004442:	d81b      	bhi.n	800447c <UART_SetConfig+0xd0>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0xa0>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	0800445d 	.word	0x0800445d
 8004450:	0800446d 	.word	0x0800446d
 8004454:	08004465 	.word	0x08004465
 8004458:	08004475 	.word	0x08004475
 800445c:	2301      	movs	r3, #1
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004462:	e0ab      	b.n	80045bc <UART_SetConfig+0x210>
 8004464:	2302      	movs	r3, #2
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e0a7      	b.n	80045bc <UART_SetConfig+0x210>
 800446c:	2304      	movs	r3, #4
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e0a3      	b.n	80045bc <UART_SetConfig+0x210>
 8004474:	2308      	movs	r3, #8
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e09f      	b.n	80045bc <UART_SetConfig+0x210>
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e09b      	b.n	80045bc <UART_SetConfig+0x210>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a76      	ldr	r2, [pc, #472]	; (8004664 <UART_SetConfig+0x2b8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d138      	bne.n	8004500 <UART_SetConfig+0x154>
 800448e:	4b74      	ldr	r3, [pc, #464]	; (8004660 <UART_SetConfig+0x2b4>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d82d      	bhi.n	80044f8 <UART_SetConfig+0x14c>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0xf8>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044d9 	.word	0x080044d9
 80044a8:	080044f9 	.word	0x080044f9
 80044ac:	080044f9 	.word	0x080044f9
 80044b0:	080044f9 	.word	0x080044f9
 80044b4:	080044e9 	.word	0x080044e9
 80044b8:	080044f9 	.word	0x080044f9
 80044bc:	080044f9 	.word	0x080044f9
 80044c0:	080044f9 	.word	0x080044f9
 80044c4:	080044e1 	.word	0x080044e1
 80044c8:	080044f9 	.word	0x080044f9
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	080044f1 	.word	0x080044f1
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e06d      	b.n	80045bc <UART_SetConfig+0x210>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e6:	e069      	b.n	80045bc <UART_SetConfig+0x210>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ee:	e065      	b.n	80045bc <UART_SetConfig+0x210>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e061      	b.n	80045bc <UART_SetConfig+0x210>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e05d      	b.n	80045bc <UART_SetConfig+0x210>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a58      	ldr	r2, [pc, #352]	; (8004668 <UART_SetConfig+0x2bc>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d125      	bne.n	8004556 <UART_SetConfig+0x1aa>
 800450a:	4b55      	ldr	r3, [pc, #340]	; (8004660 <UART_SetConfig+0x2b4>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004514:	2b30      	cmp	r3, #48	; 0x30
 8004516:	d016      	beq.n	8004546 <UART_SetConfig+0x19a>
 8004518:	2b30      	cmp	r3, #48	; 0x30
 800451a:	d818      	bhi.n	800454e <UART_SetConfig+0x1a2>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d00a      	beq.n	8004536 <UART_SetConfig+0x18a>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d814      	bhi.n	800454e <UART_SetConfig+0x1a2>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <UART_SetConfig+0x182>
 8004528:	2b10      	cmp	r3, #16
 800452a:	d008      	beq.n	800453e <UART_SetConfig+0x192>
 800452c:	e00f      	b.n	800454e <UART_SetConfig+0x1a2>
 800452e:	2300      	movs	r3, #0
 8004530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004534:	e042      	b.n	80045bc <UART_SetConfig+0x210>
 8004536:	2302      	movs	r3, #2
 8004538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453c:	e03e      	b.n	80045bc <UART_SetConfig+0x210>
 800453e:	2304      	movs	r3, #4
 8004540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004544:	e03a      	b.n	80045bc <UART_SetConfig+0x210>
 8004546:	2308      	movs	r3, #8
 8004548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454c:	e036      	b.n	80045bc <UART_SetConfig+0x210>
 800454e:	2310      	movs	r3, #16
 8004550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004554:	e032      	b.n	80045bc <UART_SetConfig+0x210>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3f      	ldr	r2, [pc, #252]	; (8004658 <UART_SetConfig+0x2ac>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d12a      	bne.n	80045b6 <UART_SetConfig+0x20a>
 8004560:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <UART_SetConfig+0x2b4>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800456a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800456e:	d01a      	beq.n	80045a6 <UART_SetConfig+0x1fa>
 8004570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004574:	d81b      	bhi.n	80045ae <UART_SetConfig+0x202>
 8004576:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800457a:	d00c      	beq.n	8004596 <UART_SetConfig+0x1ea>
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004580:	d815      	bhi.n	80045ae <UART_SetConfig+0x202>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <UART_SetConfig+0x1e2>
 8004586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458a:	d008      	beq.n	800459e <UART_SetConfig+0x1f2>
 800458c:	e00f      	b.n	80045ae <UART_SetConfig+0x202>
 800458e:	2300      	movs	r3, #0
 8004590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004594:	e012      	b.n	80045bc <UART_SetConfig+0x210>
 8004596:	2302      	movs	r3, #2
 8004598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459c:	e00e      	b.n	80045bc <UART_SetConfig+0x210>
 800459e:	2304      	movs	r3, #4
 80045a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a4:	e00a      	b.n	80045bc <UART_SetConfig+0x210>
 80045a6:	2308      	movs	r3, #8
 80045a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ac:	e006      	b.n	80045bc <UART_SetConfig+0x210>
 80045ae:	2310      	movs	r3, #16
 80045b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b4:	e002      	b.n	80045bc <UART_SetConfig+0x210>
 80045b6:	2310      	movs	r3, #16
 80045b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a25      	ldr	r2, [pc, #148]	; (8004658 <UART_SetConfig+0x2ac>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	f040 808a 	bne.w	80046dc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d824      	bhi.n	800461a <UART_SetConfig+0x26e>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <UART_SetConfig+0x22c>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	0800461b 	.word	0x0800461b
 80045e0:	08004605 	.word	0x08004605
 80045e4:	0800461b 	.word	0x0800461b
 80045e8:	0800460b 	.word	0x0800460b
 80045ec:	0800461b 	.word	0x0800461b
 80045f0:	0800461b 	.word	0x0800461b
 80045f4:	0800461b 	.word	0x0800461b
 80045f8:	08004613 	.word	0x08004613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045fc:	f7ff fac0 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004600:	61f8      	str	r0, [r7, #28]
        break;
 8004602:	e010      	b.n	8004626 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004604:	4b19      	ldr	r3, [pc, #100]	; (800466c <UART_SetConfig+0x2c0>)
 8004606:	61fb      	str	r3, [r7, #28]
        break;
 8004608:	e00d      	b.n	8004626 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460a:	f7ff fa21 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 800460e:	61f8      	str	r0, [r7, #28]
        break;
 8004610:	e009      	b.n	8004626 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004616:	61fb      	str	r3, [r7, #28]
        break;
 8004618:	e005      	b.n	8004626 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004624:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 8109 	beq.w	8004840 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	4413      	add	r3, r2
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	429a      	cmp	r2, r3
 800463c:	d305      	bcc.n	800464a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	429a      	cmp	r2, r3
 8004648:	d912      	bls.n	8004670 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004650:	e0f6      	b.n	8004840 <UART_SetConfig+0x494>
 8004652:	bf00      	nop
 8004654:	efff69f3 	.word	0xefff69f3
 8004658:	40008000 	.word	0x40008000
 800465c:	40013800 	.word	0x40013800
 8004660:	40021000 	.word	0x40021000
 8004664:	40004400 	.word	0x40004400
 8004668:	40004800 	.word	0x40004800
 800466c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2200      	movs	r2, #0
 8004674:	461c      	mov	r4, r3
 8004676:	4615      	mov	r5, r2
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	022b      	lsls	r3, r5, #8
 8004682:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004686:	0222      	lsls	r2, r4, #8
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	6849      	ldr	r1, [r1, #4]
 800468c:	0849      	lsrs	r1, r1, #1
 800468e:	2000      	movs	r0, #0
 8004690:	4688      	mov	r8, r1
 8004692:	4681      	mov	r9, r0
 8004694:	eb12 0a08 	adds.w	sl, r2, r8
 8004698:	eb43 0b09 	adc.w	fp, r3, r9
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	607a      	str	r2, [r7, #4]
 80046a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046aa:	4650      	mov	r0, sl
 80046ac:	4659      	mov	r1, fp
 80046ae:	f7fb fd8d 	bl	80001cc <__aeabi_uldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	4613      	mov	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c0:	d308      	bcc.n	80046d4 <UART_SetConfig+0x328>
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c8:	d204      	bcs.n	80046d4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	e0b5      	b.n	8004840 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046da:	e0b1      	b.n	8004840 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e4:	d15d      	bne.n	80047a2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80046e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ea:	2b08      	cmp	r3, #8
 80046ec:	d827      	bhi.n	800473e <UART_SetConfig+0x392>
 80046ee:	a201      	add	r2, pc, #4	; (adr r2, 80046f4 <UART_SetConfig+0x348>)
 80046f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004721 	.word	0x08004721
 80046fc:	08004729 	.word	0x08004729
 8004700:	0800473f 	.word	0x0800473f
 8004704:	0800472f 	.word	0x0800472f
 8004708:	0800473f 	.word	0x0800473f
 800470c:	0800473f 	.word	0x0800473f
 8004710:	0800473f 	.word	0x0800473f
 8004714:	08004737 	.word	0x08004737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004718:	f7ff fa32 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 800471c:	61f8      	str	r0, [r7, #28]
        break;
 800471e:	e014      	b.n	800474a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004720:	f7ff fa44 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 8004724:	61f8      	str	r0, [r7, #28]
        break;
 8004726:	e010      	b.n	800474a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004728:	4b4c      	ldr	r3, [pc, #304]	; (800485c <UART_SetConfig+0x4b0>)
 800472a:	61fb      	str	r3, [r7, #28]
        break;
 800472c:	e00d      	b.n	800474a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472e:	f7ff f98f 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 8004732:	61f8      	str	r0, [r7, #28]
        break;
 8004734:	e009      	b.n	800474a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	61fb      	str	r3, [r7, #28]
        break;
 800473c:	e005      	b.n	800474a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d077      	beq.n	8004840 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	005a      	lsls	r2, r3, #1
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	441a      	add	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	fbb2 f3f3 	udiv	r3, r2, r3
 8004764:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b0f      	cmp	r3, #15
 800476a:	d916      	bls.n	800479a <UART_SetConfig+0x3ee>
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004772:	d212      	bcs.n	800479a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	b29b      	uxth	r3, r3
 8004778:	f023 030f 	bic.w	r3, r3, #15
 800477c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	b29b      	uxth	r3, r3
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	b29a      	uxth	r2, r3
 800478a:	8afb      	ldrh	r3, [r7, #22]
 800478c:	4313      	orrs	r3, r2
 800478e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	8afa      	ldrh	r2, [r7, #22]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	e052      	b.n	8004840 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047a0:	e04e      	b.n	8004840 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d827      	bhi.n	80047fa <UART_SetConfig+0x44e>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0x404>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	080047e5 	.word	0x080047e5
 80047bc:	080047fb 	.word	0x080047fb
 80047c0:	080047eb 	.word	0x080047eb
 80047c4:	080047fb 	.word	0x080047fb
 80047c8:	080047fb 	.word	0x080047fb
 80047cc:	080047fb 	.word	0x080047fb
 80047d0:	080047f3 	.word	0x080047f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047d4:	f7ff f9d4 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 80047d8:	61f8      	str	r0, [r7, #28]
        break;
 80047da:	e014      	b.n	8004806 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047dc:	f7ff f9e6 	bl	8003bac <HAL_RCC_GetPCLK2Freq>
 80047e0:	61f8      	str	r0, [r7, #28]
        break;
 80047e2:	e010      	b.n	8004806 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047e4:	4b1d      	ldr	r3, [pc, #116]	; (800485c <UART_SetConfig+0x4b0>)
 80047e6:	61fb      	str	r3, [r7, #28]
        break;
 80047e8:	e00d      	b.n	8004806 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ea:	f7ff f931 	bl	8003a50 <HAL_RCC_GetSysClockFreq>
 80047ee:	61f8      	str	r0, [r7, #28]
        break;
 80047f0:	e009      	b.n	8004806 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047f6:	61fb      	str	r3, [r7, #28]
        break;
 80047f8:	e005      	b.n	8004806 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004804:	bf00      	nop
    }

    if (pclk != 0U)
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d019      	beq.n	8004840 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	085a      	lsrs	r2, r3, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	441a      	add	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	fbb2 f3f3 	udiv	r3, r2, r3
 800481e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2b0f      	cmp	r3, #15
 8004824:	d909      	bls.n	800483a <UART_SetConfig+0x48e>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800482c:	d205      	bcs.n	800483a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e002      	b.n	8004840 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800484c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	; 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485a:	bf00      	nop
 800485c:	00f42400 	.word	0x00f42400

08004860 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	f003 0308 	and.w	r3, r3, #8
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00a      	beq.n	800488a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00a      	beq.n	80048ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	f003 0310 	and.w	r3, r3, #16
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01a      	beq.n	8004976 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495e:	d10a      	bne.n	8004976 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
  }
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b098      	sub	sp, #96	; 0x60
 80049a8:	af02      	add	r7, sp, #8
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049b4:	f7fc faae 	bl	8000f14 <HAL_GetTick>
 80049b8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d12e      	bne.n	8004a26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d0:	2200      	movs	r2, #0
 80049d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f88c 	bl	8004af4 <UART_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d021      	beq.n	8004a26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f6:	653b      	str	r3, [r7, #80]	; 0x50
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a00:	647b      	str	r3, [r7, #68]	; 0x44
 8004a02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e6      	bne.n	80049e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e062      	b.n	8004aec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d149      	bne.n	8004ac8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f856 	bl	8004af4 <UART_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d03c      	beq.n	8004ac8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	623b      	str	r3, [r7, #32]
   return(result);
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3308      	adds	r3, #8
 8004a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3308      	adds	r3, #8
 8004a9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aa0:	61fa      	str	r2, [r7, #28]
 8004aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	69b9      	ldr	r1, [r7, #24]
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	617b      	str	r3, [r7, #20]
   return(result);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e5      	bne.n	8004a80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e011      	b.n	8004aec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3758      	adds	r7, #88	; 0x58
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	603b      	str	r3, [r7, #0]
 8004b00:	4613      	mov	r3, r2
 8004b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b04:	e049      	b.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b0c:	d045      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0e:	f7fc fa01 	bl	8000f14 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d302      	bcc.n	8004b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e048      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d031      	beq.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d110      	bne.n	8004b66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f838 	bl	8004bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2208      	movs	r2, #8
 8004b56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e029      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b74:	d111      	bne.n	8004b9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f81e 	bl	8004bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e00f      	b.n	8004bba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d0a6      	beq.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b095      	sub	sp, #84	; 0x54
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be8:	643b      	str	r3, [r7, #64]	; 0x40
 8004bea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e6      	bne.n	8004bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3308      	adds	r3, #8
 8004c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	e853 3f00 	ldrex	r3, [r3]
 8004c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e5      	bne.n	8004bfc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d118      	bne.n	8004c6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f023 0310 	bic.w	r3, r3, #16
 8004c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5a:	6979      	ldr	r1, [r7, #20]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	613b      	str	r3, [r7, #16]
   return(result);
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1e6      	bne.n	8004c38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004c7e:	bf00      	nop
 8004c80:	3754      	adds	r7, #84	; 0x54
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <memset>:
 8004c8a:	4402      	add	r2, r0
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d100      	bne.n	8004c94 <memset+0xa>
 8004c92:	4770      	bx	lr
 8004c94:	f803 1b01 	strb.w	r1, [r3], #1
 8004c98:	e7f9      	b.n	8004c8e <memset+0x4>
	...

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4d0d      	ldr	r5, [pc, #52]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca0:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca2:	1b64      	subs	r4, r4, r5
 8004ca4:	10a4      	asrs	r4, r4, #2
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	4d0b      	ldr	r5, [pc, #44]	; (8004cdc <__libc_init_array+0x40>)
 8004cae:	4c0c      	ldr	r4, [pc, #48]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb0:	f000 f818 	bl	8004ce4 <_init>
 8004cb4:	1b64      	subs	r4, r4, r5
 8004cb6:	10a4      	asrs	r4, r4, #2
 8004cb8:	2600      	movs	r6, #0
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	08004d4c 	.word	0x08004d4c
 8004cd8:	08004d4c 	.word	0x08004d4c
 8004cdc:	08004d4c 	.word	0x08004d4c
 8004ce0:	08004d50 	.word	0x08004d50

08004ce4 <_init>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	bf00      	nop
 8004ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cea:	bc08      	pop	{r3}
 8004cec:	469e      	mov	lr, r3
 8004cee:	4770      	bx	lr

08004cf0 <_fini>:
 8004cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf2:	bf00      	nop
 8004cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cf6:	bc08      	pop	{r3}
 8004cf8:	469e      	mov	lr, r3
 8004cfa:	4770      	bx	lr
