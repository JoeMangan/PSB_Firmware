
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006d74  08006d74  00016d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dbc  08006dbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006dbc  08006dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc4  08006dc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  08006dd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08006dd8  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ec6  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ed  00000000  00000000  00033f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  00036438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed8  00000000  00000000  00037700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b26  00000000  00000000  000385d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153d1  00000000  00000000  0003b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d90cf  00000000  00000000  000504cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005098  00000000  00000000  001295a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0012e638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006d5c 	.word	0x08006d5c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08006d5c 	.word	0x08006d5c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f001 fc51 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_MspInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f839 	bl	8000548 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9c7 	bl	8000868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f995 	bl	8000808 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80004de:	f000 f905 	bl	80006ec <MX_I2C3_Init>
  MX_I2C2_Init();
 80004e2:	f000 f8c3 	bl	800066c <MX_I2C2_Init>
  MX_I2C1_Init();
 80004e6:	f000 f881 	bl	80005ec <MX_I2C1_Init>
  MX_TIM2_Init();
 80004ea:	f000 f93f 	bl	800076c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the system
  i2c_slv_init(); // Initialize the I2C slave module
 80004ee:	f001 f92f 	bl	8001750 <i2c_slv_init>
  //{
//	  while(1);
//  }


  bool cea_init_status = cea_detector_init();
 80004f2:	f000 fc7f 	bl	8000df4 <cea_detector_init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]

  if(cea_init_status == EXIT_FAILURE)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d000      	beq.n	8000502 <main+0x3a>
  {
	  while(1);
 8000500:	e7fe      	b.n	8000500 <main+0x38>
  }

  ht_enable_set(GPIO_PIN_SET);
 8000502:	2001      	movs	r0, #1
 8000504:	f000 fb9a 	bl	8000c3c <ht_enable_set>

  // Start the timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x74>)
 800050a:	f005 fb73 	bl	8005bf4 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //ijc_dssd_ramp_loop();
	  cea_dssd_ramp_loop();
 800050e:	f000 fba7 	bl	8000c60 <cea_dssd_ramp_loop>

	  if (Xfer_Complete ==1)                            // Check for the I2C read complete to have been executed
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <main+0x78>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d1f9      	bne.n	800050e <main+0x46>
	  {

		  i2c_slv_cmd_rx_tx_handle();
 800051a:	f000 fd95 	bl	8001048 <i2c_slv_cmd_rx_tx_handle>

		  HAL_Delay(1); 								// Delay for 1 ms
 800051e:	2001      	movs	r0, #1
 8000520:	f001 fca4 	bl	8001e6c <HAL_Delay>
		  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) // Put I2C peripheral in listen mode process
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <main+0x7c>)
 8000526:	f002 fbf7 	bl	8002d18 <HAL_I2C_EnableListen_IT>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <main+0x6c>
		  {
			  Error_Handler();
 8000530:	f001 f9fa 	bl	8001928 <Error_Handler>
		  }
		  Xfer_Complete =0;
 8000534:	4b02      	ldr	r3, [pc, #8]	; (8000540 <main+0x78>)
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
	  cea_dssd_ramp_loop();
 800053a:	e7e8      	b.n	800050e <main+0x46>
 800053c:	2000012c 	.word	0x2000012c
 8000540:	2000002c 	.word	0x2000002c
 8000544:	20000030 	.word	0x20000030

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f006 fbd3 	bl	8006d02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f004 f91f 	bl	80047b0 <HAL_PWREx_ControlVoltageScaling>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000578:	f001 f9d6 	bl	8001928 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000596:	230a      	movs	r3, #10
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 f956 	bl	800485c <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005b6:	f001 f9b7 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fd56 	bl	8005084 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005de:	f001 f9a3 	bl	8001928 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3758      	adds	r7, #88	; 0x58
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_I2C1_Init+0x74>)
 80005f2:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <MX_I2C1_Init+0x78>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_I2C1_Init+0x74>)
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <MX_I2C1_Init+0x7c>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 50;
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_I2C1_Init+0x74>)
 80005fe:	2232      	movs	r2, #50	; 0x32
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_I2C1_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_I2C1_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_I2C1_Init+0x74>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_I2C1_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000626:	480e      	ldr	r0, [pc, #56]	; (8000660 <MX_I2C1_Init+0x74>)
 8000628:	f001 ff68 	bl	80024fc <HAL_I2C_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000632:	f001 f979 	bl	8001928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000636:	2100      	movs	r1, #0
 8000638:	4809      	ldr	r0, [pc, #36]	; (8000660 <MX_I2C1_Init+0x74>)
 800063a:	f004 f813 	bl	8004664 <HAL_I2CEx_ConfigAnalogFilter>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000644:	f001 f970 	bl	8001928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000648:	2100      	movs	r1, #0
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_I2C1_Init+0x74>)
 800064c:	f004 f855 	bl	80046fa <HAL_I2CEx_ConfigDigitalFilter>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f001 f967 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000030 	.word	0x20000030
 8000664:	40005400 	.word	0x40005400
 8000668:	10909cec 	.word	0x10909cec

0800066c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_I2C2_Init+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <MX_I2C2_Init+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_I2C2_Init+0x74>)
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <MX_I2C2_Init+0x7c>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_I2C2_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_I2C2_Init+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_I2C2_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_I2C2_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C2_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C2_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <MX_I2C2_Init+0x74>)
 80006a8:	f001 ff28 	bl	80024fc <HAL_I2C_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006b2:	f001 f939 	bl	8001928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_I2C2_Init+0x74>)
 80006ba:	f003 ffd3 	bl	8004664 <HAL_I2CEx_ConfigAnalogFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006c4:	f001 f930 	bl	8001928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_I2C2_Init+0x74>)
 80006cc:	f004 f815 	bl	80046fa <HAL_I2CEx_ConfigDigitalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006d6:	f001 f927 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000084 	.word	0x20000084
 80006e4:	40005800 	.word	0x40005800
 80006e8:	10909cec 	.word	0x10909cec

080006ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <MX_I2C3_Init+0x74>)
 80006f2:	4a1c      	ldr	r2, [pc, #112]	; (8000764 <MX_I2C3_Init+0x78>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_I2C3_Init+0x74>)
 80006f8:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <MX_I2C3_Init+0x7c>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_I2C3_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_I2C3_Init+0x74>)
 8000704:	2201      	movs	r2, #1
 8000706:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_I2C3_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_I2C3_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_I2C3_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_I2C3_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_I2C3_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000726:	480e      	ldr	r0, [pc, #56]	; (8000760 <MX_I2C3_Init+0x74>)
 8000728:	f001 fee8 	bl	80024fc <HAL_I2C_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000732:	f001 f8f9 	bl	8001928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000736:	2100      	movs	r1, #0
 8000738:	4809      	ldr	r0, [pc, #36]	; (8000760 <MX_I2C3_Init+0x74>)
 800073a:	f003 ff93 	bl	8004664 <HAL_I2CEx_ConfigAnalogFilter>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000744:	f001 f8f0 	bl	8001928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_I2C3_Init+0x74>)
 800074c:	f003 ffd5 	bl	80046fa <HAL_I2CEx_ConfigDigitalFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000756:	f001 f8e7 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000d8 	.word	0x200000d8
 8000764:	40005c00 	.word	0x40005c00
 8000768:	10909cec 	.word	0x10909cec

0800076c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_TIM2_Init+0x98>)
 800078c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000790:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_TIM2_Init+0x98>)
 8000794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM2_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_TIM2_Init+0x98>)
 80007a2:	f649 4240 	movw	r2, #40000	; 0x9c40
 80007a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_TIM2_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_TIM2_Init+0x98>)
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b4:	4813      	ldr	r0, [pc, #76]	; (8000804 <MX_TIM2_Init+0x98>)
 80007b6:	f005 f9c5 	bl	8005b44 <HAL_TIM_Base_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007c0:	f001 f8b2 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_TIM2_Init+0x98>)
 80007d2:	f005 fb65 	bl	8005ea0 <HAL_TIM_ConfigClockSource>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007dc:	f001 f8a4 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_TIM2_Init+0x98>)
 80007ee:	f005 fd47 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007f8:	f001 f896 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	2000012c 	.word	0x2000012c

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800080e:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MX_USART2_UART_Init+0x5c>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART2_UART_Init+0x58>)
 800084c:	f005 fd9c 	bl	8006388 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000856:	f001 f867 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000178 	.word	0x20000178
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b46      	ldr	r3, [pc, #280]	; (8000998 <MX_GPIO_Init+0x130>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a45      	ldr	r2, [pc, #276]	; (8000998 <MX_GPIO_Init+0x130>)
 8000884:	f043 0304 	orr.w	r3, r3, #4
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b43      	ldr	r3, [pc, #268]	; (8000998 <MX_GPIO_Init+0x130>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0304 	and.w	r3, r3, #4
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	4b40      	ldr	r3, [pc, #256]	; (8000998 <MX_GPIO_Init+0x130>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a3f      	ldr	r2, [pc, #252]	; (8000998 <MX_GPIO_Init+0x130>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <MX_GPIO_Init+0x130>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b3a      	ldr	r3, [pc, #232]	; (8000998 <MX_GPIO_Init+0x130>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a39      	ldr	r2, [pc, #228]	; (8000998 <MX_GPIO_Init+0x130>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <MX_GPIO_Init+0x130>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_GPIO_Init+0x130>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a33      	ldr	r2, [pc, #204]	; (8000998 <MX_GPIO_Init+0x130>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <MX_GPIO_Init+0x130>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	21b0      	movs	r1, #176	; 0xb0
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e6:	f001 fdd7 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 80008ea:	2200      	movs	r2, #0
 80008ec:	f243 31e0 	movw	r1, #13280	; 0x33e0
 80008f0:	482a      	ldr	r0, [pc, #168]	; (800099c <MX_GPIO_Init+0x134>)
 80008f2:	f001 fdd1 	bl	8002498 <HAL_GPIO_WritePin>
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIMING_PIN_GPIO_Port, TIMING_PIN_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2140      	movs	r1, #64	; 0x40
 80008fa:	4829      	ldr	r0, [pc, #164]	; (80009a0 <MX_GPIO_Init+0x138>)
 80008fc:	f001 fdcc 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000906:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800090a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4822      	ldr	r0, [pc, #136]	; (80009a0 <MX_GPIO_Init+0x138>)
 8000918:	f001 fc2c 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800091c:	23b0      	movs	r3, #176	; 0xb0
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000936:	f001 fc1d 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800093a:	2340      	movs	r3, #64	; 0x40
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000942:	2301      	movs	r3, #1
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f001 fc10 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_HT_Pin LD4_Pin ENABLE_1_FPGA_Pin ENABLE_2_IJC_Pin
                           ENABLE_3_CEA_Pin ENABLE_4_Pin ENABLE_5_UCD_Pin */
  GPIO_InitStruct.Pin = ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 8000954:	f243 33e0 	movw	r3, #13280	; 0x33e0
 8000958:	617b      	str	r3, [r7, #20]
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <MX_GPIO_Init+0x134>)
 800096e:	f001 fc01 	bl	8002174 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIMING_PIN_Pin */
  GPIO_InitStruct.Pin = TIMING_PIN_Pin;
 8000972:	2340      	movs	r3, #64	; 0x40
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIMING_PIN_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_GPIO_Init+0x138>)
 800098a:	f001 fbf3 	bl	8002174 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	48000400 	.word	0x48000400
 80009a0:	48000800 	.word	0x48000800

080009a4 <i2c_read>:
}
*/
// ###############################################

HAL_StatusTypeDef i2c_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af02      	add	r7, sp, #8
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	461a      	mov	r2, r3
 80009b0:	460b      	mov	r3, r1
 80009b2:	72fb      	strb	r3, [r7, #11]
 80009b4:	4613      	mov	r3, r2
 80009b6:	813b      	strh	r3, [r7, #8]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(hi2c, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 80009b8:	7afb      	ldrb	r3, [r7, #11]
 80009ba:	b299      	uxth	r1, r3
 80009bc:	893b      	ldrh	r3, [r7, #8]
 80009be:	220a      	movs	r2, #10
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f001 ff4d 	bl	8002864 <HAL_I2C_Master_Receive>
 80009ca:	4603      	mov	r3, r0
 80009cc:	75fb      	strb	r3, [r7, #23]
	return(ret);
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3718      	adds	r7, #24
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <i2c_write>:

HAL_StatusTypeDef i2c_write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af02      	add	r7, sp, #8
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	461a      	mov	r2, r3
 80009e4:	460b      	mov	r3, r1
 80009e6:	72fb      	strb	r3, [r7, #11]
 80009e8:	4613      	mov	r3, r2
 80009ea:	813b      	strh	r3, [r7, #8]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 80009ec:	7afb      	ldrb	r3, [r7, #11]
 80009ee:	b299      	uxth	r1, r3
 80009f0:	893b      	ldrh	r3, [r7, #8]
 80009f2:	220a      	movs	r2, #10
 80009f4:	9200      	str	r2, [sp, #0]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f001 fe1b 	bl	8002634 <HAL_I2C_Master_Transmit>
 80009fe:	4603      	mov	r3, r0
 8000a00:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000a02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3718      	adds	r7, #24
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <i2c_write_read>:

HAL_StatusTypeDef i2c_write_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	607a      	str	r2, [r7, #4]
 8000a16:	461a      	mov	r2, r3
 8000a18:	460b      	mov	r3, r1
 8000a1a:	72fb      	strb	r3, [r7, #11]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	813b      	strh	r3, [r7, #8]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8000a24:	2305      	movs	r3, #5
 8000a26:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8000a2c:	7dfb      	ldrb	r3, [r7, #23]
 8000a2e:	2b04      	cmp	r3, #4
 8000a30:	d802      	bhi.n	8000a38 <i2c_write_read+0x2c>
 8000a32:	2064      	movs	r0, #100	; 0x64
 8000a34:	f001 fa1a 	bl	8001e6c <HAL_Delay>
		status = i2c_write(hi2c, dev_addr, out_ptr, countTX);						// Perform I2C operation
 8000a38:	893b      	ldrh	r3, [r7, #8]
 8000a3a:	7af9      	ldrb	r1, [r7, #11]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff ffca 	bl	80009d8 <i2c_write>
 8000a44:	4603      	mov	r3, r0
 8000a46:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 8000a48:	7dfb      	ldrb	r3, [r7, #23]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8000a4e:	7d7b      	ldrb	r3, [r7, #21]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d102      	bne.n	8000a5a <i2c_write_read+0x4e>
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d1e8      	bne.n	8000a2c <i2c_write_read+0x20>

	if(status == HAL_ERROR){return(status);}
 8000a5a:	7d7b      	ldrb	r3, [r7, #21]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d101      	bne.n	8000a64 <i2c_write_read+0x58>
 8000a60:	7d7b      	ldrb	r3, [r7, #21]
 8000a62:	e01a      	b.n	8000a9a <i2c_write_read+0x8e>

	HAL_Delay(5);
 8000a64:	2005      	movs	r0, #5
 8000a66:	f001 fa01 	bl	8001e6c <HAL_Delay>

	do
	{
		// Read operation
		status =  i2c_read(hi2c, dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 8000a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a6c:	7af9      	ldrb	r1, [r7, #11]
 8000a6e:	6a3a      	ldr	r2, [r7, #32]
 8000a70:	68f8      	ldr	r0, [r7, #12]
 8000a72:	f7ff ff97 	bl	80009a4 <i2c_read>
 8000a76:	4603      	mov	r3, r0
 8000a78:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8000a7a:	7dbb      	ldrb	r3, [r7, #22]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d802      	bhi.n	8000a86 <i2c_write_read+0x7a>
 8000a80:	2064      	movs	r0, #100	; 0x64
 8000a82:	f001 f9f3 	bl	8001e6c <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8000a86:	7dbb      	ldrb	r3, [r7, #22]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8000a8c:	7d7b      	ldrb	r3, [r7, #21]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d102      	bne.n	8000a98 <i2c_write_read+0x8c>
 8000a92:	7dbb      	ldrb	r3, [r7, #22]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1e8      	bne.n	8000a6a <i2c_write_read+0x5e>

	return(status);
 8000a98:	7d7b      	ldrb	r3, [r7, #21]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <max6911_read>:
//************************************
//        Chips and Devs
//************************************

uint16_t max6911_read(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t cmd_msb, uint8_t cmd_lsb)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	4608      	mov	r0, r1
 8000aae:	4611      	mov	r1, r2
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	70fb      	strb	r3, [r7, #3]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	70bb      	strb	r3, [r7, #2]
 8000aba:	4613      	mov	r3, r2
 8000abc:	707b      	strb	r3, [r7, #1]
	uint16_t temp_data = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	81fb      	strh	r3, [r7, #14]
	uint8_t rx_data[2] = {0x00, 0x00};
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	81bb      	strh	r3, [r7, #12]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	813b      	strh	r3, [r7, #8]

	// Init the device ctrl reg1
	max6911_set_ctrl1_register(INIT_WITH_CURRENT_GAIN_8);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f864 	bl	8000b98 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <max6911_read+0xec>)
 8000ad6:	7b1b      	ldrb	r3, [r3, #12]
 8000ad8:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000ada:	f107 0208 	add.w	r2, r7, #8
 8000ade:	78f9      	ldrb	r1, [r7, #3]
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ff78 	bl	80009d8 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000ae8:	230b      	movs	r3, #11
 8000aea:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000aec:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <max6911_read+0xec>)
 8000aee:	7b5b      	ldrb	r3, [r3, #13]
 8000af0:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000af2:	f107 0208 	add.w	r2, r7, #8
 8000af6:	78f9      	ldrb	r1, [r7, #3]
 8000af8:	2302      	movs	r3, #2
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff6c 	bl	80009d8 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the device for normal fast read operation
	max6911_set_ctrl1_register(FASTREAD_NORMAL_OPERATION);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f000 f849 	bl	8000b98 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000b06:	230a      	movs	r3, #10
 8000b08:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <max6911_read+0xec>)
 8000b0c:	7b1b      	ldrb	r3, [r3, #12]
 8000b0e:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000b10:	f107 0208 	add.w	r2, r7, #8
 8000b14:	78f9      	ldrb	r1, [r7, #3]
 8000b16:	2302      	movs	r3, #2
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff5d 	bl	80009d8 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000b1e:	230b      	movs	r3, #11
 8000b20:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <max6911_read+0xec>)
 8000b24:	7b5b      	ldrb	r3, [r3, #13]
 8000b26:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000b28:	f107 0208 	add.w	r2, r7, #8
 8000b2c:	78f9      	ldrb	r1, [r7, #3]
 8000b2e:	2302      	movs	r3, #2
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff51 	bl	80009d8 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the read for MSB and LSB
	status = i2c_write_read(hi2c, device_addr, &cmd_msb, 1, &rx_data[0], 1);
 8000b36:	1cba      	adds	r2, r7, #2
 8000b38:	78f9      	ldrb	r1, [r7, #3]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	2301      	movs	r3, #1
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff60 	bl	8000a0c <i2c_write_read>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <max6911_read+0xf0>)
 8000b52:	701a      	strb	r2, [r3, #0]
	status = i2c_write_read(hi2c, device_addr, &cmd_lsb, 1, &rx_data[1], 1);
 8000b54:	1c7a      	adds	r2, r7, #1
 8000b56:	78f9      	ldrb	r1, [r7, #3]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	3301      	adds	r3, #1
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2301      	movs	r3, #1
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ff50 	bl	8000a0c <i2c_write_read>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <max6911_read+0xf0>)
 8000b72:	701a      	strb	r2, [r3, #0]

	temp_data = (rx_data[0]<<8) | (rx_data[1]);
 8000b74:	7b3b      	ldrb	r3, [r7, #12]
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	b21a      	sxth	r2, r3
 8000b7a:	7b7b      	ldrb	r3, [r7, #13]
 8000b7c:	b21b      	sxth	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	81fb      	strh	r3, [r7, #14]
	return(temp_data);
 8000b84:	89fb      	ldrh	r3, [r7, #14]

}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000228 	.word	0x20000228
 8000b94:	20000200 	.word	0x20000200

08000b98 <max6911_set_ctrl1_register>:


void max6911_set_ctrl1_register(uint8_t selector)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]

	switch(selector)
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <max6911_set_ctrl1_register+0x16>
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d020      	beq.n	8000bee <max6911_set_ctrl1_register+0x56>
			break;
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		default:
			break;
 8000bac:	e03e      	b.n	8000c2c <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000bb0:	7b13      	ldrb	r3, [r2, #12]
 8000bb2:	f36f 03c3 	bfc	r3, #3, #1
 8000bb6:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000bba:	7b13      	ldrb	r3, [r2, #12]
 8000bbc:	f36f 1304 	bfc	r3, #4, #1
 8000bc0:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000bc2:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000bc4:	7b13      	ldrb	r3, [r2, #12]
 8000bc6:	f36f 1347 	bfc	r3, #5, #3
 8000bca:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_A_GAIN_8x_DEC;
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000bce:	7b13      	ldrb	r3, [r2, #12]
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	f361 0302 	bfi	r3, r1, #0, #3
 8000bd6:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000bd8:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000bda:	7b53      	ldrb	r3, [r2, #13]
 8000bdc:	f36f 03c3 	bfc	r3, #3, #1
 8000be0:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000be2:	4a15      	ldr	r2, [pc, #84]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000be4:	7b53      	ldrb	r3, [r2, #13]
 8000be6:	f36f 0382 	bfc	r3, #2, #1
 8000bea:	7353      	strb	r3, [r2, #13]
			break;
 8000bec:	e01e      	b.n	8000c2c <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000bf0:	7b13      	ldrb	r3, [r2, #12]
 8000bf2:	f36f 03c3 	bfc	r3, #3, #1
 8000bf6:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000bfa:	7b13      	ldrb	r3, [r2, #12]
 8000bfc:	f36f 1304 	bfc	r3, #4, #1
 8000c00:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000c02:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000c04:	7b13      	ldrb	r3, [r2, #12]
 8000c06:	f36f 1347 	bfc	r3, #5, #3
 8000c0a:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_FAST_READ_DEC;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000c0e:	7b13      	ldrb	r3, [r2, #12]
 8000c10:	f043 0307 	orr.w	r3, r3, #7
 8000c14:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000c18:	7b53      	ldrb	r3, [r2, #13]
 8000c1a:	f36f 03c3 	bfc	r3, #3, #1
 8000c1e:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000c20:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <max6911_set_ctrl1_register+0xa0>)
 8000c22:	7b53      	ldrb	r3, [r2, #13]
 8000c24:	f36f 0382 	bfc	r3, #2, #1
 8000c28:	7353      	strb	r3, [r2, #13]
			break;
 8000c2a:	bf00      	nop
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	20000228 	.word	0x20000228

08000c3c <ht_enable_set>:
//            HV
//************************************

// Board enable functions
void ht_enable_set(bool gpio_state)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_GPIO_Port, ENABLE_HT_Pin, gpio_state);
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <ht_enable_set+0x20>)
 8000c50:	f001 fc22 	bl	8002498 <HAL_GPIO_WritePin>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	48000400 	.word	0x48000400

08000c60 <cea_dssd_ramp_loop>:




void cea_dssd_ramp_loop(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the CEA voltage

	uint16_t max6911_measured_voltage = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	803b      	strh	r3, [r7, #0]

	if(cea_detector.ramp_flag == true && cea_detector.hv_loop_enable == true)
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 8082 	beq.w	8000d7c <cea_dssd_ramp_loop+0x11c>
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000c7a:	785b      	ldrb	r3, [r3, #1]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d07d      	beq.n	8000d7c <cea_dssd_ramp_loop+0x11c>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000c80:	2303      	movs	r3, #3
 8000c82:	2202      	movs	r2, #2
 8000c84:	21ee      	movs	r1, #238	; 0xee
 8000c86:	4840      	ldr	r0, [pc, #256]	; (8000d88 <cea_dssd_ramp_loop+0x128>)
 8000c88:	f7ff ff0c 	bl	8000aa4 <max6911_read>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	091b      	lsrs	r3, r3, #4
 8000c94:	80fb      	strh	r3, [r7, #6]

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000c96:	2201      	movs	r2, #1
 8000c98:	493c      	ldr	r1, [pc, #240]	; (8000d8c <cea_dssd_ramp_loop+0x12c>)
 8000c9a:	2058      	movs	r0, #88	; 0x58
 8000c9c:	f000 f972 	bl	8000f84 <cea_i2c_read>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4b3a      	ldr	r3, [pc, #232]	; (8000d90 <cea_dssd_ramp_loop+0x130>)
 8000ca6:	701a      	strb	r2, [r3, #0]

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((cea_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (cea_detector.hv_targate_value - cea_detector.hv_lower_deadband)))
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000caa:	891b      	ldrh	r3, [r3, #8]
 8000cac:	88fa      	ldrh	r2, [r7, #6]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d220      	bcs.n	8000cf4 <cea_dssd_ramp_loop+0x94>
 8000cb2:	88fa      	ldrh	r2, [r7, #6]
 8000cb4:	4b33      	ldr	r3, [pc, #204]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000cb6:	891b      	ldrh	r3, [r3, #8]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000cbc:	795b      	ldrb	r3, [r3, #5]
 8000cbe:	1acb      	subs	r3, r1, r3
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	da17      	bge.n	8000cf4 <cea_dssd_ramp_loop+0x94>
		{
			// If the target is greater than the current value, increment the digipot value
			if (cea_detector.hv_digipot_value <= 149)
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000cc6:	799b      	ldrb	r3, [r3, #6]
 8000cc8:	2b95      	cmp	r3, #149	; 0x95
 8000cca:	d854      	bhi.n	8000d76 <cea_dssd_ramp_loop+0x116>
			{
				cea_detector.hv_digipot_value ++;
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000cce:	799b      	ldrb	r3, [r3, #6]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000cd6:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000cd8:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000cda:	799b      	ldrb	r3, [r3, #6]
 8000cdc:	707b      	strb	r3, [r7, #1]
				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000cde:	4639      	mov	r1, r7
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <cea_dssd_ramp_loop+0x12c>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	2058      	movs	r0, #88	; 0x58
 8000cea:	f000 f965 	bl	8000fb8 <cea_i2c_write_read>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	717b      	strb	r3, [r7, #5]
			if (cea_detector.hv_digipot_value <= 149)
 8000cf2:	e040      	b.n	8000d76 <cea_dssd_ramp_loop+0x116>
			}
		}
		else if ((cea_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (cea_detector.hv_targate_value + cea_detector.hv_upper_deadband)))
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000cf6:	891b      	ldrh	r3, [r3, #8]
 8000cf8:	88fa      	ldrh	r2, [r7, #6]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	d920      	bls.n	8000d40 <cea_dssd_ramp_loop+0xe0>
 8000cfe:	88fa      	ldrh	r2, [r7, #6]
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d02:	891b      	ldrh	r3, [r3, #8]
 8000d04:	4619      	mov	r1, r3
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d08:	791b      	ldrb	r3, [r3, #4]
 8000d0a:	440b      	add	r3, r1
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dd17      	ble.n	8000d40 <cea_dssd_ramp_loop+0xe0>
		{
			if (cea_detector.hv_digipot_value >= 1)
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d12:	799b      	ldrb	r3, [r3, #6]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d02e      	beq.n	8000d76 <cea_dssd_ramp_loop+0x116>
			{
				// If the target is less than the current value
				cea_detector.hv_digipot_value --;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d1a:	799b      	ldrb	r3, [r3, #6]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d22:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d26:	799b      	ldrb	r3, [r3, #6]
 8000d28:	707b      	strb	r3, [r7, #1]

				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <cea_dssd_ramp_loop+0x12c>)
 8000d32:	2202      	movs	r2, #2
 8000d34:	2058      	movs	r0, #88	; 0x58
 8000d36:	f000 f93f 	bl	8000fb8 <cea_i2c_write_read>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	713b      	strb	r3, [r7, #4]
			if (cea_detector.hv_digipot_value >= 1)
 8000d3e:	e01a      	b.n	8000d76 <cea_dssd_ramp_loop+0x116>
			}
		}
		else if((cea_detector.hv_targate_value == 0) && (cea_detector.hv_digipot_value > 0))
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d42:	891b      	ldrh	r3, [r3, #8]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d116      	bne.n	8000d76 <cea_dssd_ramp_loop+0x116>
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d4a:	799b      	ldrb	r3, [r3, #6]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d012      	beq.n	8000d76 <cea_dssd_ramp_loop+0x116>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			cea_detector.hv_digipot_value --;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d52:	799b      	ldrb	r3, [r3, #6]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d5a:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = cea_detector.hv_digipot_value;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d5e:	799b      	ldrb	r3, [r3, #6]
 8000d60:	707b      	strb	r3, [r7, #1]

			HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000d62:	4639      	mov	r1, r7
 8000d64:	2301      	movs	r3, #1
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <cea_dssd_ramp_loop+0x12c>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	2058      	movs	r0, #88	; 0x58
 8000d6e:	f000 f923 	bl	8000fb8 <cea_i2c_write_read>
 8000d72:	4603      	mov	r3, r0
 8000d74:	70fb      	strb	r3, [r7, #3]
		}
		cea_detector.ramp_flag  = false;
 8000d76:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <cea_dssd_ramp_loop+0x124>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000021c 	.word	0x2000021c
 8000d88:	200000d8 	.word	0x200000d8
 8000d8c:	20000222 	.word	0x20000222
 8000d90:	20000200 	.word	0x20000200

08000d94 <ucd_board_enable_set>:
//            UCD PSB
//************************************

// Board enable functions
void ucd_board_enable_set(bool gpio_state)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin, gpio_state);
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	461a      	mov	r2, r3
 8000da2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <ucd_board_enable_set+0x28>)
 8000da8:	f001 fb76 	bl	8002498 <HAL_GPIO_WritePin>
	ucd_detector.board_enable_state = gpio_state;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b03      	ldr	r3, [pc, #12]	; (8000dc0 <ucd_board_enable_set+0x2c>)
 8000db2:	815a      	strh	r2, [r3, #10]

}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	48000400 	.word	0x48000400
 8000dc0:	20000204 	.word	0x20000204

08000dc4 <ucd_board_enable_get>:

bool ucd_board_enable_get(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	ucd_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin);
 8000dc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dcc:	4807      	ldr	r0, [pc, #28]	; (8000dec <ucd_board_enable_get+0x28>)
 8000dce:	f001 fb4b 	bl	8002468 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	b29a      	uxth	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <ucd_board_enable_get+0x2c>)
 8000dd8:	815a      	strh	r2, [r3, #10]
	return(ucd_detector.board_enable_state);
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <ucd_board_enable_get+0x2c>)
 8000ddc:	895b      	ldrh	r3, [r3, #10]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	bf14      	ite	ne
 8000de2:	2301      	movne	r3, #1
 8000de4:	2300      	moveq	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	48000400 	.word	0x48000400
 8000df0:	20000204 	.word	0x20000204

08000df4 <cea_detector_init>:
	}
}


bool cea_detector_init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af02      	add	r7, sp, #8

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]

	// Init the CEA lab detector
	cea_detector.ramp_flag            = 0;
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <cea_detector_init+0x94>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
	cea_detector.hv_max_digipot_value = CEA_MAX_DIGIPOT_VALUE - 1;
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <cea_detector_init+0x94>)
 8000e06:	2295      	movs	r2, #149	; 0x95
 8000e08:	709a      	strb	r2, [r3, #2]
	cea_detector.hv_min_digipot_value = CEA_MIN_DIGIPOT_VALUE - 1;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <cea_detector_init+0x94>)
 8000e0c:	22ff      	movs	r2, #255	; 0xff
 8000e0e:	70da      	strb	r2, [r3, #3]
	cea_detector.hv_lower_deadband 	  = CEA_LOWER_DEADBAND;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <cea_detector_init+0x94>)
 8000e12:	222b      	movs	r2, #43	; 0x2b
 8000e14:	715a      	strb	r2, [r3, #5]
	cea_detector.hv_upper_deadband 	  = CEA_UPPER_DEADBAND;
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <cea_detector_init+0x94>)
 8000e18:	222b      	movs	r2, #43	; 0x2b
 8000e1a:	711a      	strb	r2, [r3, #4]
	cea_detector.hv_digipot_value 	  = 0;
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <cea_detector_init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	719a      	strb	r2, [r3, #6]
	cea_detector.hv_targate_value 	  = 0;
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <cea_detector_init+0x94>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	811a      	strh	r2, [r3, #8]
	cea_detector.board_enable_state   = 0;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <cea_detector_init+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	815a      	strh	r2, [r3, #10]
	cea_detector.hv_loop_enable 	  = 1;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <cea_detector_init+0x94>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	705a      	strb	r2, [r3, #1]

	// Configure the board enable state
	ht_enable_set(GPIO_PIN_RESET);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f7ff ff01 	bl	8000c3c <ht_enable_set>
	cea_board_enable_set(GPIO_PIN_SET);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f000 f858 	bl	8000ef0 <cea_board_enable_set>

	HAL_Delay(100);
 8000e40:	2064      	movs	r0, #100	; 0x64
 8000e42:	f001 f813 	bl	8001e6c <HAL_Delay>

	// Reset the digipot value to 0
	uint8_t command[2] = {0x00, 0x00};
 8000e46:	2300      	movs	r3, #0
 8000e48:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef digipot_set_stataus = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &command[0], 2, &cea_detector.hv_digipot_value, 1);
 8000e4a:	1d39      	adds	r1, r7, #4
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <cea_detector_init+0x98>)
 8000e52:	2202      	movs	r2, #2
 8000e54:	2058      	movs	r0, #88	; 0x58
 8000e56:	f000 f8af 	bl	8000fb8 <cea_i2c_write_read>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71bb      	strb	r3, [r7, #6]


	if (cea_detector.hv_digipot_value != 0 || digipot_set_stataus == HAL_ERROR)
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <cea_detector_init+0x94>)
 8000e60:	799b      	ldrb	r3, [r3, #6]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <cea_detector_init+0x78>
 8000e66:	79bb      	ldrb	r3, [r7, #6]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d106      	bne.n	8000e7a <cea_detector_init+0x86>
	{
		// Disable the loop enable flag
		cea_detector.hv_loop_enable = false;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <cea_detector_init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	705a      	strb	r2, [r3, #1]
		status = EXIT_FAILURE;
 8000e72:	2301      	movs	r3, #1
 8000e74:	71fb      	strb	r3, [r7, #7]
		return(status);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	e002      	b.n	8000e80 <cea_detector_init+0x8c>
	}
	else
	{
		status = EXIT_SUCCESS;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71fb      	strb	r3, [r7, #7]
		return(status);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000021c 	.word	0x2000021c
 8000e8c:	20000222 	.word	0x20000222

08000e90 <ijc_board_enable_set>:



// Board enable functions
void ijc_board_enable_set(bool gpio_state)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, gpio_state);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2140      	movs	r1, #64	; 0x40
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <ijc_board_enable_set+0x28>)
 8000ea2:	f001 faf9 	bl	8002498 <HAL_GPIO_WritePin>
	ijc_detector.board_enable_state = gpio_state;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <ijc_board_enable_set+0x2c>)
 8000eac:	815a      	strh	r2, [r3, #10]
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	20000210 	.word	0x20000210

08000ec0 <ijc_board_enable_get>:

bool ijc_board_enable_get(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	ijc_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin);
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <ijc_board_enable_get+0x28>)
 8000ec8:	f001 face 	bl	8002468 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <ijc_board_enable_get+0x2c>)
 8000ed2:	815a      	strh	r2, [r3, #10]
	return(ijc_detector.board_enable_state);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <ijc_board_enable_get+0x2c>)
 8000ed6:	895b      	ldrh	r3, [r3, #10]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf14      	ite	ne
 8000edc:	2301      	movne	r3, #1
 8000ede:	2300      	moveq	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	20000210 	.word	0x20000210

08000ef0 <cea_board_enable_set>:
//            CEA PSB
//************************************

// Board enable functions
void cea_board_enable_set(bool gpio_state)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, gpio_state);
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	461a      	mov	r2, r3
 8000efe:	2180      	movs	r1, #128	; 0x80
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <cea_board_enable_set+0x28>)
 8000f02:	f001 fac9 	bl	8002498 <HAL_GPIO_WritePin>
	cea_detector.board_enable_state = gpio_state;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <cea_board_enable_set+0x2c>)
 8000f0c:	815a      	strh	r2, [r3, #10]
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	48000400 	.word	0x48000400
 8000f1c:	2000021c 	.word	0x2000021c

08000f20 <cea_board_enable_get>:

bool cea_board_enable_get(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	cea_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin);
 8000f24:	2180      	movs	r1, #128	; 0x80
 8000f26:	4808      	ldr	r0, [pc, #32]	; (8000f48 <cea_board_enable_get+0x28>)
 8000f28:	f001 fa9e 	bl	8002468 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <cea_board_enable_get+0x2c>)
 8000f32:	815a      	strh	r2, [r3, #10]
	return(cea_detector.board_enable_state);
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <cea_board_enable_get+0x2c>)
 8000f36:	895b      	ldrh	r3, [r3, #10]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	48000400 	.word	0x48000400
 8000f4c:	2000021c 	.word	0x2000021c

08000f50 <cea_i2c_write>:

HAL_StatusTypeDef cea_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c3, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	b299      	uxth	r1, r3
 8000f64:	88bb      	ldrh	r3, [r7, #4]
 8000f66:	220a      	movs	r2, #10
 8000f68:	9200      	str	r2, [sp, #0]
 8000f6a:	683a      	ldr	r2, [r7, #0]
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <cea_i2c_write+0x30>)
 8000f6e:	f001 fb61 	bl	8002634 <HAL_I2C_Master_Transmit>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000d8 	.word	0x200000d8

08000f84 <cea_i2c_read>:

HAL_StatusTypeDef cea_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	b299      	uxth	r1, r3
 8000f98:	88bb      	ldrh	r3, [r7, #4]
 8000f9a:	220a      	movs	r2, #10
 8000f9c:	9200      	str	r2, [sp, #0]
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <cea_i2c_read+0x30>)
 8000fa2:	f001 fc5f 	bl	8002864 <HAL_I2C_Master_Receive>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200000d8 	.word	0x200000d8

08000fb8 <cea_i2c_write_read>:

HAL_StatusTypeDef cea_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	d802      	bhi.n	8000fe2 <cea_i2c_write_read+0x2a>
 8000fdc:	2064      	movs	r0, #100	; 0x64
 8000fde:	f000 ff45 	bl	8001e6c <HAL_Delay>
		status = cea_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 8000fe2:	89ba      	ldrh	r2, [r7, #12]
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	68b9      	ldr	r1, [r7, #8]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ffb1 	bl	8000f50 <cea_i2c_write>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8000ff8:	7d7b      	ldrb	r3, [r7, #21]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d102      	bne.n	8001004 <cea_i2c_write_read+0x4c>
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e8      	bne.n	8000fd6 <cea_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 8001004:	7d7b      	ldrb	r3, [r7, #21]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d101      	bne.n	800100e <cea_i2c_write_read+0x56>
 800100a:	7d7b      	ldrb	r3, [r7, #21]
 800100c:	e017      	b.n	800103e <cea_i2c_write_read+0x86>

	do
	{
		// Read operation
		status =  cea_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 800100e:	8c3a      	ldrh	r2, [r7, #32]
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ffb5 	bl	8000f84 <cea_i2c_read>
 800101a:	4603      	mov	r3, r0
 800101c:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 800101e:	7dbb      	ldrb	r3, [r7, #22]
 8001020:	2b04      	cmp	r3, #4
 8001022:	d802      	bhi.n	800102a <cea_i2c_write_read+0x72>
 8001024:	2064      	movs	r0, #100	; 0x64
 8001026:	f000 ff21 	bl	8001e6c <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 800102a:	7dbb      	ldrb	r3, [r7, #22]
 800102c:	3b01      	subs	r3, #1
 800102e:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8001030:	7d7b      	ldrb	r3, [r7, #21]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d102      	bne.n	800103c <cea_i2c_write_read+0x84>
 8001036:	7dbb      	ldrb	r3, [r7, #22]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1e8      	bne.n	800100e <cea_i2c_write_read+0x56>

	return(status);
 800103c:	7d7b      	ldrb	r3, [r7, #21]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <i2c_slv_cmd_rx_tx_handle>:
//************************************
//            I2C Slave
//************************************

bool i2c_slv_cmd_rx_tx_handle(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
	bool status = EXIT_SUCCESS;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]


	// SOME FUNCTION HERE TO HANDLE RX/TX
    switch(i2c_slv_rx.bytes.cmd)
 8001052:	4baf      	ldr	r3, [pc, #700]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001054:	78db      	ldrb	r3, [r3, #3]
 8001056:	3b40      	subs	r3, #64	; 0x40
 8001058:	2b47      	cmp	r3, #71	; 0x47
 800105a:	f200 8344 	bhi.w	80016e6 <i2c_slv_cmd_rx_tx_handle+0x69e>
 800105e:	a201      	add	r2, pc, #4	; (adr r2, 8001064 <i2c_slv_cmd_rx_tx_handle+0x1c>)
 8001060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001064:	0800126f 	.word	0x0800126f
 8001068:	080012d9 	.word	0x080012d9
 800106c:	0800134d 	.word	0x0800134d
 8001070:	0800138d 	.word	0x0800138d
 8001074:	080013cd 	.word	0x080013cd
 8001078:	080016e7 	.word	0x080016e7
 800107c:	080016e7 	.word	0x080016e7
 8001080:	080016e7 	.word	0x080016e7
 8001084:	080016e7 	.word	0x080016e7
 8001088:	080016e7 	.word	0x080016e7
 800108c:	080016e7 	.word	0x080016e7
 8001090:	080016e7 	.word	0x080016e7
 8001094:	080016e7 	.word	0x080016e7
 8001098:	080016e7 	.word	0x080016e7
 800109c:	080016e7 	.word	0x080016e7
 80010a0:	080016e7 	.word	0x080016e7
 80010a4:	080016e7 	.word	0x080016e7
 80010a8:	080016e7 	.word	0x080016e7
 80010ac:	080016e7 	.word	0x080016e7
 80010b0:	080016e7 	.word	0x080016e7
 80010b4:	080016e7 	.word	0x080016e7
 80010b8:	080016e7 	.word	0x080016e7
 80010bc:	080016e7 	.word	0x080016e7
 80010c0:	080016e7 	.word	0x080016e7
 80010c4:	080016e7 	.word	0x080016e7
 80010c8:	080016e7 	.word	0x080016e7
 80010cc:	080016e7 	.word	0x080016e7
 80010d0:	080016e7 	.word	0x080016e7
 80010d4:	080016e7 	.word	0x080016e7
 80010d8:	080016e7 	.word	0x080016e7
 80010dc:	080016e7 	.word	0x080016e7
 80010e0:	080016e7 	.word	0x080016e7
 80010e4:	08001425 	.word	0x08001425
 80010e8:	0800148f 	.word	0x0800148f
 80010ec:	08001615 	.word	0x08001615
 80010f0:	08001653 	.word	0x08001653
 80010f4:	08001691 	.word	0x08001691
 80010f8:	080014ef 	.word	0x080014ef
 80010fc:	0800152f 	.word	0x0800152f
 8001100:	08001595 	.word	0x08001595
 8001104:	080015d5 	.word	0x080015d5
 8001108:	080016e7 	.word	0x080016e7
 800110c:	080016e7 	.word	0x080016e7
 8001110:	080016e7 	.word	0x080016e7
 8001114:	080016e7 	.word	0x080016e7
 8001118:	080016e7 	.word	0x080016e7
 800111c:	080016e7 	.word	0x080016e7
 8001120:	080016e7 	.word	0x080016e7
 8001124:	080016e7 	.word	0x080016e7
 8001128:	080016e7 	.word	0x080016e7
 800112c:	080016e7 	.word	0x080016e7
 8001130:	080016e7 	.word	0x080016e7
 8001134:	080016e7 	.word	0x080016e7
 8001138:	080016e7 	.word	0x080016e7
 800113c:	080016e7 	.word	0x080016e7
 8001140:	080016e7 	.word	0x080016e7
 8001144:	080016e7 	.word	0x080016e7
 8001148:	080016e7 	.word	0x080016e7
 800114c:	080016e7 	.word	0x080016e7
 8001150:	080016e7 	.word	0x080016e7
 8001154:	080016e7 	.word	0x080016e7
 8001158:	080016e7 	.word	0x080016e7
 800115c:	080016e7 	.word	0x080016e7
 8001160:	080016e7 	.word	0x080016e7
 8001164:	08001185 	.word	0x08001185
 8001168:	080016e7 	.word	0x080016e7
 800116c:	080016e7 	.word	0x080016e7
 8001170:	080016e7 	.word	0x080016e7
 8001174:	080016e7 	.word	0x080016e7
 8001178:	080016e7 	.word	0x080016e7
 800117c:	080011ef 	.word	0x080011ef
 8001180:	0800122f 	.word	0x0800122f
		//                     UCD Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001184:	4b62      	ldr	r3, [pc, #392]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001186:	789b      	ldrb	r3, [r3, #2]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10b      	bne.n	80011a4 <i2c_slv_cmd_rx_tx_handle+0x15c>
			{
				ucd_detector.board_enable_state = (uint16_t)ucd_board_enable_get(); // Read the state enable pin
 800118c:	f7ff fe1a 	bl	8000dc4 <ucd_board_enable_get>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <i2c_slv_cmd_rx_tx_handle+0x2cc>)
 8001196:	815a      	strh	r2, [r3, #10]
				i2c_slv_tx.data = ucd_detector.board_enable_state; 					// Prepare the date into the transmit
 8001198:	4b5e      	ldr	r3, [pc, #376]	; (8001314 <i2c_slv_cmd_rx_tx_handle+0x2cc>)
 800119a:	895a      	ldrh	r2, [r3, #10]
 800119c:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 800119e:	801a      	strh	r2, [r3, #0]
				return(status);
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	e2c8      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80011a4:	4b5a      	ldr	r3, [pc, #360]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80011a6:	789b      	ldrb	r3, [r3, #2]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f040 82a0 	bne.w	80016ee <i2c_slv_cmd_rx_tx_handle+0x6a6>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 80011ae:	4b58      	ldr	r3, [pc, #352]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d107      	bne.n	80011c6 <i2c_slv_cmd_rx_tx_handle+0x17e>
				{
					ucd_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff fdec 	bl	8000d94 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80011bc:	4b56      	ldr	r3, [pc, #344]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80011be:	2201      	movs	r2, #1
 80011c0:	801a      	strh	r2, [r3, #0]
					return(status);
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	e2b7      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 80011c6:	4b52      	ldr	r3, [pc, #328]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d107      	bne.n	80011de <i2c_slv_cmd_rx_tx_handle+0x196>
				{
					ucd_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 80011ce:	2000      	movs	r0, #0
 80011d0:	f7ff fde0 	bl	8000d94 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	801a      	strh	r2, [r3, #0]
					return(status);
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	e2ab      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80011de:	4b4e      	ldr	r3, [pc, #312]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80011e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80011e6:	2301      	movs	r3, #1
 80011e8:	75fb      	strb	r3, [r7, #23]
				return(status);
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	e2a3      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80011ee:	4b48      	ldr	r3, [pc, #288]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80011f0:	789b      	ldrb	r3, [r3, #2]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d10e      	bne.n	8001214 <i2c_slv_cmd_rx_tx_handle+0x1cc>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	827b      	strh	r3, [r7, #18]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80011fa:	2303      	movs	r3, #3
 80011fc:	2202      	movs	r2, #2
 80011fe:	21e4      	movs	r1, #228	; 0xe4
 8001200:	4846      	ldr	r0, [pc, #280]	; (800131c <i2c_slv_cmd_rx_tx_handle+0x2d4>)
 8001202:	f7ff fc4f 	bl	8000aa4 <max6911_read>
 8001206:	4603      	mov	r3, r0
 8001208:	827b      	strh	r3, [r7, #18]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800120a:	4a43      	ldr	r2, [pc, #268]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 800120c:	8a7b      	ldrh	r3, [r7, #18]
 800120e:	8013      	strh	r3, [r2, #0]

				return(status);
 8001210:	7dfb      	ldrb	r3, [r7, #23]
 8001212:	e290      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001214:	4b3e      	ldr	r3, [pc, #248]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001216:	789b      	ldrb	r3, [r3, #2]
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 826a 	bne.w	80016f2 <i2c_slv_cmd_rx_tx_handle+0x6aa>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800121e:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001224:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001226:	2301      	movs	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
				return(status);
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	e283      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001230:	789b      	ldrb	r3, [r3, #2]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d10e      	bne.n	8001254 <i2c_slv_cmd_rx_tx_handle+0x20c>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	82bb      	strh	r3, [r7, #20]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 800123a:	2301      	movs	r3, #1
 800123c:	2200      	movs	r2, #0
 800123e:	21e4      	movs	r1, #228	; 0xe4
 8001240:	4836      	ldr	r0, [pc, #216]	; (800131c <i2c_slv_cmd_rx_tx_handle+0x2d4>)
 8001242:	f7ff fc2f 	bl	8000aa4 <max6911_read>
 8001246:	4603      	mov	r3, r0
 8001248:	82bb      	strh	r3, [r7, #20]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800124a:	4a33      	ldr	r2, [pc, #204]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 800124c:	8abb      	ldrh	r3, [r7, #20]
 800124e:	8013      	strh	r3, [r2, #0]

				return(status);
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	e270      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001256:	789b      	ldrb	r3, [r3, #2]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f040 824c 	bne.w	80016f6 <i2c_slv_cmd_rx_tx_handle+0x6ae>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800125e:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001264:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001266:	2301      	movs	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]
				return(status);
 800126a:	7dfb      	ldrb	r3, [r7, #23]
 800126c:	e263      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
    	//                     CEA Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001270:	789b      	ldrb	r3, [r3, #2]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d10b      	bne.n	800128e <i2c_slv_cmd_rx_tx_handle+0x246>
			{
				cea_detector.board_enable_state = (uint16_t)cea_board_enable_get(); // Read the state enable pin
 8001276:	f7ff fe53 	bl	8000f20 <cea_board_enable_get>
 800127a:	4603      	mov	r3, r0
 800127c:	b29a      	uxth	r2, r3
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 8001280:	815a      	strh	r2, [r3, #10]
				i2c_slv_tx.data = cea_detector.board_enable_state; 					// Prepare the date into the transmit
 8001282:	4b27      	ldr	r3, [pc, #156]	; (8001320 <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 8001284:	895a      	ldrh	r2, [r3, #10]
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001288:	801a      	strh	r2, [r3, #0]
				return(status);
 800128a:	7dfb      	ldrb	r3, [r7, #23]
 800128c:	e253      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001290:	789b      	ldrb	r3, [r3, #2]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f040 8231 	bne.w	80016fa <i2c_slv_cmd_rx_tx_handle+0x6b2>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d107      	bne.n	80012b0 <i2c_slv_cmd_rx_tx_handle+0x268>
				{
					cea_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 80012a0:	2001      	movs	r0, #1
 80012a2:	f7ff fe25 	bl	8000ef0 <cea_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80012a6:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	801a      	strh	r2, [r3, #0]
					return(status);
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	e242      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <i2c_slv_cmd_rx_tx_handle+0x280>
				{
					cea_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff fe19 	bl	8000ef0 <cea_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	801a      	strh	r2, [r3, #0]
					return(status);
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	e236      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80012ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ce:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80012d0:	2301      	movs	r3, #1
 80012d2:	75fb      	strb	r3, [r7, #23]
				return(status);
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	e22e      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d106      	bne.n	80012ee <i2c_slv_cmd_rx_tx_handle+0x2a6>
			{
				i2c_slv_tx.data = cea_detector.hv_loop_enable; 						// Prepare the date into the transmit
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 80012e2:	785b      	ldrb	r3, [r3, #1]
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80012e8:	801a      	strh	r2, [r3, #0]
				return(status);
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	e223      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80012f0:	789b      	ldrb	r3, [r3, #2]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f040 8203 	bne.w	80016fe <i2c_slv_cmd_rx_tx_handle+0x6b6>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d111      	bne.n	8001324 <i2c_slv_cmd_rx_tx_handle+0x2dc>
				{
					cea_detector.hv_loop_enable = true;								// Set the state of the flag
 8001300:	4b07      	ldr	r3, [pc, #28]	; (8001320 <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 8001302:	2201      	movs	r2, #1
 8001304:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001308:	2201      	movs	r2, #1
 800130a:	801a      	strh	r2, [r3, #0]
					return(status);
 800130c:	7dfb      	ldrb	r3, [r7, #23]
 800130e:	e212      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
 8001310:	20000240 	.word	0x20000240
 8001314:	20000204 	.word	0x20000204
 8001318:	20000244 	.word	0x20000244
 800131c:	200000d8 	.word	0x200000d8
 8001320:	2000021c 	.word	0x2000021c
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 8001324:	4b94      	ldr	r3, [pc, #592]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d107      	bne.n	800133c <i2c_slv_cmd_rx_tx_handle+0x2f4>
				{
					cea_detector.hv_loop_enable = false;						    // Set the state of the flag
 800132c:	4b93      	ldr	r3, [pc, #588]	; (800157c <i2c_slv_cmd_rx_tx_handle+0x534>)
 800132e:	2200      	movs	r2, #0
 8001330:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001332:	4b93      	ldr	r3, [pc, #588]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001334:	2201      	movs	r2, #1
 8001336:	801a      	strh	r2, [r3, #0]
					return(status);
 8001338:	7dfb      	ldrb	r3, [r7, #23]
 800133a:	e1fc      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800133c:	4b90      	ldr	r3, [pc, #576]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800133e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001342:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001344:	2301      	movs	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	e1f4      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800134c:	4b8a      	ldr	r3, [pc, #552]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 800134e:	789b      	ldrb	r3, [r3, #2]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d10e      	bne.n	8001372 <i2c_slv_cmd_rx_tx_handle+0x32a>
			{
				uint16_t dataread = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	807b      	strh	r3, [r7, #2]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001358:	2303      	movs	r3, #3
 800135a:	2202      	movs	r2, #2
 800135c:	21ee      	movs	r1, #238	; 0xee
 800135e:	4889      	ldr	r0, [pc, #548]	; (8001584 <i2c_slv_cmd_rx_tx_handle+0x53c>)
 8001360:	f7ff fba0 	bl	8000aa4 <max6911_read>
 8001364:	4603      	mov	r3, r0
 8001366:	807b      	strh	r3, [r7, #2]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001368:	4a85      	ldr	r2, [pc, #532]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	8013      	strh	r3, [r2, #0]

				return(status);
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	e1e1      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001372:	4b81      	ldr	r3, [pc, #516]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001374:	789b      	ldrb	r3, [r3, #2]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f040 81c3 	bne.w	8001702 <i2c_slv_cmd_rx_tx_handle+0x6ba>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800137c:	4b80      	ldr	r3, [pc, #512]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800137e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001382:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001384:	2301      	movs	r3, #1
 8001386:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	e1d4      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800138c:	4b7a      	ldr	r3, [pc, #488]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 800138e:	789b      	ldrb	r3, [r3, #2]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10e      	bne.n	80013b2 <i2c_slv_cmd_rx_tx_handle+0x36a>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	80bb      	strh	r3, [r7, #4]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001398:	2301      	movs	r3, #1
 800139a:	2200      	movs	r2, #0
 800139c:	21f0      	movs	r1, #240	; 0xf0
 800139e:	4879      	ldr	r0, [pc, #484]	; (8001584 <i2c_slv_cmd_rx_tx_handle+0x53c>)
 80013a0:	f7ff fb80 	bl	8000aa4 <max6911_read>
 80013a4:	4603      	mov	r3, r0
 80013a6:	80bb      	strh	r3, [r7, #4]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80013a8:	4a75      	ldr	r2, [pc, #468]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	8013      	strh	r3, [r2, #0]

				return(status);
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	e1c1      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80013b2:	4b71      	ldr	r3, [pc, #452]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80013b4:	789b      	ldrb	r3, [r3, #2]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 81a5 	bne.w	8001706 <i2c_slv_cmd_rx_tx_handle+0x6be>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80013bc:	4b70      	ldr	r3, [pc, #448]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80013be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c2:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	75fb      	strb	r3, [r7, #23]
				return(status);
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	e1b4      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80013ce:	789b      	ldrb	r3, [r3, #2]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d105      	bne.n	80013e0 <i2c_slv_cmd_rx_tx_handle+0x398>
			{
				i2c_slv_tx.data = cea_detector.hv_targate_value;        // Prepare the date into the transmit
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <i2c_slv_cmd_rx_tx_handle+0x534>)
 80013d6:	891a      	ldrh	r2, [r3, #8]
 80013d8:	4b69      	ldr	r3, [pc, #420]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80013da:	801a      	strh	r2, [r3, #0]
				return(status);
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	e1aa      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80013e0:	4b65      	ldr	r3, [pc, #404]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f040 8190 	bne.w	800170a <i2c_slv_cmd_rx_tx_handle+0x6c2>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 80013ea:	4b63      	ldr	r3, [pc, #396]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	2b0f      	cmp	r3, #15
 80013f0:	d810      	bhi.n	8001414 <i2c_slv_cmd_rx_tx_handle+0x3cc>
				{
					// Read the data from the buffer
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80013f2:	4b61      	ldr	r3, [pc, #388]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80013f4:	785b      	ldrb	r3, [r3, #1]
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 80013fa:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	b21b      	sxth	r3, r3
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8001400:	4313      	orrs	r3, r2
 8001402:	b21b      	sxth	r3, r3
 8001404:	b29a      	uxth	r2, r3
 8001406:	4b5d      	ldr	r3, [pc, #372]	; (800157c <i2c_slv_cmd_rx_tx_handle+0x534>)
 8001408:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800140c:	2201      	movs	r2, #1
 800140e:	801a      	strh	r2, [r3, #0]
					return(status);
 8001410:	7dfb      	ldrb	r3, [r7, #23]
 8001412:	e190      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001414:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800141a:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 800141c:	2301      	movs	r3, #1
 800141e:	75fb      	strb	r3, [r7, #23]
					return(status);
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	e188      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
    	//                     IJC Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001424:	4b54      	ldr	r3, [pc, #336]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001426:	789b      	ldrb	r3, [r3, #2]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10b      	bne.n	8001444 <i2c_slv_cmd_rx_tx_handle+0x3fc>
			{
				ijc_detector.board_enable_state = (uint16_t)ijc_board_enable_get(); // Read the state enable pin
 800142c:	f7ff fd48 	bl	8000ec0 <ijc_board_enable_get>
 8001430:	4603      	mov	r3, r0
 8001432:	b29a      	uxth	r2, r3
 8001434:	4b54      	ldr	r3, [pc, #336]	; (8001588 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001436:	815a      	strh	r2, [r3, #10]
				i2c_slv_tx.data = ijc_detector.board_enable_state; 					// Prepare the date into the transmit
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <i2c_slv_cmd_rx_tx_handle+0x540>)
 800143a:	895a      	ldrh	r2, [r3, #10]
 800143c:	4b50      	ldr	r3, [pc, #320]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800143e:	801a      	strh	r2, [r3, #0]
				return(status);
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	e178      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001444:	4b4c      	ldr	r3, [pc, #304]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001446:	789b      	ldrb	r3, [r3, #2]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 8160 	bne.w	800170e <i2c_slv_cmd_rx_tx_handle+0x6c6>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 800144e:	4b4a      	ldr	r3, [pc, #296]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d107      	bne.n	8001466 <i2c_slv_cmd_rx_tx_handle+0x41e>
				{
					ijc_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff fd1a 	bl	8000e90 <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800145c:	4b48      	ldr	r3, [pc, #288]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800145e:	2201      	movs	r2, #1
 8001460:	801a      	strh	r2, [r3, #0]
					return(status);
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	e167      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8001466:	4b44      	ldr	r3, [pc, #272]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d107      	bne.n	800147e <i2c_slv_cmd_rx_tx_handle+0x436>
				{
					ijc_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 800146e:	2000      	movs	r0, #0
 8001470:	f7ff fd0e 	bl	8000e90 <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001474:	4b42      	ldr	r3, [pc, #264]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001476:	2201      	movs	r2, #1
 8001478:	801a      	strh	r2, [r3, #0]
					return(status);
 800147a:	7dfb      	ldrb	r3, [r7, #23]
 800147c:	e15b      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001484:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
				return(status);
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	e153      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001490:	789b      	ldrb	r3, [r3, #2]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d106      	bne.n	80014a4 <i2c_slv_cmd_rx_tx_handle+0x45c>
			{
				i2c_slv_tx.data = ijc_detector.hv_loop_enable; 						// Prepare the date into the transmit
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	b29a      	uxth	r2, r3
 800149c:	4b38      	ldr	r3, [pc, #224]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800149e:	801a      	strh	r2, [r3, #0]
				return(status);
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	e148      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80014a4:	4b34      	ldr	r3, [pc, #208]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80014a6:	789b      	ldrb	r3, [r3, #2]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f040 8132 	bne.w	8001712 <i2c_slv_cmd_rx_tx_handle+0x6ca>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 80014ae:	4b32      	ldr	r3, [pc, #200]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <i2c_slv_cmd_rx_tx_handle+0x47e>
				{
					ijc_detector.hv_loop_enable = true;								// Set the state of the flag
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <i2c_slv_cmd_rx_tx_handle+0x540>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80014bc:	4b30      	ldr	r3, [pc, #192]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80014be:	2201      	movs	r2, #1
 80014c0:	801a      	strh	r2, [r3, #0]
					return(status);
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	e137      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 80014c6:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d107      	bne.n	80014de <i2c_slv_cmd_rx_tx_handle+0x496>
				{
					ijc_detector.hv_loop_enable = false;						    // Set the state of the flag
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <i2c_slv_cmd_rx_tx_handle+0x540>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	801a      	strh	r2, [r3, #0]
					return(status);
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	e12b      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80014e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
				return(status);
 80014ea:	7dfb      	ldrb	r3, [r7, #23]
 80014ec:	e123      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80014f0:	789b      	ldrb	r3, [r3, #2]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10e      	bne.n	8001514 <i2c_slv_cmd_rx_tx_handle+0x4cc>
			{
				uint16_t dataread = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	817b      	strh	r3, [r7, #10]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80014fa:	2303      	movs	r3, #3
 80014fc:	2202      	movs	r2, #2
 80014fe:	21e0      	movs	r1, #224	; 0xe0
 8001500:	4822      	ldr	r0, [pc, #136]	; (800158c <i2c_slv_cmd_rx_tx_handle+0x544>)
 8001502:	f7ff facf 	bl	8000aa4 <max6911_read>
 8001506:	4603      	mov	r3, r0
 8001508:	817b      	strh	r3, [r7, #10]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800150c:	897b      	ldrh	r3, [r7, #10]
 800150e:	8013      	strh	r3, [r2, #0]

				return(status);
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	e110      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f040 80fc 	bne.w	8001716 <i2c_slv_cmd_rx_tx_handle+0x6ce>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001524:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
				return(status);
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	e103      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001530:	789b      	ldrb	r3, [r3, #2]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d10e      	bne.n	8001554 <i2c_slv_cmd_rx_tx_handle+0x50c>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	81bb      	strh	r3, [r7, #12]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 800153a:	2301      	movs	r3, #1
 800153c:	2200      	movs	r2, #0
 800153e:	21e0      	movs	r1, #224	; 0xe0
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <i2c_slv_cmd_rx_tx_handle+0x544>)
 8001542:	f7ff faaf 	bl	8000aa4 <max6911_read>
 8001546:	4603      	mov	r3, r0
 8001548:	81bb      	strh	r3, [r7, #12]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800154a:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800154c:	89bb      	ldrh	r3, [r7, #12]
 800154e:	8013      	strh	r3, [r2, #0]

				return(status);
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	e0f0      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001556:	789b      	ldrb	r3, [r3, #2]
 8001558:	2b00      	cmp	r3, #0
 800155a:	f040 80de 	bne.w	800171a <i2c_slv_cmd_rx_tx_handle+0x6d2>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001564:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001566:	2301      	movs	r3, #1
 8001568:	75fb      	strb	r3, [r7, #23]
				{
				    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800156a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156e:	4808      	ldr	r0, [pc, #32]	; (8001590 <i2c_slv_cmd_rx_tx_handle+0x548>)
 8001570:	f000 ffaa 	bl	80024c8 <HAL_GPIO_TogglePin>
				}
				return(status);
 8001574:	7dfb      	ldrb	r3, [r7, #23]
 8001576:	e0de      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
 8001578:	20000240 	.word	0x20000240
 800157c:	2000021c 	.word	0x2000021c
 8001580:	20000244 	.word	0x20000244
 8001584:	200000d8 	.word	0x200000d8
 8001588:	20000210 	.word	0x20000210
 800158c:	20000084 	.word	0x20000084
 8001590:	48000400 	.word	0x48000400
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001594:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d10e      	bne.n	80015ba <i2c_slv_cmd_rx_tx_handle+0x572>
			{
				uint16_t dataread = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	81fb      	strh	r3, [r7, #14]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80015a0:	2303      	movs	r3, #3
 80015a2:	2202      	movs	r2, #2
 80015a4:	21e2      	movs	r1, #226	; 0xe2
 80015a6:	4867      	ldr	r0, [pc, #412]	; (8001744 <i2c_slv_cmd_rx_tx_handle+0x6fc>)
 80015a8:	f7ff fa7c 	bl	8000aa4 <max6911_read>
 80015ac:	4603      	mov	r3, r0
 80015ae:	81fb      	strh	r3, [r7, #14]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80015b0:	4a65      	ldr	r2, [pc, #404]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 80015b2:	89fb      	ldrh	r3, [r7, #14]
 80015b4:	8013      	strh	r3, [r2, #0]

				return(status);
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	e0bd      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80015ba:	4b61      	ldr	r3, [pc, #388]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f040 80ad 	bne.w	800171e <i2c_slv_cmd_rx_tx_handle+0x6d6>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80015c4:	4b60      	ldr	r3, [pc, #384]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 80015c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ca:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	75fb      	strb	r3, [r7, #23]
				return(status);
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
 80015d2:	e0b0      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80015d4:	4b5a      	ldr	r3, [pc, #360]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 80015d6:	789b      	ldrb	r3, [r3, #2]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d10e      	bne.n	80015fa <i2c_slv_cmd_rx_tx_handle+0x5b2>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	823b      	strh	r3, [r7, #16]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 80015e0:	2301      	movs	r3, #1
 80015e2:	2200      	movs	r2, #0
 80015e4:	21e2      	movs	r1, #226	; 0xe2
 80015e6:	4857      	ldr	r0, [pc, #348]	; (8001744 <i2c_slv_cmd_rx_tx_handle+0x6fc>)
 80015e8:	f7ff fa5c 	bl	8000aa4 <max6911_read>
 80015ec:	4603      	mov	r3, r0
 80015ee:	823b      	strh	r3, [r7, #16]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80015f0:	4a55      	ldr	r2, [pc, #340]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 80015f2:	8a3b      	ldrh	r3, [r7, #16]
 80015f4:	8013      	strh	r3, [r2, #0]

				return(status);
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	e09d      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80015fa:	4b51      	ldr	r3, [pc, #324]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 80015fc:	789b      	ldrb	r3, [r3, #2]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 808f 	bne.w	8001722 <i2c_slv_cmd_rx_tx_handle+0x6da>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 8001606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800160c:	2301      	movs	r3, #1
 800160e:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	e090      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001614:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 8001616:	789b      	ldrb	r3, [r3, #2]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d10e      	bne.n	800163a <i2c_slv_cmd_rx_tx_handle+0x5f2>
			{
				uint16_t dataread = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	80fb      	strh	r3, [r7, #6]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001620:	2303      	movs	r3, #3
 8001622:	2202      	movs	r2, #2
 8001624:	21e4      	movs	r1, #228	; 0xe4
 8001626:	4847      	ldr	r0, [pc, #284]	; (8001744 <i2c_slv_cmd_rx_tx_handle+0x6fc>)
 8001628:	f7ff fa3c 	bl	8000aa4 <max6911_read>
 800162c:	4603      	mov	r3, r0
 800162e:	80fb      	strh	r3, [r7, #6]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001630:	4a45      	ldr	r2, [pc, #276]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	8013      	strh	r3, [r2, #0]

				return(status);
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	e07d      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800163a:	4b41      	ldr	r3, [pc, #260]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 800163c:	789b      	ldrb	r3, [r3, #2]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d171      	bne.n	8001726 <i2c_slv_cmd_rx_tx_handle+0x6de>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 8001644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001648:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800164a:	2301      	movs	r3, #1
 800164c:	75fb      	strb	r3, [r7, #23]
				return(status);
 800164e:	7dfb      	ldrb	r3, [r7, #23]
 8001650:	e071      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d10e      	bne.n	8001678 <i2c_slv_cmd_rx_tx_handle+0x630>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	813b      	strh	r3, [r7, #8]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 800165e:	2301      	movs	r3, #1
 8001660:	2200      	movs	r2, #0
 8001662:	21e6      	movs	r1, #230	; 0xe6
 8001664:	4837      	ldr	r0, [pc, #220]	; (8001744 <i2c_slv_cmd_rx_tx_handle+0x6fc>)
 8001666:	f7ff fa1d 	bl	8000aa4 <max6911_read>
 800166a:	4603      	mov	r3, r0
 800166c:	813b      	strh	r3, [r7, #8]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800166e:	4a36      	ldr	r2, [pc, #216]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 8001670:	893b      	ldrh	r3, [r7, #8]
 8001672:	8013      	strh	r3, [r2, #0]

				return(status);
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	e05e      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 800167a:	789b      	ldrb	r3, [r3, #2]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d154      	bne.n	800172a <i2c_slv_cmd_rx_tx_handle+0x6e2>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001680:	4b31      	ldr	r3, [pc, #196]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 8001682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001686:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001688:	2301      	movs	r3, #1
 800168a:	75fb      	strb	r3, [r7, #23]
				return(status);
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	e052      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001690:	4b2b      	ldr	r3, [pc, #172]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 8001692:	789b      	ldrb	r3, [r3, #2]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <i2c_slv_cmd_rx_tx_handle+0x65c>
			{
				i2c_slv_tx.data = ijc_detector.hv_targate_value;        // Prepare the date into the transmit
 8001698:	4b2c      	ldr	r3, [pc, #176]	; (800174c <i2c_slv_cmd_rx_tx_handle+0x704>)
 800169a:	891a      	ldrh	r2, [r3, #8]
 800169c:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 800169e:	801a      	strh	r2, [r3, #0]
				return(status);
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
 80016a2:	e048      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 80016a6:	789b      	ldrb	r3, [r3, #2]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d140      	bne.n	800172e <i2c_slv_cmd_rx_tx_handle+0x6e6>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 80016ac:	4b24      	ldr	r3, [pc, #144]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 80016ae:	785b      	ldrb	r3, [r3, #1]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d810      	bhi.n	80016d6 <i2c_slv_cmd_rx_tx_handle+0x68e>
				{
					// Read the data from the buffer
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 80016b6:	785b      	ldrb	r3, [r3, #1]
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <i2c_slv_cmd_rx_tx_handle+0x6f8>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b21b      	sxth	r3, r3
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <i2c_slv_cmd_rx_tx_handle+0x704>)
 80016ca:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	801a      	strh	r2, [r3, #0]
					return(status);
 80016d2:	7dfb      	ldrb	r3, [r7, #23]
 80016d4:	e02f      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <i2c_slv_cmd_rx_tx_handle+0x700>)
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 80016de:	2301      	movs	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
					return(status);
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	e027      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			break;
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	default:
			status =  EXIT_FAILURE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
			return(status);
 80016ea:	7dfb      	ldrb	r3, [r7, #23]
 80016ec:	e023      	b.n	8001736 <i2c_slv_cmd_rx_tx_handle+0x6ee>
			break;
 80016ee:	bf00      	nop
 80016f0:	e01e      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 80016f2:	bf00      	nop
 80016f4:	e01c      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 80016f6:	bf00      	nop
 80016f8:	e01a      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 80016fa:	bf00      	nop
 80016fc:	e018      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 80016fe:	bf00      	nop
 8001700:	e016      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 8001702:	bf00      	nop
 8001704:	e014      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 8001706:	bf00      	nop
 8001708:	e012      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 800170a:	bf00      	nop
 800170c:	e010      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 800170e:	bf00      	nop
 8001710:	e00e      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 8001712:	bf00      	nop
 8001714:	e00c      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 8001716:	bf00      	nop
 8001718:	e00a      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 800171a:	bf00      	nop
 800171c:	e008      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 800171e:	bf00      	nop
 8001720:	e006      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 8001722:	bf00      	nop
 8001724:	e004      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 8001726:	bf00      	nop
 8001728:	e002      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 800172a:	bf00      	nop
 800172c:	e000      	b.n	8001730 <i2c_slv_cmd_rx_tx_handle+0x6e8>
			break;
 800172e:	bf00      	nop
	}

    // If no command is matched - return failure
	status =  EXIT_FAILURE;
 8001730:	2301      	movs	r3, #1
 8001732:	75fb      	strb	r3, [r7, #23]
	return(status);
 8001734:	7dfb      	ldrb	r3, [r7, #23]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000240 	.word	0x20000240
 8001744:	20000084 	.word	0x20000084
 8001748:	20000244 	.word	0x20000244
 800174c:	20000210 	.word	0x20000210

08001750 <i2c_slv_init>:



void i2c_slv_init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	// Clear the Tx and Rx buffers before use
	i2c_slv_clear_buffer(&i2c_tx_buffer[0], TXBUFFERSIZE);
 8001754:	2102      	movs	r1, #2
 8001756:	4808      	ldr	r0, [pc, #32]	; (8001778 <i2c_slv_init+0x28>)
 8001758:	f000 f814 	bl	8001784 <i2c_slv_clear_buffer>
	i2c_slv_clear_buffer(&i2c_rx_buffer[0], RXBUFFERSIZE);
 800175c:	2104      	movs	r1, #4
 800175e:	4807      	ldr	r0, [pc, #28]	; (800177c <i2c_slv_init+0x2c>)
 8001760:	f000 f810 	bl	8001784 <i2c_slv_clear_buffer>

	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8001764:	4806      	ldr	r0, [pc, #24]	; (8001780 <i2c_slv_init+0x30>)
 8001766:	f001 fad7 	bl	8002d18 <HAL_I2C_EnableListen_IT>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <i2c_slv_init+0x24>
	{
		/* Transfer error in reception process */
		Error_Handler();
 8001770:	f000 f8da 	bl	8001928 <Error_Handler>
	}
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000238 	.word	0x20000238
 800177c:	2000023c 	.word	0x2000023c
 8001780:	20000030 	.word	0x20000030

08001784 <i2c_slv_clear_buffer>:


void i2c_slv_clear_buffer(uint8_t* buffer, uint8_t size)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	70fb      	strb	r3, [r7, #3]

	uint8_t idx = 0; // An index
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

	for(idx = 0; idx < size; idx++)
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e008      	b.n	80017ac <i2c_slv_clear_buffer+0x28>
	{
		// Cycle through and clear the buffer array
		*buffer = 0x00;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
		buffer++;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3301      	adds	r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
	for(idx = 0; idx < size; idx++)
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
 80017a8:	3301      	adds	r3, #1
 80017aa:	73fb      	strb	r3, [r7, #15]
 80017ac:	7bfa      	ldrb	r2, [r7, #15]
 80017ae:	78fb      	ldrb	r3, [r7, #3]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d3f2      	bcc.n	800179a <i2c_slv_clear_buffer+0x16>
	}

}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	Xfer_Complete = 1;        // Set flag for RX completion
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	2000002c 	.word	0x2000002c

080017e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	// Handle the I2C receive callback complete
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	061a      	lsls	r2, r3, #24
					| (i2c_rx_buffer[1] << 16)
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80017f4:	785b      	ldrb	r3, [r3, #1]
 80017f6:	041b      	lsls	r3, r3, #16
 80017f8:	431a      	orrs	r2, r3
					| (i2c_rx_buffer[2] << 8)
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80017fc:	789b      	ldrb	r3, [r3, #2]
 80017fe:	021b      	lsls	r3, r3, #8
 8001800:	4313      	orrs	r3, r2
					| (i2c_rx_buffer[3]);
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8001804:	78d2      	ldrb	r2, [r2, #3]
 8001806:	4313      	orrs	r3, r2
 8001808:	461a      	mov	r2, r3
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800180c:	601a      	str	r2, [r3, #0]

	// Load the init/fail value into the tx buffer
	i2c_slv_tx.data = CMD_FAIL_OP_INPROG_RESP;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8001810:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001814:	801a      	strh	r2, [r3, #0]

	Xfer_Complete = 1;                           // Set flag for RX completion
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	2000023c 	.word	0x2000023c
 800182c:	20000240 	.word	0x20000240
 8001830:	20000244 	.word	0x20000244
 8001834:	2000002c 	.word	0x2000002c

08001838 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	70fb      	strb	r3, [r7, #3]
 8001844:	4613      	mov	r3, r2
 8001846:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	4a15      	ldr	r2, [pc, #84]	; (80018a0 <HAL_I2C_AddrCallback+0x68>)
 800184c:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_I2C_AddrCallback+0x68>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d014      	beq.n	8001880 <HAL_I2C_AddrCallback+0x48>
	/*##- Start the transmission process #####################################*/
	/* While the I2C in reception process, user can transmit data through
	"i2c_tx_buffer" buffer */

	// Update the TX buffer
	i2c_tx_buffer[0] = i2c_slv_tx.bytes.byte_1;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_I2C_AddrCallback+0x6c>)
 8001858:	785a      	ldrb	r2, [r3, #1]
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <HAL_I2C_AddrCallback+0x70>)
 800185c:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_slv_tx.bytes.byte_2;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <HAL_I2C_AddrCallback+0x6c>)
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_I2C_AddrCallback+0x70>)
 8001864:	705a      	strb	r2, [r3, #1]
	//copy_array(&i2c_slv_tx.bytes.byte_1, i2c_tx_buffer[0], TXBUFFERSIZE);

	if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)i2c_tx_buffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8001866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800186a:	2202      	movs	r2, #2
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <HAL_I2C_AddrCallback+0x70>)
 800186e:	480f      	ldr	r0, [pc, #60]	; (80018ac <HAL_I2C_AddrCallback+0x74>)
 8001870:	f001 f8ee 	bl	8002a50 <HAL_I2C_Slave_Seq_Transmit_IT>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00e      	beq.n	8001898 <HAL_I2C_AddrCallback+0x60>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 800187a:	f000 f855 	bl	8001928 <Error_Handler>
		Error_Handler();
	}

  }

}
 800187e:	e00b      	b.n	8001898 <HAL_I2C_AddrCallback+0x60>
	if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)i2c_rx_buffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8001880:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001884:	2204      	movs	r2, #4
 8001886:	490a      	ldr	r1, [pc, #40]	; (80018b0 <HAL_I2C_AddrCallback+0x78>)
 8001888:	4808      	ldr	r0, [pc, #32]	; (80018ac <HAL_I2C_AddrCallback+0x74>)
 800188a:	f001 f993 	bl	8002bb4 <HAL_I2C_Slave_Seq_Receive_IT>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_I2C_AddrCallback+0x60>
		Error_Handler();
 8001894:	f000 f848 	bl	8001928 <Error_Handler>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000028 	.word	0x20000028
 80018a4:	20000244 	.word	0x20000244
 80018a8:	20000238 	.word	0x20000238
 80018ac:	20000030 	.word	0x20000030
 80018b0:	2000023c 	.word	0x2000023c

080018b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	//HAL_I2C_EnableListen_IT(&hi2c1);
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f001 fae8 	bl	8002ea6 <HAL_I2C_GetError>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b04      	cmp	r3, #4
 80018da:	d001      	beq.n	80018e0 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 80018dc:	f000 f824 	bl	8001928 <Error_Handler>
  }
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	counter ++;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018fa:	701a      	strb	r2, [r3, #0]

	// Set the flags responsable for running through the DSSD loop
	ijc_detector.ramp_flag = true;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
	cea_detector.ramp_flag = true;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001908:	2140      	movs	r1, #64	; 0x40
 800190a:	4806      	ldr	r0, [pc, #24]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800190c:	f000 fddc 	bl	80024c8 <HAL_GPIO_TogglePin>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000246 	.word	0x20000246
 800191c:	20000210 	.word	0x20000210
 8001920:	2000021c 	.word	0x2000021c
 8001924:	48000800 	.word	0x48000800

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_MspInit+0x44>)
 800193c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193e:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <HAL_MspInit+0x44>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6613      	str	r3, [r2, #96]	; 0x60
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <HAL_MspInit+0x44>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_MspInit+0x44>)
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_MspInit+0x44>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6593      	str	r3, [r2, #88]	; 0x58
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_MspInit+0x44>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b0a6      	sub	sp, #152	; 0x98
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001998:	2260      	movs	r2, #96	; 0x60
 800199a:	2100      	movs	r1, #0
 800199c:	4618      	mov	r0, r3
 800199e:	f005 f9b0 	bl	8006d02 <memset>
  if(hi2c->Instance==I2C1)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6c      	ldr	r2, [pc, #432]	; (8001b58 <HAL_I2C_MspInit+0x1dc>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d14d      	bne.n	8001a48 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019ac:	2340      	movs	r3, #64	; 0x40
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019b0:	2300      	movs	r3, #0
 80019b2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fd87 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019c4:	f7ff ffb0 	bl	8001928 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b64      	ldr	r3, [pc, #400]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4a63      	ldr	r2, [pc, #396]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d4:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	623b      	str	r3, [r7, #32]
 80019de:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e8:	2312      	movs	r3, #18
 80019ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019fa:	2304      	movs	r3, #4
 80019fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f000 fbb3 	bl	8002174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a0e:	4b53      	ldr	r3, [pc, #332]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a18:	6593      	str	r3, [r2, #88]	; 0x58
 8001a1a:	4b50      	ldr	r3, [pc, #320]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	201f      	movs	r0, #31
 8001a2c:	f000 fb1d 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a30:	201f      	movs	r0, #31
 8001a32:	f000 fb36 	bl	80020a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2020      	movs	r0, #32
 8001a3c:	f000 fb15 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a40:	2020      	movs	r0, #32
 8001a42:	f000 fb2e 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001a46:	e082      	b.n	8001b4e <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a44      	ldr	r2, [pc, #272]	; (8001b60 <HAL_I2C_MspInit+0x1e4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d13c      	bne.n	8001acc <HAL_I2C_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f003 fd34 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8001a6a:	f7ff ff5d 	bl	8001928 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a7a:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8e:	2312      	movs	r3, #18
 8001a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001aaa:	4619      	mov	r1, r3
 8001aac:	482d      	ldr	r0, [pc, #180]	; (8001b64 <HAL_I2C_MspInit+0x1e8>)
 8001aae:	f000 fb61 	bl	8002174 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	4a29      	ldr	r2, [pc, #164]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001abc:	6593      	str	r3, [r2, #88]	; 0x58
 8001abe:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
}
 8001aca:	e040      	b.n	8001b4e <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C3)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <HAL_I2C_MspInit+0x1ec>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d13b      	bne.n	8001b4e <HAL_I2C_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fcf1 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_MspInit+0x178>
      Error_Handler();
 8001af0:	f7ff ff1a 	bl	8001928 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af8:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001afa:	f043 0304 	orr.w	r3, r3, #4
 8001afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b12:	2312      	movs	r3, #18
 8001b14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b24:	2304      	movs	r3, #4
 8001b26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480e      	ldr	r0, [pc, #56]	; (8001b6c <HAL_I2C_MspInit+0x1f0>)
 8001b32:	f000 fb1f 	bl	8002174 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_I2C_MspInit+0x1e0>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	bf00      	nop
 8001b50:	3798      	adds	r7, #152	; 0x98
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40005800 	.word	0x40005800
 8001b64:	48000400 	.word	0x48000400
 8001b68:	40005c00 	.word	0x40005c00
 8001b6c:	48000800 	.word	0x48000800

08001b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b80:	d113      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_TIM_Base_MspInit+0x44>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_TIM_Base_MspInit+0x44>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_TIM_Base_MspInit+0x44>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	201c      	movs	r0, #28
 8001ba0:	f000 fa63 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ba4:	201c      	movs	r0, #28
 8001ba6:	f000 fa7c 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0a2      	sub	sp, #136	; 0x88
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2260      	movs	r2, #96	; 0x60
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f005 f892 	bl	8006d02 <memset>
  if(huart->Instance==USART2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <HAL_UART_MspInit+0xac>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d138      	bne.n	8001c5a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 fc69 	bl	80054cc <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c00:	f7ff fe92 	bl	8001928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_UART_MspInit+0xb0>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_UART_MspInit+0xb0>)
 8001c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_UART_MspInit+0xb0>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_UART_MspInit+0xb0>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <HAL_UART_MspInit+0xb0>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_UART_MspInit+0xb0>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c34:	230c      	movs	r3, #12
 8001c36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c46:	2307      	movs	r3, #7
 8001c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c56:	f000 fa8d 	bl	8002174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3788      	adds	r7, #136	; 0x88
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40004400 	.word	0x40004400
 8001c68:	40021000 	.word	0x40021000

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <NMI_Handler+0x4>

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <HardFault_Handler+0x4>

08001c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <MemManage_Handler+0x4>

08001c7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c82:	e7fe      	b.n	8001c82 <BusFault_Handler+0x4>

08001c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c88:	e7fe      	b.n	8001c88 <UsageFault_Handler+0x4>

08001c8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb8:	f000 f8b8 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM2_IRQHandler+0x10>)
 8001cc6:	f003 ffe9 	bl	8005c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2000012c 	.word	0x2000012c

08001cd4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <I2C1_EV_IRQHandler+0x10>)
 8001cda:	f001 f83d 	bl	8002d58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000030 	.word	0x20000030

08001ce8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001cec:	4802      	ldr	r0, [pc, #8]	; (8001cf8 <I2C1_ER_IRQHandler+0x10>)
 8001cee:	f001 f84d 	bl	8002d8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000030 	.word	0x20000030

08001cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <SystemInit+0x20>)
 8001d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d06:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <SystemInit+0x20>)
 8001d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d24:	f7ff ffea 	bl	8001cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d2a:	490d      	ldr	r1, [pc, #52]	; (8001d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <LoopForever+0xe>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d40:	4c0a      	ldr	r4, [pc, #40]	; (8001d6c <LoopForever+0x16>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f004 ffe1 	bl	8006d14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d52:	f7fe fbb9 	bl	80004c8 <main>

08001d56 <LoopForever>:

LoopForever:
    b LoopForever
 8001d56:	e7fe      	b.n	8001d56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d64:	08006dcc 	.word	0x08006dcc
  ldr r2, =_sbss
 8001d68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d6c:	2000024c 	.word	0x2000024c

08001d70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC1_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <HAL_Init+0x3c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <HAL_Init+0x3c>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8a:	2003      	movs	r0, #3
 8001d8c:	f000 f962 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d90:	2000      	movs	r0, #0
 8001d92:	f000 f80f 	bl	8001db4 <HAL_InitTick>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	71fb      	strb	r3, [r7, #7]
 8001da0:	e001      	b.n	8001da6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001da2:	f7ff fdc7 	bl	8001934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001da6:	79fb      	ldrb	r3, [r7, #7]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40022000 	.word	0x40022000

08001db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <HAL_InitTick+0x6c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d023      	beq.n	8001e10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <HAL_InitTick+0x70>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_InitTick+0x6c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f96d 	bl	80020be <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10f      	bne.n	8001e0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d809      	bhi.n	8001e04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001df8:	f000 f937 	bl	800206a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <HAL_InitTick+0x74>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e007      	b.n	8001e14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	e004      	b.n	8001e14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	e001      	b.n	8001e14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000008 	.word	0x20000008
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000248 	.word	0x20000248

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000248 	.word	0x20000248

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff ffee 	bl	8001e54 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e84:	d005      	beq.n	8001e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_Delay+0x44>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e92:	bf00      	nop
 8001e94:	f7ff ffde 	bl	8001e54 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d8f7      	bhi.n	8001e94 <HAL_Delay+0x28>
  {
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee6:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	60d3      	str	r3, [r2, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	db0b      	blt.n	8001f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f003 021f 	and.w	r2, r3, #31
 8001f30:	4907      	ldr	r1, [pc, #28]	; (8001f50 <__NVIC_EnableIRQ+0x38>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	095b      	lsrs	r3, r3, #5
 8001f38:	2001      	movs	r0, #1
 8001f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100

08001f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	6039      	str	r1, [r7, #0]
 8001f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	db0a      	blt.n	8001f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <__NVIC_SetPriority+0x4c>)
 8001f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f72:	0112      	lsls	r2, r2, #4
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	440b      	add	r3, r1
 8001f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f7c:	e00a      	b.n	8001f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	b2da      	uxtb	r2, r3
 8001f82:	4908      	ldr	r1, [pc, #32]	; (8001fa4 <__NVIC_SetPriority+0x50>)
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	3b04      	subs	r3, #4
 8001f8c:	0112      	lsls	r2, r2, #4
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	440b      	add	r3, r1
 8001f92:	761a      	strb	r2, [r3, #24]
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000e100 	.word	0xe000e100
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b089      	sub	sp, #36	; 0x24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f1c3 0307 	rsb	r3, r3, #7
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	bf28      	it	cs
 8001fc6:	2304      	movcs	r3, #4
 8001fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	2b06      	cmp	r3, #6
 8001fd0:	d902      	bls.n	8001fd8 <NVIC_EncodePriority+0x30>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3b03      	subs	r3, #3
 8001fd6:	e000      	b.n	8001fda <NVIC_EncodePriority+0x32>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	401a      	ands	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffa:	43d9      	mvns	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	4313      	orrs	r3, r2
         );
}
 8002002:	4618      	mov	r0, r3
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002034:	f7ff ff8e 	bl	8001f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff29 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff3e 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff8e 	bl	8001fa8 <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5d 	bl	8001f54 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff31 	bl	8001f18 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa2 	bl	8002010 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d005      	beq.n	80020fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2204      	movs	r2, #4
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e029      	b.n	800214e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 020e 	bic.w	r2, r2, #14
 8002108:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 0201 	bic.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f003 021c 	and.w	r2, r3, #28
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
    }
  }
  return status;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002166:	b2db      	uxtb	r3, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002182:	e154      	b.n	800242e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	4013      	ands	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8146 	beq.w	8002428 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d005      	beq.n	80021b4 <HAL_GPIO_Init+0x40>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d130      	bne.n	8002216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	693a      	ldr	r2, [r7, #16]
 80021e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ea:	2201      	movs	r2, #1
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0201 	and.w	r2, r3, #1
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b03      	cmp	r3, #3
 8002220:	d017      	beq.n	8002252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d123      	bne.n	80022a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0203 	and.w	r2, r3, #3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 80a0 	beq.w	8002428 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e8:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_GPIO_Init+0x2d8>)
 80022ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ec:	4a57      	ldr	r2, [pc, #348]	; (800244c <HAL_GPIO_Init+0x2d8>)
 80022ee:	f043 0301 	orr.w	r3, r3, #1
 80022f2:	6613      	str	r3, [r2, #96]	; 0x60
 80022f4:	4b55      	ldr	r3, [pc, #340]	; (800244c <HAL_GPIO_Init+0x2d8>)
 80022f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002300:	4a53      	ldr	r2, [pc, #332]	; (8002450 <HAL_GPIO_Init+0x2dc>)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0303 	and.w	r3, r3, #3
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	220f      	movs	r2, #15
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800232a:	d019      	beq.n	8002360 <HAL_GPIO_Init+0x1ec>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a49      	ldr	r2, [pc, #292]	; (8002454 <HAL_GPIO_Init+0x2e0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d013      	beq.n	800235c <HAL_GPIO_Init+0x1e8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a48      	ldr	r2, [pc, #288]	; (8002458 <HAL_GPIO_Init+0x2e4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00d      	beq.n	8002358 <HAL_GPIO_Init+0x1e4>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a47      	ldr	r2, [pc, #284]	; (800245c <HAL_GPIO_Init+0x2e8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_Init+0x1e0>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a46      	ldr	r2, [pc, #280]	; (8002460 <HAL_GPIO_Init+0x2ec>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_GPIO_Init+0x1dc>
 800234c:	2304      	movs	r3, #4
 800234e:	e008      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002350:	2307      	movs	r3, #7
 8002352:	e006      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002354:	2303      	movs	r3, #3
 8002356:	e004      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002358:	2302      	movs	r3, #2
 800235a:	e002      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 800235c:	2301      	movs	r3, #1
 800235e:	e000      	b.n	8002362 <HAL_GPIO_Init+0x1ee>
 8002360:	2300      	movs	r3, #0
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	f002 0203 	and.w	r2, r2, #3
 8002368:	0092      	lsls	r2, r2, #2
 800236a:	4093      	lsls	r3, r2
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002372:	4937      	ldr	r1, [pc, #220]	; (8002450 <HAL_GPIO_Init+0x2dc>)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002380:	4b38      	ldr	r3, [pc, #224]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023a4:	4a2f      	ldr	r2, [pc, #188]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023ce:	4a25      	ldr	r2, [pc, #148]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <HAL_GPIO_Init+0x2f0>)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	f47f aea3 	bne.w	8002184 <HAL_GPIO_Init+0x10>
  }
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000
 8002454:	48000400 	.word	0x48000400
 8002458:	48000800 	.word	0x48000800
 800245c:	48000c00 	.word	0x48000c00
 8002460:	48001000 	.word	0x48001000
 8002464:	40010400 	.word	0x40010400

08002468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e001      	b.n	800248a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4013      	ands	r3, r2
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43d9      	mvns	r1, r3
 80024e6:	887b      	ldrh	r3, [r7, #2]
 80024e8:	400b      	ands	r3, r1
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e08d      	b.n	800262a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fa2a 	bl	800197c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2224      	movs	r2, #36	; 0x24
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800254c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800255c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e006      	b.n	8002584 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002582:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d108      	bne.n	800259e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800259a:	605a      	str	r2, [r3, #4]
 800259c:	e007      	b.n	80025ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69d9      	ldr	r1, [r3, #28]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a1a      	ldr	r2, [r3, #32]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2220      	movs	r2, #32
 8002616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	461a      	mov	r2, r3
 8002640:	460b      	mov	r3, r1
 8002642:	817b      	strh	r3, [r7, #10]
 8002644:	4613      	mov	r3, r2
 8002646:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b20      	cmp	r3, #32
 8002652:	f040 80fd 	bne.w	8002850 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_I2C_Master_Transmit+0x30>
 8002660:	2302      	movs	r3, #2
 8002662:	e0f6      	b.n	8002852 <HAL_I2C_Master_Transmit+0x21e>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800266c:	f7ff fbf2 	bl	8001e54 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2319      	movs	r3, #25
 8002678:	2201      	movs	r2, #1
 800267a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f001 fca1 	bl	8003fc6 <I2C_WaitOnFlagUntilTimeout>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e0e1      	b.n	8002852 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2221      	movs	r2, #33	; 0x21
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2210      	movs	r2, #16
 800269a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	893a      	ldrh	r2, [r7, #8]
 80026ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2bff      	cmp	r3, #255	; 0xff
 80026be:	d906      	bls.n	80026ce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	22ff      	movs	r2, #255	; 0xff
 80026c4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80026c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	e007      	b.n	80026de <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80026d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d024      	beq.n	8002730 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	4b4e      	ldr	r3, [pc, #312]	; (800285c <HAL_I2C_Master_Transmit+0x228>)
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f001 fe87 	bl	800443c <I2C_TransferConfig>
 800272e:	e066      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	b2da      	uxtb	r2, r3
 8002736:	8979      	ldrh	r1, [r7, #10]
 8002738:	4b48      	ldr	r3, [pc, #288]	; (800285c <HAL_I2C_Master_Transmit+0x228>)
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f001 fe7c 	bl	800443c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002744:	e05b      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	6a39      	ldr	r1, [r7, #32]
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f001 fc8a 	bl	8004064 <I2C_WaitOnTXISFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07b      	b.n	8002852 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d034      	beq.n	80027fe <HAL_I2C_Master_Transmit+0x1ca>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	2b00      	cmp	r3, #0
 800279a:	d130      	bne.n	80027fe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	2200      	movs	r2, #0
 80027a4:	2180      	movs	r1, #128	; 0x80
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f001 fc0d 	bl	8003fc6 <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e04d      	b.n	8002852 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2bff      	cmp	r3, #255	; 0xff
 80027be:	d90e      	bls.n	80027de <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	22ff      	movs	r2, #255	; 0xff
 80027c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	8979      	ldrh	r1, [r7, #10]
 80027ce:	2300      	movs	r3, #0
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f001 fe30 	bl	800443c <I2C_TransferConfig>
 80027dc:	e00f      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	8979      	ldrh	r1, [r7, #10]
 80027f0:	2300      	movs	r3, #0
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f001 fe1f 	bl	800443c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d19e      	bne.n	8002746 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	6a39      	ldr	r1, [r7, #32]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f001 fc70 	bl	80040f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e01a      	b.n	8002852 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2220      	movs	r2, #32
 8002822:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b0c      	ldr	r3, [pc, #48]	; (8002860 <HAL_I2C_Master_Transmit+0x22c>)
 8002830:	400b      	ands	r3, r1
 8002832:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e000      	b.n	8002852 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
  }
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	80002000 	.word	0x80002000
 8002860:	fe00e800 	.word	0xfe00e800

08002864 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	607a      	str	r2, [r7, #4]
 800286e:	461a      	mov	r2, r3
 8002870:	460b      	mov	r3, r1
 8002872:	817b      	strh	r3, [r7, #10]
 8002874:	4613      	mov	r3, r2
 8002876:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b20      	cmp	r3, #32
 8002882:	f040 80db 	bne.w	8002a3c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_I2C_Master_Receive+0x30>
 8002890:	2302      	movs	r3, #2
 8002892:	e0d4      	b.n	8002a3e <HAL_I2C_Master_Receive+0x1da>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800289c:	f7ff fada 	bl	8001e54 <HAL_GetTick>
 80028a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2319      	movs	r3, #25
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f001 fb89 	bl	8003fc6 <I2C_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e0bf      	b.n	8002a3e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2222      	movs	r2, #34	; 0x22
 80028c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2210      	movs	r2, #16
 80028ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	893a      	ldrh	r2, [r7, #8]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2bff      	cmp	r3, #255	; 0xff
 80028ee:	d90e      	bls.n	800290e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	22ff      	movs	r2, #255	; 0xff
 80028f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	8979      	ldrh	r1, [r7, #10]
 80028fe:	4b52      	ldr	r3, [pc, #328]	; (8002a48 <HAL_I2C_Master_Receive+0x1e4>)
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f001 fd98 	bl	800443c <I2C_TransferConfig>
 800290c:	e06d      	b.n	80029ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	b2da      	uxtb	r2, r3
 800291e:	8979      	ldrh	r1, [r7, #10]
 8002920:	4b49      	ldr	r3, [pc, #292]	; (8002a48 <HAL_I2C_Master_Receive+0x1e4>)
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f001 fd87 	bl	800443c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800292e:	e05c      	b.n	80029ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	6a39      	ldr	r1, [r7, #32]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f001 fc1f 	bl	8004178 <I2C_WaitOnRXNEFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e07c      	b.n	8002a3e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d034      	beq.n	80029ea <HAL_I2C_Master_Receive+0x186>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	2b00      	cmp	r3, #0
 8002986:	d130      	bne.n	80029ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	2200      	movs	r2, #0
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f001 fb17 	bl	8003fc6 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e04d      	b.n	8002a3e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2bff      	cmp	r3, #255	; 0xff
 80029aa:	d90e      	bls.n	80029ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	22ff      	movs	r2, #255	; 0xff
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	8979      	ldrh	r1, [r7, #10]
 80029ba:	2300      	movs	r3, #0
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f001 fd3a 	bl	800443c <I2C_TransferConfig>
 80029c8:	e00f      	b.n	80029ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	8979      	ldrh	r1, [r7, #10]
 80029dc:	2300      	movs	r3, #0
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f001 fd29 	bl	800443c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d19d      	bne.n	8002930 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	6a39      	ldr	r1, [r7, #32]
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f001 fb7a 	bl	80040f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e01a      	b.n	8002a3e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6859      	ldr	r1, [r3, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_I2C_Master_Receive+0x1e8>)
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	80002400 	.word	0x80002400
 8002a4c:	fe00e800 	.word	0xfe00e800

08002a50 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a6c:	2b28      	cmp	r3, #40	; 0x28
 8002a6e:	f040 8098 	bne.w	8002ba2 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e08c      	b.n	8002ba4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002a8a:	f248 0101 	movw	r1, #32769	; 0x8001
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f001 fd8a 	bl	80045a8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e080      	b.n	8002ba4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab4:	d12a      	bne.n	8002b0c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f001 fd75 	bl	80045a8 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002acc:	d11e      	bne.n	8002b0c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002adc:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d012      	beq.n	8002b0c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	4a30      	ldr	r2, [pc, #192]	; (8002bac <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff faef 	bl	80020d6 <HAL_DMA_Abort_IT>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d006      	beq.n	8002b0c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2229      	movs	r2, #41	; 0x29
 8002b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b30:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a17      	ldr	r2, [pc, #92]	; (8002bb0 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	bf0c      	ite	eq
 8002b62:	2301      	moveq	r3, #1
 8002b64:	2300      	movne	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d106      	bne.n	8002b8c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002b94:	f248 0101 	movw	r1, #32769	; 0x8001
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f001 fc81 	bl	80044a0 <I2C_Enable_IRQ>

    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
  }
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	08003f8b 	.word	0x08003f8b
 8002bb0:	08002ebf 	.word	0x08002ebf

08002bb4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bd0:	2b28      	cmp	r3, #40	; 0x28
 8002bd2:	f040 8098 	bne.w	8002d06 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e08c      	b.n	8002d08 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002bee:	f248 0102 	movw	r1, #32770	; 0x8002
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f001 fcd8 	bl	80045a8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e080      	b.n	8002d08 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b29      	cmp	r3, #41	; 0x29
 8002c18:	d12a      	bne.n	8002c70 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f001 fcc3 	bl	80045a8 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c30:	d11e      	bne.n	8002c70 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c40:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	4a30      	ldr	r2, [pc, #192]	; (8002d10 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8002c50:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fa3d 	bl	80020d6 <HAL_DMA_Abort_IT>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	222a      	movs	r2, #42	; 0x2a
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c94:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	bf0c      	ite	eq
 8002cc6:	2301      	moveq	r3, #1
 8002cc8:	2300      	movne	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	0c1b      	lsrs	r3, r3, #16
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2208      	movs	r2, #8
 8002cee:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002cf8:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f001 fbcf 	bl	80044a0 <I2C_Enable_IRQ>

    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	08003f8b 	.word	0x08003f8b
 8002d14:	08002ebf 	.word	0x08002ebf

08002d18 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d10d      	bne.n	8002d48 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2228      	movs	r2, #40	; 0x28
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <HAL_I2C_EnableListen_IT+0x3c>)
 8002d38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f001 fbae 	bl	80044a0 <I2C_Enable_IRQ>

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	08002ebf 	.word	0x08002ebf

08002d58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
  }
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00f      	beq.n	8002dce <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dcc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00f      	beq.n	8002df8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de6:	f043 0208 	orr.w	r2, r3, #8
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00f      	beq.n	8002e22 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f043 0202 	orr.w	r2, r3, #2
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e20:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f003 030b 	and.w	r3, r3, #11
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 ff6d 	bl	8003d14 <I2C_ITError>
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <I2C_Slave_ISR_IT+0x24>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0e1      	b.n	80030a6 <I2C_Slave_ISR_IT+0x1e8>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002efe:	6939      	ldr	r1, [r7, #16]
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 fda1 	bl	8003a48 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d04b      	beq.n	8002fa8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d046      	beq.n	8002fa8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d128      	bne.n	8002f76 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b28      	cmp	r3, #40	; 0x28
 8002f2e:	d108      	bne.n	8002f42 <I2C_Slave_ISR_IT+0x84>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f36:	d104      	bne.n	8002f42 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f38:	6939      	ldr	r1, [r7, #16]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fe96 	bl	8003c6c <I2C_ITListenCplt>
 8002f40:	e031      	b.n	8002fa6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b29      	cmp	r3, #41	; 0x29
 8002f4c:	d10e      	bne.n	8002f6c <I2C_Slave_ISR_IT+0xae>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f54:	d00a      	beq.n	8002f6c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 ffef 	bl	8003f42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fc4a 	bl	80037fe <I2C_ITSlaveSeqCplt>
 8002f6a:	e01c      	b.n	8002fa6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f74:	e08f      	b.n	8003096 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2210      	movs	r2, #16
 8002f7c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f043 0204 	orr.w	r2, r3, #4
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <I2C_Slave_ISR_IT+0xda>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f96:	d17e      	bne.n	8003096 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 feb8 	bl	8003d14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002fa4:	e077      	b.n	8003096 <I2C_Slave_ISR_IT+0x1d8>
 8002fa6:	e076      	b.n	8003096 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d02f      	beq.n	8003012 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02a      	beq.n	8003012 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d018      	beq.n	8002ff8 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d14b      	bne.n	800309a <I2C_Slave_ISR_IT+0x1dc>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003008:	d047      	beq.n	800309a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fbf7 	bl	80037fe <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003010:	e043      	b.n	800309a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003022:	2b00      	cmp	r3, #0
 8003024:	d004      	beq.n	8003030 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003026:	6939      	ldr	r1, [r7, #16]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fb27 	bl	800367c <I2C_ITAddrCplt>
 800302e:	e035      	b.n	800309c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d030      	beq.n	800309c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02b      	beq.n	800309c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d018      	beq.n	8003080 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003068:	b29b      	uxth	r3, r3
 800306a:	3b01      	subs	r3, #1
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	851a      	strh	r2, [r3, #40]	; 0x28
 800307e:	e00d      	b.n	800309c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003086:	d002      	beq.n	800308e <I2C_Slave_ISR_IT+0x1d0>
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 fbb5 	bl	80037fe <I2C_ITSlaveSeqCplt>
 8003094:	e002      	b.n	800309c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800309a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b088      	sub	sp, #32
 80030b2:	af02      	add	r7, sp, #8
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <I2C_Master_ISR_DMA+0x1a>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0d9      	b.n	800327c <I2C_Master_ISR_DMA+0x1ce>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d011      	beq.n	8003108 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2210      	movs	r2, #16
 80030ea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f0:	f043 0204 	orr.w	r2, r3, #4
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80030f8:	2120      	movs	r1, #32
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f001 f9d0 	bl	80044a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 ff1e 	bl	8003f42 <I2C_Flush_TXDR>
 8003106:	e0b4      	b.n	8003272 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800310e:	2b00      	cmp	r3, #0
 8003110:	d071      	beq.n	80031f6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003118:	2b00      	cmp	r3, #0
 800311a:	d06c      	beq.n	80031f6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800312a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d04e      	beq.n	80031d4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003142:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2bff      	cmp	r3, #255	; 0xff
 800314c:	d906      	bls.n	800315c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	22ff      	movs	r2, #255	; 0xff
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e010      	b.n	800317e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800316e:	d003      	beq.n	8003178 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e002      	b.n	800317e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003182:	b2da      	uxtb	r2, r3
 8003184:	8a79      	ldrh	r1, [r7, #18]
 8003186:	2300      	movs	r3, #0
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f001 f955 	bl	800443c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b22      	cmp	r3, #34	; 0x22
 80031ae:	d108      	bne.n	80031c2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031be:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80031c0:	e057      	b.n	8003272 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80031d2:	e04e      	b.n	8003272 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031e2:	d003      	beq.n	80031ec <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 facd 	bl	8003784 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80031ea:	e042      	b.n	8003272 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80031ec:	2140      	movs	r1, #64	; 0x40
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fd90 	bl	8003d14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80031f4:	e03d      	b.n	8003272 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d028      	beq.n	8003252 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003206:	2b00      	cmp	r3, #0
 8003208:	d023      	beq.n	8003252 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d119      	bne.n	8003248 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003222:	d025      	beq.n	8003270 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800322c:	d108      	bne.n	8003240 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800323c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800323e:	e017      	b.n	8003270 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fa9f 	bl	8003784 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003246:	e013      	b.n	8003270 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003248:	2140      	movs	r1, #64	; 0x40
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fd62 	bl	8003d14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003250:	e00e      	b.n	8003270 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f003 0320 	and.w	r3, r3, #32
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fb25 	bl	80038b8 <I2C_ITMasterCplt>
 800326e:	e000      	b.n	8003272 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003270:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003290:	4b8d      	ldr	r3, [pc, #564]	; (80034c8 <I2C_Mem_ISR_DMA+0x244>)
 8003292:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329a:	2b01      	cmp	r3, #1
 800329c:	d101      	bne.n	80032a2 <I2C_Mem_ISR_DMA+0x1e>
 800329e:	2302      	movs	r3, #2
 80032a0:	e10e      	b.n	80034c0 <I2C_Mem_ISR_DMA+0x23c>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d016      	beq.n	80032e2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d011      	beq.n	80032e2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2210      	movs	r2, #16
 80032c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f043 0204 	orr.w	r2, r3, #4
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80032d2:	2120      	movs	r1, #32
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f001 f8e3 	bl	80044a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fe31 	bl	8003f42 <I2C_Flush_TXDR>
 80032e0:	e0e9      	b.n	80034b6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00e      	beq.n	800330a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003306:	651a      	str	r2, [r3, #80]	; 0x50
 8003308:	e0d5      	b.n	80034b6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003310:	2b00      	cmp	r3, #0
 8003312:	d05f      	beq.n	80033d4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800331a:	2b00      	cmp	r3, #0
 800331c:	d05a      	beq.n	80033d4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800331e:	2101      	movs	r1, #1
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f001 f941 	bl	80045a8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003326:	2110      	movs	r1, #16
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f001 f8b9 	bl	80044a0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d048      	beq.n	80033ca <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2bff      	cmp	r3, #255	; 0xff
 8003340:	d910      	bls.n	8003364 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334c:	b299      	uxth	r1, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	b2da      	uxtb	r2, r3
 8003354:	2300      	movs	r3, #0
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f001 f86d 	bl	800443c <I2C_TransferConfig>
 8003362:	e011      	b.n	8003388 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	b299      	uxth	r1, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	b2da      	uxtb	r2, r3
 800337a:	2300      	movs	r3, #0
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f001 f85a 	bl	800443c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b22      	cmp	r3, #34	; 0x22
 80033a4:	d108      	bne.n	80033b8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80033b6:	e07e      	b.n	80034b6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80033c8:	e075      	b.n	80034b6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80033ca:	2140      	movs	r1, #64	; 0x40
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fca1 	bl	8003d14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80033d2:	e070      	b.n	80034b6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d05d      	beq.n	800349a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d058      	beq.n	800349a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033e8:	2101      	movs	r1, #1
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f001 f8dc 	bl	80045a8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80033f0:	2110      	movs	r1, #16
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f001 f854 	bl	80044a0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b22      	cmp	r3, #34	; 0x22
 8003402:	d101      	bne.n	8003408 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <I2C_Mem_ISR_DMA+0x248>)
 8003406:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800340c:	b29b      	uxth	r3, r3
 800340e:	2bff      	cmp	r3, #255	; 0xff
 8003410:	d910      	bls.n	8003434 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	22ff      	movs	r2, #255	; 0xff
 8003416:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341c:	b299      	uxth	r1, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	b2da      	uxtb	r2, r3
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f001 f805 	bl	800443c <I2C_TransferConfig>
 8003432:	e011      	b.n	8003458 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	b299      	uxth	r1, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	b2da      	uxtb	r2, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fff2 	bl	800443c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b22      	cmp	r3, #34	; 0x22
 8003474:	d108      	bne.n	8003488 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003484:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003486:	e016      	b.n	80034b6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003496:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003498:	e00d      	b.n	80034b6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fa01 	bl	80038b8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	80002000 	.word	0x80002000
 80034cc:	80002400 	.word	0x80002400

080034d0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d101      	bne.n	80034f4 <I2C_Slave_ISR_DMA+0x24>
 80034f0:	2302      	movs	r3, #2
 80034f2:	e0bf      	b.n	8003674 <I2C_Slave_ISR_DMA+0x1a4>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fa98 	bl	8003a48 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8095 	beq.w	800364e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 808f 	beq.w	800364e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003540:	2b00      	cmp	r3, #0
 8003542:	d07d      	beq.n	8003640 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00c      	beq.n	8003566 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d007      	beq.n	8003566 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8003562:	2301      	movs	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8003584:	2301      	movs	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d128      	bne.n	80035e0 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b28      	cmp	r3, #40	; 0x28
 8003598:	d108      	bne.n	80035ac <I2C_Slave_ISR_DMA+0xdc>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a0:	d104      	bne.n	80035ac <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fb61 	bl	8003c6c <I2C_ITListenCplt>
 80035aa:	e048      	b.n	800363e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b29      	cmp	r3, #41	; 0x29
 80035b6:	d10e      	bne.n	80035d6 <I2C_Slave_ISR_DMA+0x106>
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035be:	d00a      	beq.n	80035d6 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2210      	movs	r2, #16
 80035c6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fcba 	bl	8003f42 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f915 	bl	80037fe <I2C_ITSlaveSeqCplt>
 80035d4:	e033      	b.n	800363e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2210      	movs	r2, #16
 80035dc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80035de:	e034      	b.n	800364a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2210      	movs	r2, #16
 80035e6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	f043 0204 	orr.w	r2, r3, #4
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fa:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <I2C_Slave_ISR_DMA+0x13a>
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003608:	d11f      	bne.n	800364a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	2b21      	cmp	r3, #33	; 0x21
 800360e:	d002      	beq.n	8003616 <I2C_Slave_ISR_DMA+0x146>
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2b29      	cmp	r3, #41	; 0x29
 8003614:	d103      	bne.n	800361e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2221      	movs	r2, #33	; 0x21
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
 800361c:	e008      	b.n	8003630 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b22      	cmp	r3, #34	; 0x22
 8003622:	d002      	beq.n	800362a <I2C_Slave_ISR_DMA+0x15a>
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b2a      	cmp	r3, #42	; 0x2a
 8003628:	d102      	bne.n	8003630 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2222      	movs	r2, #34	; 0x22
 800362e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	4619      	mov	r1, r3
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fb6c 	bl	8003d14 <I2C_ITError>
      if (treatdmanack == 1U)
 800363c:	e005      	b.n	800364a <I2C_Slave_ISR_DMA+0x17a>
 800363e:	e004      	b.n	800364a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2210      	movs	r2, #16
 8003646:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003648:	e00f      	b.n	800366a <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 800364a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800364c:	e00d      	b.n	800366a <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003662:	68b9      	ldr	r1, [r7, #8]
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 f809 	bl	800367c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3720      	adds	r7, #32
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003692:	2b28      	cmp	r3, #40	; 0x28
 8003694:	d16a      	bne.n	800376c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80036b4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80036d0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d138      	bne.n	800374c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80036da:	897b      	ldrh	r3, [r7, #10]
 80036dc:	09db      	lsrs	r3, r3, #7
 80036de:	b29a      	uxth	r2, r3
 80036e0:	89bb      	ldrh	r3, [r7, #12]
 80036e2:	4053      	eors	r3, r2
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f003 0306 	and.w	r3, r3, #6
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11c      	bne.n	8003728 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80036ee:	897b      	ldrh	r3, [r7, #10]
 80036f0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003700:	2b02      	cmp	r3, #2
 8003702:	d13b      	bne.n	800377c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2208      	movs	r2, #8
 8003710:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800371a:	89ba      	ldrh	r2, [r7, #12]
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	4619      	mov	r1, r3
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fe f889 	bl	8001838 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003726:	e029      	b.n	800377c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003728:	893b      	ldrh	r3, [r7, #8]
 800372a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800372c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 ff39 	bl	80045a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800373e:	89ba      	ldrh	r2, [r7, #12]
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fe f877 	bl	8001838 <HAL_I2C_AddrCallback>
}
 800374a:	e017      	b.n	800377c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800374c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 ff29 	bl	80045a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800375e:	89ba      	ldrh	r2, [r7, #12]
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	4619      	mov	r1, r3
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f7fe f867 	bl	8001838 <HAL_I2C_AddrCallback>
}
 800376a:	e007      	b.n	800377c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2208      	movs	r2, #8
 8003772:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b21      	cmp	r3, #33	; 0x21
 800379e:	d115      	bne.n	80037cc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2211      	movs	r2, #17
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037b4:	2101      	movs	r1, #1
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fef6 	bl	80045a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff fb3c 	bl	8002e42 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037ca:	e014      	b.n	80037f6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2212      	movs	r2, #18
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80037e0:	2102      	movs	r1, #2
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fee0 	bl	80045a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f7ff fb30 	bl	8002e56 <HAL_I2C_MasterRxCpltCallback>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e00c      	b.n	800384c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800384a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b29      	cmp	r3, #41	; 0x29
 8003856:	d112      	bne.n	800387e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2228      	movs	r2, #40	; 0x28
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2221      	movs	r2, #33	; 0x21
 8003864:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003866:	2101      	movs	r1, #1
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fe9d 	bl	80045a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd ffa4 	bl	80017c4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800387c:	e017      	b.n	80038ae <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b2a      	cmp	r3, #42	; 0x2a
 8003888:	d111      	bne.n	80038ae <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2228      	movs	r2, #40	; 0x28
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2222      	movs	r2, #34	; 0x22
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003898:	2102      	movs	r1, #2
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fe84 	bl	80045a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fd ff9b 	bl	80017e4 <HAL_I2C_SlaveRxCpltCallback>
}
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2220      	movs	r2, #32
 80038cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b21      	cmp	r3, #33	; 0x21
 80038d8:	d107      	bne.n	80038ea <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80038da:	2101      	movs	r1, #1
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fe63 	bl	80045a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2211      	movs	r2, #17
 80038e6:	631a      	str	r2, [r3, #48]	; 0x30
 80038e8:	e00c      	b.n	8003904 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b22      	cmp	r3, #34	; 0x22
 80038f4:	d106      	bne.n	8003904 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80038f6:	2102      	movs	r1, #2
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fe55 	bl	80045a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2212      	movs	r2, #18
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	4b4c      	ldr	r3, [pc, #304]	; (8003a40 <I2C_ITMasterCplt+0x188>)
 8003910:	400b      	ands	r3, r1
 8003912:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a49      	ldr	r2, [pc, #292]	; (8003a44 <I2C_ITMasterCplt+0x18c>)
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d009      	beq.n	800393e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2210      	movs	r2, #16
 8003930:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f043 0204 	orr.w	r2, r3, #4
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b60      	cmp	r3, #96	; 0x60
 8003948:	d10a      	bne.n	8003960 <I2C_ITMasterCplt+0xa8>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	b2db      	uxtb	r3, r3
 800395c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800395e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 faee 	bl	8003f42 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b60      	cmp	r3, #96	; 0x60
 8003976:	d002      	beq.n	800397e <I2C_ITMasterCplt+0xc6>
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f9c5 	bl	8003d14 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800398a:	e054      	b.n	8003a36 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b21      	cmp	r3, #33	; 0x21
 8003996:	d124      	bne.n	80039e2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d10b      	bne.n	80039ca <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff fa51 	bl	8002e6a <HAL_I2C_MemTxCpltCallback>
}
 80039c8:	e035      	b.n	8003a36 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff fa31 	bl	8002e42 <HAL_I2C_MasterTxCpltCallback>
}
 80039e0:	e029      	b.n	8003a36 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b22      	cmp	r3, #34	; 0x22
 80039ec:	d123      	bne.n	8003a36 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d10b      	bne.n	8003a20 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff fa30 	bl	8002e7e <HAL_I2C_MemRxCpltCallback>
}
 8003a1e:	e00a      	b.n	8003a36 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fa10 	bl	8002e56 <HAL_I2C_MasterRxCpltCallback>
}
 8003a36:	bf00      	nop
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	fe00e800 	.word	0xfe00e800
 8003a44:	ffff0000 	.word	0xffff0000

08003a48 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a64:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b21      	cmp	r3, #33	; 0x21
 8003a72:	d002      	beq.n	8003a7a <I2C_ITSlaveCplt+0x32>
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	2b29      	cmp	r3, #41	; 0x29
 8003a78:	d108      	bne.n	8003a8c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003a7a:	f248 0101 	movw	r1, #32769	; 0x8001
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fd92 	bl	80045a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2221      	movs	r2, #33	; 0x21
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30
 8003a8a:	e019      	b.n	8003ac0 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b22      	cmp	r3, #34	; 0x22
 8003a90:	d002      	beq.n	8003a98 <I2C_ITSlaveCplt+0x50>
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b2a      	cmp	r3, #42	; 0x2a
 8003a96:	d108      	bne.n	8003aaa <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003a98:	f248 0102 	movw	r1, #32770	; 0x8002
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fd83 	bl	80045a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2222      	movs	r2, #34	; 0x22
 8003aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa8:	e00a      	b.n	8003ac0 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b28      	cmp	r3, #40	; 0x28
 8003aae:	d107      	bne.n	8003ac0 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003ab0:	f248 0103 	movw	r1, #32771	; 0x8003
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fd77 	bl	80045a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ace:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b62      	ldr	r3, [pc, #392]	; (8003c64 <I2C_ITSlaveCplt+0x21c>)
 8003adc:	400b      	ands	r3, r1
 8003ade:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fa2e 	bl	8003f42 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d013      	beq.n	8003b18 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003afe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01f      	beq.n	8003b48 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b16:	e017      	b.n	8003b48 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d012      	beq.n	8003b48 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b30:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d020      	beq.n	8003b94 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00c      	beq.n	8003b94 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f043 0204 	orr.w	r2, r3, #4
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d010      	beq.n	8003be2 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8a4 	bl	8003d14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b28      	cmp	r3, #40	; 0x28
 8003bd6:	d141      	bne.n	8003c5c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003bd8:	6979      	ldr	r1, [r7, #20]
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f846 	bl	8003c6c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003be0:	e03c      	b.n	8003c5c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bea:	d014      	beq.n	8003c16 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fe06 	bl	80037fe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <I2C_ITSlaveCplt+0x220>)
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd fe50 	bl	80018b4 <HAL_I2C_ListenCpltCallback>
}
 8003c14:	e022      	b.n	8003c5c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b22      	cmp	r3, #34	; 0x22
 8003c20:	d10e      	bne.n	8003c40 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7fd fdd3 	bl	80017e4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c3e:	e00d      	b.n	8003c5c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fdb4 	bl	80017c4 <HAL_I2C_SlaveTxCpltCallback>
}
 8003c5c:	bf00      	nop
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	fe00e800 	.word	0xfe00e800
 8003c68:	ffff0000 	.word	0xffff0000

08003c6c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <I2C_ITListenCplt+0xa4>)
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d022      	beq.n	8003ce8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d012      	beq.n	8003ce8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ce8:	f248 0103 	movw	r1, #32771	; 0x8003
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 fc5b 	bl	80045a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fd fdd6 	bl	80018b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	ffff0000 	.word	0xffff0000

08003d14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d24:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a6d      	ldr	r2, [pc, #436]	; (8003ee8 <I2C_ITError+0x1d4>)
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b28      	cmp	r3, #40	; 0x28
 8003d4a:	d005      	beq.n	8003d58 <I2C_ITError+0x44>
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b29      	cmp	r3, #41	; 0x29
 8003d50:	d002      	beq.n	8003d58 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b2a      	cmp	r3, #42	; 0x2a
 8003d56:	d10b      	bne.n	8003d70 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d58:	2103      	movs	r1, #3
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fc24 	bl	80045a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2228      	movs	r2, #40	; 0x28
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a60      	ldr	r2, [pc, #384]	; (8003eec <I2C_ITError+0x1d8>)
 8003d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d6e:	e030      	b.n	8003dd2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d70:	f248 0103 	movw	r1, #32771	; 0x8003
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fc17 	bl	80045a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f8e1 	bl	8003f42 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b60      	cmp	r3, #96	; 0x60
 8003d8a:	d01f      	beq.n	8003dcc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d114      	bne.n	8003dcc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f003 0310 	and.w	r3, r3, #16
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d109      	bne.n	8003dc4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2210      	movs	r2, #16
 8003db6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	f043 0204 	orr.w	r2, r3, #4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d039      	beq.n	8003e54 <I2C_ITError+0x140>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b11      	cmp	r3, #17
 8003de4:	d002      	beq.n	8003dec <I2C_ITError+0xd8>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b21      	cmp	r3, #33	; 0x21
 8003dea:	d133      	bne.n	8003e54 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dfa:	d107      	bne.n	8003e0c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e0a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe f9a1 	bl	8002158 <HAL_DMA_GetState>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d017      	beq.n	8003e4c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	4a33      	ldr	r2, [pc, #204]	; (8003ef0 <I2C_ITError+0x1dc>)
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe f950 	bl	80020d6 <HAL_DMA_Abort_IT>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d04d      	beq.n	8003ed8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e46:	4610      	mov	r0, r2
 8003e48:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e4a:	e045      	b.n	8003ed8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f851 	bl	8003ef4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e52:	e041      	b.n	8003ed8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d039      	beq.n	8003ed0 <I2C_ITError+0x1bc>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b12      	cmp	r3, #18
 8003e60:	d002      	beq.n	8003e68 <I2C_ITError+0x154>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b22      	cmp	r3, #34	; 0x22
 8003e66:	d133      	bne.n	8003ed0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e76:	d107      	bne.n	8003e88 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fe f963 	bl	8002158 <HAL_DMA_GetState>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d017      	beq.n	8003ec8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <I2C_ITError+0x1dc>)
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe f912 	bl	80020d6 <HAL_DMA_Abort_IT>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d011      	beq.n	8003edc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ec6:	e009      	b.n	8003edc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f813 	bl	8003ef4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ece:	e005      	b.n	8003edc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f80f 	bl	8003ef4 <I2C_TreatErrorCallback>
  }
}
 8003ed6:	e002      	b.n	8003ede <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ed8:	bf00      	nop
 8003eda:	e000      	b.n	8003ede <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003edc:	bf00      	nop
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	ffff0000 	.word	0xffff0000
 8003eec:	08002ebf 	.word	0x08002ebf
 8003ef0:	08003f8b 	.word	0x08003f8b

08003ef4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b60      	cmp	r3, #96	; 0x60
 8003f06:	d10e      	bne.n	8003f26 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fe ffb7 	bl	8002e92 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f24:	e009      	b.n	8003f3a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7fd fcc7 	bl	80018c8 <HAL_I2C_ErrorCallback>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d103      	bne.n	8003f60 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d007      	beq.n	8003f7e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	619a      	str	r2, [r3, #24]
  }
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7ff ff9b 	bl	8003ef4 <I2C_TreatErrorCallback>
}
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fd6:	e031      	b.n	800403c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fde:	d02d      	beq.n	800403c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe0:	f7fd ff38 	bl	8001e54 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d302      	bcc.n	8003ff6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d122      	bne.n	800403c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699a      	ldr	r2, [r3, #24]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d113      	bne.n	800403c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f043 0220 	orr.w	r2, r3, #32
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e00f      	b.n	800405c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699a      	ldr	r2, [r3, #24]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	429a      	cmp	r2, r3
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	429a      	cmp	r2, r3
 8004058:	d0be      	beq.n	8003fd8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004070:	e033      	b.n	80040da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f900 	bl	800427c <I2C_IsErrorOccurred>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e031      	b.n	80040ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408c:	d025      	beq.n	80040da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7fd fee1 	bl	8001e54 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d11a      	bne.n	80040da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d013      	beq.n	80040da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e007      	b.n	80040ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d1c4      	bne.n	8004072 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040fe:	e02f      	b.n	8004160 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 f8b9 	bl	800427c <I2C_IsErrorOccurred>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e02d      	b.n	8004170 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004114:	f7fd fe9e 	bl	8001e54 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11a      	bne.n	8004160 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b20      	cmp	r3, #32
 8004136:	d013      	beq.n	8004160 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413c:	f043 0220 	orr.w	r2, r3, #32
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e007      	b.n	8004170 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b20      	cmp	r3, #32
 800416c:	d1c8      	bne.n	8004100 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004184:	e06b      	b.n	800425e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f876 	bl	800427c <I2C_IsErrorOccurred>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e069      	b.n	800426e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d138      	bne.n	800421a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d105      	bne.n	80041c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80041be:	2300      	movs	r3, #0
 80041c0:	e055      	b.n	800426e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d107      	bne.n	80041e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2210      	movs	r2, #16
 80041d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2204      	movs	r2, #4
 80041dc:	645a      	str	r2, [r3, #68]	; 0x44
 80041de:	e002      	b.n	80041e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2220      	movs	r2, #32
 80041ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80041fa:	400b      	ands	r3, r1
 80041fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e029      	b.n	800426e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421a:	f7fd fe1b 	bl	8001e54 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	429a      	cmp	r2, r3
 8004228:	d302      	bcc.n	8004230 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d116      	bne.n	800425e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	2b04      	cmp	r3, #4
 800423c:	d00f      	beq.n	800425e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e007      	b.n	800426e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b04      	cmp	r3, #4
 800426a:	d18c      	bne.n	8004186 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	fe00e800 	.word	0xfe00e800

0800427c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b08a      	sub	sp, #40	; 0x28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d068      	beq.n	800437a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2210      	movs	r2, #16
 80042ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042b0:	e049      	b.n	8004346 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b8:	d045      	beq.n	8004346 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042ba:	f7fd fdcb 	bl	8001e54 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <I2C_IsErrorOccurred+0x54>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d13a      	bne.n	8004346 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f2:	d121      	bne.n	8004338 <I2C_IsErrorOccurred+0xbc>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042fa:	d01d      	beq.n	8004338 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80042fc:	7cfb      	ldrb	r3, [r7, #19]
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d01a      	beq.n	8004338 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004310:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004312:	f7fd fd9f 	bl	8001e54 <HAL_GetTick>
 8004316:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004318:	e00e      	b.n	8004338 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800431a:	f7fd fd9b 	bl	8001e54 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b19      	cmp	r3, #25
 8004326:	d907      	bls.n	8004338 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004328:	6a3b      	ldr	r3, [r7, #32]
 800432a:	f043 0320 	orr.w	r3, r3, #32
 800432e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004336:	e006      	b.n	8004346 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b20      	cmp	r3, #32
 8004344:	d1e9      	bne.n	800431a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b20      	cmp	r3, #32
 8004352:	d003      	beq.n	800435c <I2C_IsErrorOccurred+0xe0>
 8004354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0aa      	beq.n	80042b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800435c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004360:	2b00      	cmp	r3, #0
 8004362:	d103      	bne.n	800436c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2220      	movs	r2, #32
 800436a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	f043 0304 	orr.w	r3, r3, #4
 8004372:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f44f 7280 	mov.w	r2, #256	; 0x100
 800439c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f043 0308 	orr.w	r3, r3, #8
 80043b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00b      	beq.n	80043e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	f043 0302 	orr.w	r3, r3, #2
 80043d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80043e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01c      	beq.n	800442a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff fda6 	bl	8003f42 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6859      	ldr	r1, [r3, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	4b0d      	ldr	r3, [pc, #52]	; (8004438 <I2C_IsErrorOccurred+0x1bc>)
 8004402:	400b      	ands	r3, r1
 8004404:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800442a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800442e:	4618      	mov	r0, r3
 8004430:	3728      	adds	r7, #40	; 0x28
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	fe00e800 	.word	0xfe00e800

0800443c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	607b      	str	r3, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	817b      	strh	r3, [r7, #10]
 800444a:	4613      	mov	r3, r2
 800444c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800444e:	897b      	ldrh	r3, [r7, #10]
 8004450:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004454:	7a7b      	ldrb	r3, [r7, #9]
 8004456:	041b      	lsls	r3, r3, #16
 8004458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800445c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	4313      	orrs	r3, r2
 8004466:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800446a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	0d5b      	lsrs	r3, r3, #21
 8004476:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <I2C_TransferConfig+0x60>)
 800447c:	430b      	orrs	r3, r1
 800447e:	43db      	mvns	r3, r3
 8004480:	ea02 0103 	and.w	r1, r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	430a      	orrs	r2, r1
 800448c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	03ff63ff 	.word	0x03ff63ff

080044a0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	4a39      	ldr	r2, [pc, #228]	; (800459c <I2C_Enable_IRQ+0xfc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d032      	beq.n	8004520 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80044be:	4a38      	ldr	r2, [pc, #224]	; (80045a0 <I2C_Enable_IRQ+0x100>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d02d      	beq.n	8004520 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80044c8:	4a36      	ldr	r2, [pc, #216]	; (80045a4 <I2C_Enable_IRQ+0x104>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d028      	beq.n	8004520 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	da03      	bge.n	80044de <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80044dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044de:	887b      	ldrh	r3, [r7, #2]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80044ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004500:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004502:	887b      	ldrh	r3, [r7, #2]
 8004504:	2b10      	cmp	r3, #16
 8004506:	d103      	bne.n	8004510 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800450e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004510:	887b      	ldrh	r3, [r7, #2]
 8004512:	2b20      	cmp	r3, #32
 8004514:	d133      	bne.n	800457e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f043 0320 	orr.w	r3, r3, #32
 800451c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800451e:	e02e      	b.n	800457e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004520:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004524:	2b00      	cmp	r3, #0
 8004526:	da03      	bge.n	8004530 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800452e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004530:	887b      	ldrh	r3, [r7, #2]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004540:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004542:	887b      	ldrh	r3, [r7, #2]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004552:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	2b10      	cmp	r3, #16
 8004558:	d103      	bne.n	8004562 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004560:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004562:	887b      	ldrh	r3, [r7, #2]
 8004564:	2b20      	cmp	r3, #32
 8004566:	d103      	bne.n	8004570 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800456e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004570:	887b      	ldrh	r3, [r7, #2]
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d103      	bne.n	800457e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800457c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6819      	ldr	r1, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	430a      	orrs	r2, r1
 800458c:	601a      	str	r2, [r3, #0]
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	080030af 	.word	0x080030af
 80045a0:	080034d1 	.word	0x080034d1
 80045a4:	08003285 	.word	0x08003285

080045a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80045b8:	887b      	ldrh	r3, [r7, #2]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00f      	beq.n	80045e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80045c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045d6:	2b28      	cmp	r3, #40	; 0x28
 80045d8:	d003      	beq.n	80045e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80045e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80045e2:	887b      	ldrh	r3, [r7, #2]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00f      	beq.n	800460c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80045f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004600:	2b28      	cmp	r3, #40	; 0x28
 8004602:	d003      	beq.n	800460c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800460a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800460c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004610:	2b00      	cmp	r3, #0
 8004612:	da03      	bge.n	800461c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800461a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	2b10      	cmp	r3, #16
 8004620:	d103      	bne.n	800462a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004628:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800462a:	887b      	ldrh	r3, [r7, #2]
 800462c:	2b20      	cmp	r3, #32
 800462e:	d103      	bne.n	8004638 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f043 0320 	orr.w	r3, r3, #32
 8004636:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004638:	887b      	ldrh	r3, [r7, #2]
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d103      	bne.n	8004646 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004644:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6819      	ldr	r1, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	43da      	mvns	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	400a      	ands	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b20      	cmp	r3, #32
 8004678:	d138      	bne.n	80046ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004680:	2b01      	cmp	r3, #1
 8004682:	d101      	bne.n	8004688 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004684:	2302      	movs	r3, #2
 8004686:	e032      	b.n	80046ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2224      	movs	r2, #36	; 0x24
 8004694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6819      	ldr	r1, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	e000      	b.n	80046ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046ec:	2302      	movs	r3, #2
  }
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b085      	sub	sp, #20
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	d139      	bne.n	8004784 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800471a:	2302      	movs	r3, #2
 800471c:	e033      	b.n	8004786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2224      	movs	r2, #36	; 0x24
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800474c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	021b      	lsls	r3, r3, #8
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	e000      	b.n	8004786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004784:	2302      	movs	r3, #2
  }
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <HAL_PWREx_GetVoltageRange+0x18>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40007000 	.word	0x40007000

080047b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047be:	d130      	bne.n	8004822 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047c0:	4b23      	ldr	r3, [pc, #140]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047cc:	d038      	beq.n	8004840 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047de:	4b1d      	ldr	r3, [pc, #116]	; (8004854 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2232      	movs	r2, #50	; 0x32
 80047e4:	fb02 f303 	mul.w	r3, r2, r3
 80047e8:	4a1b      	ldr	r2, [pc, #108]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	0c9b      	lsrs	r3, r3, #18
 80047f0:	3301      	adds	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047f4:	e002      	b.n	80047fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004808:	d102      	bne.n	8004810 <HAL_PWREx_ControlVoltageScaling+0x60>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f2      	bne.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481c:	d110      	bne.n	8004840 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e00f      	b.n	8004842 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004822:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d007      	beq.n	8004840 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004838:	4a05      	ldr	r2, [pc, #20]	; (8004850 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800483a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800483e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40007000 	.word	0x40007000
 8004854:	20000000 	.word	0x20000000
 8004858:	431bde83 	.word	0x431bde83

0800485c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f000 bc02 	b.w	8005074 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004870:	4b96      	ldr	r3, [pc, #600]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800487a:	4b94      	ldr	r3, [pc, #592]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80e4 	beq.w	8004a5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <HAL_RCC_OscConfig+0x4c>
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b0c      	cmp	r3, #12
 800489c:	f040 808b 	bne.w	80049b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	f040 8087 	bne.w	80049b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048a8:	4b88      	ldr	r3, [pc, #544]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_OscConfig+0x64>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e3d9      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1a      	ldr	r2, [r3, #32]
 80048c4:	4b81      	ldr	r3, [pc, #516]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <HAL_RCC_OscConfig+0x7e>
 80048d0:	4b7e      	ldr	r3, [pc, #504]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d8:	e005      	b.n	80048e6 <HAL_RCC_OscConfig+0x8a>
 80048da:	4b7c      	ldr	r3, [pc, #496]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80048dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d223      	bcs.n	8004932 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fd8c 	bl	800540c <RCC_SetFlashLatencyFromMSIRange>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e3ba      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048fe:	4b73      	ldr	r3, [pc, #460]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a72      	ldr	r2, [pc, #456]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004904:	f043 0308 	orr.w	r3, r3, #8
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	4b70      	ldr	r3, [pc, #448]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	496d      	ldr	r1, [pc, #436]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004918:	4313      	orrs	r3, r2
 800491a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800491c:	4b6b      	ldr	r3, [pc, #428]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	021b      	lsls	r3, r3, #8
 800492a:	4968      	ldr	r1, [pc, #416]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
 8004930:	e025      	b.n	800497e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004932:	4b66      	ldr	r3, [pc, #408]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a65      	ldr	r2, [pc, #404]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004938:	f043 0308 	orr.w	r3, r3, #8
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b63      	ldr	r3, [pc, #396]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	4960      	ldr	r1, [pc, #384]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 800494c:	4313      	orrs	r3, r2
 800494e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004950:	4b5e      	ldr	r3, [pc, #376]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	495b      	ldr	r1, [pc, #364]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fd4c 	bl	800540c <RCC_SetFlashLatencyFromMSIRange>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e37a      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800497e:	f000 fc81 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 8004982:	4602      	mov	r2, r0
 8004984:	4b51      	ldr	r3, [pc, #324]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	4950      	ldr	r1, [pc, #320]	; (8004ad0 <HAL_RCC_OscConfig+0x274>)
 8004990:	5ccb      	ldrb	r3, [r1, r3]
 8004992:	f003 031f 	and.w	r3, r3, #31
 8004996:	fa22 f303 	lsr.w	r3, r2, r3
 800499a:	4a4e      	ldr	r2, [pc, #312]	; (8004ad4 <HAL_RCC_OscConfig+0x278>)
 800499c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800499e:	4b4e      	ldr	r3, [pc, #312]	; (8004ad8 <HAL_RCC_OscConfig+0x27c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fd fa06 	bl	8001db4 <HAL_InitTick>
 80049a8:	4603      	mov	r3, r0
 80049aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d052      	beq.n	8004a58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	e35e      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d032      	beq.n	8004a24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049be:	4b43      	ldr	r3, [pc, #268]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a42      	ldr	r2, [pc, #264]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049ca:	f7fd fa43 	bl	8001e54 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049d2:	f7fd fa3f 	bl	8001e54 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e347      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e4:	4b39      	ldr	r3, [pc, #228]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049f0:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a35      	ldr	r2, [pc, #212]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80049f6:	f043 0308 	orr.w	r3, r3, #8
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4930      	ldr	r1, [pc, #192]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	492b      	ldr	r1, [pc, #172]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	604b      	str	r3, [r1, #4]
 8004a22:	e01a      	b.n	8004a5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a24:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a28      	ldr	r2, [pc, #160]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a30:	f7fd fa10 	bl	8001e54 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a38:	f7fd fa0c 	bl	8001e54 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e314      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1f0      	bne.n	8004a38 <HAL_RCC_OscConfig+0x1dc>
 8004a56:	e000      	b.n	8004a5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d073      	beq.n	8004b4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2b08      	cmp	r3, #8
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_OscConfig+0x21c>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	d10e      	bne.n	8004a90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d10b      	bne.n	8004a90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a78:	4b14      	ldr	r3, [pc, #80]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d063      	beq.n	8004b4c <HAL_RCC_OscConfig+0x2f0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d15f      	bne.n	8004b4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e2f1      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a98:	d106      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x24c>
 8004a9a:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e025      	b.n	8004af4 <HAL_RCC_OscConfig+0x298>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ab0:	d114      	bne.n	8004adc <HAL_RCC_OscConfig+0x280>
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a05      	ldr	r2, [pc, #20]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	4b03      	ldr	r3, [pc, #12]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a02      	ldr	r2, [pc, #8]	; (8004acc <HAL_RCC_OscConfig+0x270>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e013      	b.n	8004af4 <HAL_RCC_OscConfig+0x298>
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	08006d74 	.word	0x08006d74
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	20000004 	.word	0x20000004
 8004adc:	4ba0      	ldr	r3, [pc, #640]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a9f      	ldr	r2, [pc, #636]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	4b9d      	ldr	r3, [pc, #628]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a9c      	ldr	r2, [pc, #624]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d013      	beq.n	8004b24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fd f9aa 	bl	8001e54 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b04:	f7fd f9a6 	bl	8001e54 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e2ae      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b16:	4b92      	ldr	r3, [pc, #584]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x2a8>
 8004b22:	e014      	b.n	8004b4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fd f996 	bl	8001e54 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7fd f992 	bl	8001e54 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e29a      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b3e:	4b88      	ldr	r3, [pc, #544]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x2d0>
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d060      	beq.n	8004c1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_OscConfig+0x310>
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	d119      	bne.n	8004b9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d116      	bne.n	8004b9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b6c:	4b7c      	ldr	r3, [pc, #496]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_OscConfig+0x328>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e277      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4b76      	ldr	r3, [pc, #472]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	061b      	lsls	r3, r3, #24
 8004b92:	4973      	ldr	r1, [pc, #460]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b98:	e040      	b.n	8004c1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d023      	beq.n	8004bea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba2:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a6e      	ldr	r2, [pc, #440]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fd f951 	bl	8001e54 <HAL_GetTick>
 8004bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb4:	e008      	b.n	8004bc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb6:	f7fd f94d 	bl	8001e54 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e255      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc8:	4b65      	ldr	r3, [pc, #404]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0f0      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd4:	4b62      	ldr	r3, [pc, #392]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	495f      	ldr	r1, [pc, #380]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	604b      	str	r3, [r1, #4]
 8004be8:	e018      	b.n	8004c1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bea:	4b5d      	ldr	r3, [pc, #372]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a5c      	ldr	r2, [pc, #368]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf6:	f7fd f92d 	bl	8001e54 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfe:	f7fd f929 	bl	8001e54 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e231      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c10:	4b53      	ldr	r3, [pc, #332]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d03c      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01c      	beq.n	8004c6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c30:	4b4b      	ldr	r3, [pc, #300]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c36:	4a4a      	ldr	r2, [pc, #296]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fd f908 	bl	8001e54 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c48:	f7fd f904 	bl	8001e54 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e20c      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c5a:	4b41      	ldr	r3, [pc, #260]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0ef      	beq.n	8004c48 <HAL_RCC_OscConfig+0x3ec>
 8004c68:	e01b      	b.n	8004ca2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6a:	4b3d      	ldr	r3, [pc, #244]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c70:	4a3b      	ldr	r2, [pc, #236]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7a:	f7fd f8eb 	bl	8001e54 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c82:	f7fd f8e7 	bl	8001e54 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e1ef      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c94:	4b32      	ldr	r3, [pc, #200]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1ef      	bne.n	8004c82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80a6 	beq.w	8004dfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cb4:	4b2a      	ldr	r3, [pc, #168]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10d      	bne.n	8004cdc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc0:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	4a26      	ldr	r2, [pc, #152]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	6593      	str	r3, [r2, #88]	; 0x58
 8004ccc:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	60bb      	str	r3, [r7, #8]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <HAL_RCC_OscConfig+0x508>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d118      	bne.n	8004d1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ce8:	4b1e      	ldr	r3, [pc, #120]	; (8004d64 <HAL_RCC_OscConfig+0x508>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_RCC_OscConfig+0x508>)
 8004cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf4:	f7fd f8ae 	bl	8001e54 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfc:	f7fd f8aa 	bl	8001e54 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e1b2      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d0e:	4b15      	ldr	r3, [pc, #84]	; (8004d64 <HAL_RCC_OscConfig+0x508>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d108      	bne.n	8004d34 <HAL_RCC_OscConfig+0x4d8>
 8004d22:	4b0f      	ldr	r3, [pc, #60]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d28:	4a0d      	ldr	r2, [pc, #52]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d32:	e029      	b.n	8004d88 <HAL_RCC_OscConfig+0x52c>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b05      	cmp	r3, #5
 8004d3a:	d115      	bne.n	8004d68 <HAL_RCC_OscConfig+0x50c>
 8004d3c:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d42:	4a07      	ldr	r2, [pc, #28]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004d44:	f043 0304 	orr.w	r3, r3, #4
 8004d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d52:	4a03      	ldr	r2, [pc, #12]	; (8004d60 <HAL_RCC_OscConfig+0x504>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d5c:	e014      	b.n	8004d88 <HAL_RCC_OscConfig+0x52c>
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000
 8004d64:	40007000 	.word	0x40007000
 8004d68:	4b9a      	ldr	r3, [pc, #616]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	4a99      	ldr	r2, [pc, #612]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d78:	4b96      	ldr	r3, [pc, #600]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	4a95      	ldr	r2, [pc, #596]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d016      	beq.n	8004dbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7fd f860 	bl	8001e54 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d96:	e00a      	b.n	8004dae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d98:	f7fd f85c 	bl	8001e54 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e162      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dae:	4b89      	ldr	r3, [pc, #548]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d0ed      	beq.n	8004d98 <HAL_RCC_OscConfig+0x53c>
 8004dbc:	e015      	b.n	8004dea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7fd f849 	bl	8001e54 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fd f845 	bl	8001e54 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e14b      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ddc:	4b7d      	ldr	r3, [pc, #500]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1ed      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dea:	7ffb      	ldrb	r3, [r7, #31]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d105      	bne.n	8004dfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df0:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df4:	4a77      	ldr	r2, [pc, #476]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d03c      	beq.n	8004e82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01c      	beq.n	8004e4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e10:	4b70      	ldr	r3, [pc, #448]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e16:	4a6f      	ldr	r2, [pc, #444]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e20:	f7fd f818 	bl	8001e54 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e28:	f7fd f814 	bl	8001e54 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e11c      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e3a:	4b66      	ldr	r3, [pc, #408]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ef      	beq.n	8004e28 <HAL_RCC_OscConfig+0x5cc>
 8004e48:	e01b      	b.n	8004e82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e4a:	4b62      	ldr	r3, [pc, #392]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e50:	4a60      	ldr	r2, [pc, #384]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004e52:	f023 0301 	bic.w	r3, r3, #1
 8004e56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5a:	f7fc fffb 	bl	8001e54 <HAL_GetTick>
 8004e5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e60:	e008      	b.n	8004e74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e62:	f7fc fff7 	bl	8001e54 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0ff      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e74:	4b57      	ldr	r3, [pc, #348]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1ef      	bne.n	8004e62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80f3 	beq.w	8005072 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	f040 80c9 	bne.w	8005028 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e96:	4b4f      	ldr	r3, [pc, #316]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f003 0203 	and.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d12c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d123      	bne.n	8004f04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d11b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d113      	bne.n	8004f04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d109      	bne.n	8004f04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	3b01      	subs	r3, #1
 8004efe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d06b      	beq.n	8004fdc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	2b0c      	cmp	r3, #12
 8004f08:	d062      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f0a:	4b32      	ldr	r3, [pc, #200]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e0ac      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f1a:	4b2e      	ldr	r3, [pc, #184]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2d      	ldr	r2, [pc, #180]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004f20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f26:	f7fc ff95 	bl	8001e54 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2e:	f7fc ff91 	bl	8001e54 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e099      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f40:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f0      	bne.n	8004f2e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f4c:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	4b21      	ldr	r3, [pc, #132]	; (8004fd8 <HAL_RCC_OscConfig+0x77c>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f5c:	3a01      	subs	r2, #1
 8004f5e:	0112      	lsls	r2, r2, #4
 8004f60:	4311      	orrs	r1, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f66:	0212      	lsls	r2, r2, #8
 8004f68:	4311      	orrs	r1, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f6e:	0852      	lsrs	r2, r2, #1
 8004f70:	3a01      	subs	r2, #1
 8004f72:	0552      	lsls	r2, r2, #21
 8004f74:	4311      	orrs	r1, r2
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f7a:	0852      	lsrs	r2, r2, #1
 8004f7c:	3a01      	subs	r2, #1
 8004f7e:	0652      	lsls	r2, r2, #25
 8004f80:	4311      	orrs	r1, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f86:	06d2      	lsls	r2, r2, #27
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	4912      	ldr	r1, [pc, #72]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f90:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0f      	ldr	r2, [pc, #60]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004f96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a0c      	ldr	r2, [pc, #48]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004fa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fa8:	f7fc ff54 	bl	8001e54 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb0:	f7fc ff50 	bl	8001e54 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e058      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fc2:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <HAL_RCC_OscConfig+0x778>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fce:	e050      	b.n	8005072 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e04f      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fdc:	4b27      	ldr	r3, [pc, #156]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d144      	bne.n	8005072 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004fe8:	4b24      	ldr	r3, [pc, #144]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a23      	ldr	r2, [pc, #140]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8004fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a20      	ldr	r2, [pc, #128]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8004ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ffe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005000:	f7fc ff28 	bl	8001e54 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005008:	f7fc ff24 	bl	8001e54 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e02c      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800501a:	4b18      	ldr	r3, [pc, #96]	; (800507c <HAL_RCC_OscConfig+0x820>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0f0      	beq.n	8005008 <HAL_RCC_OscConfig+0x7ac>
 8005026:	e024      	b.n	8005072 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d01f      	beq.n	800506e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b13      	ldr	r3, [pc, #76]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a12      	ldr	r2, [pc, #72]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8005034:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fc ff0b 	bl	8001e54 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005042:	f7fc ff07 	bl	8001e54 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e00f      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005054:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f0      	bne.n	8005042 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005060:	4b06      	ldr	r3, [pc, #24]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	4905      	ldr	r1, [pc, #20]	; (800507c <HAL_RCC_OscConfig+0x820>)
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCC_OscConfig+0x824>)
 8005068:	4013      	ands	r3, r2
 800506a:	60cb      	str	r3, [r1, #12]
 800506c:	e001      	b.n	8005072 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000
 8005080:	feeefffc 	.word	0xfeeefffc

08005084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e0e7      	b.n	8005268 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005098:	4b75      	ldr	r3, [pc, #468]	; (8005270 <HAL_RCC_ClockConfig+0x1ec>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d910      	bls.n	80050c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a6:	4b72      	ldr	r3, [pc, #456]	; (8005270 <HAL_RCC_ClockConfig+0x1ec>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 0207 	bic.w	r2, r3, #7
 80050ae:	4970      	ldr	r1, [pc, #448]	; (8005270 <HAL_RCC_ClockConfig+0x1ec>)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050b6:	4b6e      	ldr	r3, [pc, #440]	; (8005270 <HAL_RCC_ClockConfig+0x1ec>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d001      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0cf      	b.n	8005268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0302 	and.w	r3, r3, #2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d010      	beq.n	80050f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	4b66      	ldr	r3, [pc, #408]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d908      	bls.n	80050f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e4:	4b63      	ldr	r3, [pc, #396]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4960      	ldr	r1, [pc, #384]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d04c      	beq.n	800519c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b03      	cmp	r3, #3
 8005108:	d107      	bne.n	800511a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800510a:	4b5a      	ldr	r3, [pc, #360]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d121      	bne.n	800515a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e0a6      	b.n	8005268 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d107      	bne.n	8005132 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005122:	4b54      	ldr	r3, [pc, #336]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d115      	bne.n	800515a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e09a      	b.n	8005268 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d107      	bne.n	800514a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800513a:	4b4e      	ldr	r3, [pc, #312]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d109      	bne.n	800515a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e08e      	b.n	8005268 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800514a:	4b4a      	ldr	r3, [pc, #296]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e086      	b.n	8005268 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800515a:	4b46      	ldr	r3, [pc, #280]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f023 0203 	bic.w	r2, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4943      	ldr	r1, [pc, #268]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516c:	f7fc fe72 	bl	8001e54 <HAL_GetTick>
 8005170:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005172:	e00a      	b.n	800518a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005174:	f7fc fe6e 	bl	8001e54 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e06e      	b.n	8005268 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518a:	4b3a      	ldr	r3, [pc, #232]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 020c 	and.w	r2, r3, #12
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	429a      	cmp	r2, r3
 800519a:	d1eb      	bne.n	8005174 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d208      	bcs.n	80051ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b8:	4b2e      	ldr	r3, [pc, #184]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	492b      	ldr	r1, [pc, #172]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ca:	4b29      	ldr	r3, [pc, #164]	; (8005270 <HAL_RCC_ClockConfig+0x1ec>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d210      	bcs.n	80051fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d8:	4b25      	ldr	r3, [pc, #148]	; (8005270 <HAL_RCC_ClockConfig+0x1ec>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f023 0207 	bic.w	r2, r3, #7
 80051e0:	4923      	ldr	r1, [pc, #140]	; (8005270 <HAL_RCC_ClockConfig+0x1ec>)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e8:	4b21      	ldr	r3, [pc, #132]	; (8005270 <HAL_RCC_ClockConfig+0x1ec>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d001      	beq.n	80051fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e036      	b.n	8005268 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d008      	beq.n	8005218 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005206:	4b1b      	ldr	r3, [pc, #108]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	4918      	ldr	r1, [pc, #96]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 8005214:	4313      	orrs	r3, r2
 8005216:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d009      	beq.n	8005238 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005224:	4b13      	ldr	r3, [pc, #76]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4910      	ldr	r1, [pc, #64]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 8005234:	4313      	orrs	r3, r2
 8005236:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005238:	f000 f824 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 800523c:	4602      	mov	r2, r0
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <HAL_RCC_ClockConfig+0x1f0>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	490b      	ldr	r1, [pc, #44]	; (8005278 <HAL_RCC_ClockConfig+0x1f4>)
 800524a:	5ccb      	ldrb	r3, [r1, r3]
 800524c:	f003 031f 	and.w	r3, r3, #31
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	4a09      	ldr	r2, [pc, #36]	; (800527c <HAL_RCC_ClockConfig+0x1f8>)
 8005256:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <HAL_RCC_ClockConfig+0x1fc>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7fc fda9 	bl	8001db4 <HAL_InitTick>
 8005262:	4603      	mov	r3, r0
 8005264:	72fb      	strb	r3, [r7, #11]

  return status;
 8005266:	7afb      	ldrb	r3, [r7, #11]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40022000 	.word	0x40022000
 8005274:	40021000 	.word	0x40021000
 8005278:	08006d74 	.word	0x08006d74
 800527c:	20000000 	.word	0x20000000
 8005280:	20000004 	.word	0x20000004

08005284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	b089      	sub	sp, #36	; 0x24
 8005288:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	2300      	movs	r3, #0
 8005290:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005292:	4b3e      	ldr	r3, [pc, #248]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f003 030c 	and.w	r3, r3, #12
 800529a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800529c:	4b3b      	ldr	r3, [pc, #236]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d005      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x34>
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b0c      	cmp	r3, #12
 80052b0:	d121      	bne.n	80052f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d11e      	bne.n	80052f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052b8:	4b34      	ldr	r3, [pc, #208]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d107      	bne.n	80052d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052c4:	4b31      	ldr	r3, [pc, #196]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 80052c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	e005      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052d4:	4b2d      	ldr	r3, [pc, #180]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052e0:	4a2b      	ldr	r2, [pc, #172]	; (8005390 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10d      	bne.n	800530c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052f4:	e00a      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d102      	bne.n	8005302 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <HAL_RCC_GetSysClockFreq+0x110>)
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	e004      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d101      	bne.n	800530c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005308:	4b23      	ldr	r3, [pc, #140]	; (8005398 <HAL_RCC_GetSysClockFreq+0x114>)
 800530a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b0c      	cmp	r3, #12
 8005310:	d134      	bne.n	800537c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005312:	4b1e      	ldr	r3, [pc, #120]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d003      	beq.n	800532a <HAL_RCC_GetSysClockFreq+0xa6>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d003      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0xac>
 8005328:	e005      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800532a:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <HAL_RCC_GetSysClockFreq+0x110>)
 800532c:	617b      	str	r3, [r7, #20]
      break;
 800532e:	e005      	b.n	800533c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005330:	4b19      	ldr	r3, [pc, #100]	; (8005398 <HAL_RCC_GetSysClockFreq+0x114>)
 8005332:	617b      	str	r3, [r7, #20]
      break;
 8005334:	e002      	b.n	800533c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	617b      	str	r3, [r7, #20]
      break;
 800533a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800533c:	4b13      	ldr	r3, [pc, #76]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	3301      	adds	r3, #1
 8005348:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800534a:	4b10      	ldr	r3, [pc, #64]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	fb03 f202 	mul.w	r2, r3, r2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <HAL_RCC_GetSysClockFreq+0x108>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	0e5b      	lsrs	r3, r3, #25
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	3301      	adds	r3, #1
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	fbb2 f3f3 	udiv	r3, r2, r3
 800537a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800537c:	69bb      	ldr	r3, [r7, #24]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3724      	adds	r7, #36	; 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40021000 	.word	0x40021000
 8005390:	08006d8c 	.word	0x08006d8c
 8005394:	00f42400 	.word	0x00f42400
 8005398:	007a1200 	.word	0x007a1200

0800539c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a0:	4b03      	ldr	r3, [pc, #12]	; (80053b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053a2:	681b      	ldr	r3, [r3, #0]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000000 	.word	0x20000000

080053b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053b8:	f7ff fff0 	bl	800539c <HAL_RCC_GetHCLKFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	0a1b      	lsrs	r3, r3, #8
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	4904      	ldr	r1, [pc, #16]	; (80053dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40021000 	.word	0x40021000
 80053dc:	08006d84 	.word	0x08006d84

080053e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053e4:	f7ff ffda 	bl	800539c <HAL_RCC_GetHCLKFreq>
 80053e8:	4602      	mov	r2, r0
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	0adb      	lsrs	r3, r3, #11
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	4904      	ldr	r1, [pc, #16]	; (8005408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053f6:	5ccb      	ldrb	r3, [r1, r3]
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40021000 	.word	0x40021000
 8005408:	08006d84 	.word	0x08006d84

0800540c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005418:	4b2a      	ldr	r3, [pc, #168]	; (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800541a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005424:	f7ff f9b6 	bl	8004794 <HAL_PWREx_GetVoltageRange>
 8005428:	6178      	str	r0, [r7, #20]
 800542a:	e014      	b.n	8005456 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800542c:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005430:	4a24      	ldr	r2, [pc, #144]	; (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005436:	6593      	str	r3, [r2, #88]	; 0x58
 8005438:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005444:	f7ff f9a6 	bl	8004794 <HAL_PWREx_GetVoltageRange>
 8005448:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800544a:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544e:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005454:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800545c:	d10b      	bne.n	8005476 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b80      	cmp	r3, #128	; 0x80
 8005462:	d919      	bls.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2ba0      	cmp	r3, #160	; 0xa0
 8005468:	d902      	bls.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800546a:	2302      	movs	r3, #2
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	e013      	b.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005470:	2301      	movs	r3, #1
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	e010      	b.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d902      	bls.n	8005482 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800547c:	2303      	movs	r3, #3
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	e00a      	b.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d102      	bne.n	800548e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005488:	2302      	movs	r3, #2
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e004      	b.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b70      	cmp	r3, #112	; 0x70
 8005492:	d101      	bne.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005494:	2301      	movs	r3, #1
 8005496:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f023 0207 	bic.w	r2, r3, #7
 80054a0:	4909      	ldr	r1, [pc, #36]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054a8:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d001      	beq.n	80054ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e000      	b.n	80054bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40021000 	.word	0x40021000
 80054c8:	40022000 	.word	0x40022000

080054cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054d4:	2300      	movs	r3, #0
 80054d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054d8:	2300      	movs	r3, #0
 80054da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d031      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054f0:	d01a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80054f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054f6:	d814      	bhi.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80054fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005500:	d10f      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005502:	4b5d      	ldr	r3, [pc, #372]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	4a5c      	ldr	r2, [pc, #368]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800550c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800550e:	e00c      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	2100      	movs	r1, #0
 8005516:	4618      	mov	r0, r3
 8005518:	f000 fa22 	bl	8005960 <RCCEx_PLLSAI1_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005520:	e003      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	74fb      	strb	r3, [r7, #19]
      break;
 8005526:	e000      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800552a:	7cfb      	ldrb	r3, [r7, #19]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005530:	4b51      	ldr	r3, [pc, #324]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005536:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	494e      	ldr	r1, [pc, #312]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005546:	e001      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 809e 	beq.w	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800555a:	2300      	movs	r3, #0
 800555c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800555e:	4b46      	ldr	r3, [pc, #280]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800556e:	2300      	movs	r3, #0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00d      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005574:	4b40      	ldr	r3, [pc, #256]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	4a3f      	ldr	r2, [pc, #252]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800557a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557e:	6593      	str	r3, [r2, #88]	; 0x58
 8005580:	4b3d      	ldr	r3, [pc, #244]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800558c:	2301      	movs	r3, #1
 800558e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005590:	4b3a      	ldr	r3, [pc, #232]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a39      	ldr	r2, [pc, #228]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800559c:	f7fc fc5a 	bl	8001e54 <HAL_GetTick>
 80055a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055a2:	e009      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a4:	f7fc fc56 	bl	8001e54 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d902      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	74fb      	strb	r3, [r7, #19]
        break;
 80055b6:	e005      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055b8:	4b30      	ldr	r3, [pc, #192]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0ef      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80055c4:	7cfb      	ldrb	r3, [r7, #19]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d15a      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055ca:	4b2b      	ldr	r3, [pc, #172]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d01e      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d019      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055e6:	4b24      	ldr	r3, [pc, #144]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055f2:	4b21      	ldr	r3, [pc, #132]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f8:	4a1f      	ldr	r2, [pc, #124]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005602:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800560a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005612:	4a19      	ldr	r2, [pc, #100]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d016      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005624:	f7fc fc16 	bl	8001e54 <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800562a:	e00b      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562c:	f7fc fc12 	bl	8001e54 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	4293      	cmp	r3, r2
 800563c:	d902      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	74fb      	strb	r3, [r7, #19]
            break;
 8005642:	e006      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005644:	4b0c      	ldr	r3, [pc, #48]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564a:	f003 0302 	and.w	r3, r3, #2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d0ec      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005652:	7cfb      	ldrb	r3, [r7, #19]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005666:	4904      	ldr	r1, [pc, #16]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800566e:	e009      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005670:	7cfb      	ldrb	r3, [r7, #19]
 8005672:	74bb      	strb	r3, [r7, #18]
 8005674:	e006      	b.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000
 800567c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	7cfb      	ldrb	r3, [r7, #19]
 8005682:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005684:	7c7b      	ldrb	r3, [r7, #17]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d105      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568a:	4b8d      	ldr	r3, [pc, #564]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800568c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568e:	4a8c      	ldr	r2, [pc, #560]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005694:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056a2:	4b87      	ldr	r3, [pc, #540]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f023 0203 	bic.w	r2, r3, #3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	4983      	ldr	r1, [pc, #524]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056c4:	4b7e      	ldr	r3, [pc, #504]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f023 020c 	bic.w	r2, r3, #12
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	497b      	ldr	r1, [pc, #492]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0304 	and.w	r3, r3, #4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056e6:	4b76      	ldr	r3, [pc, #472]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	4972      	ldr	r1, [pc, #456]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005708:	4b6d      	ldr	r3, [pc, #436]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005716:	496a      	ldr	r1, [pc, #424]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800572a:	4b65      	ldr	r3, [pc, #404]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005738:	4961      	ldr	r1, [pc, #388]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800574c:	4b5c      	ldr	r3, [pc, #368]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	4959      	ldr	r1, [pc, #356]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800576e:	4b54      	ldr	r3, [pc, #336]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	4950      	ldr	r1, [pc, #320]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005790:	4b4b      	ldr	r3, [pc, #300]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	4948      	ldr	r1, [pc, #288]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057b2:	4b43      	ldr	r3, [pc, #268]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	493f      	ldr	r1, [pc, #252]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d028      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057d4:	4b3a      	ldr	r3, [pc, #232]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057e2:	4937      	ldr	r1, [pc, #220]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f2:	d106      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f4:	4b32      	ldr	r3, [pc, #200]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4a31      	ldr	r2, [pc, #196]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80057fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057fe:	60d3      	str	r3, [r2, #12]
 8005800:	e011      	b.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800580a:	d10c      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3304      	adds	r3, #4
 8005810:	2101      	movs	r1, #1
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f8a4 	bl	8005960 <RCCEx_PLLSAI1_Config>
 8005818:	4603      	mov	r3, r0
 800581a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005822:	7cfb      	ldrb	r3, [r7, #19]
 8005824:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d028      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005832:	4b23      	ldr	r3, [pc, #140]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005838:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005840:	491f      	ldr	r1, [pc, #124]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005850:	d106      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005852:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	4a1a      	ldr	r2, [pc, #104]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800585c:	60d3      	str	r3, [r2, #12]
 800585e:	e011      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005868:	d10c      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3304      	adds	r3, #4
 800586e:	2101      	movs	r1, #1
 8005870:	4618      	mov	r0, r3
 8005872:	f000 f875 	bl	8005960 <RCCEx_PLLSAI1_Config>
 8005876:	4603      	mov	r3, r0
 8005878:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800587a:	7cfb      	ldrb	r3, [r7, #19]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005880:	7cfb      	ldrb	r3, [r7, #19]
 8005882:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02b      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589e:	4908      	ldr	r1, [pc, #32]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ae:	d109      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058b0:	4b03      	ldr	r3, [pc, #12]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	4a02      	ldr	r2, [pc, #8]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ba:	60d3      	str	r3, [r2, #12]
 80058bc:	e014      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80058be:	bf00      	nop
 80058c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058cc:	d10c      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3304      	adds	r3, #4
 80058d2:	2101      	movs	r1, #1
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 f843 	bl	8005960 <RCCEx_PLLSAI1_Config>
 80058da:	4603      	mov	r3, r0
 80058dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058de:	7cfb      	ldrb	r3, [r7, #19]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80058e4:	7cfb      	ldrb	r3, [r7, #19]
 80058e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01c      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058f4:	4b19      	ldr	r3, [pc, #100]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005902:	4916      	ldr	r1, [pc, #88]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005912:	d10c      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3304      	adds	r3, #4
 8005918:	2102      	movs	r1, #2
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f820 	bl	8005960 <RCCEx_PLLSAI1_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005924:	7cfb      	ldrb	r3, [r7, #19]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d001      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800592a:	7cfb      	ldrb	r3, [r7, #19]
 800592c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800593a:	4b08      	ldr	r3, [pc, #32]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005940:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005948:	4904      	ldr	r1, [pc, #16]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005950:	7cbb      	ldrb	r3, [r7, #18]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	40021000 	.word	0x40021000

08005960 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800596e:	4b74      	ldr	r3, [pc, #464]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d018      	beq.n	80059ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800597a:	4b71      	ldr	r3, [pc, #452]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f003 0203 	and.w	r2, r3, #3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	429a      	cmp	r2, r3
 8005988:	d10d      	bne.n	80059a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
       ||
 800598e:	2b00      	cmp	r3, #0
 8005990:	d009      	beq.n	80059a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005992:	4b6b      	ldr	r3, [pc, #428]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	091b      	lsrs	r3, r3, #4
 8005998:	f003 0307 	and.w	r3, r3, #7
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
       ||
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d047      	beq.n	8005a36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	73fb      	strb	r3, [r7, #15]
 80059aa:	e044      	b.n	8005a36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d018      	beq.n	80059e6 <RCCEx_PLLSAI1_Config+0x86>
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d825      	bhi.n	8005a04 <RCCEx_PLLSAI1_Config+0xa4>
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d002      	beq.n	80059c2 <RCCEx_PLLSAI1_Config+0x62>
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d009      	beq.n	80059d4 <RCCEx_PLLSAI1_Config+0x74>
 80059c0:	e020      	b.n	8005a04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059c2:	4b5f      	ldr	r3, [pc, #380]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11d      	bne.n	8005a0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d2:	e01a      	b.n	8005a0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059d4:	4b5a      	ldr	r3, [pc, #360]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d116      	bne.n	8005a0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e4:	e013      	b.n	8005a0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059e6:	4b56      	ldr	r3, [pc, #344]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10f      	bne.n	8005a12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059f2:	4b53      	ldr	r3, [pc, #332]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a02:	e006      	b.n	8005a12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
      break;
 8005a08:	e004      	b.n	8005a14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a0a:	bf00      	nop
 8005a0c:	e002      	b.n	8005a14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a0e:	bf00      	nop
 8005a10:	e000      	b.n	8005a14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a12:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10d      	bne.n	8005a36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a1a:	4b49      	ldr	r3, [pc, #292]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6819      	ldr	r1, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	4943      	ldr	r1, [pc, #268]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d17c      	bne.n	8005b36 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005a3c:	4b40      	ldr	r3, [pc, #256]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a3f      	ldr	r2, [pc, #252]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a48:	f7fc fa04 	bl	8001e54 <HAL_GetTick>
 8005a4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a4e:	e009      	b.n	8005a64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a50:	f7fc fa00 	bl	8001e54 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d902      	bls.n	8005a64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	73fb      	strb	r3, [r7, #15]
        break;
 8005a62:	e005      	b.n	8005a70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005a64:	4b36      	ldr	r3, [pc, #216]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1ef      	bne.n	8005a50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d15f      	bne.n	8005b36 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d110      	bne.n	8005a9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a7c:	4b30      	ldr	r3, [pc, #192]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6892      	ldr	r2, [r2, #8]
 8005a8c:	0211      	lsls	r1, r2, #8
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	68d2      	ldr	r2, [r2, #12]
 8005a92:	06d2      	lsls	r2, r2, #27
 8005a94:	430a      	orrs	r2, r1
 8005a96:	492a      	ldr	r1, [pc, #168]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	610b      	str	r3, [r1, #16]
 8005a9c:	e027      	b.n	8005aee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d112      	bne.n	8005aca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aa4:	4b26      	ldr	r3, [pc, #152]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005aac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6892      	ldr	r2, [r2, #8]
 8005ab4:	0211      	lsls	r1, r2, #8
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6912      	ldr	r2, [r2, #16]
 8005aba:	0852      	lsrs	r2, r2, #1
 8005abc:	3a01      	subs	r2, #1
 8005abe:	0552      	lsls	r2, r2, #21
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	491f      	ldr	r1, [pc, #124]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	610b      	str	r3, [r1, #16]
 8005ac8:	e011      	b.n	8005aee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005aca:	4b1d      	ldr	r3, [pc, #116]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ad2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6892      	ldr	r2, [r2, #8]
 8005ada:	0211      	lsls	r1, r2, #8
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	6952      	ldr	r2, [r2, #20]
 8005ae0:	0852      	lsrs	r2, r2, #1
 8005ae2:	3a01      	subs	r2, #1
 8005ae4:	0652      	lsls	r2, r2, #25
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	4915      	ldr	r1, [pc, #84]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005aee:	4b14      	ldr	r3, [pc, #80]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005af4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005af8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afa:	f7fc f9ab 	bl	8001e54 <HAL_GetTick>
 8005afe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b00:	e009      	b.n	8005b16 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b02:	f7fc f9a7 	bl	8001e54 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d902      	bls.n	8005b16 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	73fb      	strb	r3, [r7, #15]
          break;
 8005b14:	e005      	b.n	8005b22 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b16:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0ef      	beq.n	8005b02 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	4903      	ldr	r1, [pc, #12]	; (8005b40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40021000 	.word	0x40021000

08005b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e049      	b.n	8005bea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d106      	bne.n	8005b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7fc f800 	bl	8001b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f000 fa7e 	bl	8006084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d001      	beq.n	8005c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e03b      	b.n	8005c84 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a19      	ldr	r2, [pc, #100]	; (8005c90 <HAL_TIM_Base_Start_IT+0x9c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_TIM_Base_Start_IT+0x4e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c36:	d004      	beq.n	8005c42 <HAL_TIM_Base_Start_IT+0x4e>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a15      	ldr	r2, [pc, #84]	; (8005c94 <HAL_TIM_Base_Start_IT+0xa0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d115      	bne.n	8005c6e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <HAL_TIM_Base_Start_IT+0xa4>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b06      	cmp	r3, #6
 8005c52:	d015      	beq.n	8005c80 <HAL_TIM_Base_Start_IT+0x8c>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5a:	d011      	beq.n	8005c80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6c:	e008      	b.n	8005c80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0201 	orr.w	r2, r2, #1
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e000      	b.n	8005c82 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40014000 	.word	0x40014000
 8005c98:	00010007 	.word	0x00010007

08005c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d020      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01b      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0202 	mvn.w	r2, #2
 8005cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f9ad 	bl	8006046 <HAL_TIM_IC_CaptureCallback>
 8005cec:	e005      	b.n	8005cfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f99f 	bl	8006032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f9b0 	bl	800605a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d020      	beq.n	8005d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01b      	beq.n	8005d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0204 	mvn.w	r2, #4
 8005d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2202      	movs	r2, #2
 8005d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f987 	bl	8006046 <HAL_TIM_IC_CaptureCallback>
 8005d38:	e005      	b.n	8005d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f979 	bl	8006032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f98a 	bl	800605a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d020      	beq.n	8005d98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d01b      	beq.n	8005d98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0208 	mvn.w	r2, #8
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f961 	bl	8006046 <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 f953 	bl	8006032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f964 	bl	800605a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d020      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01b      	beq.n	8005de4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0210 	mvn.w	r2, #16
 8005db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2208      	movs	r2, #8
 8005dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f93b 	bl	8006046 <HAL_TIM_IC_CaptureCallback>
 8005dd0:	e005      	b.n	8005dde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 f92d 	bl	8006032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f93e 	bl	800605a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0201 	mvn.w	r2, #1
 8005e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fb fd70 	bl	80018e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00c      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa9a 	bl	8006360 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00c      	beq.n	8005e50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa92 	bl	8006374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00c      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f8fd 	bl	800606e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00c      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0220 	mvn.w	r2, #32
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa5a 	bl	800634c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_TIM_ConfigClockSource+0x1c>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e0b6      	b.n	800602a <HAL_TIM_ConfigClockSource+0x18a>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005eda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ede:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ee6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef8:	d03e      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0xd8>
 8005efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005efe:	f200 8087 	bhi.w	8006010 <HAL_TIM_ConfigClockSource+0x170>
 8005f02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f06:	f000 8086 	beq.w	8006016 <HAL_TIM_ConfigClockSource+0x176>
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0e:	d87f      	bhi.n	8006010 <HAL_TIM_ConfigClockSource+0x170>
 8005f10:	2b70      	cmp	r3, #112	; 0x70
 8005f12:	d01a      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0xaa>
 8005f14:	2b70      	cmp	r3, #112	; 0x70
 8005f16:	d87b      	bhi.n	8006010 <HAL_TIM_ConfigClockSource+0x170>
 8005f18:	2b60      	cmp	r3, #96	; 0x60
 8005f1a:	d050      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0x11e>
 8005f1c:	2b60      	cmp	r3, #96	; 0x60
 8005f1e:	d877      	bhi.n	8006010 <HAL_TIM_ConfigClockSource+0x170>
 8005f20:	2b50      	cmp	r3, #80	; 0x50
 8005f22:	d03c      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0xfe>
 8005f24:	2b50      	cmp	r3, #80	; 0x50
 8005f26:	d873      	bhi.n	8006010 <HAL_TIM_ConfigClockSource+0x170>
 8005f28:	2b40      	cmp	r3, #64	; 0x40
 8005f2a:	d058      	beq.n	8005fde <HAL_TIM_ConfigClockSource+0x13e>
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d86f      	bhi.n	8006010 <HAL_TIM_ConfigClockSource+0x170>
 8005f30:	2b30      	cmp	r3, #48	; 0x30
 8005f32:	d064      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x15e>
 8005f34:	2b30      	cmp	r3, #48	; 0x30
 8005f36:	d86b      	bhi.n	8006010 <HAL_TIM_ConfigClockSource+0x170>
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d060      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x15e>
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d867      	bhi.n	8006010 <HAL_TIM_ConfigClockSource+0x170>
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d05c      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x15e>
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	d05a      	beq.n	8005ffe <HAL_TIM_ConfigClockSource+0x15e>
 8005f48:	e062      	b.n	8006010 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f5a:	f000 f971 	bl	8006240 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	609a      	str	r2, [r3, #8]
      break;
 8005f76:	e04f      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f88:	f000 f95a 	bl	8006240 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f9a:	609a      	str	r2, [r3, #8]
      break;
 8005f9c:	e03c      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005faa:	461a      	mov	r2, r3
 8005fac:	f000 f8ce 	bl	800614c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2150      	movs	r1, #80	; 0x50
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 f927 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005fbc:	e02c      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f000 f8ed 	bl	80061aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2160      	movs	r1, #96	; 0x60
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 f917 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005fdc:	e01c      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fea:	461a      	mov	r2, r3
 8005fec:	f000 f8ae 	bl	800614c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2140      	movs	r1, #64	; 0x40
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 f907 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 8005ffc:	e00c      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4619      	mov	r1, r3
 8006008:	4610      	mov	r0, r2
 800600a:	f000 f8fe 	bl	800620a <TIM_ITRx_SetConfig>
      break;
 800600e:	e003      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	73fb      	strb	r3, [r7, #15]
      break;
 8006014:	e000      	b.n	8006018 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006016:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006032:	b480      	push	{r7}
 8006034:	b083      	sub	sp, #12
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006046:	b480      	push	{r7}
 8006048:	b083      	sub	sp, #12
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
	...

08006084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <TIM_Base_SetConfig+0xbc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_Base_SetConfig+0x20>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a2:	d108      	bne.n	80060b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a21      	ldr	r2, [pc, #132]	; (8006140 <TIM_Base_SetConfig+0xbc>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00b      	beq.n	80060d6 <TIM_Base_SetConfig+0x52>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c4:	d007      	beq.n	80060d6 <TIM_Base_SetConfig+0x52>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a1e      	ldr	r2, [pc, #120]	; (8006144 <TIM_Base_SetConfig+0xc0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_Base_SetConfig+0x52>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <TIM_Base_SetConfig+0xc4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d108      	bne.n	80060e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a0c      	ldr	r2, [pc, #48]	; (8006140 <TIM_Base_SetConfig+0xbc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d007      	beq.n	8006124 <TIM_Base_SetConfig+0xa0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a0b      	ldr	r2, [pc, #44]	; (8006144 <TIM_Base_SetConfig+0xc0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <TIM_Base_SetConfig+0xa0>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a0a      	ldr	r2, [pc, #40]	; (8006148 <TIM_Base_SetConfig+0xc4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d103      	bne.n	800612c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	615a      	str	r2, [r3, #20]
}
 8006132:	bf00      	nop
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40014000 	.word	0x40014000
 8006148:	40014400 	.word	0x40014400

0800614c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f023 0201 	bic.w	r2, r3, #1
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f023 030a 	bic.w	r3, r3, #10
 8006188:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	621a      	str	r2, [r3, #32]
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b087      	sub	sp, #28
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	f023 0210 	bic.w	r2, r3, #16
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	031b      	lsls	r3, r3, #12
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800620a:	b480      	push	{r7}
 800620c:	b085      	sub	sp, #20
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
 8006212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006220:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	f043 0307 	orr.w	r3, r3, #7
 800622c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	609a      	str	r2, [r3, #8]
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800625a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	021a      	lsls	r2, r3, #8
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	431a      	orrs	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4313      	orrs	r3, r2
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	609a      	str	r2, [r3, #8]
}
 8006274:	bf00      	nop
 8006276:	371c      	adds	r7, #28
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006294:	2302      	movs	r3, #2
 8006296:	e04f      	b.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a21      	ldr	r2, [pc, #132]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d108      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a14      	ldr	r2, [pc, #80]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d009      	beq.n	800630c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006300:	d004      	beq.n	800630c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a10      	ldr	r2, [pc, #64]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d10c      	bne.n	8006326 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006312:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	4313      	orrs	r3, r2
 800631c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40014000 	.word	0x40014000

0800634c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e040      	b.n	800641c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fb fc04 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2224      	movs	r2, #36	; 0x24
 80063b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 0201 	bic.w	r2, r2, #1
 80063c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa82 	bl	80068d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f825 	bl	8006424 <UART_SetConfig>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e01b      	b.n	800641c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689a      	ldr	r2, [r3, #8]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006402:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fb01 	bl	8006a1c <UART_CheckIdleState>
 800641a:	4603      	mov	r3, r0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006428:	b08a      	sub	sp, #40	; 0x28
 800642a:	af00      	add	r7, sp, #0
 800642c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	431a      	orrs	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	4313      	orrs	r3, r2
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	4b9e      	ldr	r3, [pc, #632]	; (80066cc <UART_SetConfig+0x2a8>)
 8006454:	4013      	ands	r3, r2
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	6812      	ldr	r2, [r2, #0]
 800645a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800645c:	430b      	orrs	r3, r1
 800645e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a93      	ldr	r2, [pc, #588]	; (80066d0 <UART_SetConfig+0x2ac>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800648c:	4313      	orrs	r3, r2
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a0:	430a      	orrs	r2, r1
 80064a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a8a      	ldr	r2, [pc, #552]	; (80066d4 <UART_SetConfig+0x2b0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d126      	bne.n	80064fc <UART_SetConfig+0xd8>
 80064ae:	4b8a      	ldr	r3, [pc, #552]	; (80066d8 <UART_SetConfig+0x2b4>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	f003 0303 	and.w	r3, r3, #3
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	d81b      	bhi.n	80064f4 <UART_SetConfig+0xd0>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0xa0>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	080064ed 	.word	0x080064ed
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064da:	e0ab      	b.n	8006634 <UART_SetConfig+0x210>
 80064dc:	2302      	movs	r3, #2
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064e2:	e0a7      	b.n	8006634 <UART_SetConfig+0x210>
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ea:	e0a3      	b.n	8006634 <UART_SetConfig+0x210>
 80064ec:	2308      	movs	r3, #8
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064f2:	e09f      	b.n	8006634 <UART_SetConfig+0x210>
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064fa:	e09b      	b.n	8006634 <UART_SetConfig+0x210>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a76      	ldr	r2, [pc, #472]	; (80066dc <UART_SetConfig+0x2b8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d138      	bne.n	8006578 <UART_SetConfig+0x154>
 8006506:	4b74      	ldr	r3, [pc, #464]	; (80066d8 <UART_SetConfig+0x2b4>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650c:	f003 030c 	and.w	r3, r3, #12
 8006510:	2b0c      	cmp	r3, #12
 8006512:	d82d      	bhi.n	8006570 <UART_SetConfig+0x14c>
 8006514:	a201      	add	r2, pc, #4	; (adr r2, 800651c <UART_SetConfig+0xf8>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	08006551 	.word	0x08006551
 8006520:	08006571 	.word	0x08006571
 8006524:	08006571 	.word	0x08006571
 8006528:	08006571 	.word	0x08006571
 800652c:	08006561 	.word	0x08006561
 8006530:	08006571 	.word	0x08006571
 8006534:	08006571 	.word	0x08006571
 8006538:	08006571 	.word	0x08006571
 800653c:	08006559 	.word	0x08006559
 8006540:	08006571 	.word	0x08006571
 8006544:	08006571 	.word	0x08006571
 8006548:	08006571 	.word	0x08006571
 800654c:	08006569 	.word	0x08006569
 8006550:	2300      	movs	r3, #0
 8006552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006556:	e06d      	b.n	8006634 <UART_SetConfig+0x210>
 8006558:	2302      	movs	r3, #2
 800655a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800655e:	e069      	b.n	8006634 <UART_SetConfig+0x210>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006566:	e065      	b.n	8006634 <UART_SetConfig+0x210>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800656e:	e061      	b.n	8006634 <UART_SetConfig+0x210>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006576:	e05d      	b.n	8006634 <UART_SetConfig+0x210>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a58      	ldr	r2, [pc, #352]	; (80066e0 <UART_SetConfig+0x2bc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d125      	bne.n	80065ce <UART_SetConfig+0x1aa>
 8006582:	4b55      	ldr	r3, [pc, #340]	; (80066d8 <UART_SetConfig+0x2b4>)
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006588:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800658c:	2b30      	cmp	r3, #48	; 0x30
 800658e:	d016      	beq.n	80065be <UART_SetConfig+0x19a>
 8006590:	2b30      	cmp	r3, #48	; 0x30
 8006592:	d818      	bhi.n	80065c6 <UART_SetConfig+0x1a2>
 8006594:	2b20      	cmp	r3, #32
 8006596:	d00a      	beq.n	80065ae <UART_SetConfig+0x18a>
 8006598:	2b20      	cmp	r3, #32
 800659a:	d814      	bhi.n	80065c6 <UART_SetConfig+0x1a2>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <UART_SetConfig+0x182>
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d008      	beq.n	80065b6 <UART_SetConfig+0x192>
 80065a4:	e00f      	b.n	80065c6 <UART_SetConfig+0x1a2>
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ac:	e042      	b.n	8006634 <UART_SetConfig+0x210>
 80065ae:	2302      	movs	r3, #2
 80065b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b4:	e03e      	b.n	8006634 <UART_SetConfig+0x210>
 80065b6:	2304      	movs	r3, #4
 80065b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065bc:	e03a      	b.n	8006634 <UART_SetConfig+0x210>
 80065be:	2308      	movs	r3, #8
 80065c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c4:	e036      	b.n	8006634 <UART_SetConfig+0x210>
 80065c6:	2310      	movs	r3, #16
 80065c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065cc:	e032      	b.n	8006634 <UART_SetConfig+0x210>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a3f      	ldr	r2, [pc, #252]	; (80066d0 <UART_SetConfig+0x2ac>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d12a      	bne.n	800662e <UART_SetConfig+0x20a>
 80065d8:	4b3f      	ldr	r3, [pc, #252]	; (80066d8 <UART_SetConfig+0x2b4>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065e6:	d01a      	beq.n	800661e <UART_SetConfig+0x1fa>
 80065e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ec:	d81b      	bhi.n	8006626 <UART_SetConfig+0x202>
 80065ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f2:	d00c      	beq.n	800660e <UART_SetConfig+0x1ea>
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f8:	d815      	bhi.n	8006626 <UART_SetConfig+0x202>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <UART_SetConfig+0x1e2>
 80065fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006602:	d008      	beq.n	8006616 <UART_SetConfig+0x1f2>
 8006604:	e00f      	b.n	8006626 <UART_SetConfig+0x202>
 8006606:	2300      	movs	r3, #0
 8006608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660c:	e012      	b.n	8006634 <UART_SetConfig+0x210>
 800660e:	2302      	movs	r3, #2
 8006610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006614:	e00e      	b.n	8006634 <UART_SetConfig+0x210>
 8006616:	2304      	movs	r3, #4
 8006618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800661c:	e00a      	b.n	8006634 <UART_SetConfig+0x210>
 800661e:	2308      	movs	r3, #8
 8006620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006624:	e006      	b.n	8006634 <UART_SetConfig+0x210>
 8006626:	2310      	movs	r3, #16
 8006628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800662c:	e002      	b.n	8006634 <UART_SetConfig+0x210>
 800662e:	2310      	movs	r3, #16
 8006630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a25      	ldr	r2, [pc, #148]	; (80066d0 <UART_SetConfig+0x2ac>)
 800663a:	4293      	cmp	r3, r2
 800663c:	f040 808a 	bne.w	8006754 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006640:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006644:	2b08      	cmp	r3, #8
 8006646:	d824      	bhi.n	8006692 <UART_SetConfig+0x26e>
 8006648:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0x22c>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006675 	.word	0x08006675
 8006654:	08006693 	.word	0x08006693
 8006658:	0800667d 	.word	0x0800667d
 800665c:	08006693 	.word	0x08006693
 8006660:	08006683 	.word	0x08006683
 8006664:	08006693 	.word	0x08006693
 8006668:	08006693 	.word	0x08006693
 800666c:	08006693 	.word	0x08006693
 8006670:	0800668b 	.word	0x0800668b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006674:	f7fe fe9e 	bl	80053b4 <HAL_RCC_GetPCLK1Freq>
 8006678:	61f8      	str	r0, [r7, #28]
        break;
 800667a:	e010      	b.n	800669e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800667c:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <UART_SetConfig+0x2c0>)
 800667e:	61fb      	str	r3, [r7, #28]
        break;
 8006680:	e00d      	b.n	800669e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006682:	f7fe fdff 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 8006686:	61f8      	str	r0, [r7, #28]
        break;
 8006688:	e009      	b.n	800669e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668e:	61fb      	str	r3, [r7, #28]
        break;
 8006690:	e005      	b.n	800669e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800669c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8109 	beq.w	80068b8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	4413      	add	r3, r2
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d305      	bcc.n	80066c2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d912      	bls.n	80066e8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80066c8:	e0f6      	b.n	80068b8 <UART_SetConfig+0x494>
 80066ca:	bf00      	nop
 80066cc:	efff69f3 	.word	0xefff69f3
 80066d0:	40008000 	.word	0x40008000
 80066d4:	40013800 	.word	0x40013800
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40004400 	.word	0x40004400
 80066e0:	40004800 	.word	0x40004800
 80066e4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2200      	movs	r2, #0
 80066ec:	461c      	mov	r4, r3
 80066ee:	4615      	mov	r5, r2
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	022b      	lsls	r3, r5, #8
 80066fa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80066fe:	0222      	lsls	r2, r4, #8
 8006700:	68f9      	ldr	r1, [r7, #12]
 8006702:	6849      	ldr	r1, [r1, #4]
 8006704:	0849      	lsrs	r1, r1, #1
 8006706:	2000      	movs	r0, #0
 8006708:	4688      	mov	r8, r1
 800670a:	4681      	mov	r9, r0
 800670c:	eb12 0a08 	adds.w	sl, r2, r8
 8006710:	eb43 0b09 	adc.w	fp, r3, r9
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	607a      	str	r2, [r7, #4]
 800671e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006722:	4650      	mov	r0, sl
 8006724:	4659      	mov	r1, fp
 8006726:	f7f9 fd51 	bl	80001cc <__aeabi_uldivmod>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4613      	mov	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006738:	d308      	bcc.n	800674c <UART_SetConfig+0x328>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006740:	d204      	bcs.n	800674c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	60da      	str	r2, [r3, #12]
 800674a:	e0b5      	b.n	80068b8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006752:	e0b1      	b.n	80068b8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675c:	d15d      	bne.n	800681a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800675e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006762:	2b08      	cmp	r3, #8
 8006764:	d827      	bhi.n	80067b6 <UART_SetConfig+0x392>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <UART_SetConfig+0x348>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	08006791 	.word	0x08006791
 8006770:	08006799 	.word	0x08006799
 8006774:	080067a1 	.word	0x080067a1
 8006778:	080067b7 	.word	0x080067b7
 800677c:	080067a7 	.word	0x080067a7
 8006780:	080067b7 	.word	0x080067b7
 8006784:	080067b7 	.word	0x080067b7
 8006788:	080067b7 	.word	0x080067b7
 800678c:	080067af 	.word	0x080067af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006790:	f7fe fe10 	bl	80053b4 <HAL_RCC_GetPCLK1Freq>
 8006794:	61f8      	str	r0, [r7, #28]
        break;
 8006796:	e014      	b.n	80067c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006798:	f7fe fe22 	bl	80053e0 <HAL_RCC_GetPCLK2Freq>
 800679c:	61f8      	str	r0, [r7, #28]
        break;
 800679e:	e010      	b.n	80067c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067a0:	4b4c      	ldr	r3, [pc, #304]	; (80068d4 <UART_SetConfig+0x4b0>)
 80067a2:	61fb      	str	r3, [r7, #28]
        break;
 80067a4:	e00d      	b.n	80067c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067a6:	f7fe fd6d 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 80067aa:	61f8      	str	r0, [r7, #28]
        break;
 80067ac:	e009      	b.n	80067c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067b2:	61fb      	str	r3, [r7, #28]
        break;
 80067b4:	e005      	b.n	80067c2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80067c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d077      	beq.n	80068b8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	005a      	lsls	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	441a      	add	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b0f      	cmp	r3, #15
 80067e2:	d916      	bls.n	8006812 <UART_SetConfig+0x3ee>
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ea:	d212      	bcs.n	8006812 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	f023 030f 	bic.w	r3, r3, #15
 80067f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	085b      	lsrs	r3, r3, #1
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	b29a      	uxth	r2, r3
 8006802:	8afb      	ldrh	r3, [r7, #22]
 8006804:	4313      	orrs	r3, r2
 8006806:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	8afa      	ldrh	r2, [r7, #22]
 800680e:	60da      	str	r2, [r3, #12]
 8006810:	e052      	b.n	80068b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006818:	e04e      	b.n	80068b8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800681a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800681e:	2b08      	cmp	r3, #8
 8006820:	d827      	bhi.n	8006872 <UART_SetConfig+0x44e>
 8006822:	a201      	add	r2, pc, #4	; (adr r2, 8006828 <UART_SetConfig+0x404>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	0800684d 	.word	0x0800684d
 800682c:	08006855 	.word	0x08006855
 8006830:	0800685d 	.word	0x0800685d
 8006834:	08006873 	.word	0x08006873
 8006838:	08006863 	.word	0x08006863
 800683c:	08006873 	.word	0x08006873
 8006840:	08006873 	.word	0x08006873
 8006844:	08006873 	.word	0x08006873
 8006848:	0800686b 	.word	0x0800686b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800684c:	f7fe fdb2 	bl	80053b4 <HAL_RCC_GetPCLK1Freq>
 8006850:	61f8      	str	r0, [r7, #28]
        break;
 8006852:	e014      	b.n	800687e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006854:	f7fe fdc4 	bl	80053e0 <HAL_RCC_GetPCLK2Freq>
 8006858:	61f8      	str	r0, [r7, #28]
        break;
 800685a:	e010      	b.n	800687e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800685c:	4b1d      	ldr	r3, [pc, #116]	; (80068d4 <UART_SetConfig+0x4b0>)
 800685e:	61fb      	str	r3, [r7, #28]
        break;
 8006860:	e00d      	b.n	800687e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006862:	f7fe fd0f 	bl	8005284 <HAL_RCC_GetSysClockFreq>
 8006866:	61f8      	str	r0, [r7, #28]
        break;
 8006868:	e009      	b.n	800687e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800686e:	61fb      	str	r3, [r7, #28]
        break;
 8006870:	e005      	b.n	800687e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800687c:	bf00      	nop
    }

    if (pclk != 0U)
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d019      	beq.n	80068b8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	085a      	lsrs	r2, r3, #1
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	441a      	add	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	fbb2 f3f3 	udiv	r3, r2, r3
 8006896:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b0f      	cmp	r3, #15
 800689c:	d909      	bls.n	80068b2 <UART_SetConfig+0x48e>
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a4:	d205      	bcs.n	80068b2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60da      	str	r2, [r3, #12]
 80068b0:	e002      	b.n	80068b8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80068c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3728      	adds	r7, #40	; 0x28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068d2:	bf00      	nop
 80068d4:	00f42400 	.word	0x00f42400

080068d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	f003 0310 	and.w	r3, r3, #16
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	f003 0320 	and.w	r3, r3, #32
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01a      	beq.n	80069ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d6:	d10a      	bne.n	80069ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	605a      	str	r2, [r3, #4]
  }
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b098      	sub	sp, #96	; 0x60
 8006a20:	af02      	add	r7, sp, #8
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a2c:	f7fb fa12 	bl	8001e54 <HAL_GetTick>
 8006a30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d12e      	bne.n	8006a9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f88c 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 8006a54:	4603      	mov	r3, r0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d021      	beq.n	8006a9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	461a      	mov	r2, r3
 8006a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a78:	647b      	str	r3, [r7, #68]	; 0x44
 8006a7a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e6      	bne.n	8006a5a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e062      	b.n	8006b64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b04      	cmp	r3, #4
 8006aaa:	d149      	bne.n	8006b40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f856 	bl	8006b6c <UART_WaitOnFlagUntilTimeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d03c      	beq.n	8006b40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e6      	bne.n	8006ac6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3308      	adds	r3, #8
 8006b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b18:	61fa      	str	r2, [r7, #28]
 8006b1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	69b9      	ldr	r1, [r7, #24]
 8006b1e:	69fa      	ldr	r2, [r7, #28]
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	617b      	str	r3, [r7, #20]
   return(result);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e5      	bne.n	8006af8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e011      	b.n	8006b64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2220      	movs	r2, #32
 8006b44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3758      	adds	r7, #88	; 0x58
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7c:	e049      	b.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b84:	d045      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b86:	f7fb f965 	bl	8001e54 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d302      	bcc.n	8006b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d101      	bne.n	8006ba0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e048      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d031      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	f003 0308 	and.w	r3, r3, #8
 8006bb8:	2b08      	cmp	r3, #8
 8006bba:	d110      	bne.n	8006bde <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f838 	bl	8006c3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2208      	movs	r2, #8
 8006bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e029      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bec:	d111      	bne.n	8006c12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f81e 	bl	8006c3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e00f      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	bf0c      	ite	eq
 8006c22:	2301      	moveq	r3, #1
 8006c24:	2300      	movne	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d0a6      	beq.n	8006b7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3710      	adds	r7, #16
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b095      	sub	sp, #84	; 0x54
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c60:	643b      	str	r3, [r7, #64]	; 0x40
 8006c62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e6      	bne.n	8006c42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3308      	adds	r3, #8
 8006c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f023 0301 	bic.w	r3, r3, #1
 8006c8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3308      	adds	r3, #8
 8006c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e5      	bne.n	8006c74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d118      	bne.n	8006ce2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	e853 3f00 	ldrex	r3, [r3]
 8006cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	f023 0310 	bic.w	r3, r3, #16
 8006cc4:	647b      	str	r3, [r7, #68]	; 0x44
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cce:	61bb      	str	r3, [r7, #24]
 8006cd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd2:	6979      	ldr	r1, [r7, #20]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	613b      	str	r3, [r7, #16]
   return(result);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1e6      	bne.n	8006cb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006cf6:	bf00      	nop
 8006cf8:	3754      	adds	r7, #84	; 0x54
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <memset>:
 8006d02:	4402      	add	r2, r0
 8006d04:	4603      	mov	r3, r0
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d100      	bne.n	8006d0c <memset+0xa>
 8006d0a:	4770      	bx	lr
 8006d0c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d10:	e7f9      	b.n	8006d06 <memset+0x4>
	...

08006d14 <__libc_init_array>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	4d0d      	ldr	r5, [pc, #52]	; (8006d4c <__libc_init_array+0x38>)
 8006d18:	4c0d      	ldr	r4, [pc, #52]	; (8006d50 <__libc_init_array+0x3c>)
 8006d1a:	1b64      	subs	r4, r4, r5
 8006d1c:	10a4      	asrs	r4, r4, #2
 8006d1e:	2600      	movs	r6, #0
 8006d20:	42a6      	cmp	r6, r4
 8006d22:	d109      	bne.n	8006d38 <__libc_init_array+0x24>
 8006d24:	4d0b      	ldr	r5, [pc, #44]	; (8006d54 <__libc_init_array+0x40>)
 8006d26:	4c0c      	ldr	r4, [pc, #48]	; (8006d58 <__libc_init_array+0x44>)
 8006d28:	f000 f818 	bl	8006d5c <_init>
 8006d2c:	1b64      	subs	r4, r4, r5
 8006d2e:	10a4      	asrs	r4, r4, #2
 8006d30:	2600      	movs	r6, #0
 8006d32:	42a6      	cmp	r6, r4
 8006d34:	d105      	bne.n	8006d42 <__libc_init_array+0x2e>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3c:	4798      	blx	r3
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7ee      	b.n	8006d20 <__libc_init_array+0xc>
 8006d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d46:	4798      	blx	r3
 8006d48:	3601      	adds	r6, #1
 8006d4a:	e7f2      	b.n	8006d32 <__libc_init_array+0x1e>
 8006d4c:	08006dc4 	.word	0x08006dc4
 8006d50:	08006dc4 	.word	0x08006dc4
 8006d54:	08006dc4 	.word	0x08006dc4
 8006d58:	08006dc8 	.word	0x08006dc8

08006d5c <_init>:
 8006d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d5e:	bf00      	nop
 8006d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d62:	bc08      	pop	{r3}
 8006d64:	469e      	mov	lr, r3
 8006d66:	4770      	bx	lr

08006d68 <_fini>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr
