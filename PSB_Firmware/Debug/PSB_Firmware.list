
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007478  08007478  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007480  08007480  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007480  08007480  00017480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007484  08007484  00017484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000000c  08007494  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08007494  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014085  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ef  00000000  00000000  00034104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  000365f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efa  00000000  00000000  000378e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b26  00000000  00000000  000387e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015653  00000000  00000000  0003b308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9205  00000000  00000000  0005095b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005144  00000000  00000000  00129b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0012eca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007418 	.word	0x08007418

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08007418 	.word	0x08007418

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f001 ffaf 	bl	8002430 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_MspInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f851 	bl	8000578 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9df 	bl	8000898 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f9ad 	bl	8000838 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80004de:	f000 f91d 	bl	800071c <MX_I2C3_Init>
  MX_I2C2_Init();
 80004e2:	f000 f8db 	bl	800069c <MX_I2C2_Init>
  MX_I2C1_Init();
 80004e6:	f000 f899 	bl	800061c <MX_I2C1_Init>
  MX_TIM2_Init();
 80004ea:	f000 f957 	bl	800079c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the system
  i2c_slv_init(); // Initialize the I2C slave module
 80004ee:	f001 fc8d 	bl	8001e0c <i2c_slv_init>

  // A PROPER INITIALISATION MUST GO HERE!!!
  //while(1);


  bool ijc_init_status = ijc_detector_init();
 80004f2:	f000 fe39 	bl	8001168 <ijc_detector_init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  bool cea_init_status = cea_detector_init();
 80004fa:	f000 fe89 	bl	8001210 <cea_detector_init>
 80004fe:	4603      	mov	r3, r0
 8000500:	71bb      	strb	r3, [r7, #6]



  if(ijc_init_status == EXIT_FAILURE)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d000      	beq.n	800050a <main+0x42>
  {
	  while(1);
 8000508:	e7fe      	b.n	8000508 <main+0x40>
  }

  if(cea_init_status == EXIT_FAILURE)
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d000      	beq.n	8000512 <main+0x4a>
  {
	  while(1);
 8000510:	e7fe      	b.n	8000510 <main+0x48>
  }

  // Start the timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <main+0x9c>)
 8000514:	f005 fecc 	bl	80062b0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ijc_dssd_ramp_loop();
 8000518:	f000 fbd6 	bl	8000cc8 <ijc_dssd_ramp_loop>
	  cea_dssd_ramp_loop();
 800051c:	f000 fc6e 	bl	8000dfc <cea_dssd_ramp_loop>

	  if (Xfer_Complete ==1)                            // Check for the I2C read complete to have been executed
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <main+0xa0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d10f      	bne.n	8000548 <main+0x80>
	  {

		  i2c_slv_cmd_rx_tx_handle();
 8000528:	f001 f8c4 	bl	80016b4 <i2c_slv_cmd_rx_tx_handle>

		  HAL_Delay(1); 								// Delay for 1 ms
 800052c:	2001      	movs	r0, #1
 800052e:	f001 fffb 	bl	8002528 <HAL_Delay>
		  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) // Put I2C peripheral in listen mode process
 8000532:	480e      	ldr	r0, [pc, #56]	; (800056c <main+0xa4>)
 8000534:	f002 ff4e 	bl	80033d4 <HAL_I2C_EnableListen_IT>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <main+0x7a>
		  {
			  Error_Handler();
 800053e:	f001 fd51 	bl	8001fe4 <Error_Handler>
		  }
		  Xfer_Complete =0;
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <main+0xa0>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
	  }

	  if(ijc_detector.making_safe_inprogress)
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0xa8>)
 800054a:	7b5b      	ldrb	r3, [r3, #13]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d002      	beq.n	8000556 <main+0x8e>
	  {
		  // Make the IJC detector safe
		  make_ijc_dssd_safe();
 8000550:	f000 fcee 	bl	8000f30 <make_ijc_dssd_safe>
 8000554:	e7e0      	b.n	8000518 <main+0x50>
	  }
	  else if (cea_detector.making_safe_inprogress)
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <main+0xac>)
 8000558:	7b5b      	ldrb	r3, [r3, #13]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0dc      	beq.n	8000518 <main+0x50>
	  {
		  make_cea_dssd_safe();
 800055e:	f000 fd5d 	bl	800101c <make_cea_dssd_safe>
	  ijc_dssd_ramp_loop();
 8000562:	e7d9      	b.n	8000518 <main+0x50>
 8000564:	2000012c 	.word	0x2000012c
 8000568:	2000002c 	.word	0x2000002c
 800056c:	20000030 	.word	0x20000030
 8000570:	20000214 	.word	0x20000214
 8000574:	20000224 	.word	0x20000224

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b096      	sub	sp, #88	; 0x58
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2244      	movs	r2, #68	; 0x44
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f006 ff19 	bl	80073be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800059a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800059e:	f004 fc65 	bl	8004e6c <HAL_PWREx_ControlVoltageScaling>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a8:	f001 fd1c 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ac:	2302      	movs	r3, #2
 80005ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b6:	2310      	movs	r3, #16
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005be:	2302      	movs	r3, #2
 80005c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005c6:	230a      	movs	r3, #10
 80005c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ca:	2307      	movs	r3, #7
 80005cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 fc9c 	bl	8004f18 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005e6:	f001 fcfd 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2303      	movs	r3, #3
 80005f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fe:	463b      	mov	r3, r7
 8000600:	2104      	movs	r1, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f005 f89c 	bl	8005740 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060e:	f001 fce9 	bl	8001fe4 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3758      	adds	r7, #88	; 0x58
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_I2C1_Init+0x74>)
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <MX_I2C1_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_I2C1_Init+0x74>)
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <MX_I2C1_Init+0x7c>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 50;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_I2C1_Init+0x74>)
 800062e:	2232      	movs	r2, #50	; 0x32
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_I2C1_Init+0x74>)
 8000634:	2201      	movs	r2, #1
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_I2C1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <MX_I2C1_Init+0x74>)
 8000658:	f002 faae 	bl	8002bb8 <HAL_I2C_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000662:	f001 fcbf 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000666:	2100      	movs	r1, #0
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <MX_I2C1_Init+0x74>)
 800066a:	f004 fb59 	bl	8004d20 <HAL_I2CEx_ConfigAnalogFilter>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000674:	f001 fcb6 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2C1_Init+0x74>)
 800067c:	f004 fb9b 	bl	8004db6 <HAL_I2CEx_ConfigDigitalFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f001 fcad 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000030 	.word	0x20000030
 8000694:	40005400 	.word	0x40005400
 8000698:	10909cec 	.word	0x10909cec

0800069c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_I2C2_Init+0x74>)
 80006a2:	4a1c      	ldr	r2, [pc, #112]	; (8000714 <MX_I2C2_Init+0x78>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_I2C2_Init+0x74>)
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <MX_I2C2_Init+0x7c>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_I2C2_Init+0x74>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006be:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_I2C2_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <MX_I2C2_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_I2C2_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_I2C2_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d6:	480e      	ldr	r0, [pc, #56]	; (8000710 <MX_I2C2_Init+0x74>)
 80006d8:	f002 fa6e 	bl	8002bb8 <HAL_I2C_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006e2:	f001 fc7f 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_I2C2_Init+0x74>)
 80006ea:	f004 fb19 	bl	8004d20 <HAL_I2CEx_ConfigAnalogFilter>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006f4:	f001 fc76 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_I2C2_Init+0x74>)
 80006fc:	f004 fb5b 	bl	8004db6 <HAL_I2CEx_ConfigDigitalFilter>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000706:	f001 fc6d 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000084 	.word	0x20000084
 8000714:	40005800 	.word	0x40005800
 8000718:	10909cec 	.word	0x10909cec

0800071c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_I2C3_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_I2C3_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_I2C3_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_I2C3_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_I2C3_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_I2C3_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_I2C3_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_I2C3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C3_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <MX_I2C3_Init+0x74>)
 8000758:	f002 fa2e 	bl	8002bb8 <HAL_I2C_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000762:	f001 fc3f 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	2100      	movs	r1, #0
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <MX_I2C3_Init+0x74>)
 800076a:	f004 fad9 	bl	8004d20 <HAL_I2CEx_ConfigAnalogFilter>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000774:	f001 fc36 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_I2C3_Init+0x74>)
 800077c:	f004 fb1b 	bl	8004db6 <HAL_I2CEx_ConfigDigitalFilter>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000786:	f001 fc2d 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000d8 	.word	0x200000d8
 8000794:	40005c00 	.word	0x40005c00
 8000798:	10909cec 	.word	0x10909cec

0800079c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <MX_TIM2_Init+0x98>)
 80007bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_TIM2_Init+0x98>)
 80007c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <MX_TIM2_Init+0x98>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <MX_TIM2_Init+0x98>)
 80007d2:	f649 4240 	movw	r2, #40000	; 0x9c40
 80007d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_TIM2_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <MX_TIM2_Init+0x98>)
 80007e0:	2280      	movs	r2, #128	; 0x80
 80007e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e4:	4813      	ldr	r0, [pc, #76]	; (8000834 <MX_TIM2_Init+0x98>)
 80007e6:	f005 fd0b 	bl	8006200 <HAL_TIM_Base_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007f0:	f001 fbf8 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fa:	f107 0310 	add.w	r3, r7, #16
 80007fe:	4619      	mov	r1, r3
 8000800:	480c      	ldr	r0, [pc, #48]	; (8000834 <MX_TIM2_Init+0x98>)
 8000802:	f005 feab 	bl	800655c <HAL_TIM_ConfigClockSource>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800080c:	f001 fbea 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_TIM2_Init+0x98>)
 800081e:	f006 f88d 	bl	800693c <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000828:	f001 fbdc 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3720      	adds	r7, #32
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000012c 	.word	0x2000012c

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800083e:	4a15      	ldr	r2, [pc, #84]	; (8000894 <MX_USART2_UART_Init+0x5c>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b09      	ldr	r3, [pc, #36]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_USART2_UART_Init+0x58>)
 800087c:	f006 f8e2 	bl	8006a44 <HAL_UART_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000886:	f001 fbad 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000178 	.word	0x20000178
 8000894:	40004400 	.word	0x40004400

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b46      	ldr	r3, [pc, #280]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a45      	ldr	r2, [pc, #276]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b43      	ldr	r3, [pc, #268]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	4b40      	ldr	r3, [pc, #256]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a3f      	ldr	r2, [pc, #252]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b3d      	ldr	r3, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b3a      	ldr	r3, [pc, #232]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a39      	ldr	r2, [pc, #228]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a33      	ldr	r2, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x130>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <MX_GPIO_Init+0x130>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	21b0      	movs	r1, #176	; 0xb0
 8000912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000916:	f002 f91d 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_HT_CEA_DSSD_Pin|LD4_Pin|ENABLE_HT_IJC_DSSD_Pin|ENABLE_2_IJC_Pin
 800091a:	2200      	movs	r2, #0
 800091c:	f243 31e0 	movw	r1, #13280	; 0x33e0
 8000920:	482a      	ldr	r0, [pc, #168]	; (80009cc <MX_GPIO_Init+0x134>)
 8000922:	f002 f917 	bl	8002b54 <HAL_GPIO_WritePin>
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIMING_PIN_GPIO_Port, TIMING_PIN_Pin, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	4829      	ldr	r0, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x138>)
 800092c:	f002 f912 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000936:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	4822      	ldr	r0, [pc, #136]	; (80009d0 <MX_GPIO_Init+0x138>)
 8000948:	f001 ff72 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800094c:	23b0      	movs	r3, #176	; 0xb0
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000966:	f001 ff63 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000972:	2301      	movs	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f001 ff56 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_HT_CEA_DSSD_Pin LD4_Pin ENABLE_HT_IJC_DSSD_Pin ENABLE_2_IJC_Pin
                           ENABLE_3_CEA_Pin ENABLE_4_Pin ENABLE_5_UCD_Pin */
  GPIO_InitStruct.Pin = ENABLE_HT_CEA_DSSD_Pin|LD4_Pin|ENABLE_HT_IJC_DSSD_Pin|ENABLE_2_IJC_Pin
 8000984:	f243 33e0 	movw	r3, #13280	; 0x33e0
 8000988:	617b      	str	r3, [r7, #20]
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0x134>)
 800099e:	f001 ff47 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIMING_PIN_Pin */
  GPIO_InitStruct.Pin = TIMING_PIN_Pin;
 80009a2:	2340      	movs	r3, #64	; 0x40
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIMING_PIN_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0x138>)
 80009ba:	f001 ff39 	bl	8002830 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000400 	.word	0x48000400
 80009d0:	48000800 	.word	0x48000800

080009d4 <i2c_read>:
}
*/
// ###############################################

HAL_StatusTypeDef i2c_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af02      	add	r7, sp, #8
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	461a      	mov	r2, r3
 80009e0:	460b      	mov	r3, r1
 80009e2:	72fb      	strb	r3, [r7, #11]
 80009e4:	4613      	mov	r3, r2
 80009e6:	813b      	strh	r3, [r7, #8]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(hi2c, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 80009e8:	7afb      	ldrb	r3, [r7, #11]
 80009ea:	b299      	uxth	r1, r3
 80009ec:	893b      	ldrh	r3, [r7, #8]
 80009ee:	220a      	movs	r2, #10
 80009f0:	9200      	str	r2, [sp, #0]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f002 fa93 	bl	8002f20 <HAL_I2C_Master_Receive>
 80009fa:	4603      	mov	r3, r0
 80009fc:	75fb      	strb	r3, [r7, #23]
	return(ret);
 80009fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <i2c_write>:

HAL_StatusTypeDef i2c_write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	461a      	mov	r2, r3
 8000a14:	460b      	mov	r3, r1
 8000a16:	72fb      	strb	r3, [r7, #11]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	813b      	strh	r3, [r7, #8]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8000a1c:	7afb      	ldrb	r3, [r7, #11]
 8000a1e:	b299      	uxth	r1, r3
 8000a20:	893b      	ldrh	r3, [r7, #8]
 8000a22:	220a      	movs	r2, #10
 8000a24:	9200      	str	r2, [sp, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f002 f961 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <i2c_write_read>:

HAL_StatusTypeDef i2c_write_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	461a      	mov	r2, r3
 8000a48:	460b      	mov	r3, r1
 8000a4a:	72fb      	strb	r3, [r7, #11]
 8000a4c:	4613      	mov	r3, r2
 8000a4e:	813b      	strh	r3, [r7, #8]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8000a54:	2305      	movs	r3, #5
 8000a56:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 8000a58:	2305      	movs	r3, #5
 8000a5a:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8000a5c:	7dfb      	ldrb	r3, [r7, #23]
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d802      	bhi.n	8000a68 <i2c_write_read+0x2c>
 8000a62:	2064      	movs	r0, #100	; 0x64
 8000a64:	f001 fd60 	bl	8002528 <HAL_Delay>
		status = i2c_write(hi2c, dev_addr, out_ptr, countTX);						// Perform I2C operation
 8000a68:	893b      	ldrh	r3, [r7, #8]
 8000a6a:	7af9      	ldrb	r1, [r7, #11]
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	68f8      	ldr	r0, [r7, #12]
 8000a70:	f7ff ffca 	bl	8000a08 <i2c_write>
 8000a74:	4603      	mov	r3, r0
 8000a76:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 8000a78:	7dfb      	ldrb	r3, [r7, #23]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8000a7e:	7d7b      	ldrb	r3, [r7, #21]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d102      	bne.n	8000a8a <i2c_write_read+0x4e>
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d1e8      	bne.n	8000a5c <i2c_write_read+0x20>

	if(status == HAL_ERROR){return(status);}
 8000a8a:	7d7b      	ldrb	r3, [r7, #21]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d101      	bne.n	8000a94 <i2c_write_read+0x58>
 8000a90:	7d7b      	ldrb	r3, [r7, #21]
 8000a92:	e01a      	b.n	8000aca <i2c_write_read+0x8e>

	HAL_Delay(5);
 8000a94:	2005      	movs	r0, #5
 8000a96:	f001 fd47 	bl	8002528 <HAL_Delay>

	do
	{
		// Read operation
		status =  i2c_read(hi2c, dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 8000a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a9c:	7af9      	ldrb	r1, [r7, #11]
 8000a9e:	6a3a      	ldr	r2, [r7, #32]
 8000aa0:	68f8      	ldr	r0, [r7, #12]
 8000aa2:	f7ff ff97 	bl	80009d4 <i2c_read>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8000aaa:	7dbb      	ldrb	r3, [r7, #22]
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	d802      	bhi.n	8000ab6 <i2c_write_read+0x7a>
 8000ab0:	2064      	movs	r0, #100	; 0x64
 8000ab2:	f001 fd39 	bl	8002528 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8000ab6:	7dbb      	ldrb	r3, [r7, #22]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8000abc:	7d7b      	ldrb	r3, [r7, #21]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d102      	bne.n	8000ac8 <i2c_write_read+0x8c>
 8000ac2:	7dbb      	ldrb	r3, [r7, #22]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1e8      	bne.n	8000a9a <i2c_write_read+0x5e>

	return(status);
 8000ac8:	7d7b      	ldrb	r3, [r7, #21]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <max6911_read>:
//************************************
//        Chips and Devs
//************************************

uint16_t max6911_read(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t cmd_msb, uint8_t cmd_lsb)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	4608      	mov	r0, r1
 8000ade:	4611      	mov	r1, r2
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	70fb      	strb	r3, [r7, #3]
 8000ae6:	460b      	mov	r3, r1
 8000ae8:	70bb      	strb	r3, [r7, #2]
 8000aea:	4613      	mov	r3, r2
 8000aec:	707b      	strb	r3, [r7, #1]
	uint16_t temp_data = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	81fb      	strh	r3, [r7, #14]
	uint8_t rx_data[2] = {0x00, 0x00};
 8000af2:	2300      	movs	r3, #0
 8000af4:	81bb      	strh	r3, [r7, #12]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000af6:	2300      	movs	r3, #0
 8000af8:	813b      	strh	r3, [r7, #8]

	// Init the device ctrl reg1
	max6911_set_ctrl1_register(INIT_WITH_CURRENT_GAIN_8);
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 f864 	bl	8000bc8 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000b00:	230a      	movs	r3, #10
 8000b02:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000b04:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <max6911_read+0xec>)
 8000b06:	7b1b      	ldrb	r3, [r3, #12]
 8000b08:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000b0a:	f107 0208 	add.w	r2, r7, #8
 8000b0e:	78f9      	ldrb	r1, [r7, #3]
 8000b10:	2302      	movs	r3, #2
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ff78 	bl	8000a08 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000b18:	230b      	movs	r3, #11
 8000b1a:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000b1c:	4b28      	ldr	r3, [pc, #160]	; (8000bc0 <max6911_read+0xec>)
 8000b1e:	7b5b      	ldrb	r3, [r3, #13]
 8000b20:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000b22:	f107 0208 	add.w	r2, r7, #8
 8000b26:	78f9      	ldrb	r1, [r7, #3]
 8000b28:	2302      	movs	r3, #2
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff ff6c 	bl	8000a08 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the device for normal fast read operation
	max6911_set_ctrl1_register(FASTREAD_NORMAL_OPERATION);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f000 f849 	bl	8000bc8 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000b36:	230a      	movs	r3, #10
 8000b38:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000b3a:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <max6911_read+0xec>)
 8000b3c:	7b1b      	ldrb	r3, [r3, #12]
 8000b3e:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	78f9      	ldrb	r1, [r7, #3]
 8000b46:	2302      	movs	r3, #2
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff5d 	bl	8000a08 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000b4e:	230b      	movs	r3, #11
 8000b50:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <max6911_read+0xec>)
 8000b54:	7b5b      	ldrb	r3, [r3, #13]
 8000b56:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000b58:	f107 0208 	add.w	r2, r7, #8
 8000b5c:	78f9      	ldrb	r1, [r7, #3]
 8000b5e:	2302      	movs	r3, #2
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff51 	bl	8000a08 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the read for MSB and LSB
	status = i2c_write_read(hi2c, device_addr, &cmd_msb, 1, &rx_data[0], 1);
 8000b66:	1cba      	adds	r2, r7, #2
 8000b68:	78f9      	ldrb	r1, [r7, #3]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2301      	movs	r3, #1
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ff60 	bl	8000a3c <i2c_write_read>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <max6911_read+0xf0>)
 8000b82:	701a      	strb	r2, [r3, #0]
	status = i2c_write_read(hi2c, device_addr, &cmd_lsb, 1, &rx_data[1], 1);
 8000b84:	1c7a      	adds	r2, r7, #1
 8000b86:	78f9      	ldrb	r1, [r7, #3]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	f107 030c 	add.w	r3, r7, #12
 8000b90:	3301      	adds	r3, #1
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	2301      	movs	r3, #1
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ff50 	bl	8000a3c <i2c_write_read>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <max6911_read+0xf0>)
 8000ba2:	701a      	strb	r2, [r3, #0]

	temp_data = (rx_data[0]<<8) | (rx_data[1]);
 8000ba4:	7b3b      	ldrb	r3, [r7, #12]
 8000ba6:	021b      	lsls	r3, r3, #8
 8000ba8:	b21a      	sxth	r2, r3
 8000baa:	7b7b      	ldrb	r3, [r7, #13]
 8000bac:	b21b      	sxth	r3, r3
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	81fb      	strh	r3, [r7, #14]
	return(temp_data);
 8000bb4:	89fb      	ldrh	r3, [r7, #14]

}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000234 	.word	0x20000234
 8000bc4:	20000200 	.word	0x20000200

08000bc8 <max6911_set_ctrl1_register>:


void max6911_set_ctrl1_register(_max6911_ctrl selector)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]

	switch(selector)
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <max6911_set_ctrl1_register+0x16>
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d020      	beq.n	8000c1e <max6911_set_ctrl1_register+0x56>
			break;
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		default:
			break;
 8000bdc:	e03e      	b.n	8000c5c <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000bde:	4a22      	ldr	r2, [pc, #136]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000be0:	7b13      	ldrb	r3, [r2, #12]
 8000be2:	f36f 03c3 	bfc	r3, #3, #1
 8000be6:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000bea:	7b13      	ldrb	r3, [r2, #12]
 8000bec:	f36f 1304 	bfc	r3, #4, #1
 8000bf0:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000bf4:	7b13      	ldrb	r3, [r2, #12]
 8000bf6:	f36f 1347 	bfc	r3, #5, #3
 8000bfa:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_A_GAIN_8x_DEC;
 8000bfc:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000bfe:	7b13      	ldrb	r3, [r2, #12]
 8000c00:	2102      	movs	r1, #2
 8000c02:	f361 0302 	bfi	r3, r1, #0, #3
 8000c06:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000c08:	4a17      	ldr	r2, [pc, #92]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000c0a:	7b53      	ldrb	r3, [r2, #13]
 8000c0c:	f36f 03c3 	bfc	r3, #3, #1
 8000c10:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000c12:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000c14:	7b53      	ldrb	r3, [r2, #13]
 8000c16:	f36f 0382 	bfc	r3, #2, #1
 8000c1a:	7353      	strb	r3, [r2, #13]
			break;
 8000c1c:	e01e      	b.n	8000c5c <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000c20:	7b13      	ldrb	r3, [r2, #12]
 8000c22:	f36f 03c3 	bfc	r3, #3, #1
 8000c26:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000c28:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000c2a:	7b13      	ldrb	r3, [r2, #12]
 8000c2c:	f36f 1304 	bfc	r3, #4, #1
 8000c30:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000c32:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000c34:	7b13      	ldrb	r3, [r2, #12]
 8000c36:	f36f 1347 	bfc	r3, #5, #3
 8000c3a:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_FAST_READ_DEC;
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000c3e:	7b13      	ldrb	r3, [r2, #12]
 8000c40:	f043 0307 	orr.w	r3, r3, #7
 8000c44:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000c48:	7b53      	ldrb	r3, [r2, #13]
 8000c4a:	f36f 03c3 	bfc	r3, #3, #1
 8000c4e:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000c50:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <max6911_set_ctrl1_register+0xa0>)
 8000c52:	7b53      	ldrb	r3, [r2, #13]
 8000c54:	f36f 0382 	bfc	r3, #2, #1
 8000c58:	7353      	strb	r3, [r2, #13]
			break;
 8000c5a:	bf00      	nop
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	20000234 	.word	0x20000234

08000c6c <ht_cea_enable_set>:
//            HV
//************************************

// Board enable functions
void ht_cea_enable_set(bool gpio_state)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_CEA_DSSD_GPIO_Port, ENABLE_HT_CEA_DSSD_Pin, gpio_state);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <ht_cea_enable_set+0x28>)
 8000c80:	f001 ff68 	bl	8002b54 <HAL_GPIO_WritePin>
	cea_detector.hv_enable_state  = gpio_state;
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <ht_cea_enable_set+0x2c>)
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	7313      	strb	r3, [r2, #12]

}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	48000400 	.word	0x48000400
 8000c98:	20000224 	.word	0x20000224

08000c9c <ht_ijc_enable_set>:
	cea_detector.hv_enable_state = HAL_GPIO_ReadPin(ENABLE_HT_CEA_DSSD_GPIO_Port, ENABLE_HT_CEA_DSSD_Pin);
	return(cea_detector.hv_enable_state);
}

void ht_ijc_enable_set(bool gpio_state)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_IJC_DSSD_GPIO_Port, ENABLE_HT_IJC_DSSD_Pin, gpio_state);
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	2120      	movs	r1, #32
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <ht_ijc_enable_set+0x24>)
 8000cae:	f001 ff51 	bl	8002b54 <HAL_GPIO_WritePin>
	ijc_detector.hv_enable_state  = gpio_state;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <ht_ijc_enable_set+0x28>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	7313      	strb	r3, [r2, #12]

}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	48000400 	.word	0x48000400
 8000cc4:	20000214 	.word	0x20000214

08000cc8 <ijc_dssd_ramp_loop>:
	return(ijc_detector.hv_enable_state);
}


void ijc_dssd_ramp_loop(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the IJC voltage

	uint16_t max6911_measured_voltage = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	803b      	strh	r3, [r7, #0]

	if(ijc_detector.ramp_flag == true && ijc_detector.hv_loop_enable == true)
 8000cd6:	4b45      	ldr	r3, [pc, #276]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 8082 	beq.w	8000de4 <ijc_dssd_ramp_loop+0x11c>
 8000ce0:	4b42      	ldr	r3, [pc, #264]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000ce2:	785b      	ldrb	r3, [r3, #1]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d07d      	beq.n	8000de4 <ijc_dssd_ramp_loop+0x11c>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000ce8:	2303      	movs	r3, #3
 8000cea:	2202      	movs	r2, #2
 8000cec:	21e4      	movs	r1, #228	; 0xe4
 8000cee:	4840      	ldr	r0, [pc, #256]	; (8000df0 <ijc_dssd_ramp_loop+0x128>)
 8000cf0:	f7ff fef0 	bl	8000ad4 <max6911_read>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	80fb      	strh	r3, [r7, #6]

		// Get the current digipot value
		status = ijc_i2c_read(ADDR_IJC_DIGIPOT, &ijc_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000cfe:	2201      	movs	r2, #1
 8000d00:	493c      	ldr	r1, [pc, #240]	; (8000df4 <ijc_dssd_ramp_loop+0x12c>)
 8000d02:	2058      	movs	r0, #88	; 0x58
 8000d04:	f000 fb68 	bl	80013d8 <ijc_i2c_read>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b3a      	ldr	r3, [pc, #232]	; (8000df8 <ijc_dssd_ramp_loop+0x130>)
 8000d0e:	701a      	strb	r2, [r3, #0]

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((ijc_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (ijc_detector.hv_targate_value - ijc_detector.hv_lower_deadband)))
 8000d10:	4b36      	ldr	r3, [pc, #216]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d12:	891b      	ldrh	r3, [r3, #8]
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d220      	bcs.n	8000d5c <ijc_dssd_ramp_loop+0x94>
 8000d1a:	88fa      	ldrh	r2, [r7, #6]
 8000d1c:	4b33      	ldr	r3, [pc, #204]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d1e:	891b      	ldrh	r3, [r3, #8]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4b32      	ldr	r3, [pc, #200]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d24:	795b      	ldrb	r3, [r3, #5]
 8000d26:	1acb      	subs	r3, r1, r3
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	da17      	bge.n	8000d5c <ijc_dssd_ramp_loop+0x94>
		{
			// If the target is greater than the current value, increment the digipot value
			if (ijc_detector.hv_digipot_value <= 149)
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d2e:	799b      	ldrb	r3, [r3, #6]
 8000d30:	2b95      	cmp	r3, #149	; 0x95
 8000d32:	d854      	bhi.n	8000dde <ijc_dssd_ramp_loop+0x116>
			{
				ijc_detector.hv_digipot_value ++;
 8000d34:	4b2d      	ldr	r3, [pc, #180]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d36:	799b      	ldrb	r3, [r3, #6]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d3e:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000d40:	4b2a      	ldr	r3, [pc, #168]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d42:	799b      	ldrb	r3, [r3, #6]
 8000d44:	707b      	strb	r3, [r7, #1]
				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000d46:	4639      	mov	r1, r7
 8000d48:	2301      	movs	r3, #1
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <ijc_dssd_ramp_loop+0x12c>)
 8000d4e:	2202      	movs	r2, #2
 8000d50:	2058      	movs	r0, #88	; 0x58
 8000d52:	f000 fb5b 	bl	800140c <ijc_i2c_write_read>
 8000d56:	4603      	mov	r3, r0
 8000d58:	717b      	strb	r3, [r7, #5]
			if (ijc_detector.hv_digipot_value <= 149)
 8000d5a:	e040      	b.n	8000dde <ijc_dssd_ramp_loop+0x116>
			}
		}
		else if ((ijc_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (ijc_detector.hv_targate_value + ijc_detector.hv_upper_deadband)))
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d5e:	891b      	ldrh	r3, [r3, #8]
 8000d60:	88fa      	ldrh	r2, [r7, #6]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d920      	bls.n	8000da8 <ijc_dssd_ramp_loop+0xe0>
 8000d66:	88fa      	ldrh	r2, [r7, #6]
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d6a:	891b      	ldrh	r3, [r3, #8]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d70:	791b      	ldrb	r3, [r3, #4]
 8000d72:	440b      	add	r3, r1
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dd17      	ble.n	8000da8 <ijc_dssd_ramp_loop+0xe0>
		{
			if (ijc_detector.hv_digipot_value >= 1)
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d7a:	799b      	ldrb	r3, [r3, #6]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d02e      	beq.n	8000dde <ijc_dssd_ramp_loop+0x116>
			{
				// If the target is less than the current value
				ijc_detector.hv_digipot_value --;
 8000d80:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d82:	799b      	ldrb	r3, [r3, #6]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d8a:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000d8e:	799b      	ldrb	r3, [r3, #6]
 8000d90:	707b      	strb	r3, [r7, #1]

				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000d92:	4639      	mov	r1, r7
 8000d94:	2301      	movs	r3, #1
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <ijc_dssd_ramp_loop+0x12c>)
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	2058      	movs	r0, #88	; 0x58
 8000d9e:	f000 fb35 	bl	800140c <ijc_i2c_write_read>
 8000da2:	4603      	mov	r3, r0
 8000da4:	713b      	strb	r3, [r7, #4]
			if (ijc_detector.hv_digipot_value >= 1)
 8000da6:	e01a      	b.n	8000dde <ijc_dssd_ramp_loop+0x116>
			}
		}
		else if((ijc_detector.hv_targate_value == 0) && (ijc_detector.hv_digipot_value > 0))
 8000da8:	4b10      	ldr	r3, [pc, #64]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000daa:	891b      	ldrh	r3, [r3, #8]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d116      	bne.n	8000dde <ijc_dssd_ramp_loop+0x116>
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000db2:	799b      	ldrb	r3, [r3, #6]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d012      	beq.n	8000dde <ijc_dssd_ramp_loop+0x116>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			ijc_detector.hv_digipot_value --;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000dba:	799b      	ldrb	r3, [r3, #6]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000dc2:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = ijc_detector.hv_digipot_value;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000dc6:	799b      	ldrb	r3, [r3, #6]
 8000dc8:	707b      	strb	r3, [r7, #1]

			HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000dca:	4639      	mov	r1, r7
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <ijc_dssd_ramp_loop+0x12c>)
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	2058      	movs	r0, #88	; 0x58
 8000dd6:	f000 fb19 	bl	800140c <ijc_i2c_write_read>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	70fb      	strb	r3, [r7, #3]
		}
		ijc_detector.ramp_flag  = false;
 8000dde:	4b03      	ldr	r3, [pc, #12]	; (8000dec <ijc_dssd_ramp_loop+0x124>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
	}
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000214 	.word	0x20000214
 8000df0:	20000084 	.word	0x20000084
 8000df4:	2000021a 	.word	0x2000021a
 8000df8:	20000200 	.word	0x20000200

08000dfc <cea_dssd_ramp_loop>:




void cea_dssd_ramp_loop(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the CEA voltage

	uint16_t max6911_measured_voltage = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000e06:	2300      	movs	r3, #0
 8000e08:	803b      	strh	r3, [r7, #0]

	if(cea_detector.ramp_flag == true && cea_detector.hv_loop_enable == true)
 8000e0a:	4b45      	ldr	r3, [pc, #276]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 8082 	beq.w	8000f18 <cea_dssd_ramp_loop+0x11c>
 8000e14:	4b42      	ldr	r3, [pc, #264]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d07d      	beq.n	8000f18 <cea_dssd_ramp_loop+0x11c>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	2202      	movs	r2, #2
 8000e20:	21ee      	movs	r1, #238	; 0xee
 8000e22:	4840      	ldr	r0, [pc, #256]	; (8000f24 <cea_dssd_ramp_loop+0x128>)
 8000e24:	f7ff fe56 	bl	8000ad4 <max6911_read>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	80fb      	strh	r3, [r7, #6]

		//HAL_Delay(100);

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000e32:	2201      	movs	r2, #1
 8000e34:	493c      	ldr	r1, [pc, #240]	; (8000f28 <cea_dssd_ramp_loop+0x12c>)
 8000e36:	2058      	movs	r0, #88	; 0x58
 8000e38:	f000 fbc2 	bl	80015c0 <cea_i2c_read>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <cea_dssd_ramp_loop+0x130>)
 8000e42:	701a      	strb	r2, [r3, #0]

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((cea_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (cea_detector.hv_targate_value - cea_detector.hv_lower_deadband)))
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e46:	891b      	ldrh	r3, [r3, #8]
 8000e48:	88fa      	ldrh	r2, [r7, #6]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d220      	bcs.n	8000e90 <cea_dssd_ramp_loop+0x94>
 8000e4e:	88fa      	ldrh	r2, [r7, #6]
 8000e50:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e52:	891b      	ldrh	r3, [r3, #8]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4b32      	ldr	r3, [pc, #200]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e58:	795b      	ldrb	r3, [r3, #5]
 8000e5a:	1acb      	subs	r3, r1, r3
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	da17      	bge.n	8000e90 <cea_dssd_ramp_loop+0x94>
		{
			// If the target is greater than the current value, increment the digipot value
			if (cea_detector.hv_digipot_value <= 149)
 8000e60:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e62:	799b      	ldrb	r3, [r3, #6]
 8000e64:	2b95      	cmp	r3, #149	; 0x95
 8000e66:	d854      	bhi.n	8000f12 <cea_dssd_ramp_loop+0x116>
			{
				cea_detector.hv_digipot_value ++;
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e6a:	799b      	ldrb	r3, [r3, #6]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e72:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000e74:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e76:	799b      	ldrb	r3, [r3, #6]
 8000e78:	707b      	strb	r3, [r7, #1]
				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000e7a:	4639      	mov	r1, r7
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	4b29      	ldr	r3, [pc, #164]	; (8000f28 <cea_dssd_ramp_loop+0x12c>)
 8000e82:	2202      	movs	r2, #2
 8000e84:	2058      	movs	r0, #88	; 0x58
 8000e86:	f000 fbcb 	bl	8001620 <cea_i2c_write_read>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	717b      	strb	r3, [r7, #5]
			if (cea_detector.hv_digipot_value <= 149)
 8000e8e:	e040      	b.n	8000f12 <cea_dssd_ramp_loop+0x116>
			}
		}
		else if ((cea_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (cea_detector.hv_targate_value + cea_detector.hv_upper_deadband)))
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e92:	891b      	ldrh	r3, [r3, #8]
 8000e94:	88fa      	ldrh	r2, [r7, #6]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d920      	bls.n	8000edc <cea_dssd_ramp_loop+0xe0>
 8000e9a:	88fa      	ldrh	r2, [r7, #6]
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000e9e:	891b      	ldrh	r3, [r3, #8]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	440b      	add	r3, r1
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dd17      	ble.n	8000edc <cea_dssd_ramp_loop+0xe0>
		{
			if (cea_detector.hv_digipot_value >= 1)
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000eae:	799b      	ldrb	r3, [r3, #6]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d02e      	beq.n	8000f12 <cea_dssd_ramp_loop+0x116>
			{
				// If the target is less than the current value
				cea_detector.hv_digipot_value --;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000eb6:	799b      	ldrb	r3, [r3, #6]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000ebe:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000ec2:	799b      	ldrb	r3, [r3, #6]
 8000ec4:	707b      	strb	r3, [r7, #1]

				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000ec6:	4639      	mov	r1, r7
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <cea_dssd_ramp_loop+0x12c>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	2058      	movs	r0, #88	; 0x58
 8000ed2:	f000 fba5 	bl	8001620 <cea_i2c_write_read>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	713b      	strb	r3, [r7, #4]
			if (cea_detector.hv_digipot_value >= 1)
 8000eda:	e01a      	b.n	8000f12 <cea_dssd_ramp_loop+0x116>
			}
		}
		else if((cea_detector.hv_targate_value == 0) && (cea_detector.hv_digipot_value > 0))
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000ede:	891b      	ldrh	r3, [r3, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d116      	bne.n	8000f12 <cea_dssd_ramp_loop+0x116>
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000ee6:	799b      	ldrb	r3, [r3, #6]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d012      	beq.n	8000f12 <cea_dssd_ramp_loop+0x116>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			cea_detector.hv_digipot_value --;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000eee:	799b      	ldrb	r3, [r3, #6]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000ef6:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = cea_detector.hv_digipot_value;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000efa:	799b      	ldrb	r3, [r3, #6]
 8000efc:	707b      	strb	r3, [r7, #1]

			HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000efe:	4639      	mov	r1, r7
 8000f00:	2301      	movs	r3, #1
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <cea_dssd_ramp_loop+0x12c>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	2058      	movs	r0, #88	; 0x58
 8000f0a:	f000 fb89 	bl	8001620 <cea_i2c_write_read>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	70fb      	strb	r3, [r7, #3]
		}
		cea_detector.ramp_flag  = false;
 8000f12:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <cea_dssd_ramp_loop+0x124>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
	}
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000224 	.word	0x20000224
 8000f24:	200000d8 	.word	0x200000d8
 8000f28:	2000022a 	.word	0x2000022a
 8000f2c:	20000200 	.word	0x20000200

08000f30 <make_ijc_dssd_safe>:



bool make_ijc_dssd_safe(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
	// To make the IJCLab DSSD detector safe

	bool status = EXIT_SUCCESS;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
	bool board_state;

	// Get the state of the IJCLab detector board
	board_state = ijc_board_enable_get();
 8000f3a:	f000 fa1b 	bl	8001374 <ijc_board_enable_get>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71bb      	strb	r3, [r7, #6]

	if(board_state == true)
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d04e      	beq.n	8000fe6 <make_ijc_dssd_safe+0xb6>
	{
		// If the detector board is enabled - Make it safe from here by ramping down if necessary

		// Get the current digipot value
		status = ijc_i2c_read(ADDR_IJC_DIGIPOT, &ijc_detector.hv_digipot_value, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4931      	ldr	r1, [pc, #196]	; (8001010 <make_ijc_dssd_safe+0xe0>)
 8000f4c:	2058      	movs	r0, #88	; 0x58
 8000f4e:	f000 fa43 	bl	80013d8 <ijc_i2c_read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]

		if(status == EXIT_SUCCESS && ijc_detector.hv_digipot_value > 0)
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f083 0301 	eor.w	r3, r3, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d010      	beq.n	8000f8c <make_ijc_dssd_safe+0x5c>
 8000f6a:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000f6c:	799b      	ldrb	r3, [r3, #6]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00c      	beq.n	8000f8c <make_ijc_dssd_safe+0x5c>
		{
			// Begin ramp down
			// ----------------------------------------------------------------------------
			// Must enable the ramp enable flag
			ijc_detector.hv_loop_enable = true;
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	705a      	strb	r2, [r3, #1]

			// Must set the target value to 0
			ijc_detector.hv_targate_value = 0;
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	811a      	strh	r2, [r3, #8]

			// Set the flag to indicate that the IJCLab board is currently being made safe
			ijc_detector.making_safe_inprogress = true;
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	735a      	strb	r2, [r3, #13]
			status = EXIT_FAILURE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	71fb      	strb	r3, [r7, #7]
			return(status);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	e03d      	b.n	8001008 <make_ijc_dssd_safe+0xd8>
		}
		else if (status == EXIT_SUCCESS && ijc_detector.hv_digipot_value == 0)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f083 0301 	eor.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d015      	beq.n	8000fc4 <make_ijc_dssd_safe+0x94>
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d111      	bne.n	8000fc4 <make_ijc_dssd_safe+0x94>
		{
			// Board is enabled but the digipot is in the 0 position
			ijc_detector.making_safe_inprogress = false;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	735a      	strb	r2, [r3, #13]
			// The digipot is in a 0 state - the make safe was successful

			// Disable HV and disable the board
			ht_ijc_enable_set(GPIO_PIN_RESET);          							     // Reset the IJC HV SUPPLY
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f7ff fe78 	bl	8000c9c <ht_ijc_enable_set>
			HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, GPIO_PIN_RESET); // Disable the IJC Board
 8000fac:	2200      	movs	r2, #0
 8000fae:	2140      	movs	r1, #64	; 0x40
 8000fb0:	4819      	ldr	r0, [pc, #100]	; (8001018 <make_ijc_dssd_safe+0xe8>)
 8000fb2:	f001 fdcf 	bl	8002b54 <HAL_GPIO_WritePin>
			ijc_detector.board_enable_state = 0;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	815a      	strh	r2, [r3, #10]

			status = EXIT_SUCCESS;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	71fb      	strb	r3, [r7, #7]
			return(status);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	e021      	b.n	8001008 <make_ijc_dssd_safe+0xd8>
		}
		else if (status == EXIT_FAILURE)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <make_ijc_dssd_safe+0xa8>
		{
			// Failed to make communication to the digipot device
			ijc_detector.making_safe_inprogress = false;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	735a      	strb	r2, [r3, #13]
			status = EXIT_FAILURE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	71fb      	strb	r3, [r7, #7]
			return(status);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	e017      	b.n	8001008 <make_ijc_dssd_safe+0xd8>
		}
		else
		{
			ijc_detector.making_safe_inprogress = false;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	735a      	strb	r2, [r3, #13]
			status = EXIT_FAILURE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	71fb      	strb	r3, [r7, #7]
			return(status);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	e010      	b.n	8001008 <make_ijc_dssd_safe+0xd8>
		}
	}
	else
	{
		ijc_detector.making_safe_inprogress = false;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	735a      	strb	r2, [r3, #13]
		ht_ijc_enable_set(GPIO_PIN_RESET);          							     // Reset the IJC HV SUPPLY
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fe55 	bl	8000c9c <ht_ijc_enable_set>
		HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, GPIO_PIN_RESET); // Disable the IJC Board
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2140      	movs	r1, #64	; 0x40
 8000ff6:	4808      	ldr	r0, [pc, #32]	; (8001018 <make_ijc_dssd_safe+0xe8>)
 8000ff8:	f001 fdac 	bl	8002b54 <HAL_GPIO_WritePin>
		ijc_detector.board_enable_state = 0;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <make_ijc_dssd_safe+0xe4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	815a      	strh	r2, [r3, #10]
		// If board is disabled the board is already in a safe state
		status = EXIT_SUCCESS;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
		return(status);
 8001006:	79fb      	ldrb	r3, [r7, #7]
	}

}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	2000021a 	.word	0x2000021a
 8001014:	20000214 	.word	0x20000214
 8001018:	48000400 	.word	0x48000400

0800101c <make_cea_dssd_safe>:



bool make_cea_dssd_safe(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	// To make the CEA DSSD detector safe

	bool status = EXIT_SUCCESS;
 8001022:	2300      	movs	r3, #0
 8001024:	71fb      	strb	r3, [r7, #7]
	bool board_state;

	// Get the state of the CEA detector board
	board_state = cea_board_enable_get();
 8001026:	f000 fa99 	bl	800155c <cea_board_enable_get>
 800102a:	4603      	mov	r3, r0
 800102c:	71bb      	strb	r3, [r7, #6]

	if(board_state == true)
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d04e      	beq.n	80010d2 <make_cea_dssd_safe+0xb6>
	{
		// If the detector board is enabled - Make it safe from here by ramping down if necessary

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1);
 8001034:	2201      	movs	r2, #1
 8001036:	4931      	ldr	r1, [pc, #196]	; (80010fc <make_cea_dssd_safe+0xe0>)
 8001038:	2058      	movs	r0, #88	; 0x58
 800103a:	f000 fac1 	bl	80015c0 <cea_i2c_read>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	bf14      	ite	ne
 8001044:	2301      	movne	r3, #1
 8001046:	2300      	moveq	r3, #0
 8001048:	71fb      	strb	r3, [r7, #7]

		if(status == EXIT_SUCCESS && cea_detector.hv_digipot_value > 0)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f083 0301 	eor.w	r3, r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d010      	beq.n	8001078 <make_cea_dssd_safe+0x5c>
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <make_cea_dssd_safe+0xe4>)
 8001058:	799b      	ldrb	r3, [r3, #6]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00c      	beq.n	8001078 <make_cea_dssd_safe+0x5c>
		{
			// Begin ramp down
			// ----------------------------------------------------------------------------
			// Must enable the ramp enable flag
			cea_detector.hv_loop_enable = true;
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <make_cea_dssd_safe+0xe4>)
 8001060:	2201      	movs	r2, #1
 8001062:	705a      	strb	r2, [r3, #1]

			// Must set the target value to 0
			cea_detector.hv_targate_value = 0;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <make_cea_dssd_safe+0xe4>)
 8001066:	2200      	movs	r2, #0
 8001068:	811a      	strh	r2, [r3, #8]

			// Set the flag to indicate that the CEA board is currently being made safe
			cea_detector.making_safe_inprogress = true;
 800106a:	4b25      	ldr	r3, [pc, #148]	; (8001100 <make_cea_dssd_safe+0xe4>)
 800106c:	2201      	movs	r2, #1
 800106e:	735a      	strb	r2, [r3, #13]
			status = EXIT_FAILURE;
 8001070:	2301      	movs	r3, #1
 8001072:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	e03d      	b.n	80010f4 <make_cea_dssd_safe+0xd8>
		}
		else if (status == EXIT_SUCCESS && cea_detector.hv_digipot_value == 0)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d015      	beq.n	80010b0 <make_cea_dssd_safe+0x94>
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <make_cea_dssd_safe+0xe4>)
 8001086:	799b      	ldrb	r3, [r3, #6]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d111      	bne.n	80010b0 <make_cea_dssd_safe+0x94>
		{
			// Board is enabled but the digipot is in the 0 position
			cea_detector.making_safe_inprogress = false;
 800108c:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <make_cea_dssd_safe+0xe4>)
 800108e:	2200      	movs	r2, #0
 8001090:	735a      	strb	r2, [r3, #13]
			// The digipot is in a 0 state - the make safe was successful

			// Disable HV and disable the board
			ht_cea_enable_set(GPIO_PIN_RESET);          							     // Reset the CEA HV SUPPLY
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fdea 	bl	8000c6c <ht_cea_enable_set>
			HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, GPIO_PIN_RESET); // Disable the CEA Board
 8001098:	2200      	movs	r2, #0
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	4819      	ldr	r0, [pc, #100]	; (8001104 <make_cea_dssd_safe+0xe8>)
 800109e:	f001 fd59 	bl	8002b54 <HAL_GPIO_WritePin>
			cea_detector.board_enable_state = 0;
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <make_cea_dssd_safe+0xe4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	815a      	strh	r2, [r3, #10]

			status = EXIT_SUCCESS;
 80010a8:	2300      	movs	r3, #0
 80010aa:	71fb      	strb	r3, [r7, #7]
			return(status);
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	e021      	b.n	80010f4 <make_cea_dssd_safe+0xd8>
		}
		else if (status == EXIT_FAILURE)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <make_cea_dssd_safe+0xa8>
		{
			// Failed to make communication to the digipot device
			cea_detector.making_safe_inprogress = false;
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <make_cea_dssd_safe+0xe4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	735a      	strb	r2, [r3, #13]
			status = EXIT_FAILURE;
 80010bc:	2301      	movs	r3, #1
 80010be:	71fb      	strb	r3, [r7, #7]
			return(status);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	e017      	b.n	80010f4 <make_cea_dssd_safe+0xd8>
		}
		else
		{
			cea_detector.making_safe_inprogress = false;
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <make_cea_dssd_safe+0xe4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	735a      	strb	r2, [r3, #13]
			status = EXIT_FAILURE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	71fb      	strb	r3, [r7, #7]
			return(status);
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	e010      	b.n	80010f4 <make_cea_dssd_safe+0xd8>
		}
	}
	else
	{
		cea_detector.making_safe_inprogress = false;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <make_cea_dssd_safe+0xe4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	735a      	strb	r2, [r3, #13]
		// If board is disabled the board is already in a safe state
		ht_cea_enable_set(GPIO_PIN_RESET);          							     // Reset the CEA HV SUPPLY
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fdc7 	bl	8000c6c <ht_cea_enable_set>
		HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, GPIO_PIN_RESET); // Disable the CEA Board
 80010de:	2200      	movs	r2, #0
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	4808      	ldr	r0, [pc, #32]	; (8001104 <make_cea_dssd_safe+0xe8>)
 80010e4:	f001 fd36 	bl	8002b54 <HAL_GPIO_WritePin>
		cea_detector.board_enable_state = 0;							 // Set the board state in the struct
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <make_cea_dssd_safe+0xe4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	815a      	strh	r2, [r3, #10]

		status = EXIT_SUCCESS;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
		return(status);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
	}

}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	2000022a 	.word	0x2000022a
 8001100:	20000224 	.word	0x20000224
 8001104:	48000400 	.word	0x48000400

08001108 <ucd_board_enable_set>:
//            UCD PSB
//************************************

// Board enable functions
void ucd_board_enable_set(bool gpio_state)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin, gpio_state);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	461a      	mov	r2, r3
 8001116:	f44f 7100 	mov.w	r1, #512	; 0x200
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <ucd_board_enable_set+0x28>)
 800111c:	f001 fd1a 	bl	8002b54 <HAL_GPIO_WritePin>
	ucd_detector.board_enable_state = gpio_state;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <ucd_board_enable_set+0x2c>)
 8001126:	815a      	strh	r2, [r3, #10]

}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	48000400 	.word	0x48000400
 8001134:	20000204 	.word	0x20000204

08001138 <ucd_board_enable_get>:

bool ucd_board_enable_get(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	ucd_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin);
 800113c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <ucd_board_enable_get+0x28>)
 8001142:	f001 fcef 	bl	8002b24 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <ucd_board_enable_get+0x2c>)
 800114c:	815a      	strh	r2, [r3, #10]
	return(ucd_detector.board_enable_state);
 800114e:	4b05      	ldr	r3, [pc, #20]	; (8001164 <ucd_board_enable_get+0x2c>)
 8001150:	895b      	ldrh	r3, [r3, #10]
 8001152:	2b00      	cmp	r3, #0
 8001154:	bf14      	ite	ne
 8001156:	2301      	movne	r3, #1
 8001158:	2300      	moveq	r3, #0
 800115a:	b2db      	uxtb	r3, r3
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd80      	pop	{r7, pc}
 8001160:	48000400 	.word	0x48000400
 8001164:	20000204 	.word	0x20000204

08001168 <ijc_detector_init>:
//            IJC PSB
//************************************

// Init function
bool ijc_detector_init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af02      	add	r7, sp, #8

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 800116e:	2300      	movs	r3, #0
 8001170:	71fb      	strb	r3, [r7, #7]

	// Init the IJC lab detector
	ijc_detector.ramp_flag            = 0;
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <ijc_detector_init+0xa0>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
	ijc_detector.hv_max_digipot_value = IJC_MAX_DIGIPOT_VALUE - 1;
 8001178:	4b23      	ldr	r3, [pc, #140]	; (8001208 <ijc_detector_init+0xa0>)
 800117a:	2295      	movs	r2, #149	; 0x95
 800117c:	709a      	strb	r2, [r3, #2]
	ijc_detector.hv_min_digipot_value = IJC_MIN_DIGIPOT_VALUE - 1;
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <ijc_detector_init+0xa0>)
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	70da      	strb	r2, [r3, #3]
	ijc_detector.hv_lower_deadband 	  = IJC_LOWER_DEADBAND;
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <ijc_detector_init+0xa0>)
 8001186:	222b      	movs	r2, #43	; 0x2b
 8001188:	715a      	strb	r2, [r3, #5]
	ijc_detector.hv_upper_deadband 	  = IJC_UPPER_DEADBAND;
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <ijc_detector_init+0xa0>)
 800118c:	222b      	movs	r2, #43	; 0x2b
 800118e:	711a      	strb	r2, [r3, #4]
	ijc_detector.hv_digipot_value 	  = 0;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <ijc_detector_init+0xa0>)
 8001192:	2200      	movs	r2, #0
 8001194:	719a      	strb	r2, [r3, #6]
	ijc_detector.hv_targate_value 	  = 0;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <ijc_detector_init+0xa0>)
 8001198:	2200      	movs	r2, #0
 800119a:	811a      	strh	r2, [r3, #8]
	ijc_detector.board_enable_state   = 0;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <ijc_detector_init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	815a      	strh	r2, [r3, #10]
	ijc_detector.hv_enable_state	  = 0;
 80011a2:	4b19      	ldr	r3, [pc, #100]	; (8001208 <ijc_detector_init+0xa0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	731a      	strb	r2, [r3, #12]
	ijc_detector.hv_loop_enable 	  = 1;
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <ijc_detector_init+0xa0>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	705a      	strb	r2, [r3, #1]
	ijc_detector.making_safe_inprogress = 0;
 80011ae:	4b16      	ldr	r3, [pc, #88]	; (8001208 <ijc_detector_init+0xa0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	735a      	strb	r2, [r3, #13]

	// Configure the board enable state
	ht_ijc_enable_set(GPIO_PIN_RESET);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fd71 	bl	8000c9c <ht_ijc_enable_set>
	ijc_board_enable_set(GPIO_PIN_SET);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f000 f87c 	bl	80012b8 <ijc_board_enable_set>

	HAL_Delay(100);
 80011c0:	2064      	movs	r0, #100	; 0x64
 80011c2:	f001 f9b1 	bl	8002528 <HAL_Delay>

	// Reset the digipot value to 0
	uint8_t command[2] = {0x00, 0x00};
 80011c6:	2300      	movs	r3, #0
 80011c8:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef digipot_set_stataus = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &command[0], 2, &ijc_detector.hv_digipot_value, 1);
 80011ca:	1d39      	adds	r1, r7, #4
 80011cc:	2301      	movs	r3, #1
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <ijc_detector_init+0xa4>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	2058      	movs	r0, #88	; 0x58
 80011d6:	f000 f919 	bl	800140c <ijc_i2c_write_read>
 80011da:	4603      	mov	r3, r0
 80011dc:	71bb      	strb	r3, [r7, #6]


	if (ijc_detector.hv_digipot_value != 0 || digipot_set_stataus == HAL_ERROR)
 80011de:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <ijc_detector_init+0xa0>)
 80011e0:	799b      	ldrb	r3, [r3, #6]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <ijc_detector_init+0x84>
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d106      	bne.n	80011fa <ijc_detector_init+0x92>
	{
		// Disable the loop enable flag
		ijc_detector.hv_loop_enable = false;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <ijc_detector_init+0xa0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	705a      	strb	r2, [r3, #1]
		status = EXIT_FAILURE;
 80011f2:	2301      	movs	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
		return(status);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	e002      	b.n	8001200 <ijc_detector_init+0x98>
	}
	else
	{
		status = EXIT_SUCCESS;
 80011fa:	2300      	movs	r3, #0
 80011fc:	71fb      	strb	r3, [r7, #7]
		return(status);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000214 	.word	0x20000214
 800120c:	2000021a 	.word	0x2000021a

08001210 <cea_detector_init>:


bool cea_detector_init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af02      	add	r7, sp, #8

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 8001216:	2300      	movs	r3, #0
 8001218:	71fb      	strb	r3, [r7, #7]

	// Init the CEA lab detector
	cea_detector.ramp_flag            = 0;
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <cea_detector_init+0xa0>)
 800121c:	2200      	movs	r2, #0
 800121e:	701a      	strb	r2, [r3, #0]
	cea_detector.hv_max_digipot_value = CEA_MAX_DIGIPOT_VALUE - 1;
 8001220:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <cea_detector_init+0xa0>)
 8001222:	22c7      	movs	r2, #199	; 0xc7
 8001224:	709a      	strb	r2, [r3, #2]
	cea_detector.hv_min_digipot_value = CEA_MIN_DIGIPOT_VALUE - 1;
 8001226:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <cea_detector_init+0xa0>)
 8001228:	22ff      	movs	r2, #255	; 0xff
 800122a:	70da      	strb	r2, [r3, #3]
	cea_detector.hv_lower_deadband 	  = CEA_LOWER_DEADBAND;
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <cea_detector_init+0xa0>)
 800122e:	222b      	movs	r2, #43	; 0x2b
 8001230:	715a      	strb	r2, [r3, #5]
	cea_detector.hv_upper_deadband 	  = CEA_UPPER_DEADBAND;
 8001232:	4b1f      	ldr	r3, [pc, #124]	; (80012b0 <cea_detector_init+0xa0>)
 8001234:	222b      	movs	r2, #43	; 0x2b
 8001236:	711a      	strb	r2, [r3, #4]
	cea_detector.hv_digipot_value 	  = 0;
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <cea_detector_init+0xa0>)
 800123a:	2200      	movs	r2, #0
 800123c:	719a      	strb	r2, [r3, #6]
	cea_detector.hv_targate_value 	  = 0;
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <cea_detector_init+0xa0>)
 8001240:	2200      	movs	r2, #0
 8001242:	811a      	strh	r2, [r3, #8]
	cea_detector.board_enable_state   = 0;
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <cea_detector_init+0xa0>)
 8001246:	2200      	movs	r2, #0
 8001248:	815a      	strh	r2, [r3, #10]
	cea_detector.hv_enable_state	  = 0;
 800124a:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <cea_detector_init+0xa0>)
 800124c:	2200      	movs	r2, #0
 800124e:	731a      	strb	r2, [r3, #12]
	cea_detector.hv_loop_enable 	  = 1;
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <cea_detector_init+0xa0>)
 8001252:	2201      	movs	r2, #1
 8001254:	705a      	strb	r2, [r3, #1]
	cea_detector.making_safe_inprogress = 0;
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <cea_detector_init+0xa0>)
 8001258:	2200      	movs	r2, #0
 800125a:	735a      	strb	r2, [r3, #13]

	// Configure the board enable state
	ht_cea_enable_set(GPIO_PIN_RESET);
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fd05 	bl	8000c6c <ht_cea_enable_set>
	cea_board_enable_set(GPIO_PIN_SET);
 8001262:	2001      	movs	r0, #1
 8001264:	f000 f91c 	bl	80014a0 <cea_board_enable_set>

	HAL_Delay(100);
 8001268:	2064      	movs	r0, #100	; 0x64
 800126a:	f001 f95d 	bl	8002528 <HAL_Delay>

	// Reset the digipot value to 0
	uint8_t command[2] = {0x00, 0x00};
 800126e:	2300      	movs	r3, #0
 8001270:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef digipot_set_stataus = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &command[0], 2, &cea_detector.hv_digipot_value, 1);
 8001272:	1d39      	adds	r1, r7, #4
 8001274:	2301      	movs	r3, #1
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <cea_detector_init+0xa4>)
 800127a:	2202      	movs	r2, #2
 800127c:	2058      	movs	r0, #88	; 0x58
 800127e:	f000 f9cf 	bl	8001620 <cea_i2c_write_read>
 8001282:	4603      	mov	r3, r0
 8001284:	71bb      	strb	r3, [r7, #6]


	if (cea_detector.hv_digipot_value != 0 || digipot_set_stataus == HAL_ERROR)
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <cea_detector_init+0xa0>)
 8001288:	799b      	ldrb	r3, [r3, #6]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <cea_detector_init+0x84>
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d106      	bne.n	80012a2 <cea_detector_init+0x92>
	{
		// Disable the loop enable flag
		cea_detector.hv_loop_enable = false;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <cea_detector_init+0xa0>)
 8001296:	2200      	movs	r2, #0
 8001298:	705a      	strb	r2, [r3, #1]
		status = EXIT_FAILURE;
 800129a:	2301      	movs	r3, #1
 800129c:	71fb      	strb	r3, [r7, #7]
		return(status);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	e002      	b.n	80012a8 <cea_detector_init+0x98>
	}
	else
	{
		status = EXIT_SUCCESS;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]
		return(status);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
	}
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000224 	.word	0x20000224
 80012b4:	2000022a 	.word	0x2000022a

080012b8 <ijc_board_enable_set>:


// Board enable functions
bool ijc_board_enable_set(bool gpio_state)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af02      	add	r7, sp, #8
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_digipot_status;
	uint8_t tx_data[2] = {0x00, 0x00};
 80012c2:	2300      	movs	r3, #0
 80012c4:	81bb      	strh	r3, [r7, #12]

	bool ijc_board_state = ijc_board_enable_get();								 // Get the current state of the board
 80012c6:	f000 f855 	bl	8001374 <ijc_board_enable_get>
 80012ca:	4603      	mov	r3, r0
 80012cc:	73fb      	strb	r3, [r7, #15]
	if (gpio_state == ENABLE && ijc_board_state == DISABLED) 					 // If the board is disabled
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d036      	beq.n	8001342 <ijc_board_enable_set+0x8a>
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	f083 0301 	eor.w	r3, r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d030      	beq.n	8001342 <ijc_board_enable_set+0x8a>
	{
		ht_ijc_enable_set(GPIO_PIN_RESET);          							 // Reset the ijc HV SUPPLY
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff fcdb 	bl	8000c9c <ht_ijc_enable_set>
		HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, gpio_state); // Enable the ijc Board
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	461a      	mov	r2, r3
 80012ea:	2140      	movs	r1, #64	; 0x40
 80012ec:	481e      	ldr	r0, [pc, #120]	; (8001368 <ijc_board_enable_set+0xb0>)
 80012ee:	f001 fc31 	bl	8002b54 <HAL_GPIO_WritePin>
		ijc_detector.board_enable_state = gpio_state;							 // Set the board state in the struct
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <ijc_board_enable_set+0xb4>)
 80012f8:	815a      	strh	r2, [r3, #10]

		// Set the digipot to 0
		ijc_detector.hv_digipot_value = 0;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <ijc_board_enable_set+0xb4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	719a      	strb	r2, [r3, #6]
		i2c_digipot_status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8001300:	f107 010c 	add.w	r1, r7, #12
 8001304:	2301      	movs	r3, #1
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <ijc_board_enable_set+0xb8>)
 800130a:	2202      	movs	r2, #2
 800130c:	2058      	movs	r0, #88	; 0x58
 800130e:	f000 f87d 	bl	800140c <ijc_i2c_write_read>
 8001312:	4603      	mov	r3, r0
 8001314:	73bb      	strb	r3, [r7, #14]

		if(i2c_digipot_status == HAL_OK && ijc_detector.hv_digipot_value == 0)
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d108      	bne.n	800132e <ijc_board_enable_set+0x76>
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <ijc_board_enable_set+0xb4>)
 800131e:	799b      	ldrb	r3, [r3, #6]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d104      	bne.n	800132e <ijc_board_enable_set+0x76>
		{
			// Enable the HV Supply
			ht_ijc_enable_set(GPIO_PIN_SET);          							 // Reset the IJC HV SUPPLY
 8001324:	2001      	movs	r0, #1
 8001326:	f7ff fcb9 	bl	8000c9c <ht_ijc_enable_set>
			return(EXIT_SUCCESS);
 800132a:	2300      	movs	r3, #0
 800132c:	e018      	b.n	8001360 <ijc_board_enable_set+0xa8>
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, 0);  // Enable the ijc Board
 800132e:	2200      	movs	r2, #0
 8001330:	2140      	movs	r1, #64	; 0x40
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <ijc_board_enable_set+0xb0>)
 8001334:	f001 fc0e 	bl	8002b54 <HAL_GPIO_WritePin>
			ijc_detector.board_enable_state = 0;							 // Set the board state in the struct
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <ijc_board_enable_set+0xb4>)
 800133a:	2200      	movs	r2, #0
 800133c:	815a      	strh	r2, [r3, #10]

			// Return fail
			return(EXIT_FAILURE);
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <ijc_board_enable_set+0xa8>
		}
	}
	else if (gpio_state == DISABLE && ijc_board_state == ENABLED) 				 // If the board is enabled
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <ijc_board_enable_set+0xa6>
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d004      	beq.n	800135e <ijc_board_enable_set+0xa6>
	{
		// Enable the ijc loop and set the target value to 0
		// Have a flag in the main loop then disable the HV and disable the board once the digipot is at 0
		ijc_detector.making_safe_inprogress = true;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <ijc_board_enable_set+0xb4>)
 8001356:	2201      	movs	r2, #1
 8001358:	735a      	strb	r2, [r3, #13]
		return(EXIT_SUCCESS);
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <ijc_board_enable_set+0xa8>
	}
	else
	{
		return(EXIT_SUCCESS);
 800135e:	2300      	movs	r3, #0
	}
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	48000400 	.word	0x48000400
 800136c:	20000214 	.word	0x20000214
 8001370:	2000021a 	.word	0x2000021a

08001374 <ijc_board_enable_get>:


bool ijc_board_enable_get(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	ijc_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin);
 8001378:	2140      	movs	r1, #64	; 0x40
 800137a:	4808      	ldr	r0, [pc, #32]	; (800139c <ijc_board_enable_get+0x28>)
 800137c:	f001 fbd2 	bl	8002b24 <HAL_GPIO_ReadPin>
 8001380:	4603      	mov	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <ijc_board_enable_get+0x2c>)
 8001386:	815a      	strh	r2, [r3, #10]
	return(ijc_detector.board_enable_state);
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <ijc_board_enable_get+0x2c>)
 800138a:	895b      	ldrh	r3, [r3, #10]
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf14      	ite	ne
 8001390:	2301      	movne	r3, #1
 8001392:	2300      	moveq	r3, #0
 8001394:	b2db      	uxtb	r3, r3
}
 8001396:	4618      	mov	r0, r3
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	48000400 	.word	0x48000400
 80013a0:	20000214 	.word	0x20000214

080013a4 <ijc_i2c_write>:

HAL_StatusTypeDef ijc_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af02      	add	r7, sp, #8
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
 80013b0:	4613      	mov	r3, r2
 80013b2:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c2, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	b299      	uxth	r1, r3
 80013b8:	88bb      	ldrh	r3, [r7, #4]
 80013ba:	220a      	movs	r2, #10
 80013bc:	9200      	str	r2, [sp, #0]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <ijc_i2c_write+0x30>)
 80013c2:	f001 fc95 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
	return(ret);
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000084 	.word	0x20000084

080013d8 <ijc_i2c_read>:

HAL_StatusTypeDef ijc_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af02      	add	r7, sp, #8
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	4613      	mov	r3, r2
 80013e6:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c2, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	b299      	uxth	r1, r3
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	220a      	movs	r2, #10
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	4804      	ldr	r0, [pc, #16]	; (8001408 <ijc_i2c_read+0x30>)
 80013f6:	f001 fd93 	bl	8002f20 <HAL_I2C_Master_Receive>
 80013fa:	4603      	mov	r3, r0
 80013fc:	73fb      	strb	r3, [r7, #15]
	return(ret);
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000084 	.word	0x20000084

0800140c <ijc_i2c_write_read>:
}
*/
// ###############################################

HAL_StatusTypeDef ijc_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	4613      	mov	r3, r2
 800141c:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8001422:	2305      	movs	r3, #5
 8001424:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 8001426:	2305      	movs	r3, #5
 8001428:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d802      	bhi.n	8001436 <ijc_i2c_write_read+0x2a>
 8001430:	2064      	movs	r0, #100	; 0x64
 8001432:	f001 f879 	bl	8002528 <HAL_Delay>
		status = ijc_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 8001436:	89ba      	ldrh	r2, [r7, #12]
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ffb1 	bl	80013a4 <ijc_i2c_write>
 8001442:	4603      	mov	r3, r0
 8001444:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	3b01      	subs	r3, #1
 800144a:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 800144c:	7d7b      	ldrb	r3, [r7, #21]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d102      	bne.n	8001458 <ijc_i2c_write_read+0x4c>
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1e8      	bne.n	800142a <ijc_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 8001458:	7d7b      	ldrb	r3, [r7, #21]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <ijc_i2c_write_read+0x56>
 800145e:	7d7b      	ldrb	r3, [r7, #21]
 8001460:	e01a      	b.n	8001498 <ijc_i2c_write_read+0x8c>

	HAL_Delay(5);
 8001462:	2005      	movs	r0, #5
 8001464:	f001 f860 	bl	8002528 <HAL_Delay>

	do
	{
		// Read operation
		status =  ijc_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 8001468:	8c3a      	ldrh	r2, [r7, #32]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ffb2 	bl	80013d8 <ijc_i2c_read>
 8001474:	4603      	mov	r3, r0
 8001476:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8001478:	7dbb      	ldrb	r3, [r7, #22]
 800147a:	2b04      	cmp	r3, #4
 800147c:	d802      	bhi.n	8001484 <ijc_i2c_write_read+0x78>
 800147e:	2064      	movs	r0, #100	; 0x64
 8001480:	f001 f852 	bl	8002528 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8001484:	7dbb      	ldrb	r3, [r7, #22]
 8001486:	3b01      	subs	r3, #1
 8001488:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 800148a:	7d7b      	ldrb	r3, [r7, #21]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <ijc_i2c_write_read+0x8a>
 8001490:	7dbb      	ldrb	r3, [r7, #22]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1e8      	bne.n	8001468 <ijc_i2c_write_read+0x5c>

	return(status);
 8001496:	7d7b      	ldrb	r3, [r7, #21]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <cea_board_enable_set>:
//            CEA PSB
//************************************

// Board enable functions
bool cea_board_enable_set(bool gpio_state)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_digipot_status;
	uint8_t tx_data[2] = {0x00, 0x00};
 80014aa:	2300      	movs	r3, #0
 80014ac:	81bb      	strh	r3, [r7, #12]

	bool cea_board_state = cea_board_enable_get();								 // Get the current state of the board
 80014ae:	f000 f855 	bl	800155c <cea_board_enable_get>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
	if (gpio_state == ENABLE && cea_board_state == DISABLED) 					 // If the board is disabled
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d036      	beq.n	800152a <cea_board_enable_set+0x8a>
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f083 0301 	eor.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d030      	beq.n	800152a <cea_board_enable_set+0x8a>
	{
		ht_cea_enable_set(GPIO_PIN_RESET);          							 // Reset the CEA HV SUPPLY
 80014c8:	2000      	movs	r0, #0
 80014ca:	f7ff fbcf 	bl	8000c6c <ht_cea_enable_set>
		HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, gpio_state); // Enable the CEA Board
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	461a      	mov	r2, r3
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	481e      	ldr	r0, [pc, #120]	; (8001550 <cea_board_enable_set+0xb0>)
 80014d6:	f001 fb3d 	bl	8002b54 <HAL_GPIO_WritePin>
		cea_detector.board_enable_state = gpio_state;							 // Set the board state in the struct
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <cea_board_enable_set+0xb4>)
 80014e0:	815a      	strh	r2, [r3, #10]

		// Set the digipot to 0
		cea_detector.hv_digipot_value = 0;
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <cea_board_enable_set+0xb4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	719a      	strb	r2, [r3, #6]
		i2c_digipot_status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 80014e8:	f107 010c 	add.w	r1, r7, #12
 80014ec:	2301      	movs	r3, #1
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <cea_board_enable_set+0xb8>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	2058      	movs	r0, #88	; 0x58
 80014f6:	f000 f893 	bl	8001620 <cea_i2c_write_read>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73bb      	strb	r3, [r7, #14]

		if(i2c_digipot_status == HAL_OK && cea_detector.hv_digipot_value == 0)
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d108      	bne.n	8001516 <cea_board_enable_set+0x76>
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <cea_board_enable_set+0xb4>)
 8001506:	799b      	ldrb	r3, [r3, #6]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d104      	bne.n	8001516 <cea_board_enable_set+0x76>
		{
			// Enable the HV Supply
			ht_cea_enable_set(GPIO_PIN_SET);          							 // Reset the CEA HV SUPPLY
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fbad 	bl	8000c6c <ht_cea_enable_set>
			return(EXIT_SUCCESS);
 8001512:	2300      	movs	r3, #0
 8001514:	e018      	b.n	8001548 <cea_board_enable_set+0xa8>
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, 0); // Enable the CEA Board
 8001516:	2200      	movs	r2, #0
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <cea_board_enable_set+0xb0>)
 800151c:	f001 fb1a 	bl	8002b54 <HAL_GPIO_WritePin>
			cea_detector.board_enable_state = 0;							 // Set the board state in the struct
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <cea_board_enable_set+0xb4>)
 8001522:	2200      	movs	r2, #0
 8001524:	815a      	strh	r2, [r3, #10]

			// Return fail
			return(EXIT_FAILURE);
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <cea_board_enable_set+0xa8>
		}
	}
	else if (gpio_state == DISABLE && cea_board_state == ENABLED) 				 // If the board is enabled
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f083 0301 	eor.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <cea_board_enable_set+0xa6>
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <cea_board_enable_set+0xa6>
	{
		// Enable the CEA loop and set the target value to 0
		// Have a flag in the main loop then disable the HV and disable the board once the digipot is at 0
		cea_detector.making_safe_inprogress = true;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <cea_board_enable_set+0xb4>)
 800153e:	2201      	movs	r2, #1
 8001540:	735a      	strb	r2, [r3, #13]
		return(EXIT_SUCCESS);
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <cea_board_enable_set+0xa8>
	}
	else
	{
		return(EXIT_SUCCESS);
 8001546:	2300      	movs	r3, #0
	}
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	48000400 	.word	0x48000400
 8001554:	20000224 	.word	0x20000224
 8001558:	2000022a 	.word	0x2000022a

0800155c <cea_board_enable_get>:

bool cea_board_enable_get(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	cea_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin);
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <cea_board_enable_get+0x28>)
 8001564:	f001 fade 	bl	8002b24 <HAL_GPIO_ReadPin>
 8001568:	4603      	mov	r3, r0
 800156a:	b29a      	uxth	r2, r3
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <cea_board_enable_get+0x2c>)
 800156e:	815a      	strh	r2, [r3, #10]
	return(cea_detector.board_enable_state);
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <cea_board_enable_get+0x2c>)
 8001572:	895b      	ldrh	r3, [r3, #10]
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf14      	ite	ne
 8001578:	2301      	movne	r3, #1
 800157a:	2300      	moveq	r3, #0
 800157c:	b2db      	uxtb	r3, r3
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	48000400 	.word	0x48000400
 8001588:	20000224 	.word	0x20000224

0800158c <cea_i2c_write>:

HAL_StatusTypeDef cea_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af02      	add	r7, sp, #8
 8001592:	4603      	mov	r3, r0
 8001594:	6039      	str	r1, [r7, #0]
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	4613      	mov	r3, r2
 800159a:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c3, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	b299      	uxth	r1, r3
 80015a0:	88bb      	ldrh	r3, [r7, #4]
 80015a2:	220a      	movs	r2, #10
 80015a4:	9200      	str	r2, [sp, #0]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <cea_i2c_write+0x30>)
 80015aa:	f001 fba1 	bl	8002cf0 <HAL_I2C_Master_Transmit>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]
	return(ret);
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200000d8 	.word	0x200000d8

080015c0 <cea_i2c_read>:

HAL_StatusTypeDef cea_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af02      	add	r7, sp, #8
 80015c6:	4603      	mov	r3, r0
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	4613      	mov	r3, r2
 80015ce:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	73bb      	strb	r3, [r7, #14]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 80015d4:	2305      	movs	r3, #5
 80015d6:	737b      	strb	r3, [r7, #13]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 80015d8:	2305      	movs	r3, #5
 80015da:	73fb      	strb	r3, [r7, #15]

	//HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
	do
	{
		// Read operation
		ret =  HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION); // Delay if re-attempting I2C Operation
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	b299      	uxth	r1, r3
 80015e0:	88bb      	ldrh	r3, [r7, #4]
 80015e2:	220a      	movs	r2, #10
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <cea_i2c_read+0x5c>)
 80015ea:	f001 fc99 	bl	8002f20 <HAL_I2C_Master_Receive>
 80015ee:	4603      	mov	r3, r0
 80015f0:	73bb      	strb	r3, [r7, #14]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d802      	bhi.n	80015fe <cea_i2c_read+0x3e>
 80015f8:	2064      	movs	r0, #100	; 0x64
 80015fa:	f000 ff95 	bl	8002528 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	3b01      	subs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
	}while((ret == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d102      	bne.n	8001610 <cea_i2c_read+0x50>
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1e5      	bne.n	80015dc <cea_i2c_read+0x1c>

	return(ret);
 8001610:	7bbb      	ldrb	r3, [r7, #14]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200000d8 	.word	0x200000d8

08001620 <cea_i2c_write_read>:

HAL_StatusTypeDef cea_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4603      	mov	r3, r0
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	4613      	mov	r3, r2
 8001630:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8001636:	2305      	movs	r3, #5
 8001638:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 800163a:	2305      	movs	r3, #5
 800163c:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d802      	bhi.n	800164a <cea_i2c_write_read+0x2a>
 8001644:	2064      	movs	r0, #100	; 0x64
 8001646:	f000 ff6f 	bl	8002528 <HAL_Delay>
		status = cea_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 800164a:	89ba      	ldrh	r2, [r7, #12]
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	68b9      	ldr	r1, [r7, #8]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff9b 	bl	800158c <cea_i2c_write>
 8001656:	4603      	mov	r3, r0
 8001658:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 800165a:	7dfb      	ldrb	r3, [r7, #23]
 800165c:	3b01      	subs	r3, #1
 800165e:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8001660:	7d7b      	ldrb	r3, [r7, #21]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d102      	bne.n	800166c <cea_i2c_write_read+0x4c>
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e8      	bne.n	800163e <cea_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 800166c:	7d7b      	ldrb	r3, [r7, #21]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <cea_i2c_write_read+0x56>
 8001672:	7d7b      	ldrb	r3, [r7, #21]
 8001674:	e01a      	b.n	80016ac <cea_i2c_write_read+0x8c>

	HAL_Delay(5);
 8001676:	2005      	movs	r0, #5
 8001678:	f000 ff56 	bl	8002528 <HAL_Delay>

	do
	{
		// Read operation
		status =  cea_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 800167c:	8c3a      	ldrh	r2, [r7, #32]
 800167e:	7bfb      	ldrb	r3, [r7, #15]
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff9c 	bl	80015c0 <cea_i2c_read>
 8001688:	4603      	mov	r3, r0
 800168a:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 800168c:	7dbb      	ldrb	r3, [r7, #22]
 800168e:	2b04      	cmp	r3, #4
 8001690:	d802      	bhi.n	8001698 <cea_i2c_write_read+0x78>
 8001692:	2064      	movs	r0, #100	; 0x64
 8001694:	f000 ff48 	bl	8002528 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8001698:	7dbb      	ldrb	r3, [r7, #22]
 800169a:	3b01      	subs	r3, #1
 800169c:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 800169e:	7d7b      	ldrb	r3, [r7, #21]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d102      	bne.n	80016aa <cea_i2c_write_read+0x8a>
 80016a4:	7dbb      	ldrb	r3, [r7, #22]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1e8      	bne.n	800167c <cea_i2c_write_read+0x5c>

	return(status);
 80016aa:	7d7b      	ldrb	r3, [r7, #21]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <i2c_slv_cmd_rx_tx_handle>:
//************************************
//            I2C Slave
//************************************

bool i2c_slv_cmd_rx_tx_handle(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
	bool status = EXIT_SUCCESS;
 80016ba:	2300      	movs	r3, #0
 80016bc:	77fb      	strb	r3, [r7, #31]


	// SOME FUNCTION HERE TO HANDLE RX/TX
    switch(i2c_slv_rx.bytes.cmd)
 80016be:	4bb1      	ldr	r3, [pc, #708]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80016c0:	78db      	ldrb	r3, [r3, #3]
 80016c2:	3b40      	subs	r3, #64	; 0x40
 80016c4:	2b47      	cmp	r3, #71	; 0x47
 80016c6:	f200 836b 	bhi.w	8001da0 <i2c_slv_cmd_rx_tx_handle+0x6ec>
 80016ca:	a201      	add	r2, pc, #4	; (adr r2, 80016d0 <i2c_slv_cmd_rx_tx_handle+0x1c>)
 80016cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d0:	080018db 	.word	0x080018db
 80016d4:	0800196d 	.word	0x0800196d
 80016d8:	080019e3 	.word	0x080019e3
 80016dc:	08001a23 	.word	0x08001a23
 80016e0:	08001a63 	.word	0x08001a63
 80016e4:	08001da1 	.word	0x08001da1
 80016e8:	08001da1 	.word	0x08001da1
 80016ec:	08001da1 	.word	0x08001da1
 80016f0:	08001da1 	.word	0x08001da1
 80016f4:	08001da1 	.word	0x08001da1
 80016f8:	08001da1 	.word	0x08001da1
 80016fc:	08001da1 	.word	0x08001da1
 8001700:	08001da1 	.word	0x08001da1
 8001704:	08001da1 	.word	0x08001da1
 8001708:	08001da1 	.word	0x08001da1
 800170c:	08001da1 	.word	0x08001da1
 8001710:	08001da1 	.word	0x08001da1
 8001714:	08001da1 	.word	0x08001da1
 8001718:	08001da1 	.word	0x08001da1
 800171c:	08001da1 	.word	0x08001da1
 8001720:	08001da1 	.word	0x08001da1
 8001724:	08001da1 	.word	0x08001da1
 8001728:	08001da1 	.word	0x08001da1
 800172c:	08001da1 	.word	0x08001da1
 8001730:	08001da1 	.word	0x08001da1
 8001734:	08001da1 	.word	0x08001da1
 8001738:	08001da1 	.word	0x08001da1
 800173c:	08001da1 	.word	0x08001da1
 8001740:	08001da1 	.word	0x08001da1
 8001744:	08001da1 	.word	0x08001da1
 8001748:	08001da1 	.word	0x08001da1
 800174c:	08001da1 	.word	0x08001da1
 8001750:	08001abb 	.word	0x08001abb
 8001754:	08001b4d 	.word	0x08001b4d
 8001758:	08001ccf 	.word	0x08001ccf
 800175c:	08001d0d 	.word	0x08001d0d
 8001760:	08001d4b 	.word	0x08001d4b
 8001764:	08001bad 	.word	0x08001bad
 8001768:	08001c05 	.word	0x08001c05
 800176c:	08001c4f 	.word	0x08001c4f
 8001770:	08001c8f 	.word	0x08001c8f
 8001774:	08001da1 	.word	0x08001da1
 8001778:	08001da1 	.word	0x08001da1
 800177c:	08001da1 	.word	0x08001da1
 8001780:	08001da1 	.word	0x08001da1
 8001784:	08001da1 	.word	0x08001da1
 8001788:	08001da1 	.word	0x08001da1
 800178c:	08001da1 	.word	0x08001da1
 8001790:	08001da1 	.word	0x08001da1
 8001794:	08001da1 	.word	0x08001da1
 8001798:	08001da1 	.word	0x08001da1
 800179c:	08001da1 	.word	0x08001da1
 80017a0:	08001da1 	.word	0x08001da1
 80017a4:	08001da1 	.word	0x08001da1
 80017a8:	08001da1 	.word	0x08001da1
 80017ac:	08001da1 	.word	0x08001da1
 80017b0:	08001da1 	.word	0x08001da1
 80017b4:	08001da1 	.word	0x08001da1
 80017b8:	08001da1 	.word	0x08001da1
 80017bc:	08001da1 	.word	0x08001da1
 80017c0:	08001da1 	.word	0x08001da1
 80017c4:	08001da1 	.word	0x08001da1
 80017c8:	08001da1 	.word	0x08001da1
 80017cc:	08001da1 	.word	0x08001da1
 80017d0:	080017f1 	.word	0x080017f1
 80017d4:	08001da1 	.word	0x08001da1
 80017d8:	08001da1 	.word	0x08001da1
 80017dc:	08001da1 	.word	0x08001da1
 80017e0:	08001da1 	.word	0x08001da1
 80017e4:	08001da1 	.word	0x08001da1
 80017e8:	0800185b 	.word	0x0800185b
 80017ec:	0800189b 	.word	0x0800189b
		//                     UCD Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80017f0:	4b64      	ldr	r3, [pc, #400]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80017f2:	789b      	ldrb	r3, [r3, #2]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d10b      	bne.n	8001810 <i2c_slv_cmd_rx_tx_handle+0x15c>
			{
				ucd_detector.board_enable_state = (uint16_t)ucd_board_enable_get(); // Read the state enable pin
 80017f8:	f7ff fc9e 	bl	8001138 <ucd_board_enable_get>
 80017fc:	4603      	mov	r3, r0
 80017fe:	b29a      	uxth	r2, r3
 8001800:	4b61      	ldr	r3, [pc, #388]	; (8001988 <i2c_slv_cmd_rx_tx_handle+0x2d4>)
 8001802:	815a      	strh	r2, [r3, #10]
				i2c_slv_tx.data = ucd_detector.board_enable_state; 					// Prepare the date into the transmit
 8001804:	4b60      	ldr	r3, [pc, #384]	; (8001988 <i2c_slv_cmd_rx_tx_handle+0x2d4>)
 8001806:	895a      	ldrh	r2, [r3, #10]
 8001808:	4b60      	ldr	r3, [pc, #384]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 800180a:	801a      	strh	r2, [r3, #0]
				return(status);
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	e2ef      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001810:	4b5c      	ldr	r3, [pc, #368]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001812:	789b      	ldrb	r3, [r3, #2]
 8001814:	2b00      	cmp	r3, #0
 8001816:	f040 82c7 	bne.w	8001da8 <i2c_slv_cmd_rx_tx_handle+0x6f4>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 800181a:	4b5a      	ldr	r3, [pc, #360]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d107      	bne.n	8001832 <i2c_slv_cmd_rx_tx_handle+0x17e>
				{
					ucd_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8001822:	2001      	movs	r0, #1
 8001824:	f7ff fc70 	bl	8001108 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001828:	4b58      	ldr	r3, [pc, #352]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 800182a:	2201      	movs	r2, #1
 800182c:	801a      	strh	r2, [r3, #0]
					return(status);
 800182e:	7ffb      	ldrb	r3, [r7, #31]
 8001830:	e2de      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8001832:	4b54      	ldr	r3, [pc, #336]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <i2c_slv_cmd_rx_tx_handle+0x196>
				{
					ucd_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff fc64 	bl	8001108 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001840:	4b52      	ldr	r3, [pc, #328]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 8001842:	2201      	movs	r2, #1
 8001844:	801a      	strh	r2, [r3, #0]
					return(status);
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	e2d2      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800184a:	4b50      	ldr	r3, [pc, #320]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 800184c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001850:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001852:	2301      	movs	r3, #1
 8001854:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001856:	7ffb      	ldrb	r3, [r7, #31]
 8001858:	e2ca      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800185a:	4b4a      	ldr	r3, [pc, #296]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 800185c:	789b      	ldrb	r3, [r3, #2]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d10e      	bne.n	8001880 <i2c_slv_cmd_rx_tx_handle+0x1cc>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	837b      	strh	r3, [r7, #26]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001866:	2303      	movs	r3, #3
 8001868:	2202      	movs	r2, #2
 800186a:	21e4      	movs	r1, #228	; 0xe4
 800186c:	4848      	ldr	r0, [pc, #288]	; (8001990 <i2c_slv_cmd_rx_tx_handle+0x2dc>)
 800186e:	f7ff f931 	bl	8000ad4 <max6911_read>
 8001872:	4603      	mov	r3, r0
 8001874:	837b      	strh	r3, [r7, #26]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001876:	4a45      	ldr	r2, [pc, #276]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 8001878:	8b7b      	ldrh	r3, [r7, #26]
 800187a:	8013      	strh	r3, [r2, #0]

				return(status);
 800187c:	7ffb      	ldrb	r3, [r7, #31]
 800187e:	e2b7      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001882:	789b      	ldrb	r3, [r3, #2]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f040 8291 	bne.w	8001dac <i2c_slv_cmd_rx_tx_handle+0x6f8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800188a:	4b40      	ldr	r3, [pc, #256]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 800188c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001890:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001892:	2301      	movs	r3, #1
 8001894:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001896:	7ffb      	ldrb	r3, [r7, #31]
 8001898:	e2aa      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800189a:	4b3a      	ldr	r3, [pc, #232]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10e      	bne.n	80018c0 <i2c_slv_cmd_rx_tx_handle+0x20c>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	83bb      	strh	r3, [r7, #28]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 80018a6:	2301      	movs	r3, #1
 80018a8:	2200      	movs	r2, #0
 80018aa:	21e4      	movs	r1, #228	; 0xe4
 80018ac:	4838      	ldr	r0, [pc, #224]	; (8001990 <i2c_slv_cmd_rx_tx_handle+0x2dc>)
 80018ae:	f7ff f911 	bl	8000ad4 <max6911_read>
 80018b2:	4603      	mov	r3, r0
 80018b4:	83bb      	strh	r3, [r7, #28]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80018b6:	4a35      	ldr	r2, [pc, #212]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 80018b8:	8bbb      	ldrh	r3, [r7, #28]
 80018ba:	8013      	strh	r3, [r2, #0]

				return(status);
 80018bc:	7ffb      	ldrb	r3, [r7, #31]
 80018be:	e297      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80018c0:	4b30      	ldr	r3, [pc, #192]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80018c2:	789b      	ldrb	r3, [r3, #2]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f040 8273 	bne.w	8001db0 <i2c_slv_cmd_rx_tx_handle+0x6fc>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 80018cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d0:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80018d2:	2301      	movs	r3, #1
 80018d4:	77fb      	strb	r3, [r7, #31]
				return(status);
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	e28a      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
    	//                     CEA Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80018da:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80018dc:	789b      	ldrb	r3, [r3, #2]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10b      	bne.n	80018fa <i2c_slv_cmd_rx_tx_handle+0x246>
			{
				cea_detector.board_enable_state = (uint16_t)cea_board_enable_get(); // Read the state enable pin
 80018e2:	f7ff fe3b 	bl	800155c <cea_board_enable_get>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <i2c_slv_cmd_rx_tx_handle+0x2e0>)
 80018ec:	815a      	strh	r2, [r3, #10]
				i2c_slv_tx.data = cea_detector.board_enable_state; 					// Prepare the date into the transmit
 80018ee:	4b29      	ldr	r3, [pc, #164]	; (8001994 <i2c_slv_cmd_rx_tx_handle+0x2e0>)
 80018f0:	895a      	ldrh	r2, [r3, #10]
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 80018f4:	801a      	strh	r2, [r3, #0]
				return(status);
 80018f6:	7ffb      	ldrb	r3, [r7, #31]
 80018f8:	e27a      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80018fa:	4b22      	ldr	r3, [pc, #136]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80018fc:	789b      	ldrb	r3, [r3, #2]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 8258 	bne.w	8001db4 <i2c_slv_cmd_rx_tx_handle+0x700>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d11b      	bne.n	8001944 <i2c_slv_cmd_rx_tx_handle+0x290>
				{
					bool enable_status = cea_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff fdc7 	bl	80014a0 <cea_board_enable_set>
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
					if(enable_status == EXIT_SUCCESS)
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	f083 0301 	eor.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d005      	beq.n	800192e <i2c_slv_cmd_rx_tx_handle+0x27a>
					{
						i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 8001924:	2201      	movs	r2, #1
 8001926:	801a      	strh	r2, [r3, #0]
						status =  EXIT_SUCCESS;
 8001928:	2300      	movs	r3, #0
 800192a:	77fb      	strb	r3, [r7, #31]
 800192c:	e008      	b.n	8001940 <i2c_slv_cmd_rx_tx_handle+0x28c>
					}
					else if (enable_status == EXIT_FAILURE)
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <i2c_slv_cmd_rx_tx_handle+0x28c>
					{
						status =  EXIT_FAILURE;
 8001934:	2301      	movs	r3, #1
 8001936:	77fb      	strb	r3, [r7, #31]
						i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 800193a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193e:	801a      	strh	r2, [r3, #0]
					}
					return(status);
 8001940:	7ffb      	ldrb	r3, [r7, #31]
 8001942:	e255      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <i2c_slv_cmd_rx_tx_handle+0x2a8>
				{
					cea_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff fda7 	bl	80014a0 <cea_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 8001954:	2201      	movs	r2, #1
 8001956:	801a      	strh	r2, [r3, #0]
					return(status);
 8001958:	7ffb      	ldrb	r3, [r7, #31]
 800195a:	e249      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 800195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001962:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001964:	2301      	movs	r3, #1
 8001966:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001968:	7ffb      	ldrb	r3, [r7, #31]
 800196a:	e241      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 800196e:	789b      	ldrb	r3, [r3, #2]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d111      	bne.n	8001998 <i2c_slv_cmd_rx_tx_handle+0x2e4>
			{
				i2c_slv_tx.data = cea_detector.hv_loop_enable; 						// Prepare the date into the transmit
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <i2c_slv_cmd_rx_tx_handle+0x2e0>)
 8001976:	785b      	ldrb	r3, [r3, #1]
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 800197c:	801a      	strh	r2, [r3, #0]
				return(status);
 800197e:	7ffb      	ldrb	r3, [r7, #31]
 8001980:	e236      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
 8001982:	bf00      	nop
 8001984:	2000024c 	.word	0x2000024c
 8001988:	20000204 	.word	0x20000204
 800198c:	20000250 	.word	0x20000250
 8001990:	200000d8 	.word	0x200000d8
 8001994:	20000224 	.word	0x20000224
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001998:	4b94      	ldr	r3, [pc, #592]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 800199a:	789b      	ldrb	r3, [r3, #2]
 800199c:	2b00      	cmp	r3, #0
 800199e:	f040 820b 	bne.w	8001db8 <i2c_slv_cmd_rx_tx_handle+0x704>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 80019a2:	4b92      	ldr	r3, [pc, #584]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <i2c_slv_cmd_rx_tx_handle+0x306>
				{
					cea_detector.hv_loop_enable = true;								// Set the state of the flag
 80019aa:	4b91      	ldr	r3, [pc, #580]	; (8001bf0 <i2c_slv_cmd_rx_tx_handle+0x53c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80019b0:	4b90      	ldr	r3, [pc, #576]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	801a      	strh	r2, [r3, #0]
					return(status);
 80019b6:	7ffb      	ldrb	r3, [r7, #31]
 80019b8:	e21a      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 80019ba:	4b8c      	ldr	r3, [pc, #560]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d107      	bne.n	80019d2 <i2c_slv_cmd_rx_tx_handle+0x31e>
				{
					cea_detector.hv_loop_enable = false;						    // Set the state of the flag
 80019c2:	4b8b      	ldr	r3, [pc, #556]	; (8001bf0 <i2c_slv_cmd_rx_tx_handle+0x53c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80019c8:	4b8a      	ldr	r3, [pc, #552]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	801a      	strh	r2, [r3, #0]
					return(status);
 80019ce:	7ffb      	ldrb	r3, [r7, #31]
 80019d0:	e20e      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80019d2:	4b88      	ldr	r3, [pc, #544]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 80019d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d8:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80019da:	2301      	movs	r3, #1
 80019dc:	77fb      	strb	r3, [r7, #31]
				return(status);
 80019de:	7ffb      	ldrb	r3, [r7, #31]
 80019e0:	e206      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80019e2:	4b82      	ldr	r3, [pc, #520]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 80019e4:	789b      	ldrb	r3, [r3, #2]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d10e      	bne.n	8001a08 <i2c_slv_cmd_rx_tx_handle+0x354>
			{
				uint16_t dataread = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	813b      	strh	r3, [r7, #8]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80019ee:	2303      	movs	r3, #3
 80019f0:	2202      	movs	r2, #2
 80019f2:	21ee      	movs	r1, #238	; 0xee
 80019f4:	4880      	ldr	r0, [pc, #512]	; (8001bf8 <i2c_slv_cmd_rx_tx_handle+0x544>)
 80019f6:	f7ff f86d 	bl	8000ad4 <max6911_read>
 80019fa:	4603      	mov	r3, r0
 80019fc:	813b      	strh	r3, [r7, #8]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80019fe:	4a7d      	ldr	r2, [pc, #500]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	8013      	strh	r3, [r2, #0]

				return(status);
 8001a04:	7ffb      	ldrb	r3, [r7, #31]
 8001a06:	e1f3      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001a08:	4b78      	ldr	r3, [pc, #480]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001a0a:	789b      	ldrb	r3, [r3, #2]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f040 81d5 	bne.w	8001dbc <i2c_slv_cmd_rx_tx_handle+0x708>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001a12:	4b78      	ldr	r3, [pc, #480]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a18:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001a1e:	7ffb      	ldrb	r3, [r7, #31]
 8001a20:	e1e6      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001a22:	4b72      	ldr	r3, [pc, #456]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001a24:	789b      	ldrb	r3, [r3, #2]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d10e      	bne.n	8001a48 <i2c_slv_cmd_rx_tx_handle+0x394>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	817b      	strh	r3, [r7, #10]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001a2e:	2301      	movs	r3, #1
 8001a30:	2200      	movs	r2, #0
 8001a32:	21f0      	movs	r1, #240	; 0xf0
 8001a34:	4870      	ldr	r0, [pc, #448]	; (8001bf8 <i2c_slv_cmd_rx_tx_handle+0x544>)
 8001a36:	f7ff f84d 	bl	8000ad4 <max6911_read>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	817b      	strh	r3, [r7, #10]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001a3e:	4a6d      	ldr	r2, [pc, #436]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001a40:	897b      	ldrh	r3, [r7, #10]
 8001a42:	8013      	strh	r3, [r2, #0]

				return(status);
 8001a44:	7ffb      	ldrb	r3, [r7, #31]
 8001a46:	e1d3      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001a48:	4b68      	ldr	r3, [pc, #416]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001a4a:	789b      	ldrb	r3, [r3, #2]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f040 81b7 	bne.w	8001dc0 <i2c_slv_cmd_rx_tx_handle+0x70c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001a52:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a58:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001a5e:	7ffb      	ldrb	r3, [r7, #31]
 8001a60:	e1c6      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001a64:	789b      	ldrb	r3, [r3, #2]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d105      	bne.n	8001a76 <i2c_slv_cmd_rx_tx_handle+0x3c2>
			{
				i2c_slv_tx.data = cea_detector.hv_targate_value;        // Prepare the date into the transmit
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <i2c_slv_cmd_rx_tx_handle+0x53c>)
 8001a6c:	891a      	ldrh	r2, [r3, #8]
 8001a6e:	4b61      	ldr	r3, [pc, #388]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001a70:	801a      	strh	r2, [r3, #0]
				return(status);
 8001a72:	7ffb      	ldrb	r3, [r7, #31]
 8001a74:	e1bc      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001a78:	789b      	ldrb	r3, [r3, #2]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f040 81a2 	bne.w	8001dc4 <i2c_slv_cmd_rx_tx_handle+0x710>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001a82:	785b      	ldrb	r3, [r3, #1]
 8001a84:	2b0f      	cmp	r3, #15
 8001a86:	d810      	bhi.n	8001aaa <i2c_slv_cmd_rx_tx_handle+0x3f6>
				{
					// Read the data from the buffer
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8001a88:	4b58      	ldr	r3, [pc, #352]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001a8a:	785b      	ldrb	r3, [r3, #1]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 8001a90:	4b56      	ldr	r3, [pc, #344]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b21b      	sxth	r3, r3
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <i2c_slv_cmd_rx_tx_handle+0x53c>)
 8001a9e:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001aa0:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	801a      	strh	r2, [r3, #0]
					return(status);
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
 8001aa8:	e1a2      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001aaa:	4b52      	ldr	r3, [pc, #328]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab0:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	77fb      	strb	r3, [r7, #31]
					return(status);
 8001ab6:	7ffb      	ldrb	r3, [r7, #31]
 8001ab8:	e19a      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
    	//                     IJC Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001abc:	789b      	ldrb	r3, [r3, #2]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10b      	bne.n	8001ada <i2c_slv_cmd_rx_tx_handle+0x426>
			{
				ijc_detector.board_enable_state = (uint16_t)ijc_board_enable_get(); // Read the state enable pin
 8001ac2:	f7ff fc57 	bl	8001374 <ijc_board_enable_get>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <i2c_slv_cmd_rx_tx_handle+0x548>)
 8001acc:	815a      	strh	r2, [r3, #10]
				i2c_slv_tx.data = ijc_detector.board_enable_state; 					// Prepare the date into the transmit
 8001ace:	4b4b      	ldr	r3, [pc, #300]	; (8001bfc <i2c_slv_cmd_rx_tx_handle+0x548>)
 8001ad0:	895a      	ldrh	r2, [r3, #10]
 8001ad2:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001ad4:	801a      	strh	r2, [r3, #0]
				return(status);
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
 8001ad8:	e18a      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001ada:	4b44      	ldr	r3, [pc, #272]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001adc:	789b      	ldrb	r3, [r3, #2]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 8172 	bne.w	8001dc8 <i2c_slv_cmd_rx_tx_handle+0x714>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d11b      	bne.n	8001b24 <i2c_slv_cmd_rx_tx_handle+0x470>
				{
					bool enable_status = ijc_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff fbe3 	bl	80012b8 <ijc_board_enable_set>
 8001af2:	4603      	mov	r3, r0
 8001af4:	737b      	strb	r3, [r7, #13]
					if(enable_status == EXIT_SUCCESS)
 8001af6:	7b7b      	ldrb	r3, [r7, #13]
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <i2c_slv_cmd_rx_tx_handle+0x45a>
					{
						i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001b02:	4b3c      	ldr	r3, [pc, #240]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	801a      	strh	r2, [r3, #0]
						status =  EXIT_SUCCESS;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	77fb      	strb	r3, [r7, #31]
 8001b0c:	e008      	b.n	8001b20 <i2c_slv_cmd_rx_tx_handle+0x46c>
					}
					else if (enable_status == EXIT_FAILURE)
 8001b0e:	7b7b      	ldrb	r3, [r7, #13]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <i2c_slv_cmd_rx_tx_handle+0x46c>
					{
						status =  EXIT_FAILURE;
 8001b14:	2301      	movs	r3, #1
 8001b16:	77fb      	strb	r3, [r7, #31]
						i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b1e:	801a      	strh	r2, [r3, #0]
					}
					return(status);
 8001b20:	7ffb      	ldrb	r3, [r7, #31]
 8001b22:	e165      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d107      	bne.n	8001b3c <i2c_slv_cmd_rx_tx_handle+0x488>
				{
					ijc_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fbc3 	bl	80012b8 <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001b32:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	801a      	strh	r2, [r3, #0]
					return(status);
 8001b38:	7ffb      	ldrb	r3, [r7, #31]
 8001b3a:	e159      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b42:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001b44:	2301      	movs	r3, #1
 8001b46:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001b48:	7ffb      	ldrb	r3, [r7, #31]
 8001b4a:	e151      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001b4e:	789b      	ldrb	r3, [r3, #2]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <i2c_slv_cmd_rx_tx_handle+0x4ae>
			{
				i2c_slv_tx.data = ijc_detector.hv_loop_enable; 						// Prepare the date into the transmit
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <i2c_slv_cmd_rx_tx_handle+0x548>)
 8001b56:	785b      	ldrb	r3, [r3, #1]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001b5c:	801a      	strh	r2, [r3, #0]
				return(status);
 8001b5e:	7ffb      	ldrb	r3, [r7, #31]
 8001b60:	e146      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001b64:	789b      	ldrb	r3, [r3, #2]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 8130 	bne.w	8001dcc <i2c_slv_cmd_rx_tx_handle+0x718>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d107      	bne.n	8001b84 <i2c_slv_cmd_rx_tx_handle+0x4d0>
				{
					ijc_detector.hv_loop_enable = true;								// Set the state of the flag
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <i2c_slv_cmd_rx_tx_handle+0x548>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	801a      	strh	r2, [r3, #0]
					return(status);
 8001b80:	7ffb      	ldrb	r3, [r7, #31]
 8001b82:	e135      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d107      	bne.n	8001b9c <i2c_slv_cmd_rx_tx_handle+0x4e8>
				{
					ijc_detector.hv_loop_enable = false;						    // Set the state of the flag
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <i2c_slv_cmd_rx_tx_handle+0x548>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	801a      	strh	r2, [r3, #0]
					return(status);
 8001b98:	7ffb      	ldrb	r3, [r7, #31]
 8001b9a:	e129      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba2:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001ba8:	7ffb      	ldrb	r3, [r7, #31]
 8001baa:	e121      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001bae:	789b      	ldrb	r3, [r3, #2]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d10e      	bne.n	8001bd2 <i2c_slv_cmd_rx_tx_handle+0x51e>
			{
				uint16_t dataread = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	827b      	strh	r3, [r7, #18]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001bb8:	2303      	movs	r3, #3
 8001bba:	2202      	movs	r2, #2
 8001bbc:	21e0      	movs	r1, #224	; 0xe0
 8001bbe:	4810      	ldr	r0, [pc, #64]	; (8001c00 <i2c_slv_cmd_rx_tx_handle+0x54c>)
 8001bc0:	f7fe ff88 	bl	8000ad4 <max6911_read>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	827b      	strh	r3, [r7, #18]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001bca:	8a7b      	ldrh	r3, [r7, #18]
 8001bcc:	8013      	strh	r3, [r2, #0]

				return(status);
 8001bce:	7ffb      	ldrb	r3, [r7, #31]
 8001bd0:	e10e      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001bd4:	789b      	ldrb	r3, [r3, #2]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 80fa 	bne.w	8001dd0 <i2c_slv_cmd_rx_tx_handle+0x71c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be2:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001be4:	2301      	movs	r3, #1
 8001be6:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001be8:	7ffb      	ldrb	r3, [r7, #31]
 8001bea:	e101      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
 8001bec:	2000024c 	.word	0x2000024c
 8001bf0:	20000224 	.word	0x20000224
 8001bf4:	20000250 	.word	0x20000250
 8001bf8:	200000d8 	.word	0x200000d8
 8001bfc:	20000214 	.word	0x20000214
 8001c00:	20000084 	.word	0x20000084
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001c04:	4b7c      	ldr	r3, [pc, #496]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001c06:	789b      	ldrb	r3, [r3, #2]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10e      	bne.n	8001c2a <i2c_slv_cmd_rx_tx_handle+0x576>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	82bb      	strh	r3, [r7, #20]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001c10:	2301      	movs	r3, #1
 8001c12:	2200      	movs	r2, #0
 8001c14:	21e0      	movs	r1, #224	; 0xe0
 8001c16:	4879      	ldr	r0, [pc, #484]	; (8001dfc <i2c_slv_cmd_rx_tx_handle+0x748>)
 8001c18:	f7fe ff5c 	bl	8000ad4 <max6911_read>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	82bb      	strh	r3, [r7, #20]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001c20:	4a77      	ldr	r2, [pc, #476]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001c22:	8abb      	ldrh	r3, [r7, #20]
 8001c24:	8013      	strh	r3, [r2, #0]

				return(status);
 8001c26:	7ffb      	ldrb	r3, [r7, #31]
 8001c28:	e0e2      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001c2a:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001c2c:	789b      	ldrb	r3, [r3, #2]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f040 80d0 	bne.w	8001dd4 <i2c_slv_cmd_rx_tx_handle+0x720>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001c34:	4b72      	ldr	r3, [pc, #456]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001c36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c3a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	77fb      	strb	r3, [r7, #31]
				{
				    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c44:	486f      	ldr	r0, [pc, #444]	; (8001e04 <i2c_slv_cmd_rx_tx_handle+0x750>)
 8001c46:	f000 ff9d 	bl	8002b84 <HAL_GPIO_TogglePin>
				}
				return(status);
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	e0d0      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001c4e:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001c50:	789b      	ldrb	r3, [r3, #2]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d10e      	bne.n	8001c74 <i2c_slv_cmd_rx_tx_handle+0x5c0>
			{
				uint16_t dataread = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	82fb      	strh	r3, [r7, #22]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	21e2      	movs	r1, #226	; 0xe2
 8001c60:	4866      	ldr	r0, [pc, #408]	; (8001dfc <i2c_slv_cmd_rx_tx_handle+0x748>)
 8001c62:	f7fe ff37 	bl	8000ad4 <max6911_read>
 8001c66:	4603      	mov	r3, r0
 8001c68:	82fb      	strh	r3, [r7, #22]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001c6a:	4a65      	ldr	r2, [pc, #404]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001c6c:	8afb      	ldrh	r3, [r7, #22]
 8001c6e:	8013      	strh	r3, [r2, #0]

				return(status);
 8001c70:	7ffb      	ldrb	r3, [r7, #31]
 8001c72:	e0bd      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001c74:	4b60      	ldr	r3, [pc, #384]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001c76:	789b      	ldrb	r3, [r3, #2]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 80ad 	bne.w	8001dd8 <i2c_slv_cmd_rx_tx_handle+0x724>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001c7e:	4b60      	ldr	r3, [pc, #384]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c84:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001c86:	2301      	movs	r3, #1
 8001c88:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001c8a:	7ffb      	ldrb	r3, [r7, #31]
 8001c8c:	e0b0      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001c8e:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001c90:	789b      	ldrb	r3, [r3, #2]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10e      	bne.n	8001cb4 <i2c_slv_cmd_rx_tx_handle+0x600>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	833b      	strh	r3, [r7, #24]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	21e2      	movs	r1, #226	; 0xe2
 8001ca0:	4856      	ldr	r0, [pc, #344]	; (8001dfc <i2c_slv_cmd_rx_tx_handle+0x748>)
 8001ca2:	f7fe ff17 	bl	8000ad4 <max6911_read>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	833b      	strh	r3, [r7, #24]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001caa:	4a55      	ldr	r2, [pc, #340]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001cac:	8b3b      	ldrh	r3, [r7, #24]
 8001cae:	8013      	strh	r3, [r2, #0]

				return(status);
 8001cb0:	7ffb      	ldrb	r3, [r7, #31]
 8001cb2:	e09d      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001cb4:	4b50      	ldr	r3, [pc, #320]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001cb6:	789b      	ldrb	r3, [r3, #2]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f040 808f 	bne.w	8001ddc <i2c_slv_cmd_rx_tx_handle+0x728>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001cbe:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	e090      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001cce:	4b4a      	ldr	r3, [pc, #296]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001cd0:	789b      	ldrb	r3, [r3, #2]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10e      	bne.n	8001cf4 <i2c_slv_cmd_rx_tx_handle+0x640>
			{
				uint16_t dataread = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	81fb      	strh	r3, [r7, #14]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001cda:	2303      	movs	r3, #3
 8001cdc:	2202      	movs	r2, #2
 8001cde:	21e4      	movs	r1, #228	; 0xe4
 8001ce0:	4846      	ldr	r0, [pc, #280]	; (8001dfc <i2c_slv_cmd_rx_tx_handle+0x748>)
 8001ce2:	f7fe fef7 	bl	8000ad4 <max6911_read>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	81fb      	strh	r3, [r7, #14]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001cea:	4a45      	ldr	r2, [pc, #276]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001cec:	89fb      	ldrh	r3, [r7, #14]
 8001cee:	8013      	strh	r3, [r2, #0]

				return(status);
 8001cf0:	7ffb      	ldrb	r3, [r7, #31]
 8001cf2:	e07d      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001cf4:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d171      	bne.n	8001de0 <i2c_slv_cmd_rx_tx_handle+0x72c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001cfc:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001cfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d02:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001d04:	2301      	movs	r3, #1
 8001d06:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001d08:	7ffb      	ldrb	r3, [r7, #31]
 8001d0a:	e071      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001d0e:	789b      	ldrb	r3, [r3, #2]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d10e      	bne.n	8001d32 <i2c_slv_cmd_rx_tx_handle+0x67e>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	823b      	strh	r3, [r7, #16]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001d18:	2301      	movs	r3, #1
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	21e6      	movs	r1, #230	; 0xe6
 8001d1e:	4837      	ldr	r0, [pc, #220]	; (8001dfc <i2c_slv_cmd_rx_tx_handle+0x748>)
 8001d20:	f7fe fed8 	bl	8000ad4 <max6911_read>
 8001d24:	4603      	mov	r3, r0
 8001d26:	823b      	strh	r3, [r7, #16]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001d28:	4a35      	ldr	r2, [pc, #212]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001d2a:	8a3b      	ldrh	r3, [r7, #16]
 8001d2c:	8013      	strh	r3, [r2, #0]

				return(status);
 8001d2e:	7ffb      	ldrb	r3, [r7, #31]
 8001d30:	e05e      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001d34:	789b      	ldrb	r3, [r3, #2]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d154      	bne.n	8001de4 <i2c_slv_cmd_rx_tx_handle+0x730>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001d3a:	4b31      	ldr	r3, [pc, #196]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d40:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001d42:	2301      	movs	r3, #1
 8001d44:	77fb      	strb	r3, [r7, #31]
				return(status);
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	e052      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001d4c:	789b      	ldrb	r3, [r3, #2]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d105      	bne.n	8001d5e <i2c_slv_cmd_rx_tx_handle+0x6aa>
			{
				i2c_slv_tx.data = ijc_detector.hv_targate_value;        // Prepare the date into the transmit
 8001d52:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <i2c_slv_cmd_rx_tx_handle+0x754>)
 8001d54:	891a      	ldrh	r2, [r3, #8]
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001d58:	801a      	strh	r2, [r3, #0]
				return(status);
 8001d5a:	7ffb      	ldrb	r3, [r7, #31]
 8001d5c:	e048      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001d5e:	4b26      	ldr	r3, [pc, #152]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001d60:	789b      	ldrb	r3, [r3, #2]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d140      	bne.n	8001de8 <i2c_slv_cmd_rx_tx_handle+0x734>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001d68:	785b      	ldrb	r3, [r3, #1]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	d810      	bhi.n	8001d90 <i2c_slv_cmd_rx_tx_handle+0x6dc>
				{
					// Read the data from the buffer
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8001d6e:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001d70:	785b      	ldrb	r3, [r3, #1]
 8001d72:	021b      	lsls	r3, r3, #8
 8001d74:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <i2c_slv_cmd_rx_tx_handle+0x744>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b21b      	sxth	r3, r3
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	4b21      	ldr	r3, [pc, #132]	; (8001e08 <i2c_slv_cmd_rx_tx_handle+0x754>)
 8001d84:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	801a      	strh	r2, [r3, #0]
					return(status);
 8001d8c:	7ffb      	ldrb	r3, [r7, #31]
 8001d8e:	e02f      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <i2c_slv_cmd_rx_tx_handle+0x74c>)
 8001d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d96:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	77fb      	strb	r3, [r7, #31]
					return(status);
 8001d9c:	7ffb      	ldrb	r3, [r7, #31]
 8001d9e:	e027      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			break;
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	default:
			status =  EXIT_FAILURE;
 8001da0:	2301      	movs	r3, #1
 8001da2:	77fb      	strb	r3, [r7, #31]
			return(status);
 8001da4:	7ffb      	ldrb	r3, [r7, #31]
 8001da6:	e023      	b.n	8001df0 <i2c_slv_cmd_rx_tx_handle+0x73c>
			break;
 8001da8:	bf00      	nop
 8001daa:	e01e      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001dac:	bf00      	nop
 8001dae:	e01c      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001db0:	bf00      	nop
 8001db2:	e01a      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001db4:	bf00      	nop
 8001db6:	e018      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001db8:	bf00      	nop
 8001dba:	e016      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001dbc:	bf00      	nop
 8001dbe:	e014      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001dc0:	bf00      	nop
 8001dc2:	e012      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001dc4:	bf00      	nop
 8001dc6:	e010      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001dc8:	bf00      	nop
 8001dca:	e00e      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001dcc:	bf00      	nop
 8001dce:	e00c      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001dd0:	bf00      	nop
 8001dd2:	e00a      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001dd4:	bf00      	nop
 8001dd6:	e008      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001dd8:	bf00      	nop
 8001dda:	e006      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001ddc:	bf00      	nop
 8001dde:	e004      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001de0:	bf00      	nop
 8001de2:	e002      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001de4:	bf00      	nop
 8001de6:	e000      	b.n	8001dea <i2c_slv_cmd_rx_tx_handle+0x736>
			break;
 8001de8:	bf00      	nop
	}

    // If no command is matched - return failure
	status =  EXIT_FAILURE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	77fb      	strb	r3, [r7, #31]
	return(status);
 8001dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	2000024c 	.word	0x2000024c
 8001dfc:	20000084 	.word	0x20000084
 8001e00:	20000250 	.word	0x20000250
 8001e04:	48000400 	.word	0x48000400
 8001e08:	20000214 	.word	0x20000214

08001e0c <i2c_slv_init>:



void i2c_slv_init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	// Clear the Tx and Rx buffers before use
	i2c_slv_clear_buffer(&i2c_tx_buffer[0], TXBUFFERSIZE);
 8001e10:	2102      	movs	r1, #2
 8001e12:	4808      	ldr	r0, [pc, #32]	; (8001e34 <i2c_slv_init+0x28>)
 8001e14:	f000 f814 	bl	8001e40 <i2c_slv_clear_buffer>
	i2c_slv_clear_buffer(&i2c_rx_buffer[0], RXBUFFERSIZE);
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4807      	ldr	r0, [pc, #28]	; (8001e38 <i2c_slv_init+0x2c>)
 8001e1c:	f000 f810 	bl	8001e40 <i2c_slv_clear_buffer>

	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8001e20:	4806      	ldr	r0, [pc, #24]	; (8001e3c <i2c_slv_init+0x30>)
 8001e22:	f001 fad7 	bl	80033d4 <HAL_I2C_EnableListen_IT>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <i2c_slv_init+0x24>
	{
		/* Transfer error in reception process */
		Error_Handler();
 8001e2c:	f000 f8da 	bl	8001fe4 <Error_Handler>
	}
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000244 	.word	0x20000244
 8001e38:	20000248 	.word	0x20000248
 8001e3c:	20000030 	.word	0x20000030

08001e40 <i2c_slv_clear_buffer>:


void i2c_slv_clear_buffer(uint8_t* buffer, uint8_t size)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]

	uint8_t idx = 0; // An index
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]

	for(idx = 0; idx < size; idx++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e008      	b.n	8001e68 <i2c_slv_clear_buffer+0x28>
	{
		// Cycle through and clear the buffer array
		*buffer = 0x00;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
		buffer++;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	607b      	str	r3, [r7, #4]
	for(idx = 0; idx < size; idx++)
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	3301      	adds	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	7bfa      	ldrb	r2, [r7, #15]
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d3f2      	bcc.n	8001e56 <i2c_slv_clear_buffer+0x16>
	}

}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	Xfer_Complete = 1;        // Set flag for RX completion
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	2000002c 	.word	0x2000002c

08001ea0 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	// Handle the I2C receive callback complete
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	061a      	lsls	r2, r3, #24
					| (i2c_rx_buffer[1] << 16)
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8001eb0:	785b      	ldrb	r3, [r3, #1]
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	431a      	orrs	r2, r3
					| (i2c_rx_buffer[2] << 8)
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8001eb8:	789b      	ldrb	r3, [r3, #2]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	4313      	orrs	r3, r2
					| (i2c_rx_buffer[3]);
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8001ec0:	78d2      	ldrb	r2, [r2, #3]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	461a      	mov	r2, r3
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8001ec8:	601a      	str	r2, [r3, #0]

	// Load the init/fail value into the tx buffer
	i2c_slv_tx.data = CMD_FAIL_OP_INPROG_RESP;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8001ecc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001ed0:	801a      	strh	r2, [r3, #0]

	Xfer_Complete = 1;                           // Set flag for RX completion
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	20000248 	.word	0x20000248
 8001ee8:	2000024c 	.word	0x2000024c
 8001eec:	20000250 	.word	0x20000250
 8001ef0:	2000002c 	.word	0x2000002c

08001ef4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
 8001f00:	4613      	mov	r3, r2
 8001f02:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	4a15      	ldr	r2, [pc, #84]	; (8001f5c <HAL_I2C_AddrCallback+0x68>)
 8001f08:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <HAL_I2C_AddrCallback+0x68>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d014      	beq.n	8001f3c <HAL_I2C_AddrCallback+0x48>
	/*##- Start the transmission process #####################################*/
	/* While the I2C in reception process, user can transmit data through
	"i2c_tx_buffer" buffer */

	// Update the TX buffer
	i2c_tx_buffer[0] = i2c_slv_tx.bytes.byte_1;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_I2C_AddrCallback+0x6c>)
 8001f14:	785a      	ldrb	r2, [r3, #1]
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_I2C_AddrCallback+0x70>)
 8001f18:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_slv_tx.bytes.byte_2;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_I2C_AddrCallback+0x6c>)
 8001f1c:	781a      	ldrb	r2, [r3, #0]
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_I2C_AddrCallback+0x70>)
 8001f20:	705a      	strb	r2, [r3, #1]
	//copy_array(&i2c_slv_tx.bytes.byte_1, i2c_tx_buffer[0], TXBUFFERSIZE);

	if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)i2c_tx_buffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8001f22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f26:	2202      	movs	r2, #2
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_I2C_AddrCallback+0x70>)
 8001f2a:	480f      	ldr	r0, [pc, #60]	; (8001f68 <HAL_I2C_AddrCallback+0x74>)
 8001f2c:	f001 f8ee 	bl	800310c <HAL_I2C_Slave_Seq_Transmit_IT>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00e      	beq.n	8001f54 <HAL_I2C_AddrCallback+0x60>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 8001f36:	f000 f855 	bl	8001fe4 <Error_Handler>
		Error_Handler();
	}

  }

}
 8001f3a:	e00b      	b.n	8001f54 <HAL_I2C_AddrCallback+0x60>
	if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)i2c_rx_buffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8001f3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f40:	2204      	movs	r2, #4
 8001f42:	490a      	ldr	r1, [pc, #40]	; (8001f6c <HAL_I2C_AddrCallback+0x78>)
 8001f44:	4808      	ldr	r0, [pc, #32]	; (8001f68 <HAL_I2C_AddrCallback+0x74>)
 8001f46:	f001 f993 	bl	8003270 <HAL_I2C_Slave_Seq_Receive_IT>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_I2C_AddrCallback+0x60>
		Error_Handler();
 8001f50:	f000 f848 	bl	8001fe4 <Error_Handler>
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000028 	.word	0x20000028
 8001f60:	20000250 	.word	0x20000250
 8001f64:	20000244 	.word	0x20000244
 8001f68:	20000030 	.word	0x20000030
 8001f6c:	20000248 	.word	0x20000248

08001f70 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	//HAL_I2C_EnableListen_IT(&hi2c1);
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f001 fae8 	bl	8003562 <HAL_I2C_GetError>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d001      	beq.n	8001f9c <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8001f98:	f000 f824 	bl	8001fe4 <Error_Handler>
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	counter ++;
 8001fac:	4b09      	ldr	r3, [pc, #36]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001fb6:	701a      	strb	r2, [r3, #0]

	// Set the flags responsable for running through the DSSD loop
	ijc_detector.ramp_flag = true;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
	cea_detector.ramp_flag = true;
 8001fbe:	4b07      	ldr	r3, [pc, #28]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001fc4:	2140      	movs	r1, #64	; 0x40
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001fc8:	f000 fddc 	bl	8002b84 <HAL_GPIO_TogglePin>
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000252 	.word	0x20000252
 8001fd8:	20000214 	.word	0x20000214
 8001fdc:	20000224 	.word	0x20000224
 8001fe0:	48000800 	.word	0x48000800

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_MspInit+0x44>)
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_MspInit+0x44>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6613      	str	r3, [r2, #96]	; 0x60
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_MspInit+0x44>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_MspInit+0x44>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <HAL_MspInit+0x44>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	6593      	str	r3, [r2, #88]	; 0x58
 800201a:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_MspInit+0x44>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000

08002038 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b0a6      	sub	sp, #152	; 0x98
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	2260      	movs	r2, #96	; 0x60
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f005 f9b0 	bl	80073be <memset>
  if(hi2c->Instance==I2C1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6c      	ldr	r2, [pc, #432]	; (8002214 <HAL_I2C_MspInit+0x1dc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d14d      	bne.n	8002104 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002068:	2340      	movs	r3, #64	; 0x40
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800206c:	2300      	movs	r3, #0
 800206e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4618      	mov	r0, r3
 8002076:	f003 fd87 	bl	8005b88 <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002080:	f7ff ffb0 	bl	8001fe4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b64      	ldr	r3, [pc, #400]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	4a63      	ldr	r2, [pc, #396]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002090:	4b61      	ldr	r3, [pc, #388]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	623b      	str	r3, [r7, #32]
 800209a:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800209c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a4:	2312      	movs	r3, #18
 80020a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b0:	2303      	movs	r3, #3
 80020b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020b6:	2304      	movs	r3, #4
 80020b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80020c0:	4619      	mov	r1, r3
 80020c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c6:	f000 fbb3 	bl	8002830 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ca:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 80020d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020d4:	6593      	str	r3, [r2, #88]	; 0x58
 80020d6:	4b50      	ldr	r3, [pc, #320]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	201f      	movs	r0, #31
 80020e8:	f000 fb1d 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020ec:	201f      	movs	r0, #31
 80020ee:	f000 fb36 	bl	800275e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	2020      	movs	r0, #32
 80020f8:	f000 fb15 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80020fc:	2020      	movs	r0, #32
 80020fe:	f000 fb2e 	bl	800275e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002102:	e082      	b.n	800220a <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a44      	ldr	r2, [pc, #272]	; (800221c <HAL_I2C_MspInit+0x1e4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d13c      	bne.n	8002188 <HAL_I2C_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002112:	2300      	movs	r3, #0
 8002114:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211a:	4618      	mov	r0, r3
 800211c:	f003 fd34 	bl	8005b88 <HAL_RCCEx_PeriphCLKConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8002126:	f7ff ff5d 	bl	8001fe4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002136:	4b38      	ldr	r3, [pc, #224]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002142:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214a:	2312      	movs	r3, #18
 800214c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002156:	2303      	movs	r3, #3
 8002158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800215c:	2304      	movs	r3, #4
 800215e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002162:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002166:	4619      	mov	r1, r3
 8002168:	482d      	ldr	r0, [pc, #180]	; (8002220 <HAL_I2C_MspInit+0x1e8>)
 800216a:	f000 fb61 	bl	8002830 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800216e:	4b2a      	ldr	r3, [pc, #168]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002172:	4a29      	ldr	r2, [pc, #164]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 8002174:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002178:	6593      	str	r3, [r2, #88]	; 0x58
 800217a:	4b27      	ldr	r3, [pc, #156]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	697b      	ldr	r3, [r7, #20]
}
 8002186:	e040      	b.n	800220a <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C3)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0x1ec>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d13b      	bne.n	800220a <HAL_I2C_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002198:	2300      	movs	r3, #0
 800219a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800219c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a0:	4618      	mov	r0, r3
 80021a2:	f003 fcf1 	bl	8005b88 <HAL_RCCEx_PeriphCLKConfig>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_I2C_MspInit+0x178>
      Error_Handler();
 80021ac:	f7ff ff1a 	bl	8001fe4 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 80021b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b4:	4a18      	ldr	r2, [pc, #96]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 80021b6:	f043 0304 	orr.w	r3, r3, #4
 80021ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021bc:	4b16      	ldr	r3, [pc, #88]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 80021be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ce:	2312      	movs	r3, #18
 80021d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021da:	2303      	movs	r3, #3
 80021dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021e0:	2304      	movs	r3, #4
 80021e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80021ea:	4619      	mov	r1, r3
 80021ec:	480e      	ldr	r0, [pc, #56]	; (8002228 <HAL_I2C_MspInit+0x1f0>)
 80021ee:	f000 fb1f 	bl	8002830 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 80021f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021fc:	6593      	str	r3, [r2, #88]	; 0x58
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_I2C_MspInit+0x1e0>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
}
 800220a:	bf00      	nop
 800220c:	3798      	adds	r7, #152	; 0x98
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40005400 	.word	0x40005400
 8002218:	40021000 	.word	0x40021000
 800221c:	40005800 	.word	0x40005800
 8002220:	48000400 	.word	0x48000400
 8002224:	40005c00 	.word	0x40005c00
 8002228:	48000800 	.word	0x48000800

0800222c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223c:	d113      	bne.n	8002266 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <HAL_TIM_Base_MspInit+0x44>)
 8002240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <HAL_TIM_Base_MspInit+0x44>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6593      	str	r3, [r2, #88]	; 0x58
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_TIM_Base_MspInit+0x44>)
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	201c      	movs	r0, #28
 800225c:	f000 fa63 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002260:	201c      	movs	r0, #28
 8002262:	f000 fa7c 	bl	800275e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000

08002274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0a2      	sub	sp, #136	; 0x88
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	2260      	movs	r2, #96	; 0x60
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f005 f892 	bl	80073be <memset>
  if(huart->Instance==USART2)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a20      	ldr	r2, [pc, #128]	; (8002320 <HAL_UART_MspInit+0xac>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d138      	bne.n	8002316 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fc69 	bl	8005b88 <HAL_RCCEx_PeriphCLKConfig>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022bc:	f7ff fe92 	bl	8001fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_UART_MspInit+0xb0>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_UART_MspInit+0xb0>)
 80022c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ca:	6593      	str	r3, [r2, #88]	; 0x58
 80022cc:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_UART_MspInit+0xb0>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_UART_MspInit+0xb0>)
 80022da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022dc:	4a11      	ldr	r2, [pc, #68]	; (8002324 <HAL_UART_MspInit+0xb0>)
 80022de:	f043 0301 	orr.w	r3, r3, #1
 80022e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_UART_MspInit+0xb0>)
 80022e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022f0:	230c      	movs	r3, #12
 80022f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002302:	2307      	movs	r3, #7
 8002304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800230c:	4619      	mov	r1, r3
 800230e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002312:	f000 fa8d 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002316:	bf00      	nop
 8002318:	3788      	adds	r7, #136	; 0x88
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40004400 	.word	0x40004400
 8002324:	40021000 	.word	0x40021000

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002374:	f000 f8b8 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM2_IRQHandler+0x10>)
 8002382:	f003 ffe9 	bl	8006358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000012c 	.word	0x2000012c

08002390 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <I2C1_EV_IRQHandler+0x10>)
 8002396:	f001 f83d 	bl	8003414 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000030 	.word	0x20000030

080023a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <I2C1_ER_IRQHandler+0x10>)
 80023aa:	f001 f84d 	bl	8003448 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000030 	.word	0x20000030

080023b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <SystemInit+0x20>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	4a05      	ldr	r2, [pc, #20]	; (80023d8 <SystemInit+0x20>)
 80023c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002414 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023e0:	f7ff ffea 	bl	80023b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e4:	480c      	ldr	r0, [pc, #48]	; (8002418 <LoopForever+0x6>)
  ldr r1, =_edata
 80023e6:	490d      	ldr	r1, [pc, #52]	; (800241c <LoopForever+0xa>)
  ldr r2, =_sidata
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <LoopForever+0xe>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023ec:	e002      	b.n	80023f4 <LoopCopyDataInit>

080023ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f2:	3304      	adds	r3, #4

080023f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f8:	d3f9      	bcc.n	80023ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023fc:	4c0a      	ldr	r4, [pc, #40]	; (8002428 <LoopForever+0x16>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002400:	e001      	b.n	8002406 <LoopFillZerobss>

08002402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002404:	3204      	adds	r2, #4

08002406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002408:	d3fb      	bcc.n	8002402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800240a:	f004 ffe1 	bl	80073d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800240e:	f7fe f85b 	bl	80004c8 <main>

08002412 <LoopForever>:

LoopForever:
    b LoopForever
 8002412:	e7fe      	b.n	8002412 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002414:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800241c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002420:	08007488 	.word	0x08007488
  ldr r2, =_sbss
 8002424:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002428:	20000258 	.word	0x20000258

0800242c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800242c:	e7fe      	b.n	800242c <ADC1_IRQHandler>
	...

08002430 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_Init+0x3c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a0b      	ldr	r2, [pc, #44]	; (800246c <HAL_Init+0x3c>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002446:	2003      	movs	r0, #3
 8002448:	f000 f962 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800244c:	2000      	movs	r0, #0
 800244e:	f000 f80f 	bl	8002470 <HAL_InitTick>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	71fb      	strb	r3, [r7, #7]
 800245c:	e001      	b.n	8002462 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800245e:	f7ff fdc7 	bl	8001ff0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002462:	79fb      	ldrb	r3, [r7, #7]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40022000 	.word	0x40022000

08002470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <HAL_InitTick+0x6c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d023      	beq.n	80024cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002484:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <HAL_InitTick+0x70>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_InitTick+0x6c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f96d 	bl	800277a <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	d809      	bhi.n	80024c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ac:	2200      	movs	r2, #0
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b4:	f000 f937 	bl	8002726 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <HAL_InitTick+0x74>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e007      	b.n	80024d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
 80024c4:	e004      	b.n	80024d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e001      	b.n	80024d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000008 	.word	0x20000008
 80024e0:	20000000 	.word	0x20000000
 80024e4:	20000004 	.word	0x20000004

080024e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_IncTick+0x20>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_IncTick+0x24>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	; (800250c <HAL_IncTick+0x24>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008
 800250c:	20000254 	.word	0x20000254

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_GetTick+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000254 	.word	0x20000254

08002528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff ffee 	bl	8002510 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002540:	d005      	beq.n	800254e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_Delay+0x44>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800254e:	bf00      	nop
 8002550:	f7ff ffde 	bl	8002510 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d8f7      	bhi.n	8002550 <HAL_Delay+0x28>
  {
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000008 	.word	0x20000008

08002570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002598:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800259c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <__NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	db0b      	blt.n	80025fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4907      	ldr	r1, [pc, #28]	; (800260c <__NVIC_EnableIRQ+0x38>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	; (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	; 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026dc:	d301      	bcc.n	80026e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026de:	2301      	movs	r3, #1
 80026e0:	e00f      	b.n	8002702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <SysTick_Config+0x40>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ea:	210f      	movs	r1, #15
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026f0:	f7ff ff8e 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <SysTick_Config+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <SysTick_Config+0x40>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000e010 	.word	0xe000e010

08002710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff29 	bl	8002570 <__NVIC_SetPriorityGrouping>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002738:	f7ff ff3e 	bl	80025b8 <__NVIC_GetPriorityGrouping>
 800273c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff ff8e 	bl	8002664 <NVIC_EncodePriority>
 8002748:	4602      	mov	r2, r0
 800274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff5d 	bl	8002610 <__NVIC_SetPriority>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff31 	bl	80025d4 <__NVIC_EnableIRQ>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ffa2 	bl	80026cc <SysTick_Config>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d005      	beq.n	80027b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2204      	movs	r2, #4
 80027ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e029      	b.n	800280a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 020e 	bic.w	r2, r2, #14
 80027c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f003 021c 	and.w	r2, r3, #28
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2101      	movs	r1, #1
 80027e4:	fa01 f202 	lsl.w	r2, r1, r2
 80027e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	4798      	blx	r3
    }
  }
  return status;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002822:	b2db      	uxtb	r3, r3
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b480      	push	{r7}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283e:	e154      	b.n	8002aea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 8146 	beq.w	8002ae4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d005      	beq.n	8002870 <HAL_GPIO_Init+0x40>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d130      	bne.n	80028d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028a6:	2201      	movs	r2, #1
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	f003 0201 	and.w	r2, r3, #1
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d017      	beq.n	800290e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d123      	bne.n	8002962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	08da      	lsrs	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	6939      	ldr	r1, [r7, #16]
 800295e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0203 	and.w	r2, r3, #3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 80a0 	beq.w	8002ae4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a4:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <HAL_GPIO_Init+0x2d8>)
 80029a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a8:	4a57      	ldr	r2, [pc, #348]	; (8002b08 <HAL_GPIO_Init+0x2d8>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6613      	str	r3, [r2, #96]	; 0x60
 80029b0:	4b55      	ldr	r3, [pc, #340]	; (8002b08 <HAL_GPIO_Init+0x2d8>)
 80029b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029bc:	4a53      	ldr	r2, [pc, #332]	; (8002b0c <HAL_GPIO_Init+0x2dc>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029e6:	d019      	beq.n	8002a1c <HAL_GPIO_Init+0x1ec>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_GPIO_Init+0x1e8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a48      	ldr	r2, [pc, #288]	; (8002b14 <HAL_GPIO_Init+0x2e4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d00d      	beq.n	8002a14 <HAL_GPIO_Init+0x1e4>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a47      	ldr	r2, [pc, #284]	; (8002b18 <HAL_GPIO_Init+0x2e8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d007      	beq.n	8002a10 <HAL_GPIO_Init+0x1e0>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a46      	ldr	r2, [pc, #280]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d101      	bne.n	8002a0c <HAL_GPIO_Init+0x1dc>
 8002a08:	2304      	movs	r3, #4
 8002a0a:	e008      	b.n	8002a1e <HAL_GPIO_Init+0x1ee>
 8002a0c:	2307      	movs	r3, #7
 8002a0e:	e006      	b.n	8002a1e <HAL_GPIO_Init+0x1ee>
 8002a10:	2303      	movs	r3, #3
 8002a12:	e004      	b.n	8002a1e <HAL_GPIO_Init+0x1ee>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e002      	b.n	8002a1e <HAL_GPIO_Init+0x1ee>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_GPIO_Init+0x1ee>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	f002 0203 	and.w	r2, r2, #3
 8002a24:	0092      	lsls	r2, r2, #2
 8002a26:	4093      	lsls	r3, r2
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a2e:	4937      	ldr	r1, [pc, #220]	; (8002b0c <HAL_GPIO_Init+0x2dc>)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a3c:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_GPIO_Init+0x2f0>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a60:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <HAL_GPIO_Init+0x2f0>)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_GPIO_Init+0x2f0>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a8a:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <HAL_GPIO_Init+0x2f0>)
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a90:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <HAL_GPIO_Init+0x2f0>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab4:	4a1a      	ldr	r2, [pc, #104]	; (8002b20 <HAL_GPIO_Init+0x2f0>)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002aba:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_GPIO_Init+0x2f0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <HAL_GPIO_Init+0x2f0>)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	fa22 f303 	lsr.w	r3, r2, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f47f aea3 	bne.w	8002840 <HAL_GPIO_Init+0x10>
  }
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	48000400 	.word	0x48000400
 8002b14:	48000800 	.word	0x48000800
 8002b18:	48000c00 	.word	0x48000c00
 8002b1c:	48001000 	.word	0x48001000
 8002b20:	40010400 	.word	0x40010400

08002b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
 8002b40:	e001      	b.n	8002b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	807b      	strh	r3, [r7, #2]
 8002b60:	4613      	mov	r3, r2
 8002b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	787b      	ldrb	r3, [r7, #1]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b72:	887a      	ldrh	r2, [r7, #2]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b96:	887a      	ldrh	r2, [r7, #2]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	43d9      	mvns	r1, r3
 8002ba2:	887b      	ldrh	r3, [r7, #2]
 8002ba4:	400b      	ands	r3, r1
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	619a      	str	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e08d      	b.n	8002ce6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fa2a 	bl	8002038 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	; 0x24
 8002be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d107      	bne.n	8002c32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	e006      	b.n	8002c40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d108      	bne.n	8002c5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	e007      	b.n	8002c6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af02      	add	r7, sp, #8
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	817b      	strh	r3, [r7, #10]
 8002d00:	4613      	mov	r3, r2
 8002d02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b20      	cmp	r3, #32
 8002d0e:	f040 80fd 	bne.w	8002f0c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_I2C_Master_Transmit+0x30>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e0f6      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x21e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d28:	f7ff fbf2 	bl	8002510 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2319      	movs	r3, #25
 8002d34:	2201      	movs	r2, #1
 8002d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f001 fca1 	bl	8004682 <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0e1      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2221      	movs	r2, #33	; 0x21
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2210      	movs	r2, #16
 8002d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	893a      	ldrh	r2, [r7, #8]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	2bff      	cmp	r3, #255	; 0xff
 8002d7a:	d906      	bls.n	8002d8a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	22ff      	movs	r2, #255	; 0xff
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e007      	b.n	8002d9a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d98:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d024      	beq.n	8002dec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	781a      	ldrb	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	8979      	ldrh	r1, [r7, #10]
 8002dde:	4b4e      	ldr	r3, [pc, #312]	; (8002f18 <HAL_I2C_Master_Transmit+0x228>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f001 fe87 	bl	8004af8 <I2C_TransferConfig>
 8002dea:	e066      	b.n	8002eba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	4b48      	ldr	r3, [pc, #288]	; (8002f18 <HAL_I2C_Master_Transmit+0x228>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f001 fe7c 	bl	8004af8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e00:	e05b      	b.n	8002eba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	6a39      	ldr	r1, [r7, #32]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f001 fc8a 	bl	8004720 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07b      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d034      	beq.n	8002eba <HAL_I2C_Master_Transmit+0x1ca>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d130      	bne.n	8002eba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f001 fc0d 	bl	8004682 <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e04d      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2bff      	cmp	r3, #255	; 0xff
 8002e7a:	d90e      	bls.n	8002e9a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	22ff      	movs	r2, #255	; 0xff
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	8979      	ldrh	r1, [r7, #10]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f001 fe30 	bl	8004af8 <I2C_TransferConfig>
 8002e98:	e00f      	b.n	8002eba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	8979      	ldrh	r1, [r7, #10]
 8002eac:	2300      	movs	r3, #0
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f001 fe1f 	bl	8004af8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d19e      	bne.n	8002e02 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	6a39      	ldr	r1, [r7, #32]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f001 fc70 	bl	80047ae <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e01a      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2220      	movs	r2, #32
 8002ede:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_I2C_Master_Transmit+0x22c>)
 8002eec:	400b      	ands	r3, r1
 8002eee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	80002000 	.word	0x80002000
 8002f1c:	fe00e800 	.word	0xfe00e800

08002f20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	817b      	strh	r3, [r7, #10]
 8002f30:	4613      	mov	r3, r2
 8002f32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	f040 80db 	bne.w	80030f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2C_Master_Receive+0x30>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0d4      	b.n	80030fa <HAL_I2C_Master_Receive+0x1da>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f58:	f7ff fada 	bl	8002510 <HAL_GetTick>
 8002f5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	2319      	movs	r3, #25
 8002f64:	2201      	movs	r2, #1
 8002f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f001 fb89 	bl	8004682 <I2C_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e0bf      	b.n	80030fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2222      	movs	r2, #34	; 0x22
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2210      	movs	r2, #16
 8002f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	893a      	ldrh	r2, [r7, #8]
 8002f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	2bff      	cmp	r3, #255	; 0xff
 8002faa:	d90e      	bls.n	8002fca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	22ff      	movs	r2, #255	; 0xff
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	8979      	ldrh	r1, [r7, #10]
 8002fba:	4b52      	ldr	r3, [pc, #328]	; (8003104 <HAL_I2C_Master_Receive+0x1e4>)
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f001 fd98 	bl	8004af8 <I2C_TransferConfig>
 8002fc8:	e06d      	b.n	80030a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	8979      	ldrh	r1, [r7, #10]
 8002fdc:	4b49      	ldr	r3, [pc, #292]	; (8003104 <HAL_I2C_Master_Receive+0x1e4>)
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f001 fd87 	bl	8004af8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002fea:	e05c      	b.n	80030a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	6a39      	ldr	r1, [r7, #32]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f001 fc1f 	bl	8004834 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e07c      	b.n	80030fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d034      	beq.n	80030a6 <HAL_I2C_Master_Receive+0x186>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d130      	bne.n	80030a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	2200      	movs	r2, #0
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f001 fb17 	bl	8004682 <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e04d      	b.n	80030fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2bff      	cmp	r3, #255	; 0xff
 8003066:	d90e      	bls.n	8003086 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	22ff      	movs	r2, #255	; 0xff
 800306c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	b2da      	uxtb	r2, r3
 8003074:	8979      	ldrh	r1, [r7, #10]
 8003076:	2300      	movs	r3, #0
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f001 fd3a 	bl	8004af8 <I2C_TransferConfig>
 8003084:	e00f      	b.n	80030a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	b2da      	uxtb	r2, r3
 8003096:	8979      	ldrh	r1, [r7, #10]
 8003098:	2300      	movs	r3, #0
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f001 fd29 	bl	8004af8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d19d      	bne.n	8002fec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	6a39      	ldr	r1, [r7, #32]
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f001 fb7a 	bl	80047ae <I2C_WaitOnSTOPFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e01a      	b.n	80030fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2220      	movs	r2, #32
 80030ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <HAL_I2C_Master_Receive+0x1e8>)
 80030d8:	400b      	ands	r3, r1
 80030da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e000      	b.n	80030fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	80002400 	.word	0x80002400
 8003108:	fe00e800 	.word	0xfe00e800

0800310c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4613      	mov	r3, r2
 800311a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003128:	2b28      	cmp	r3, #40	; 0x28
 800312a:	f040 8098 	bne.w	800325e <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d105      	bne.n	8003146 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003140:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e08c      	b.n	8003260 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003146:	f248 0101 	movw	r1, #32769	; 0x8001
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f001 fd8a 	bl	8004c64 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800315a:	2302      	movs	r3, #2
 800315c:	e080      	b.n	8003260 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b2a      	cmp	r3, #42	; 0x2a
 8003170:	d12a      	bne.n	80031c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003172:	2102      	movs	r1, #2
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f001 fd75 	bl	8004c64 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003188:	d11e      	bne.n	80031c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003198:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	4a30      	ldr	r2, [pc, #192]	; (8003268 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80031a8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff faef 	bl	8002792 <HAL_DMA_Abort_IT>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031c4:	4610      	mov	r0, r2
 80031c6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2229      	movs	r2, #41	; 0x29
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ec:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	88fa      	ldrh	r2, [r7, #6]
 80031f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4a17      	ldr	r2, [pc, #92]	; (800326c <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 800320e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b08      	cmp	r3, #8
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d106      	bne.n	8003248 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2208      	movs	r2, #8
 8003246:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003250:	f248 0101 	movw	r1, #32769	; 0x8001
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f001 fc81 	bl	8004b5c <I2C_Enable_IRQ>

    return HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	e000      	b.n	8003260 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	08004647 	.word	0x08004647
 800326c:	0800357b 	.word	0x0800357b

08003270 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800328c:	2b28      	cmp	r3, #40	; 0x28
 800328e:	f040 8098 	bne.w	80033c2 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e08c      	b.n	80033c4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032aa:	f248 0102 	movw	r1, #32770	; 0x8002
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f001 fcd8 	bl	8004c64 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80032be:	2302      	movs	r3, #2
 80032c0:	e080      	b.n	80033c4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b29      	cmp	r3, #41	; 0x29
 80032d4:	d12a      	bne.n	800332c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032d6:	2101      	movs	r1, #1
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f001 fcc3 	bl	8004c64 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032ec:	d11e      	bne.n	800332c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032fc:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	2b00      	cmp	r3, #0
 8003304:	d012      	beq.n	800332c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	4a30      	ldr	r2, [pc, #192]	; (80033cc <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 800330c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fa3d 	bl	8002792 <HAL_DMA_Abort_IT>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003328:	4610      	mov	r0, r2
 800332a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	222a      	movs	r2, #42	; 0x2a
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003350:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a17      	ldr	r2, [pc, #92]	; (80033d0 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8003372:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b08      	cmp	r3, #8
 8003380:	bf0c      	ite	eq
 8003382:	2301      	moveq	r3, #1
 8003384:	2300      	movne	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 800339e:	7dfb      	ldrb	r3, [r7, #23]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2208      	movs	r2, #8
 80033aa:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80033b4:	f248 0102 	movw	r1, #32770	; 0x8002
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f001 fbcf 	bl	8004b5c <I2C_Enable_IRQ>

    return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e000      	b.n	80033c4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
  }
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	08004647 	.word	0x08004647
 80033d0:	0800357b 	.word	0x0800357b

080033d4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d10d      	bne.n	8003404 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2228      	movs	r2, #40	; 0x28
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a07      	ldr	r2, [pc, #28]	; (8003410 <HAL_I2C_EnableListen_IT+0x3c>)
 80033f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80033f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f001 fbae 	bl	8004b5c <I2C_Enable_IRQ>

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	0800357b 	.word	0x0800357b

08003414 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	68f9      	ldr	r1, [r7, #12]
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
  }
}
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00f      	beq.n	800348a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003488:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00f      	beq.n	80034b4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f043 0208 	orr.w	r2, r3, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00f      	beq.n	80034de <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	f043 0202 	orr.w	r2, r3, #2
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034dc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 030b 	and.w	r3, r3, #11
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80034ee:	68f9      	ldr	r1, [r7, #12]
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 ff6d 	bl	80043d0 <I2C_ITError>
  }
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800356e:	4618      	mov	r0, r3
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr

0800357a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	60f8      	str	r0, [r7, #12]
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <I2C_Slave_ISR_IT+0x24>
 800359a:	2302      	movs	r3, #2
 800359c:	e0e1      	b.n	8003762 <I2C_Slave_ISR_IT+0x1e8>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d008      	beq.n	80035c2 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80035ba:	6939      	ldr	r1, [r7, #16]
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fda1 	bl	8004104 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d04b      	beq.n	8003664 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d046      	beq.n	8003664 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d128      	bne.n	8003632 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b28      	cmp	r3, #40	; 0x28
 80035ea:	d108      	bne.n	80035fe <I2C_Slave_ISR_IT+0x84>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035f2:	d104      	bne.n	80035fe <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80035f4:	6939      	ldr	r1, [r7, #16]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	f000 fe96 	bl	8004328 <I2C_ITListenCplt>
 80035fc:	e031      	b.n	8003662 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b29      	cmp	r3, #41	; 0x29
 8003608:	d10e      	bne.n	8003628 <I2C_Slave_ISR_IT+0xae>
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003610:	d00a      	beq.n	8003628 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2210      	movs	r2, #16
 8003618:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 ffef 	bl	80045fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 fc4a 	bl	8003eba <I2C_ITSlaveSeqCplt>
 8003626:	e01c      	b.n	8003662 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2210      	movs	r2, #16
 800362e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003630:	e08f      	b.n	8003752 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2210      	movs	r2, #16
 8003638:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	f043 0204 	orr.w	r2, r3, #4
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <I2C_Slave_ISR_IT+0xda>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003652:	d17e      	bne.n	8003752 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	4619      	mov	r1, r3
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 feb8 	bl	80043d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003660:	e077      	b.n	8003752 <I2C_Slave_ISR_IT+0x1d8>
 8003662:	e076      	b.n	8003752 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d02f      	beq.n	80036ce <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003674:	2b00      	cmp	r3, #0
 8003676:	d02a      	beq.n	80036ce <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d14b      	bne.n	8003756 <I2C_Slave_ISR_IT+0x1dc>
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036c4:	d047      	beq.n	8003756 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fbf7 	bl	8003eba <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80036cc:	e043      	b.n	8003756 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d009      	beq.n	80036ec <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d004      	beq.n	80036ec <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80036e2:	6939      	ldr	r1, [r7, #16]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 fb27 	bl	8003d38 <I2C_ITAddrCplt>
 80036ea:	e035      	b.n	8003758 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d030      	beq.n	8003758 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d02b      	beq.n	8003758 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003704:	b29b      	uxth	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d018      	beq.n	800373c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
 800373a:	e00d      	b.n	8003758 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003742:	d002      	beq.n	800374a <I2C_Slave_ISR_IT+0x1d0>
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fbb5 	bl	8003eba <I2C_ITSlaveSeqCplt>
 8003750:	e002      	b.n	8003758 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003752:	bf00      	nop
 8003754:	e000      	b.n	8003758 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003756:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b088      	sub	sp, #32
 800376e:	af02      	add	r7, sp, #8
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <I2C_Master_ISR_DMA+0x1a>
 8003780:	2302      	movs	r3, #2
 8003782:	e0d9      	b.n	8003938 <I2C_Master_ISR_DMA+0x1ce>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800379c:	2b00      	cmp	r3, #0
 800379e:	d011      	beq.n	80037c4 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2210      	movs	r2, #16
 80037a6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ac:	f043 0204 	orr.w	r2, r3, #4
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80037b4:	2120      	movs	r1, #32
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f001 f9d0 	bl	8004b5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 ff1e 	bl	80045fe <I2C_Flush_TXDR>
 80037c2:	e0b4      	b.n	800392e <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d071      	beq.n	80038b2 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d06c      	beq.n	80038b2 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04e      	beq.n	8003890 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fe:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2bff      	cmp	r3, #255	; 0xff
 8003808:	d906      	bls.n	8003818 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	22ff      	movs	r2, #255	; 0xff
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e010      	b.n	800383a <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800382a:	d003      	beq.n	8003834 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	e002      	b.n	800383a <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003834:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003838:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	b2da      	uxtb	r2, r3
 8003840:	8a79      	ldrh	r1, [r7, #18]
 8003842:	2300      	movs	r3, #0
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f001 f955 	bl	8004af8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b22      	cmp	r3, #34	; 0x22
 800386a:	d108      	bne.n	800387e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800387a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800387c:	e057      	b.n	800392e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800388c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800388e:	e04e      	b.n	800392e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800389e:	d003      	beq.n	80038a8 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 facd 	bl	8003e40 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80038a6:	e042      	b.n	800392e <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fd90 	bl	80043d0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80038b0:	e03d      	b.n	800392e <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d028      	beq.n	800390e <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d023      	beq.n	800390e <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d119      	bne.n	8003904 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038de:	d025      	beq.n	800392c <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038e8:	d108      	bne.n	80038fc <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038f8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80038fa:	e017      	b.n	800392c <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fa9f 	bl	8003e40 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003902:	e013      	b.n	800392c <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fd62 	bl	80043d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800390c:	e00e      	b.n	800392c <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800391e:	2b00      	cmp	r3, #0
 8003920:	d005      	beq.n	800392e <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fb25 	bl	8003f74 <I2C_ITMasterCplt>
 800392a:	e000      	b.n	800392e <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 800392c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800394c:	4b8d      	ldr	r3, [pc, #564]	; (8003b84 <I2C_Mem_ISR_DMA+0x244>)
 800394e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <I2C_Mem_ISR_DMA+0x1e>
 800395a:	2302      	movs	r3, #2
 800395c:	e10e      	b.n	8003b7c <I2C_Mem_ISR_DMA+0x23c>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	d016      	beq.n	800399e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003976:	2b00      	cmp	r3, #0
 8003978:	d011      	beq.n	800399e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2210      	movs	r2, #16
 8003980:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800398e:	2120      	movs	r1, #32
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f001 f8e3 	bl	8004b5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fe31 	bl	80045fe <I2C_Flush_TXDR>
 800399c:	e0e9      	b.n	8003b72 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00e      	beq.n	80039c6 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039c2:	651a      	str	r2, [r3, #80]	; 0x50
 80039c4:	e0d5      	b.n	8003b72 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05f      	beq.n	8003a90 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d05a      	beq.n	8003a90 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80039da:	2101      	movs	r1, #1
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f001 f941 	bl	8004c64 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80039e2:	2110      	movs	r1, #16
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f001 f8b9 	bl	8004b5c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d048      	beq.n	8003a86 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2bff      	cmp	r3, #255	; 0xff
 80039fc:	d910      	bls.n	8003a20 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	22ff      	movs	r2, #255	; 0xff
 8003a02:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a08:	b299      	uxth	r1, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f001 f86d 	bl	8004af8 <I2C_TransferConfig>
 8003a1e:	e011      	b.n	8003a44 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	b299      	uxth	r1, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	2300      	movs	r3, #0
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f001 f85a 	bl	8004af8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b22      	cmp	r3, #34	; 0x22
 8003a60:	d108      	bne.n	8003a74 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a70:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a72:	e07e      	b.n	8003b72 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a82:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003a84:	e075      	b.n	8003b72 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003a86:	2140      	movs	r1, #64	; 0x40
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fca1 	bl	80043d0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003a8e:	e070      	b.n	8003b72 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d05d      	beq.n	8003b56 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d058      	beq.n	8003b56 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f001 f8dc 	bl	8004c64 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003aac:	2110      	movs	r1, #16
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f001 f854 	bl	8004b5c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b22      	cmp	r3, #34	; 0x22
 8003abe:	d101      	bne.n	8003ac4 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8003ac0:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <I2C_Mem_ISR_DMA+0x248>)
 8003ac2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2bff      	cmp	r3, #255	; 0xff
 8003acc:	d910      	bls.n	8003af0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	22ff      	movs	r2, #255	; 0xff
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	b299      	uxth	r1, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f001 f805 	bl	8004af8 <I2C_TransferConfig>
 8003aee:	e011      	b.n	8003b14 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	b299      	uxth	r1, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fff2 	bl	8004af8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b22      	cmp	r3, #34	; 0x22
 8003b30:	d108      	bne.n	8003b44 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b40:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b42:	e016      	b.n	8003b72 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b52:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b54:	e00d      	b.n	8003b72 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d008      	beq.n	8003b72 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fa01 	bl	8003f74 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	80002000 	.word	0x80002000
 8003b88:	80002400 	.word	0x80002400

08003b8c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <I2C_Slave_ISR_DMA+0x24>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e0bf      	b.n	8003d30 <I2C_Slave_ISR_DMA+0x1a4>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 0320 	and.w	r3, r3, #32
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fa98 	bl	8004104 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8095 	beq.w	8003d0a <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 808f 	beq.w	8003d0a <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d07d      	beq.n	8003cfc <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d007      	beq.n	8003c44 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8003c40:	2301      	movs	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d128      	bne.n	8003c9c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b28      	cmp	r3, #40	; 0x28
 8003c54:	d108      	bne.n	8003c68 <I2C_Slave_ISR_DMA+0xdc>
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c5c:	d104      	bne.n	8003c68 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fb61 	bl	8004328 <I2C_ITListenCplt>
 8003c66:	e048      	b.n	8003cfa <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b29      	cmp	r3, #41	; 0x29
 8003c72:	d10e      	bne.n	8003c92 <I2C_Slave_ISR_DMA+0x106>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c7a:	d00a      	beq.n	8003c92 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2210      	movs	r2, #16
 8003c82:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 fcba 	bl	80045fe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f915 	bl	8003eba <I2C_ITSlaveSeqCplt>
 8003c90:	e033      	b.n	8003cfa <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2210      	movs	r2, #16
 8003c98:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003c9a:	e034      	b.n	8003d06 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	f043 0204 	orr.w	r2, r3, #4
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb6:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <I2C_Slave_ISR_DMA+0x13a>
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc4:	d11f      	bne.n	8003d06 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	2b21      	cmp	r3, #33	; 0x21
 8003cca:	d002      	beq.n	8003cd2 <I2C_Slave_ISR_DMA+0x146>
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	2b29      	cmp	r3, #41	; 0x29
 8003cd0:	d103      	bne.n	8003cda <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2221      	movs	r2, #33	; 0x21
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8003cd8:	e008      	b.n	8003cec <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
 8003cdc:	2b22      	cmp	r3, #34	; 0x22
 8003cde:	d002      	beq.n	8003ce6 <I2C_Slave_ISR_DMA+0x15a>
 8003ce0:	7dfb      	ldrb	r3, [r7, #23]
 8003ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ce4:	d102      	bne.n	8003cec <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2222      	movs	r2, #34	; 0x22
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fb6c 	bl	80043d0 <I2C_ITError>
      if (treatdmanack == 1U)
 8003cf8:	e005      	b.n	8003d06 <I2C_Slave_ISR_DMA+0x17a>
 8003cfa:	e004      	b.n	8003d06 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2210      	movs	r2, #16
 8003d02:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d04:	e00f      	b.n	8003d26 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8003d06:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d08:	e00d      	b.n	8003d26 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f809 	bl	8003d38 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d4e:	2b28      	cmp	r3, #40	; 0x28
 8003d50:	d16a      	bne.n	8003e28 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d70:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d7e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d8c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d138      	bne.n	8003e08 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003d96:	897b      	ldrh	r3, [r7, #10]
 8003d98:	09db      	lsrs	r3, r3, #7
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	89bb      	ldrh	r3, [r7, #12]
 8003d9e:	4053      	eors	r3, r2
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f003 0306 	and.w	r3, r3, #6
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d11c      	bne.n	8003de4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003daa:	897b      	ldrh	r3, [r7, #10]
 8003dac:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d13b      	bne.n	8003e38 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2208      	movs	r2, #8
 8003dcc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dd6:	89ba      	ldrh	r2, [r7, #12]
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f7fe f889 	bl	8001ef4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003de2:	e029      	b.n	8003e38 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003de4:	893b      	ldrh	r3, [r7, #8]
 8003de6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 ff39 	bl	8004c64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dfa:	89ba      	ldrh	r2, [r7, #12]
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fe f877 	bl	8001ef4 <HAL_I2C_AddrCallback>
}
 8003e06:	e017      	b.n	8003e38 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 ff29 	bl	8004c64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e1a:	89ba      	ldrh	r2, [r7, #12]
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fe f867 	bl	8001ef4 <HAL_I2C_AddrCallback>
}
 8003e26:	e007      	b.n	8003e38 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b21      	cmp	r3, #33	; 0x21
 8003e5a:	d115      	bne.n	8003e88 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2211      	movs	r2, #17
 8003e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e70:	2101      	movs	r1, #1
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fef6 	bl	8004c64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fb3c 	bl	80034fe <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e86:	e014      	b.n	8003eb2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2212      	movs	r2, #18
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003e9c:	2102      	movs	r1, #2
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fee0 	bl	8004c64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f7ff fb30 	bl	8003512 <HAL_I2C_MasterRxCpltCallback>
}
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d008      	beq.n	8003eee <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e00c      	b.n	8003f08 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d007      	beq.n	8003f08 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f06:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b29      	cmp	r3, #41	; 0x29
 8003f12:	d112      	bne.n	8003f3a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2228      	movs	r2, #40	; 0x28
 8003f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2221      	movs	r2, #33	; 0x21
 8003f20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f22:	2101      	movs	r1, #1
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fe9d 	bl	8004c64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fd ffa4 	bl	8001e80 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f38:	e017      	b.n	8003f6a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b2a      	cmp	r3, #42	; 0x2a
 8003f44:	d111      	bne.n	8003f6a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2228      	movs	r2, #40	; 0x28
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2222      	movs	r2, #34	; 0x22
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f54:	2102      	movs	r1, #2
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fe84 	bl	8004c64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7fd ff9b 	bl	8001ea0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2220      	movs	r2, #32
 8003f88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b21      	cmp	r3, #33	; 0x21
 8003f94:	d107      	bne.n	8003fa6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f96:	2101      	movs	r1, #1
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fe63 	bl	8004c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2211      	movs	r2, #17
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa4:	e00c      	b.n	8003fc0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b22      	cmp	r3, #34	; 0x22
 8003fb0:	d106      	bne.n	8003fc0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003fb2:	2102      	movs	r1, #2
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 fe55 	bl	8004c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2212      	movs	r2, #18
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <I2C_ITMasterCplt+0x188>)
 8003fcc:	400b      	ands	r3, r1
 8003fce:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a49      	ldr	r2, [pc, #292]	; (8004100 <I2C_ITMasterCplt+0x18c>)
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2210      	movs	r2, #16
 8003fec:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f043 0204 	orr.w	r2, r3, #4
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b60      	cmp	r3, #96	; 0x60
 8004004:	d10a      	bne.n	800401c <I2C_ITMasterCplt+0xa8>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	b2db      	uxtb	r3, r3
 8004018:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800401a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 faee 	bl	80045fe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b60      	cmp	r3, #96	; 0x60
 8004032:	d002      	beq.n	800403a <I2C_ITMasterCplt+0xc6>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d006      	beq.n	8004048 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f9c5 	bl	80043d0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004046:	e054      	b.n	80040f2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b21      	cmp	r3, #33	; 0x21
 8004052:	d124      	bne.n	800409e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b40      	cmp	r3, #64	; 0x40
 800406c:	d10b      	bne.n	8004086 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fa51 	bl	8003526 <HAL_I2C_MemTxCpltCallback>
}
 8004084:	e035      	b.n	80040f2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff fa31 	bl	80034fe <HAL_I2C_MasterTxCpltCallback>
}
 800409c:	e029      	b.n	80040f2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b22      	cmp	r3, #34	; 0x22
 80040a8:	d123      	bne.n	80040f2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	d10b      	bne.n	80040dc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7ff fa30 	bl	800353a <HAL_I2C_MemRxCpltCallback>
}
 80040da:	e00a      	b.n	80040f2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff fa10 	bl	8003512 <HAL_I2C_MasterRxCpltCallback>
}
 80040f2:	bf00      	nop
 80040f4:	3718      	adds	r7, #24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	fe00e800 	.word	0xfe00e800
 8004100:	ffff0000 	.word	0xffff0000

08004104 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004120:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2220      	movs	r2, #32
 8004128:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b21      	cmp	r3, #33	; 0x21
 800412e:	d002      	beq.n	8004136 <I2C_ITSlaveCplt+0x32>
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b29      	cmp	r3, #41	; 0x29
 8004134:	d108      	bne.n	8004148 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004136:	f248 0101 	movw	r1, #32769	; 0x8001
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fd92 	bl	8004c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2221      	movs	r2, #33	; 0x21
 8004144:	631a      	str	r2, [r3, #48]	; 0x30
 8004146:	e019      	b.n	800417c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b22      	cmp	r3, #34	; 0x22
 800414c:	d002      	beq.n	8004154 <I2C_ITSlaveCplt+0x50>
 800414e:	7bfb      	ldrb	r3, [r7, #15]
 8004150:	2b2a      	cmp	r3, #42	; 0x2a
 8004152:	d108      	bne.n	8004166 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004154:	f248 0102 	movw	r1, #32770	; 0x8002
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fd83 	bl	8004c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2222      	movs	r2, #34	; 0x22
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
 8004164:	e00a      	b.n	800417c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b28      	cmp	r3, #40	; 0x28
 800416a:	d107      	bne.n	800417c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800416c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fd77 	bl	8004c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b62      	ldr	r3, [pc, #392]	; (8004320 <I2C_ITSlaveCplt+0x21c>)
 8004198:	400b      	ands	r3, r1
 800419a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa2e 	bl	80045fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01f      	beq.n	8004204 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d2:	e017      	b.n	8004204 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d012      	beq.n	8004204 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b29a      	uxth	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d020      	beq.n	8004250 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f023 0304 	bic.w	r3, r3, #4
 8004214:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00c      	beq.n	8004250 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	f043 0204 	orr.w	r2, r3, #4
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8a4 	bl	80043d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b28      	cmp	r3, #40	; 0x28
 8004292:	d141      	bne.n	8004318 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004294:	6979      	ldr	r1, [r7, #20]
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f846 	bl	8004328 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800429c:	e03c      	b.n	8004318 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042a6:	d014      	beq.n	80042d2 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff fe06 	bl	8003eba <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <I2C_ITSlaveCplt+0x220>)
 80042b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fe50 	bl	8001f70 <HAL_I2C_ListenCpltCallback>
}
 80042d0:	e022      	b.n	8004318 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b22      	cmp	r3, #34	; 0x22
 80042dc:	d10e      	bne.n	80042fc <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7fd fdd3 	bl	8001ea0 <HAL_I2C_SlaveRxCpltCallback>
}
 80042fa:	e00d      	b.n	8004318 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fd fdb4 	bl	8001e80 <HAL_I2C_SlaveTxCpltCallback>
}
 8004318:	bf00      	nop
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	fe00e800 	.word	0xfe00e800
 8004324:	ffff0000 	.word	0xffff0000

08004328 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a25      	ldr	r2, [pc, #148]	; (80043cc <I2C_ITListenCplt+0xa4>)
 8004336:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d022      	beq.n	80043a4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	2b00      	cmp	r3, #0
 800437c:	d012      	beq.n	80043a4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	3b01      	subs	r3, #1
 8004384:	b29a      	uxth	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	f043 0204 	orr.w	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80043a4:	f248 0103 	movw	r1, #32771	; 0x8003
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 fc5b 	bl	8004c64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2210      	movs	r2, #16
 80043b4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fd fdd6 	bl	8001f70 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	ffff0000 	.word	0xffff0000

080043d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a6d      	ldr	r2, [pc, #436]	; (80045a4 <I2C_ITError+0x1d4>)
 80043ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b28      	cmp	r3, #40	; 0x28
 8004406:	d005      	beq.n	8004414 <I2C_ITError+0x44>
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b29      	cmp	r3, #41	; 0x29
 800440c:	d002      	beq.n	8004414 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b2a      	cmp	r3, #42	; 0x2a
 8004412:	d10b      	bne.n	800442c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004414:	2103      	movs	r1, #3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fc24 	bl	8004c64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2228      	movs	r2, #40	; 0x28
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a60      	ldr	r2, [pc, #384]	; (80045a8 <I2C_ITError+0x1d8>)
 8004428:	635a      	str	r2, [r3, #52]	; 0x34
 800442a:	e030      	b.n	800448e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800442c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fc17 	bl	8004c64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f8e1 	bl	80045fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b60      	cmp	r3, #96	; 0x60
 8004446:	d01f      	beq.n	8004488 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b20      	cmp	r3, #32
 800445c:	d114      	bne.n	8004488 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b10      	cmp	r3, #16
 800446a:	d109      	bne.n	8004480 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2210      	movs	r2, #16
 8004472:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	f043 0204 	orr.w	r2, r3, #4
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2220      	movs	r2, #32
 8004486:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d039      	beq.n	8004510 <I2C_ITError+0x140>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b11      	cmp	r3, #17
 80044a0:	d002      	beq.n	80044a8 <I2C_ITError+0xd8>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b21      	cmp	r3, #33	; 0x21
 80044a6:	d133      	bne.n	8004510 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b6:	d107      	bne.n	80044c8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80044c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe f9a1 	bl	8002814 <HAL_DMA_GetState>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d017      	beq.n	8004508 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	4a33      	ldr	r2, [pc, #204]	; (80045ac <I2C_ITError+0x1dc>)
 80044de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7fe f950 	bl	8002792 <HAL_DMA_Abort_IT>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d04d      	beq.n	8004594 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004502:	4610      	mov	r0, r2
 8004504:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004506:	e045      	b.n	8004594 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f851 	bl	80045b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800450e:	e041      	b.n	8004594 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d039      	beq.n	800458c <I2C_ITError+0x1bc>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b12      	cmp	r3, #18
 800451c:	d002      	beq.n	8004524 <I2C_ITError+0x154>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b22      	cmp	r3, #34	; 0x22
 8004522:	d133      	bne.n	800458c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004532:	d107      	bne.n	8004544 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004542:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe f963 	bl	8002814 <HAL_DMA_GetState>
 800454e:	4603      	mov	r3, r0
 8004550:	2b01      	cmp	r3, #1
 8004552:	d017      	beq.n	8004584 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004558:	4a14      	ldr	r2, [pc, #80]	; (80045ac <I2C_ITError+0x1dc>)
 800455a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe f912 	bl	8002792 <HAL_DMA_Abort_IT>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d011      	beq.n	8004598 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800457e:	4610      	mov	r0, r2
 8004580:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004582:	e009      	b.n	8004598 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f813 	bl	80045b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800458a:	e005      	b.n	8004598 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f80f 	bl	80045b0 <I2C_TreatErrorCallback>
  }
}
 8004592:	e002      	b.n	800459a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004594:	bf00      	nop
 8004596:	e000      	b.n	800459a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004598:	bf00      	nop
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	ffff0000 	.word	0xffff0000
 80045a8:	0800357b 	.word	0x0800357b
 80045ac:	08004647 	.word	0x08004647

080045b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b60      	cmp	r3, #96	; 0x60
 80045c2:	d10e      	bne.n	80045e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fe ffb7 	bl	800354e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045e0:	e009      	b.n	80045f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fd fcc7 	bl	8001f84 <HAL_I2C_ErrorCallback>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d103      	bne.n	800461c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2200      	movs	r2, #0
 800461a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d007      	beq.n	800463a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699a      	ldr	r2, [r3, #24]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f042 0201 	orr.w	r2, r2, #1
 8004638:	619a      	str	r2, [r3, #24]
  }
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b084      	sub	sp, #16
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	2200      	movs	r2, #0
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004670:	2200      	movs	r2, #0
 8004672:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff ff9b 	bl	80045b0 <I2C_TreatErrorCallback>
}
 800467a:	bf00      	nop
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004692:	e031      	b.n	80046f8 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469a:	d02d      	beq.n	80046f8 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469c:	f7fd ff38 	bl	8002510 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d302      	bcc.n	80046b2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d122      	bne.n	80046f8 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	4013      	ands	r3, r2
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d113      	bne.n	80046f8 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e00f      	b.n	8004718 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4013      	ands	r3, r2
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	429a      	cmp	r2, r3
 8004706:	bf0c      	ite	eq
 8004708:	2301      	moveq	r3, #1
 800470a:	2300      	movne	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
 8004710:	79fb      	ldrb	r3, [r7, #7]
 8004712:	429a      	cmp	r2, r3
 8004714:	d0be      	beq.n	8004694 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800472c:	e033      	b.n	8004796 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f900 	bl	8004938 <I2C_IsErrorOccurred>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e031      	b.n	80047a6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004748:	d025      	beq.n	8004796 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fd fee1 	bl	8002510 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d11a      	bne.n	8004796 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d013      	beq.n	8004796 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e007      	b.n	80047a6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d1c4      	bne.n	800472e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047ba:	e02f      	b.n	800481c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f8b9 	bl	8004938 <I2C_IsErrorOccurred>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e02d      	b.n	800482c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d0:	f7fd fe9e 	bl	8002510 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11a      	bne.n	800481c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d013      	beq.n	800481c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e007      	b.n	800482c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b20      	cmp	r3, #32
 8004828:	d1c8      	bne.n	80047bc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004840:	e06b      	b.n	800491a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f876 	bl	8004938 <I2C_IsErrorOccurred>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e069      	b.n	800492a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b20      	cmp	r3, #32
 8004862:	d138      	bne.n	80048d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b04      	cmp	r3, #4
 8004870:	d105      	bne.n	800487e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e055      	b.n	800492a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b10      	cmp	r3, #16
 800488a:	d107      	bne.n	800489c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2210      	movs	r2, #16
 8004892:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2204      	movs	r2, #4
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
 800489a:	e002      	b.n	80048a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2220      	movs	r2, #32
 80048a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6859      	ldr	r1, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80048b6:	400b      	ands	r3, r1
 80048b8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e029      	b.n	800492a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d6:	f7fd fe1b 	bl	8002510 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d116      	bne.n	800491a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d00f      	beq.n	800491a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	f043 0220 	orr.w	r2, r3, #32
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2220      	movs	r2, #32
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e007      	b.n	800492a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b04      	cmp	r3, #4
 8004926:	d18c      	bne.n	8004842 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	fe00e800 	.word	0xfe00e800

08004938 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004952:	2300      	movs	r3, #0
 8004954:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	d068      	beq.n	8004a36 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2210      	movs	r2, #16
 800496a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800496c:	e049      	b.n	8004a02 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004974:	d045      	beq.n	8004a02 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fd fdcb 	bl	8002510 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <I2C_IsErrorOccurred+0x54>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d13a      	bne.n	8004a02 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004996:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800499e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ae:	d121      	bne.n	80049f4 <I2C_IsErrorOccurred+0xbc>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b6:	d01d      	beq.n	80049f4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	2b20      	cmp	r3, #32
 80049bc:	d01a      	beq.n	80049f4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049cc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80049ce:	f7fd fd9f 	bl	8002510 <HAL_GetTick>
 80049d2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049d4:	e00e      	b.n	80049f4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049d6:	f7fd fd9b 	bl	8002510 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b19      	cmp	r3, #25
 80049e2:	d907      	bls.n	80049f4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f043 0320 	orr.w	r3, r3, #32
 80049ea:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80049f2:	e006      	b.n	8004a02 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d1e9      	bne.n	80049d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d003      	beq.n	8004a18 <I2C_IsErrorOccurred+0xe0>
 8004a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0aa      	beq.n	800496e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d103      	bne.n	8004a28 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2220      	movs	r2, #32
 8004a26:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	f043 0304 	orr.w	r3, r3, #4
 8004a2e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00b      	beq.n	8004a82 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	f043 0308 	orr.w	r3, r3, #8
 8004a70:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	f043 0302 	orr.w	r3, r3, #2
 8004a92:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01c      	beq.n	8004ae6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff fda6 	bl	80045fe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <I2C_IsErrorOccurred+0x1bc>)
 8004abe:	400b      	ands	r3, r1
 8004ac0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ae6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3728      	adds	r7, #40	; 0x28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	fe00e800 	.word	0xfe00e800

08004af8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b087      	sub	sp, #28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	607b      	str	r3, [r7, #4]
 8004b02:	460b      	mov	r3, r1
 8004b04:	817b      	strh	r3, [r7, #10]
 8004b06:	4613      	mov	r3, r2
 8004b08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b0a:	897b      	ldrh	r3, [r7, #10]
 8004b0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b10:	7a7b      	ldrb	r3, [r7, #9]
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	0d5b      	lsrs	r3, r3, #21
 8004b32:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <I2C_TransferConfig+0x60>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	ea02 0103 	and.w	r1, r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b4a:	bf00      	nop
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	03ff63ff 	.word	0x03ff63ff

08004b5c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	4a39      	ldr	r2, [pc, #228]	; (8004c58 <I2C_Enable_IRQ+0xfc>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d032      	beq.n	8004bdc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004b7a:	4a38      	ldr	r2, [pc, #224]	; (8004c5c <I2C_Enable_IRQ+0x100>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d02d      	beq.n	8004bdc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004b84:	4a36      	ldr	r2, [pc, #216]	; (8004c60 <I2C_Enable_IRQ+0x104>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d028      	beq.n	8004bdc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	da03      	bge.n	8004b9a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b9a:	887b      	ldrh	r3, [r7, #2]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004baa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bac:	887b      	ldrh	r3, [r7, #2]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004bbc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d103      	bne.n	8004bcc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004bca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bcc:	887b      	ldrh	r3, [r7, #2]
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d133      	bne.n	8004c3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f043 0320 	orr.w	r3, r3, #32
 8004bd8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004bda:	e02e      	b.n	8004c3a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004bdc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	da03      	bge.n	8004bec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004bea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004bec:	887b      	ldrh	r3, [r7, #2]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004bfc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bfe:	887b      	ldrh	r3, [r7, #2]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d003      	beq.n	8004c10 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004c0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c10:	887b      	ldrh	r3, [r7, #2]
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d103      	bne.n	8004c1e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004c1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c1e:	887b      	ldrh	r3, [r7, #2]
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d103      	bne.n	8004c2c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c2c:	887b      	ldrh	r3, [r7, #2]
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d103      	bne.n	8004c3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c38:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6819      	ldr	r1, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	0800376b 	.word	0x0800376b
 8004c5c:	08003b8d 	.word	0x08003b8d
 8004c60:	08003941 	.word	0x08003941

08004c64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c74:	887b      	ldrh	r3, [r7, #2]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00f      	beq.n	8004c9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004c84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c92:	2b28      	cmp	r3, #40	; 0x28
 8004c94:	d003      	beq.n	8004c9e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004c9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c9e:	887b      	ldrh	r3, [r7, #2]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00f      	beq.n	8004cc8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004cae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cbc:	2b28      	cmp	r3, #40	; 0x28
 8004cbe:	d003      	beq.n	8004cc8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004cc6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	da03      	bge.n	8004cd8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004cd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004cd8:	887b      	ldrh	r3, [r7, #2]
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d103      	bne.n	8004ce6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004ce4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d103      	bne.n	8004cf4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f043 0320 	orr.w	r3, r3, #32
 8004cf2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004cf4:	887b      	ldrh	r3, [r7, #2]
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	d103      	bne.n	8004d02 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d00:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	400a      	ands	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]
}
 8004d14:	bf00      	nop
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d138      	bne.n	8004da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d101      	bne.n	8004d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d40:	2302      	movs	r3, #2
 8004d42:	e032      	b.n	8004daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	; 0x24
 8004d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e000      	b.n	8004daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004da8:	2302      	movs	r3, #2
  }
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d139      	bne.n	8004e40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e033      	b.n	8004e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2224      	movs	r2, #36	; 0x24
 8004de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f042 0201 	orr.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e000      	b.n	8004e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e54:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40007000 	.word	0x40007000

08004e6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e7a:	d130      	bne.n	8004ede <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e7c:	4b23      	ldr	r3, [pc, #140]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e88:	d038      	beq.n	8004efc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e8a:	4b20      	ldr	r3, [pc, #128]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e92:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e9a:	4b1d      	ldr	r3, [pc, #116]	; (8004f10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2232      	movs	r2, #50	; 0x32
 8004ea0:	fb02 f303 	mul.w	r3, r2, r3
 8004ea4:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	0c9b      	lsrs	r3, r3, #18
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eb0:	e002      	b.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004eb8:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec4:	d102      	bne.n	8004ecc <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f2      	bne.n	8004eb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ecc:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ed8:	d110      	bne.n	8004efc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e00f      	b.n	8004efe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eea:	d007      	beq.n	8004efc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ef4:	4a05      	ldr	r2, [pc, #20]	; (8004f0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ef6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004efa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40007000 	.word	0x40007000
 8004f10:	20000000 	.word	0x20000000
 8004f14:	431bde83 	.word	0x431bde83

08004f18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f000 bc02 	b.w	8005730 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f2c:	4b96      	ldr	r3, [pc, #600]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f36:	4b94      	ldr	r3, [pc, #592]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f000 80e4 	beq.w	8005116 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_RCC_OscConfig+0x4c>
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b0c      	cmp	r3, #12
 8004f58:	f040 808b 	bne.w	8005072 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	f040 8087 	bne.w	8005072 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f64:	4b88      	ldr	r3, [pc, #544]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_OscConfig+0x64>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e3d9      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1a      	ldr	r2, [r3, #32]
 8004f80:	4b81      	ldr	r3, [pc, #516]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <HAL_RCC_OscConfig+0x7e>
 8004f8c:	4b7e      	ldr	r3, [pc, #504]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f94:	e005      	b.n	8004fa2 <HAL_RCC_OscConfig+0x8a>
 8004f96:	4b7c      	ldr	r3, [pc, #496]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9c:	091b      	lsrs	r3, r3, #4
 8004f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d223      	bcs.n	8004fee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 fd8c 	bl	8005ac8 <RCC_SetFlashLatencyFromMSIRange>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e3ba      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fba:	4b73      	ldr	r3, [pc, #460]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a72      	ldr	r2, [pc, #456]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004fc0:	f043 0308 	orr.w	r3, r3, #8
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	4b70      	ldr	r3, [pc, #448]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	496d      	ldr	r1, [pc, #436]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fd8:	4b6b      	ldr	r3, [pc, #428]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	4968      	ldr	r1, [pc, #416]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	e025      	b.n	800503a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fee:	4b66      	ldr	r3, [pc, #408]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a65      	ldr	r2, [pc, #404]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004ff4:	f043 0308 	orr.w	r3, r3, #8
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	4960      	ldr	r1, [pc, #384]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8005008:	4313      	orrs	r3, r2
 800500a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800500c:	4b5e      	ldr	r3, [pc, #376]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	495b      	ldr	r1, [pc, #364]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 800501c:	4313      	orrs	r3, r2
 800501e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fd4c 	bl	8005ac8 <RCC_SetFlashLatencyFromMSIRange>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e37a      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800503a:	f000 fc81 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 800503e:	4602      	mov	r2, r0
 8005040:	4b51      	ldr	r3, [pc, #324]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	4950      	ldr	r1, [pc, #320]	; (800518c <HAL_RCC_OscConfig+0x274>)
 800504c:	5ccb      	ldrb	r3, [r1, r3]
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	4a4e      	ldr	r2, [pc, #312]	; (8005190 <HAL_RCC_OscConfig+0x278>)
 8005058:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800505a:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <HAL_RCC_OscConfig+0x27c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fd fa06 	bl	8002470 <HAL_InitTick>
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d052      	beq.n	8005114 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	e35e      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d032      	beq.n	80050e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800507a:	4b43      	ldr	r3, [pc, #268]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a42      	ldr	r2, [pc, #264]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005086:	f7fd fa43 	bl	8002510 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800508c:	e008      	b.n	80050a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800508e:	f7fd fa3f 	bl	8002510 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d901      	bls.n	80050a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e347      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050a0:	4b39      	ldr	r3, [pc, #228]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d0f0      	beq.n	800508e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ac:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a35      	ldr	r2, [pc, #212]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 80050b2:	f043 0308 	orr.w	r3, r3, #8
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b33      	ldr	r3, [pc, #204]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	4930      	ldr	r1, [pc, #192]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050ca:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	492b      	ldr	r1, [pc, #172]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	604b      	str	r3, [r1, #4]
 80050de:	e01a      	b.n	8005116 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050e0:	4b29      	ldr	r3, [pc, #164]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a28      	ldr	r2, [pc, #160]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050ec:	f7fd fa10 	bl	8002510 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050f4:	f7fd fa0c 	bl	8002510 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e314      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005106:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x1dc>
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005114:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d073      	beq.n	800520a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d005      	beq.n	8005134 <HAL_RCC_OscConfig+0x21c>
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b0c      	cmp	r3, #12
 800512c:	d10e      	bne.n	800514c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d10b      	bne.n	800514c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005134:	4b14      	ldr	r3, [pc, #80]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d063      	beq.n	8005208 <HAL_RCC_OscConfig+0x2f0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d15f      	bne.n	8005208 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e2f1      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005154:	d106      	bne.n	8005164 <HAL_RCC_OscConfig+0x24c>
 8005156:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a0b      	ldr	r2, [pc, #44]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 800515c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e025      	b.n	80051b0 <HAL_RCC_OscConfig+0x298>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800516c:	d114      	bne.n	8005198 <HAL_RCC_OscConfig+0x280>
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a05      	ldr	r2, [pc, #20]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8005174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	4b03      	ldr	r3, [pc, #12]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a02      	ldr	r2, [pc, #8]	; (8005188 <HAL_RCC_OscConfig+0x270>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e013      	b.n	80051b0 <HAL_RCC_OscConfig+0x298>
 8005188:	40021000 	.word	0x40021000
 800518c:	08007430 	.word	0x08007430
 8005190:	20000000 	.word	0x20000000
 8005194:	20000004 	.word	0x20000004
 8005198:	4ba0      	ldr	r3, [pc, #640]	; (800541c <HAL_RCC_OscConfig+0x504>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a9f      	ldr	r2, [pc, #636]	; (800541c <HAL_RCC_OscConfig+0x504>)
 800519e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	4b9d      	ldr	r3, [pc, #628]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a9c      	ldr	r2, [pc, #624]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80051aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd f9aa 	bl	8002510 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c0:	f7fd f9a6 	bl	8002510 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e2ae      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051d2:	4b92      	ldr	r3, [pc, #584]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x2a8>
 80051de:	e014      	b.n	800520a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fd f996 	bl	8002510 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051e8:	f7fd f992 	bl	8002510 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b64      	cmp	r3, #100	; 0x64
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e29a      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051fa:	4b88      	ldr	r3, [pc, #544]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x2d0>
 8005206:	e000      	b.n	800520a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d060      	beq.n	80052d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b04      	cmp	r3, #4
 800521a:	d005      	beq.n	8005228 <HAL_RCC_OscConfig+0x310>
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d119      	bne.n	8005256 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d116      	bne.n	8005256 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005228:	4b7c      	ldr	r3, [pc, #496]	; (800541c <HAL_RCC_OscConfig+0x504>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_OscConfig+0x328>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e277      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005240:	4b76      	ldr	r3, [pc, #472]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	4973      	ldr	r1, [pc, #460]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005250:	4313      	orrs	r3, r2
 8005252:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005254:	e040      	b.n	80052d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d023      	beq.n	80052a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800525e:	4b6f      	ldr	r3, [pc, #444]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a6e      	ldr	r2, [pc, #440]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526a:	f7fd f951 	bl	8002510 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005272:	f7fd f94d 	bl	8002510 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e255      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005284:	4b65      	ldr	r3, [pc, #404]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005290:	4b62      	ldr	r3, [pc, #392]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	495f      	ldr	r1, [pc, #380]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	604b      	str	r3, [r1, #4]
 80052a4:	e018      	b.n	80052d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052a6:	4b5d      	ldr	r3, [pc, #372]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a5c      	ldr	r2, [pc, #368]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80052ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b2:	f7fd f92d 	bl	8002510 <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ba:	f7fd f929 	bl	8002510 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e231      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052cc:	4b53      	ldr	r3, [pc, #332]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d03c      	beq.n	800535e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01c      	beq.n	8005326 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ec:	4b4b      	ldr	r3, [pc, #300]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80052ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f2:	4a4a      	ldr	r2, [pc, #296]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80052f4:	f043 0301 	orr.w	r3, r3, #1
 80052f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052fc:	f7fd f908 	bl	8002510 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005304:	f7fd f904 	bl	8002510 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e20c      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005316:	4b41      	ldr	r3, [pc, #260]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0ef      	beq.n	8005304 <HAL_RCC_OscConfig+0x3ec>
 8005324:	e01b      	b.n	800535e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005326:	4b3d      	ldr	r3, [pc, #244]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800532c:	4a3b      	ldr	r2, [pc, #236]	; (800541c <HAL_RCC_OscConfig+0x504>)
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005336:	f7fd f8eb 	bl	8002510 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800533e:	f7fd f8e7 	bl	8002510 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e1ef      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005350:	4b32      	ldr	r3, [pc, #200]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ef      	bne.n	800533e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80a6 	beq.w	80054b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800536c:	2300      	movs	r3, #0
 800536e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005370:	4b2a      	ldr	r3, [pc, #168]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10d      	bne.n	8005398 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800537c:	4b27      	ldr	r3, [pc, #156]	; (800541c <HAL_RCC_OscConfig+0x504>)
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	4a26      	ldr	r2, [pc, #152]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005386:	6593      	str	r3, [r2, #88]	; 0x58
 8005388:	4b24      	ldr	r3, [pc, #144]	; (800541c <HAL_RCC_OscConfig+0x504>)
 800538a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005394:	2301      	movs	r3, #1
 8005396:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005398:	4b21      	ldr	r3, [pc, #132]	; (8005420 <HAL_RCC_OscConfig+0x508>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d118      	bne.n	80053d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053a4:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <HAL_RCC_OscConfig+0x508>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1d      	ldr	r2, [pc, #116]	; (8005420 <HAL_RCC_OscConfig+0x508>)
 80053aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053b0:	f7fd f8ae 	bl	8002510 <HAL_GetTick>
 80053b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b6:	e008      	b.n	80053ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053b8:	f7fd f8aa 	bl	8002510 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d901      	bls.n	80053ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e1b2      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053ca:	4b15      	ldr	r3, [pc, #84]	; (8005420 <HAL_RCC_OscConfig+0x508>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d108      	bne.n	80053f0 <HAL_RCC_OscConfig+0x4d8>
 80053de:	4b0f      	ldr	r3, [pc, #60]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80053e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e4:	4a0d      	ldr	r2, [pc, #52]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053ee:	e029      	b.n	8005444 <HAL_RCC_OscConfig+0x52c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b05      	cmp	r3, #5
 80053f6:	d115      	bne.n	8005424 <HAL_RCC_OscConfig+0x50c>
 80053f8:	4b08      	ldr	r3, [pc, #32]	; (800541c <HAL_RCC_OscConfig+0x504>)
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fe:	4a07      	ldr	r2, [pc, #28]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005400:	f043 0304 	orr.w	r3, r3, #4
 8005404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005408:	4b04      	ldr	r3, [pc, #16]	; (800541c <HAL_RCC_OscConfig+0x504>)
 800540a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540e:	4a03      	ldr	r2, [pc, #12]	; (800541c <HAL_RCC_OscConfig+0x504>)
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005418:	e014      	b.n	8005444 <HAL_RCC_OscConfig+0x52c>
 800541a:	bf00      	nop
 800541c:	40021000 	.word	0x40021000
 8005420:	40007000 	.word	0x40007000
 8005424:	4b9a      	ldr	r3, [pc, #616]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	4a99      	ldr	r2, [pc, #612]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800542c:	f023 0301 	bic.w	r3, r3, #1
 8005430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005434:	4b96      	ldr	r3, [pc, #600]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	4a95      	ldr	r2, [pc, #596]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800543c:	f023 0304 	bic.w	r3, r3, #4
 8005440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d016      	beq.n	800547a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fd f860 	bl	8002510 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005452:	e00a      	b.n	800546a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005454:	f7fd f85c 	bl	8002510 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005462:	4293      	cmp	r3, r2
 8005464:	d901      	bls.n	800546a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e162      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800546a:	4b89      	ldr	r3, [pc, #548]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0ed      	beq.n	8005454 <HAL_RCC_OscConfig+0x53c>
 8005478:	e015      	b.n	80054a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547a:	f7fd f849 	bl	8002510 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fd f845 	bl	8002510 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e14b      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005498:	4b7d      	ldr	r3, [pc, #500]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1ed      	bne.n	8005482 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054a6:	7ffb      	ldrb	r3, [r7, #31]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d105      	bne.n	80054b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ac:	4b78      	ldr	r3, [pc, #480]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	4a77      	ldr	r2, [pc, #476]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 80054b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d03c      	beq.n	800553e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d01c      	beq.n	8005506 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054cc:	4b70      	ldr	r3, [pc, #448]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 80054ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d2:	4a6f      	ldr	r2, [pc, #444]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054dc:	f7fd f818 	bl	8002510 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e4:	f7fd f814 	bl	8002510 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e11c      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054f6:	4b66      	ldr	r3, [pc, #408]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 80054f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0ef      	beq.n	80054e4 <HAL_RCC_OscConfig+0x5cc>
 8005504:	e01b      	b.n	800553e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005506:	4b62      	ldr	r3, [pc, #392]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 8005508:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800550c:	4a60      	ldr	r2, [pc, #384]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005516:	f7fc fffb 	bl	8002510 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800551e:	f7fc fff7 	bl	8002510 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e0ff      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005530:	4b57      	ldr	r3, [pc, #348]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 8005532:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1ef      	bne.n	800551e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80f3 	beq.w	800572e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	2b02      	cmp	r3, #2
 800554e:	f040 80c9 	bne.w	80056e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005552:	4b4f      	ldr	r3, [pc, #316]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f003 0203 	and.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	429a      	cmp	r2, r3
 8005564:	d12c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	3b01      	subs	r3, #1
 8005572:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005574:	429a      	cmp	r2, r3
 8005576:	d123      	bne.n	80055c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005582:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005584:	429a      	cmp	r2, r3
 8005586:	d11b      	bne.n	80055c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005594:	429a      	cmp	r2, r3
 8005596:	d113      	bne.n	80055c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	085b      	lsrs	r3, r3, #1
 80055a4:	3b01      	subs	r3, #1
 80055a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d109      	bne.n	80055c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	3b01      	subs	r3, #1
 80055ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055bc:	429a      	cmp	r2, r3
 80055be:	d06b      	beq.n	8005698 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b0c      	cmp	r3, #12
 80055c4:	d062      	beq.n	800568c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80055c6:	4b32      	ldr	r3, [pc, #200]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e0ac      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055d6:	4b2e      	ldr	r3, [pc, #184]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2d      	ldr	r2, [pc, #180]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 80055dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055e2:	f7fc ff95 	bl	8002510 <HAL_GetTick>
 80055e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055e8:	e008      	b.n	80055fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ea:	f7fc ff91 	bl	8002510 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d901      	bls.n	80055fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e099      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055fc:	4b24      	ldr	r3, [pc, #144]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f0      	bne.n	80055ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005608:	4b21      	ldr	r3, [pc, #132]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	4b21      	ldr	r3, [pc, #132]	; (8005694 <HAL_RCC_OscConfig+0x77c>)
 800560e:	4013      	ands	r3, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005618:	3a01      	subs	r2, #1
 800561a:	0112      	lsls	r2, r2, #4
 800561c:	4311      	orrs	r1, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005622:	0212      	lsls	r2, r2, #8
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800562a:	0852      	lsrs	r2, r2, #1
 800562c:	3a01      	subs	r2, #1
 800562e:	0552      	lsls	r2, r2, #21
 8005630:	4311      	orrs	r1, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005636:	0852      	lsrs	r2, r2, #1
 8005638:	3a01      	subs	r2, #1
 800563a:	0652      	lsls	r2, r2, #25
 800563c:	4311      	orrs	r1, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005642:	06d2      	lsls	r2, r2, #27
 8005644:	430a      	orrs	r2, r1
 8005646:	4912      	ldr	r1, [pc, #72]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 8005648:	4313      	orrs	r3, r2
 800564a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800564c:	4b10      	ldr	r3, [pc, #64]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a0f      	ldr	r2, [pc, #60]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 8005652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005656:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 800565e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005662:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005664:	f7fc ff54 	bl	8002510 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566c:	f7fc ff50 	bl	8002510 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e058      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800567e:	4b04      	ldr	r3, [pc, #16]	; (8005690 <HAL_RCC_OscConfig+0x778>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800568a:	e050      	b.n	800572e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e04f      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
 8005690:	40021000 	.word	0x40021000
 8005694:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005698:	4b27      	ldr	r3, [pc, #156]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d144      	bne.n	800572e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056a4:	4b24      	ldr	r3, [pc, #144]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a23      	ldr	r2, [pc, #140]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 80056aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056b0:	4b21      	ldr	r3, [pc, #132]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	4a20      	ldr	r2, [pc, #128]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 80056b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056bc:	f7fc ff28 	bl	8002510 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fc ff24 	bl	8002510 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e02c      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056d6:	4b18      	ldr	r3, [pc, #96]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x7ac>
 80056e2:	e024      	b.n	800572e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	2b0c      	cmp	r3, #12
 80056e8:	d01f      	beq.n	800572a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ea:	4b13      	ldr	r3, [pc, #76]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a12      	ldr	r2, [pc, #72]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 80056f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f6:	f7fc ff0b 	bl	8002510 <HAL_GetTick>
 80056fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056fe:	f7fc ff07 	bl	8002510 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e00f      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005710:	4b09      	ldr	r3, [pc, #36]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f0      	bne.n	80056fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800571c:	4b06      	ldr	r3, [pc, #24]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	4905      	ldr	r1, [pc, #20]	; (8005738 <HAL_RCC_OscConfig+0x820>)
 8005722:	4b06      	ldr	r3, [pc, #24]	; (800573c <HAL_RCC_OscConfig+0x824>)
 8005724:	4013      	ands	r3, r2
 8005726:	60cb      	str	r3, [r1, #12]
 8005728:	e001      	b.n	800572e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40021000 	.word	0x40021000
 800573c:	feeefffc 	.word	0xfeeefffc

08005740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0e7      	b.n	8005924 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005754:	4b75      	ldr	r3, [pc, #468]	; (800592c <HAL_RCC_ClockConfig+0x1ec>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d910      	bls.n	8005784 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005762:	4b72      	ldr	r3, [pc, #456]	; (800592c <HAL_RCC_ClockConfig+0x1ec>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f023 0207 	bic.w	r2, r3, #7
 800576a:	4970      	ldr	r1, [pc, #448]	; (800592c <HAL_RCC_ClockConfig+0x1ec>)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	4313      	orrs	r3, r2
 8005770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005772:	4b6e      	ldr	r3, [pc, #440]	; (800592c <HAL_RCC_ClockConfig+0x1ec>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	429a      	cmp	r2, r3
 800577e:	d001      	beq.n	8005784 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0cf      	b.n	8005924 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d010      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	4b66      	ldr	r3, [pc, #408]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800579c:	429a      	cmp	r2, r3
 800579e:	d908      	bls.n	80057b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a0:	4b63      	ldr	r3, [pc, #396]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4960      	ldr	r1, [pc, #384]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d04c      	beq.n	8005858 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057c6:	4b5a      	ldr	r3, [pc, #360]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d121      	bne.n	8005816 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e0a6      	b.n	8005924 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d107      	bne.n	80057ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057de:	4b54      	ldr	r3, [pc, #336]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d115      	bne.n	8005816 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e09a      	b.n	8005924 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d107      	bne.n	8005806 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057f6:	4b4e      	ldr	r3, [pc, #312]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d109      	bne.n	8005816 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e08e      	b.n	8005924 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005806:	4b4a      	ldr	r3, [pc, #296]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e086      	b.n	8005924 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005816:	4b46      	ldr	r3, [pc, #280]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f023 0203 	bic.w	r2, r3, #3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4943      	ldr	r1, [pc, #268]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 8005824:	4313      	orrs	r3, r2
 8005826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005828:	f7fc fe72 	bl	8002510 <HAL_GetTick>
 800582c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582e:	e00a      	b.n	8005846 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005830:	f7fc fe6e 	bl	8002510 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	f241 3288 	movw	r2, #5000	; 0x1388
 800583e:	4293      	cmp	r3, r2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e06e      	b.n	8005924 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005846:	4b3a      	ldr	r3, [pc, #232]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 020c 	and.w	r2, r3, #12
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	429a      	cmp	r2, r3
 8005856:	d1eb      	bne.n	8005830 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d010      	beq.n	8005886 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	4b31      	ldr	r3, [pc, #196]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005870:	429a      	cmp	r2, r3
 8005872:	d208      	bcs.n	8005886 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005874:	4b2e      	ldr	r3, [pc, #184]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	492b      	ldr	r1, [pc, #172]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005886:	4b29      	ldr	r3, [pc, #164]	; (800592c <HAL_RCC_ClockConfig+0x1ec>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0307 	and.w	r3, r3, #7
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d210      	bcs.n	80058b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <HAL_RCC_ClockConfig+0x1ec>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f023 0207 	bic.w	r2, r3, #7
 800589c:	4923      	ldr	r1, [pc, #140]	; (800592c <HAL_RCC_ClockConfig+0x1ec>)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a4:	4b21      	ldr	r3, [pc, #132]	; (800592c <HAL_RCC_ClockConfig+0x1ec>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d001      	beq.n	80058b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e036      	b.n	8005924 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c2:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	4918      	ldr	r1, [pc, #96]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058e0:	4b13      	ldr	r3, [pc, #76]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	4910      	ldr	r1, [pc, #64]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058f4:	f000 f824 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 80058f8:	4602      	mov	r2, r0
 80058fa:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <HAL_RCC_ClockConfig+0x1f0>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	f003 030f 	and.w	r3, r3, #15
 8005904:	490b      	ldr	r1, [pc, #44]	; (8005934 <HAL_RCC_ClockConfig+0x1f4>)
 8005906:	5ccb      	ldrb	r3, [r1, r3]
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	fa22 f303 	lsr.w	r3, r2, r3
 8005910:	4a09      	ldr	r2, [pc, #36]	; (8005938 <HAL_RCC_ClockConfig+0x1f8>)
 8005912:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005914:	4b09      	ldr	r3, [pc, #36]	; (800593c <HAL_RCC_ClockConfig+0x1fc>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fc fda9 	bl	8002470 <HAL_InitTick>
 800591e:	4603      	mov	r3, r0
 8005920:	72fb      	strb	r3, [r7, #11]

  return status;
 8005922:	7afb      	ldrb	r3, [r7, #11]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40022000 	.word	0x40022000
 8005930:	40021000 	.word	0x40021000
 8005934:	08007430 	.word	0x08007430
 8005938:	20000000 	.word	0x20000000
 800593c:	20000004 	.word	0x20000004

08005940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005940:	b480      	push	{r7}
 8005942:	b089      	sub	sp, #36	; 0x24
 8005944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
 800594a:	2300      	movs	r3, #0
 800594c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594e:	4b3e      	ldr	r3, [pc, #248]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005958:	4b3b      	ldr	r3, [pc, #236]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x34>
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b0c      	cmp	r3, #12
 800596c:	d121      	bne.n	80059b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d11e      	bne.n	80059b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005974:	4b34      	ldr	r3, [pc, #208]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d107      	bne.n	8005990 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005980:	4b31      	ldr	r3, [pc, #196]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	e005      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005990:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	091b      	lsrs	r3, r3, #4
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800599c:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <HAL_RCC_GetSysClockFreq+0x10c>)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10d      	bne.n	80059c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80059b0:	e00a      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d102      	bne.n	80059be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059b8:	4b25      	ldr	r3, [pc, #148]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80059ba:	61bb      	str	r3, [r7, #24]
 80059bc:	e004      	b.n	80059c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	2b08      	cmp	r3, #8
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059c4:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80059c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d134      	bne.n	8005a38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059ce:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d003      	beq.n	80059e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d003      	beq.n	80059ec <HAL_RCC_GetSysClockFreq+0xac>
 80059e4:	e005      	b.n	80059f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80059e6:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80059e8:	617b      	str	r3, [r7, #20]
      break;
 80059ea:	e005      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80059ee:	617b      	str	r3, [r7, #20]
      break;
 80059f0:	e002      	b.n	80059f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	617b      	str	r3, [r7, #20]
      break;
 80059f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059f8:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	3301      	adds	r3, #1
 8005a04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	fb03 f202 	mul.w	r2, r3, r2
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a1e:	4b0a      	ldr	r3, [pc, #40]	; (8005a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	0e5b      	lsrs	r3, r3, #25
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	3301      	adds	r3, #1
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a38:	69bb      	ldr	r3, [r7, #24]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3724      	adds	r7, #36	; 0x24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	08007448 	.word	0x08007448
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	007a1200 	.word	0x007a1200

08005a58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000000 	.word	0x20000000

08005a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a74:	f7ff fff0 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0a1b      	lsrs	r3, r3, #8
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4904      	ldr	r1, [pc, #16]	; (8005a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40021000 	.word	0x40021000
 8005a98:	08007440 	.word	0x08007440

08005a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005aa0:	f7ff ffda 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4b06      	ldr	r3, [pc, #24]	; (8005ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	0adb      	lsrs	r3, r3, #11
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4904      	ldr	r1, [pc, #16]	; (8005ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ab2:	5ccb      	ldrb	r3, [r1, r3]
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	08007440 	.word	0x08007440

08005ac8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ad4:	4b2a      	ldr	r3, [pc, #168]	; (8005b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ae0:	f7ff f9b6 	bl	8004e50 <HAL_PWREx_GetVoltageRange>
 8005ae4:	6178      	str	r0, [r7, #20]
 8005ae6:	e014      	b.n	8005b12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ae8:	4b25      	ldr	r3, [pc, #148]	; (8005b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aec:	4a24      	ldr	r2, [pc, #144]	; (8005b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af2:	6593      	str	r3, [r2, #88]	; 0x58
 8005af4:	4b22      	ldr	r3, [pc, #136]	; (8005b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afc:	60fb      	str	r3, [r7, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005b00:	f7ff f9a6 	bl	8004e50 <HAL_PWREx_GetVoltageRange>
 8005b04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005b06:	4b1e      	ldr	r3, [pc, #120]	; (8005b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b0a:	4a1d      	ldr	r2, [pc, #116]	; (8005b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b18:	d10b      	bne.n	8005b32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b80      	cmp	r3, #128	; 0x80
 8005b1e:	d919      	bls.n	8005b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2ba0      	cmp	r3, #160	; 0xa0
 8005b24:	d902      	bls.n	8005b2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b26:	2302      	movs	r3, #2
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	e013      	b.n	8005b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	613b      	str	r3, [r7, #16]
 8005b30:	e010      	b.n	8005b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b80      	cmp	r3, #128	; 0x80
 8005b36:	d902      	bls.n	8005b3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005b38:	2303      	movs	r3, #3
 8005b3a:	613b      	str	r3, [r7, #16]
 8005b3c:	e00a      	b.n	8005b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b80      	cmp	r3, #128	; 0x80
 8005b42:	d102      	bne.n	8005b4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005b44:	2302      	movs	r3, #2
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	e004      	b.n	8005b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b70      	cmp	r3, #112	; 0x70
 8005b4e:	d101      	bne.n	8005b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005b50:	2301      	movs	r3, #1
 8005b52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f023 0207 	bic.w	r2, r3, #7
 8005b5c:	4909      	ldr	r1, [pc, #36]	; (8005b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005b64:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d001      	beq.n	8005b76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40021000 	.word	0x40021000
 8005b84:	40022000 	.word	0x40022000

08005b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b90:	2300      	movs	r3, #0
 8005b92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b94:	2300      	movs	r3, #0
 8005b96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d031      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bac:	d01a      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005bae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bb2:	d814      	bhi.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005bb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bbc:	d10f      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005bbe:	4b5d      	ldr	r3, [pc, #372]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	4a5c      	ldr	r2, [pc, #368]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bca:	e00c      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fa22 	bl	800601c <RCCEx_PLLSAI1_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005bdc:	e003      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	74fb      	strb	r3, [r7, #19]
      break;
 8005be2:	e000      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005be6:	7cfb      	ldrb	r3, [r7, #19]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10b      	bne.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bec:	4b51      	ldr	r3, [pc, #324]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	494e      	ldr	r1, [pc, #312]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005c02:	e001      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c04:	7cfb      	ldrb	r3, [r7, #19]
 8005c06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 809e 	beq.w	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c16:	2300      	movs	r3, #0
 8005c18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c1a:	4b46      	ldr	r3, [pc, #280]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00d      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c30:	4b40      	ldr	r3, [pc, #256]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c34:	4a3f      	ldr	r2, [pc, #252]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c3c:	4b3d      	ldr	r3, [pc, #244]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c44:	60bb      	str	r3, [r7, #8]
 8005c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c4c:	4b3a      	ldr	r3, [pc, #232]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a39      	ldr	r2, [pc, #228]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c58:	f7fc fc5a 	bl	8002510 <HAL_GetTick>
 8005c5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c5e:	e009      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c60:	f7fc fc56 	bl	8002510 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d902      	bls.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	74fb      	strb	r3, [r7, #19]
        break;
 8005c72:	e005      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c74:	4b30      	ldr	r3, [pc, #192]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ef      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005c80:	7cfb      	ldrb	r3, [r7, #19]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d15a      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c86:	4b2b      	ldr	r3, [pc, #172]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01e      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d019      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005ca2:	4b24      	ldr	r3, [pc, #144]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cae:	4b21      	ldr	r3, [pc, #132]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc4:	4a1b      	ldr	r2, [pc, #108]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005cce:	4a19      	ldr	r2, [pc, #100]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d016      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce0:	f7fc fc16 	bl	8002510 <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ce6:	e00b      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce8:	f7fc fc12 	bl	8002510 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d902      	bls.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	74fb      	strb	r3, [r7, #19]
            break;
 8005cfe:	e006      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d00:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0ec      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005d0e:	7cfb      	ldrb	r3, [r7, #19]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10b      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d14:	4b07      	ldr	r3, [pc, #28]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d22:	4904      	ldr	r1, [pc, #16]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d2a:	e009      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d2c:	7cfb      	ldrb	r3, [r7, #19]
 8005d2e:	74bb      	strb	r3, [r7, #18]
 8005d30:	e006      	b.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005d32:	bf00      	nop
 8005d34:	40021000 	.word	0x40021000
 8005d38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3c:	7cfb      	ldrb	r3, [r7, #19]
 8005d3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d40:	7c7b      	ldrb	r3, [r7, #17]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d105      	bne.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d46:	4b8d      	ldr	r3, [pc, #564]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4a:	4a8c      	ldr	r2, [pc, #560]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005d4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d5e:	4b87      	ldr	r3, [pc, #540]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d64:	f023 0203 	bic.w	r2, r3, #3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	4983      	ldr	r1, [pc, #524]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0302 	and.w	r3, r3, #2
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d80:	4b7e      	ldr	r3, [pc, #504]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d86:	f023 020c 	bic.w	r2, r3, #12
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	497b      	ldr	r1, [pc, #492]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005da2:	4b76      	ldr	r3, [pc, #472]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	4972      	ldr	r1, [pc, #456]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dc4:	4b6d      	ldr	r3, [pc, #436]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd2:	496a      	ldr	r1, [pc, #424]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005de6:	4b65      	ldr	r3, [pc, #404]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df4:	4961      	ldr	r1, [pc, #388]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e08:	4b5c      	ldr	r3, [pc, #368]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	4959      	ldr	r1, [pc, #356]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e2a:	4b54      	ldr	r3, [pc, #336]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	4950      	ldr	r1, [pc, #320]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e4c:	4b4b      	ldr	r3, [pc, #300]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5a:	4948      	ldr	r1, [pc, #288]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e6e:	4b43      	ldr	r3, [pc, #268]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	493f      	ldr	r1, [pc, #252]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d028      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e90:	4b3a      	ldr	r3, [pc, #232]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9e:	4937      	ldr	r1, [pc, #220]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eae:	d106      	bne.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005eb0:	4b32      	ldr	r3, [pc, #200]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	4a31      	ldr	r2, [pc, #196]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005eb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eba:	60d3      	str	r3, [r2, #12]
 8005ebc:	e011      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ec6:	d10c      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	2101      	movs	r1, #1
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f000 f8a4 	bl	800601c <RCCEx_PLLSAI1_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ed8:	7cfb      	ldrb	r3, [r7, #19]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8005ede:	7cfb      	ldrb	r3, [r7, #19]
 8005ee0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d028      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005eee:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efc:	491f      	ldr	r1, [pc, #124]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f0c:	d106      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f0e:	4b1b      	ldr	r3, [pc, #108]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	4a1a      	ldr	r2, [pc, #104]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005f14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f18:	60d3      	str	r3, [r2, #12]
 8005f1a:	e011      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f24:	d10c      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f875 	bl	800601c <RCCEx_PLLSAI1_Config>
 8005f32:	4603      	mov	r3, r0
 8005f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f36:	7cfb      	ldrb	r3, [r7, #19]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005f3c:	7cfb      	ldrb	r3, [r7, #19]
 8005f3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d02b      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f4c:	4b0b      	ldr	r3, [pc, #44]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5a:	4908      	ldr	r1, [pc, #32]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f6a:	d109      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f6c:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4a02      	ldr	r2, [pc, #8]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005f72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f76:	60d3      	str	r3, [r2, #12]
 8005f78:	e014      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005f7a:	bf00      	nop
 8005f7c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f88:	d10c      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	2101      	movs	r1, #1
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 f843 	bl	800601c <RCCEx_PLLSAI1_Config>
 8005f96:	4603      	mov	r3, r0
 8005f98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f9a:	7cfb      	ldrb	r3, [r7, #19]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005fa0:	7cfb      	ldrb	r3, [r7, #19]
 8005fa2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01c      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fb0:	4b19      	ldr	r3, [pc, #100]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	4916      	ldr	r1, [pc, #88]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fce:	d10c      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	2102      	movs	r1, #2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 f820 	bl	800601c <RCCEx_PLLSAI1_Config>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fe0:	7cfb      	ldrb	r3, [r7, #19]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8005fe6:	7cfb      	ldrb	r3, [r7, #19]
 8005fe8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00a      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ff6:	4b08      	ldr	r3, [pc, #32]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006004:	4904      	ldr	r1, [pc, #16]	; (8006018 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800600c:	7cbb      	ldrb	r3, [r7, #18]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	40021000 	.word	0x40021000

0800601c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800602a:	4b74      	ldr	r3, [pc, #464]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d018      	beq.n	8006068 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006036:	4b71      	ldr	r3, [pc, #452]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0203 	and.w	r2, r3, #3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	429a      	cmp	r2, r3
 8006044:	d10d      	bne.n	8006062 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
       ||
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800604e:	4b6b      	ldr	r3, [pc, #428]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	091b      	lsrs	r3, r3, #4
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
       ||
 800605e:	429a      	cmp	r2, r3
 8006060:	d047      	beq.n	80060f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	73fb      	strb	r3, [r7, #15]
 8006066:	e044      	b.n	80060f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d018      	beq.n	80060a2 <RCCEx_PLLSAI1_Config+0x86>
 8006070:	2b03      	cmp	r3, #3
 8006072:	d825      	bhi.n	80060c0 <RCCEx_PLLSAI1_Config+0xa4>
 8006074:	2b01      	cmp	r3, #1
 8006076:	d002      	beq.n	800607e <RCCEx_PLLSAI1_Config+0x62>
 8006078:	2b02      	cmp	r3, #2
 800607a:	d009      	beq.n	8006090 <RCCEx_PLLSAI1_Config+0x74>
 800607c:	e020      	b.n	80060c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800607e:	4b5f      	ldr	r3, [pc, #380]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d11d      	bne.n	80060c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800608e:	e01a      	b.n	80060c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006090:	4b5a      	ldr	r3, [pc, #360]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006098:	2b00      	cmp	r3, #0
 800609a:	d116      	bne.n	80060ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a0:	e013      	b.n	80060ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060a2:	4b56      	ldr	r3, [pc, #344]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10f      	bne.n	80060ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060ae:	4b53      	ldr	r3, [pc, #332]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060be:	e006      	b.n	80060ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	73fb      	strb	r3, [r7, #15]
      break;
 80060c4:	e004      	b.n	80060d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060c6:	bf00      	nop
 80060c8:	e002      	b.n	80060d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80060ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10d      	bne.n	80060f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060d6:	4b49      	ldr	r3, [pc, #292]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6819      	ldr	r1, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	430b      	orrs	r3, r1
 80060ec:	4943      	ldr	r1, [pc, #268]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d17c      	bne.n	80061f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80060f8:	4b40      	ldr	r3, [pc, #256]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3f      	ldr	r2, [pc, #252]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80060fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006104:	f7fc fa04 	bl	8002510 <HAL_GetTick>
 8006108:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800610a:	e009      	b.n	8006120 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800610c:	f7fc fa00 	bl	8002510 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d902      	bls.n	8006120 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	73fb      	strb	r3, [r7, #15]
        break;
 800611e:	e005      	b.n	800612c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006120:	4b36      	ldr	r3, [pc, #216]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1ef      	bne.n	800610c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d15f      	bne.n	80061f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d110      	bne.n	800615a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006138:	4b30      	ldr	r3, [pc, #192]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6892      	ldr	r2, [r2, #8]
 8006148:	0211      	lsls	r1, r2, #8
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68d2      	ldr	r2, [r2, #12]
 800614e:	06d2      	lsls	r2, r2, #27
 8006150:	430a      	orrs	r2, r1
 8006152:	492a      	ldr	r1, [pc, #168]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006154:	4313      	orrs	r3, r2
 8006156:	610b      	str	r3, [r1, #16]
 8006158:	e027      	b.n	80061aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d112      	bne.n	8006186 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006160:	4b26      	ldr	r3, [pc, #152]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006168:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6892      	ldr	r2, [r2, #8]
 8006170:	0211      	lsls	r1, r2, #8
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	6912      	ldr	r2, [r2, #16]
 8006176:	0852      	lsrs	r2, r2, #1
 8006178:	3a01      	subs	r2, #1
 800617a:	0552      	lsls	r2, r2, #21
 800617c:	430a      	orrs	r2, r1
 800617e:	491f      	ldr	r1, [pc, #124]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006180:	4313      	orrs	r3, r2
 8006182:	610b      	str	r3, [r1, #16]
 8006184:	e011      	b.n	80061aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006186:	4b1d      	ldr	r3, [pc, #116]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800618e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6892      	ldr	r2, [r2, #8]
 8006196:	0211      	lsls	r1, r2, #8
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6952      	ldr	r2, [r2, #20]
 800619c:	0852      	lsrs	r2, r2, #1
 800619e:	3a01      	subs	r2, #1
 80061a0:	0652      	lsls	r2, r2, #25
 80061a2:	430a      	orrs	r2, r1
 80061a4:	4915      	ldr	r1, [pc, #84]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061aa:	4b14      	ldr	r3, [pc, #80]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a13      	ldr	r2, [pc, #76]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80061b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b6:	f7fc f9ab 	bl	8002510 <HAL_GetTick>
 80061ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061bc:	e009      	b.n	80061d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061be:	f7fc f9a7 	bl	8002510 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d902      	bls.n	80061d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	73fb      	strb	r3, [r7, #15]
          break;
 80061d0:	e005      	b.n	80061de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d0ef      	beq.n	80061be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d106      	bne.n	80061f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	4903      	ldr	r1, [pc, #12]	; (80061fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40021000 	.word	0x40021000

08006200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e049      	b.n	80062a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7fc f800 	bl	800222c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3304      	adds	r3, #4
 800623c:	4619      	mov	r1, r3
 800623e:	4610      	mov	r0, r2
 8006240:	f000 fa7e 	bl	8006740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d001      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e03b      	b.n	8006340 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a19      	ldr	r2, [pc, #100]	; (800634c <HAL_TIM_Base_Start_IT+0x9c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_TIM_Base_Start_IT+0x4e>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f2:	d004      	beq.n	80062fe <HAL_TIM_Base_Start_IT+0x4e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a15      	ldr	r2, [pc, #84]	; (8006350 <HAL_TIM_Base_Start_IT+0xa0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d115      	bne.n	800632a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	4b13      	ldr	r3, [pc, #76]	; (8006354 <HAL_TIM_Base_Start_IT+0xa4>)
 8006306:	4013      	ands	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b06      	cmp	r3, #6
 800630e:	d015      	beq.n	800633c <HAL_TIM_Base_Start_IT+0x8c>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006316:	d011      	beq.n	800633c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006328:	e008      	b.n	800633c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
 800633a:	e000      	b.n	800633e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40012c00 	.word	0x40012c00
 8006350:	40014000 	.word	0x40014000
 8006354:	00010007 	.word	0x00010007

08006358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b00      	cmp	r3, #0
 8006378:	d020      	beq.n	80063bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01b      	beq.n	80063bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0202 	mvn.w	r2, #2
 800638c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f003 0303 	and.w	r3, r3, #3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f9ad 	bl	8006702 <HAL_TIM_IC_CaptureCallback>
 80063a8:	e005      	b.n	80063b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f99f 	bl	80066ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f9b0 	bl	8006716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d020      	beq.n	8006408 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d01b      	beq.n	8006408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f06f 0204 	mvn.w	r2, #4
 80063d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2202      	movs	r2, #2
 80063de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f987 	bl	8006702 <HAL_TIM_IC_CaptureCallback>
 80063f4:	e005      	b.n	8006402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f979 	bl	80066ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f98a 	bl	8006716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d020      	beq.n	8006454 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01b      	beq.n	8006454 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f06f 0208 	mvn.w	r2, #8
 8006424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2204      	movs	r2, #4
 800642a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f961 	bl	8006702 <HAL_TIM_IC_CaptureCallback>
 8006440:	e005      	b.n	800644e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f953 	bl	80066ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f964 	bl	8006716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	f003 0310 	and.w	r3, r3, #16
 800645a:	2b00      	cmp	r3, #0
 800645c:	d020      	beq.n	80064a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01b      	beq.n	80064a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0210 	mvn.w	r2, #16
 8006470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2208      	movs	r2, #8
 8006476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f93b 	bl	8006702 <HAL_TIM_IC_CaptureCallback>
 800648c:	e005      	b.n	800649a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f92d 	bl	80066ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f93e 	bl	8006716 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0301 	and.w	r3, r3, #1
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00c      	beq.n	80064c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d007      	beq.n	80064c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f06f 0201 	mvn.w	r2, #1
 80064bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fb fd70 	bl	8001fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d007      	beq.n	80064e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fa9a 	bl	8006a1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00c      	beq.n	800650c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d007      	beq.n	800650c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fa92 	bl	8006a30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00c      	beq.n	8006530 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f8fd 	bl	800672a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00c      	beq.n	8006554 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0220 	mvn.w	r2, #32
 800654c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa5a 	bl	8006a08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006554:	bf00      	nop
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d101      	bne.n	8006578 <HAL_TIM_ConfigClockSource+0x1c>
 8006574:	2302      	movs	r3, #2
 8006576:	e0b6      	b.n	80066e6 <HAL_TIM_ConfigClockSource+0x18a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2201      	movs	r2, #1
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800659a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065b4:	d03e      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0xd8>
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ba:	f200 8087 	bhi.w	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c2:	f000 8086 	beq.w	80066d2 <HAL_TIM_ConfigClockSource+0x176>
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ca:	d87f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065cc:	2b70      	cmp	r3, #112	; 0x70
 80065ce:	d01a      	beq.n	8006606 <HAL_TIM_ConfigClockSource+0xaa>
 80065d0:	2b70      	cmp	r3, #112	; 0x70
 80065d2:	d87b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065d4:	2b60      	cmp	r3, #96	; 0x60
 80065d6:	d050      	beq.n	800667a <HAL_TIM_ConfigClockSource+0x11e>
 80065d8:	2b60      	cmp	r3, #96	; 0x60
 80065da:	d877      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065dc:	2b50      	cmp	r3, #80	; 0x50
 80065de:	d03c      	beq.n	800665a <HAL_TIM_ConfigClockSource+0xfe>
 80065e0:	2b50      	cmp	r3, #80	; 0x50
 80065e2:	d873      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d058      	beq.n	800669a <HAL_TIM_ConfigClockSource+0x13e>
 80065e8:	2b40      	cmp	r3, #64	; 0x40
 80065ea:	d86f      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065ec:	2b30      	cmp	r3, #48	; 0x30
 80065ee:	d064      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	d86b      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d060      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d867      	bhi.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d05c      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 8006600:	2b10      	cmp	r3, #16
 8006602:	d05a      	beq.n	80066ba <HAL_TIM_ConfigClockSource+0x15e>
 8006604:	e062      	b.n	80066cc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006616:	f000 f971 	bl	80068fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	609a      	str	r2, [r3, #8]
      break;
 8006632:	e04f      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006644:	f000 f95a 	bl	80068fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006656:	609a      	str	r2, [r3, #8]
      break;
 8006658:	e03c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006666:	461a      	mov	r2, r3
 8006668:	f000 f8ce 	bl	8006808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2150      	movs	r1, #80	; 0x50
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f927 	bl	80068c6 <TIM_ITRx_SetConfig>
      break;
 8006678:	e02c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006686:	461a      	mov	r2, r3
 8006688:	f000 f8ed 	bl	8006866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2160      	movs	r1, #96	; 0x60
 8006692:	4618      	mov	r0, r3
 8006694:	f000 f917 	bl	80068c6 <TIM_ITRx_SetConfig>
      break;
 8006698:	e01c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066a6:	461a      	mov	r2, r3
 80066a8:	f000 f8ae 	bl	8006808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2140      	movs	r1, #64	; 0x40
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f907 	bl	80068c6 <TIM_ITRx_SetConfig>
      break;
 80066b8:	e00c      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	4610      	mov	r0, r2
 80066c6:	f000 f8fe 	bl	80068c6 <TIM_ITRx_SetConfig>
      break;
 80066ca:	e003      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]
      break;
 80066d0:	e000      	b.n	80066d4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
	...

08006740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a2a      	ldr	r2, [pc, #168]	; (80067fc <TIM_Base_SetConfig+0xbc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d003      	beq.n	8006760 <TIM_Base_SetConfig+0x20>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800675e:	d108      	bne.n	8006772 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006766:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a21      	ldr	r2, [pc, #132]	; (80067fc <TIM_Base_SetConfig+0xbc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00b      	beq.n	8006792 <TIM_Base_SetConfig+0x52>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006780:	d007      	beq.n	8006792 <TIM_Base_SetConfig+0x52>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1e      	ldr	r2, [pc, #120]	; (8006800 <TIM_Base_SetConfig+0xc0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d003      	beq.n	8006792 <TIM_Base_SetConfig+0x52>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <TIM_Base_SetConfig+0xc4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d108      	bne.n	80067a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689a      	ldr	r2, [r3, #8]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a0c      	ldr	r2, [pc, #48]	; (80067fc <TIM_Base_SetConfig+0xbc>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d007      	beq.n	80067e0 <TIM_Base_SetConfig+0xa0>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a0b      	ldr	r2, [pc, #44]	; (8006800 <TIM_Base_SetConfig+0xc0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_Base_SetConfig+0xa0>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a0a      	ldr	r2, [pc, #40]	; (8006804 <TIM_Base_SetConfig+0xc4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d103      	bne.n	80067e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	691a      	ldr	r2, [r3, #16]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	615a      	str	r2, [r3, #20]
}
 80067ee:	bf00      	nop
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40014000 	.word	0x40014000
 8006804:	40014400 	.word	0x40014400

08006808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006808:	b480      	push	{r7}
 800680a:	b087      	sub	sp, #28
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	f023 0201 	bic.w	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	011b      	lsls	r3, r3, #4
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f023 030a 	bic.w	r3, r3, #10
 8006844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	697a      	ldr	r2, [r7, #20]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006866:	b480      	push	{r7}
 8006868:	b087      	sub	sp, #28
 800686a:	af00      	add	r7, sp, #0
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	f023 0210 	bic.w	r2, r3, #16
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	031b      	lsls	r3, r3, #12
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	621a      	str	r2, [r3, #32]
}
 80068ba:	bf00      	nop
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b085      	sub	sp, #20
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	f043 0307 	orr.w	r3, r3, #7
 80068e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	609a      	str	r2, [r3, #8]
}
 80068f0:	bf00      	nop
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	021a      	lsls	r2, r3, #8
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	431a      	orrs	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4313      	orrs	r3, r2
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	609a      	str	r2, [r3, #8]
}
 8006930:	bf00      	nop
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006950:	2302      	movs	r3, #2
 8006952:	e04f      	b.n	80069f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a21      	ldr	r2, [pc, #132]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d108      	bne.n	8006990 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006984:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d009      	beq.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069bc:	d004      	beq.n	80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10c      	bne.n	80069e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40014000 	.word	0x40014000

08006a08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e040      	b.n	8006ad8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fb fc04 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2224      	movs	r2, #36	; 0x24
 8006a70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0201 	bic.w	r2, r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa82 	bl	8006f94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f825 	bl	8006ae0 <UART_SetConfig>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e01b      	b.n	8006ad8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	685a      	ldr	r2, [r3, #4]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006aae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689a      	ldr	r2, [r3, #8]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006abe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0201 	orr.w	r2, r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 fb01 	bl	80070d8 <UART_CheckIdleState>
 8006ad6:	4603      	mov	r3, r0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ae4:	b08a      	sub	sp, #40	; 0x28
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	4b9e      	ldr	r3, [pc, #632]	; (8006d88 <UART_SetConfig+0x2a8>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	6812      	ldr	r2, [r2, #0]
 8006b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b18:	430b      	orrs	r3, r1
 8006b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a93      	ldr	r2, [pc, #588]	; (8006d8c <UART_SetConfig+0x2ac>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d004      	beq.n	8006b4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a8a      	ldr	r2, [pc, #552]	; (8006d90 <UART_SetConfig+0x2b0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d126      	bne.n	8006bb8 <UART_SetConfig+0xd8>
 8006b6a:	4b8a      	ldr	r3, [pc, #552]	; (8006d94 <UART_SetConfig+0x2b4>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b70:	f003 0303 	and.w	r3, r3, #3
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d81b      	bhi.n	8006bb0 <UART_SetConfig+0xd0>
 8006b78:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <UART_SetConfig+0xa0>)
 8006b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7e:	bf00      	nop
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006ba1 	.word	0x08006ba1
 8006b88:	08006b99 	.word	0x08006b99
 8006b8c:	08006ba9 	.word	0x08006ba9
 8006b90:	2301      	movs	r3, #1
 8006b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b96:	e0ab      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9e:	e0a7      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ba6:	e0a3      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006ba8:	2308      	movs	r3, #8
 8006baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bae:	e09f      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bb6:	e09b      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a76      	ldr	r2, [pc, #472]	; (8006d98 <UART_SetConfig+0x2b8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d138      	bne.n	8006c34 <UART_SetConfig+0x154>
 8006bc2:	4b74      	ldr	r3, [pc, #464]	; (8006d94 <UART_SetConfig+0x2b4>)
 8006bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc8:	f003 030c 	and.w	r3, r3, #12
 8006bcc:	2b0c      	cmp	r3, #12
 8006bce:	d82d      	bhi.n	8006c2c <UART_SetConfig+0x14c>
 8006bd0:	a201      	add	r2, pc, #4	; (adr r2, 8006bd8 <UART_SetConfig+0xf8>)
 8006bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd6:	bf00      	nop
 8006bd8:	08006c0d 	.word	0x08006c0d
 8006bdc:	08006c2d 	.word	0x08006c2d
 8006be0:	08006c2d 	.word	0x08006c2d
 8006be4:	08006c2d 	.word	0x08006c2d
 8006be8:	08006c1d 	.word	0x08006c1d
 8006bec:	08006c2d 	.word	0x08006c2d
 8006bf0:	08006c2d 	.word	0x08006c2d
 8006bf4:	08006c2d 	.word	0x08006c2d
 8006bf8:	08006c15 	.word	0x08006c15
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	08006c2d 	.word	0x08006c2d
 8006c08:	08006c25 	.word	0x08006c25
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c12:	e06d      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c14:	2302      	movs	r3, #2
 8006c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c1a:	e069      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c1c:	2304      	movs	r3, #4
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c22:	e065      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c24:	2308      	movs	r3, #8
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c2a:	e061      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c32:	e05d      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a58      	ldr	r2, [pc, #352]	; (8006d9c <UART_SetConfig+0x2bc>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d125      	bne.n	8006c8a <UART_SetConfig+0x1aa>
 8006c3e:	4b55      	ldr	r3, [pc, #340]	; (8006d94 <UART_SetConfig+0x2b4>)
 8006c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c48:	2b30      	cmp	r3, #48	; 0x30
 8006c4a:	d016      	beq.n	8006c7a <UART_SetConfig+0x19a>
 8006c4c:	2b30      	cmp	r3, #48	; 0x30
 8006c4e:	d818      	bhi.n	8006c82 <UART_SetConfig+0x1a2>
 8006c50:	2b20      	cmp	r3, #32
 8006c52:	d00a      	beq.n	8006c6a <UART_SetConfig+0x18a>
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d814      	bhi.n	8006c82 <UART_SetConfig+0x1a2>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d002      	beq.n	8006c62 <UART_SetConfig+0x182>
 8006c5c:	2b10      	cmp	r3, #16
 8006c5e:	d008      	beq.n	8006c72 <UART_SetConfig+0x192>
 8006c60:	e00f      	b.n	8006c82 <UART_SetConfig+0x1a2>
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c68:	e042      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c70:	e03e      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c72:	2304      	movs	r3, #4
 8006c74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c78:	e03a      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c80:	e036      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c82:	2310      	movs	r3, #16
 8006c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006c88:	e032      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a3f      	ldr	r2, [pc, #252]	; (8006d8c <UART_SetConfig+0x2ac>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d12a      	bne.n	8006cea <UART_SetConfig+0x20a>
 8006c94:	4b3f      	ldr	r3, [pc, #252]	; (8006d94 <UART_SetConfig+0x2b4>)
 8006c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ca2:	d01a      	beq.n	8006cda <UART_SetConfig+0x1fa>
 8006ca4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ca8:	d81b      	bhi.n	8006ce2 <UART_SetConfig+0x202>
 8006caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cae:	d00c      	beq.n	8006cca <UART_SetConfig+0x1ea>
 8006cb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cb4:	d815      	bhi.n	8006ce2 <UART_SetConfig+0x202>
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <UART_SetConfig+0x1e2>
 8006cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cbe:	d008      	beq.n	8006cd2 <UART_SetConfig+0x1f2>
 8006cc0:	e00f      	b.n	8006ce2 <UART_SetConfig+0x202>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc8:	e012      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd0:	e00e      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006cd2:	2304      	movs	r3, #4
 8006cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cd8:	e00a      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006cda:	2308      	movs	r3, #8
 8006cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce0:	e006      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ce8:	e002      	b.n	8006cf0 <UART_SetConfig+0x210>
 8006cea:	2310      	movs	r3, #16
 8006cec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a25      	ldr	r2, [pc, #148]	; (8006d8c <UART_SetConfig+0x2ac>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	f040 808a 	bne.w	8006e10 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d824      	bhi.n	8006d4e <UART_SetConfig+0x26e>
 8006d04:	a201      	add	r2, pc, #4	; (adr r2, 8006d0c <UART_SetConfig+0x22c>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d4f 	.word	0x08006d4f
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d4f 	.word	0x08006d4f
 8006d1c:	08006d3f 	.word	0x08006d3f
 8006d20:	08006d4f 	.word	0x08006d4f
 8006d24:	08006d4f 	.word	0x08006d4f
 8006d28:	08006d4f 	.word	0x08006d4f
 8006d2c:	08006d47 	.word	0x08006d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d30:	f7fe fe9e 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006d34:	61f8      	str	r0, [r7, #28]
        break;
 8006d36:	e010      	b.n	8006d5a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d38:	4b19      	ldr	r3, [pc, #100]	; (8006da0 <UART_SetConfig+0x2c0>)
 8006d3a:	61fb      	str	r3, [r7, #28]
        break;
 8006d3c:	e00d      	b.n	8006d5a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3e:	f7fe fdff 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006d42:	61f8      	str	r0, [r7, #28]
        break;
 8006d44:	e009      	b.n	8006d5a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d4a:	61fb      	str	r3, [r7, #28]
        break;
 8006d4c:	e005      	b.n	8006d5a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8109 	beq.w	8006f74 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4413      	add	r3, r2
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d305      	bcc.n	8006d7e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d912      	bls.n	8006da4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d84:	e0f6      	b.n	8006f74 <UART_SetConfig+0x494>
 8006d86:	bf00      	nop
 8006d88:	efff69f3 	.word	0xefff69f3
 8006d8c:	40008000 	.word	0x40008000
 8006d90:	40013800 	.word	0x40013800
 8006d94:	40021000 	.word	0x40021000
 8006d98:	40004400 	.word	0x40004400
 8006d9c:	40004800 	.word	0x40004800
 8006da0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	2200      	movs	r2, #0
 8006da8:	461c      	mov	r4, r3
 8006daa:	4615      	mov	r5, r2
 8006dac:	f04f 0200 	mov.w	r2, #0
 8006db0:	f04f 0300 	mov.w	r3, #0
 8006db4:	022b      	lsls	r3, r5, #8
 8006db6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006dba:	0222      	lsls	r2, r4, #8
 8006dbc:	68f9      	ldr	r1, [r7, #12]
 8006dbe:	6849      	ldr	r1, [r1, #4]
 8006dc0:	0849      	lsrs	r1, r1, #1
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	4688      	mov	r8, r1
 8006dc6:	4681      	mov	r9, r0
 8006dc8:	eb12 0a08 	adds.w	sl, r2, r8
 8006dcc:	eb43 0b09 	adc.w	fp, r3, r9
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	607a      	str	r2, [r7, #4]
 8006dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dde:	4650      	mov	r0, sl
 8006de0:	4659      	mov	r1, fp
 8006de2:	f7f9 f9f3 	bl	80001cc <__aeabi_uldivmod>
 8006de6:	4602      	mov	r2, r0
 8006de8:	460b      	mov	r3, r1
 8006dea:	4613      	mov	r3, r2
 8006dec:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df4:	d308      	bcc.n	8006e08 <UART_SetConfig+0x328>
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dfc:	d204      	bcs.n	8006e08 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	60da      	str	r2, [r3, #12]
 8006e06:	e0b5      	b.n	8006f74 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006e0e:	e0b1      	b.n	8006f74 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e18:	d15d      	bne.n	8006ed6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e1e:	2b08      	cmp	r3, #8
 8006e20:	d827      	bhi.n	8006e72 <UART_SetConfig+0x392>
 8006e22:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <UART_SetConfig+0x348>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006e4d 	.word	0x08006e4d
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	08006e73 	.word	0x08006e73
 8006e38:	08006e63 	.word	0x08006e63
 8006e3c:	08006e73 	.word	0x08006e73
 8006e40:	08006e73 	.word	0x08006e73
 8006e44:	08006e73 	.word	0x08006e73
 8006e48:	08006e6b 	.word	0x08006e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e4c:	f7fe fe10 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006e50:	61f8      	str	r0, [r7, #28]
        break;
 8006e52:	e014      	b.n	8006e7e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e54:	f7fe fe22 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 8006e58:	61f8      	str	r0, [r7, #28]
        break;
 8006e5a:	e010      	b.n	8006e7e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e5c:	4b4c      	ldr	r3, [pc, #304]	; (8006f90 <UART_SetConfig+0x4b0>)
 8006e5e:	61fb      	str	r3, [r7, #28]
        break;
 8006e60:	e00d      	b.n	8006e7e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e62:	f7fe fd6d 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006e66:	61f8      	str	r0, [r7, #28]
        break;
 8006e68:	e009      	b.n	8006e7e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e6e:	61fb      	str	r3, [r7, #28]
        break;
 8006e70:	e005      	b.n	8006e7e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d077      	beq.n	8006f74 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	005a      	lsls	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	441a      	add	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e98:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	2b0f      	cmp	r3, #15
 8006e9e:	d916      	bls.n	8006ece <UART_SetConfig+0x3ee>
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea6:	d212      	bcs.n	8006ece <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f023 030f 	bic.w	r3, r3, #15
 8006eb0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	085b      	lsrs	r3, r3, #1
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f003 0307 	and.w	r3, r3, #7
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	8afb      	ldrh	r3, [r7, #22]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	8afa      	ldrh	r2, [r7, #22]
 8006eca:	60da      	str	r2, [r3, #12]
 8006ecc:	e052      	b.n	8006f74 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ed4:	e04e      	b.n	8006f74 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	d827      	bhi.n	8006f2e <UART_SetConfig+0x44e>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <UART_SetConfig+0x404>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006f09 	.word	0x08006f09
 8006ee8:	08006f11 	.word	0x08006f11
 8006eec:	08006f19 	.word	0x08006f19
 8006ef0:	08006f2f 	.word	0x08006f2f
 8006ef4:	08006f1f 	.word	0x08006f1f
 8006ef8:	08006f2f 	.word	0x08006f2f
 8006efc:	08006f2f 	.word	0x08006f2f
 8006f00:	08006f2f 	.word	0x08006f2f
 8006f04:	08006f27 	.word	0x08006f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f08:	f7fe fdb2 	bl	8005a70 <HAL_RCC_GetPCLK1Freq>
 8006f0c:	61f8      	str	r0, [r7, #28]
        break;
 8006f0e:	e014      	b.n	8006f3a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f10:	f7fe fdc4 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 8006f14:	61f8      	str	r0, [r7, #28]
        break;
 8006f16:	e010      	b.n	8006f3a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f18:	4b1d      	ldr	r3, [pc, #116]	; (8006f90 <UART_SetConfig+0x4b0>)
 8006f1a:	61fb      	str	r3, [r7, #28]
        break;
 8006f1c:	e00d      	b.n	8006f3a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f1e:	f7fe fd0f 	bl	8005940 <HAL_RCC_GetSysClockFreq>
 8006f22:	61f8      	str	r0, [r7, #28]
        break;
 8006f24:	e009      	b.n	8006f3a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f2a:	61fb      	str	r3, [r7, #28]
        break;
 8006f2c:	e005      	b.n	8006f3a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f38:	bf00      	nop
    }

    if (pclk != 0U)
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d019      	beq.n	8006f74 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	085a      	lsrs	r2, r3, #1
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	441a      	add	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f52:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b0f      	cmp	r3, #15
 8006f58:	d909      	bls.n	8006f6e <UART_SetConfig+0x48e>
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f60:	d205      	bcs.n	8006f6e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	60da      	str	r2, [r3, #12]
 8006f6c:	e002      	b.n	8006f74 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3728      	adds	r7, #40	; 0x28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f8e:	bf00      	nop
 8006f90:	00f42400 	.word	0x00f42400

08006f94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa0:	f003 0308 	and.w	r3, r3, #8
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	430a      	orrs	r2, r1
 8007022:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01a      	beq.n	80070aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007092:	d10a      	bne.n	80070aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	605a      	str	r2, [r3, #4]
  }
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b098      	sub	sp, #96	; 0x60
 80070dc:	af02      	add	r7, sp, #8
 80070de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070e8:	f7fb fa12 	bl	8002510 <HAL_GetTick>
 80070ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b08      	cmp	r3, #8
 80070fa:	d12e      	bne.n	800715a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007104:	2200      	movs	r2, #0
 8007106:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f88c 	bl	8007228 <UART_WaitOnFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d021      	beq.n	800715a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800712a:	653b      	str	r3, [r7, #80]	; 0x50
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007134:	647b      	str	r3, [r7, #68]	; 0x44
 8007136:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800713a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e6      	bne.n	8007116 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2220      	movs	r2, #32
 800714c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e062      	b.n	8007220 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b04      	cmp	r3, #4
 8007166:	d149      	bne.n	80071fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007168:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007170:	2200      	movs	r2, #0
 8007172:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f856 	bl	8007228 <UART_WaitOnFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d03c      	beq.n	80071fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	623b      	str	r3, [r7, #32]
   return(result);
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a0:	633b      	str	r3, [r7, #48]	; 0x30
 80071a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e6      	bne.n	8007182 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	3308      	adds	r3, #8
 80071ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	e853 3f00 	ldrex	r3, [r3]
 80071c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 0301 	bic.w	r3, r3, #1
 80071ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3308      	adds	r3, #8
 80071d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071d4:	61fa      	str	r2, [r7, #28]
 80071d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	69b9      	ldr	r1, [r7, #24]
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	617b      	str	r3, [r7, #20]
   return(result);
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e5      	bne.n	80071b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e011      	b.n	8007220 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3758      	adds	r7, #88	; 0x58
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	603b      	str	r3, [r7, #0]
 8007234:	4613      	mov	r3, r2
 8007236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007238:	e049      	b.n	80072ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007240:	d045      	beq.n	80072ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007242:	f7fb f965 	bl	8002510 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	429a      	cmp	r2, r3
 8007250:	d302      	bcc.n	8007258 <UART_WaitOnFlagUntilTimeout+0x30>
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e048      	b.n	80072ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0304 	and.w	r3, r3, #4
 8007266:	2b00      	cmp	r3, #0
 8007268:	d031      	beq.n	80072ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f003 0308 	and.w	r3, r3, #8
 8007274:	2b08      	cmp	r3, #8
 8007276:	d110      	bne.n	800729a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2208      	movs	r2, #8
 800727e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f838 	bl	80072f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2208      	movs	r2, #8
 800728a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e029      	b.n	80072ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072a8:	d111      	bne.n	80072ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f81e 	bl	80072f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2220      	movs	r2, #32
 80072be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e00f      	b.n	80072ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	4013      	ands	r3, r2
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	429a      	cmp	r2, r3
 80072dc:	bf0c      	ite	eq
 80072de:	2301      	moveq	r3, #1
 80072e0:	2300      	movne	r3, #0
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d0a6      	beq.n	800723a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072f6:	b480      	push	{r7}
 80072f8:	b095      	sub	sp, #84	; 0x54
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	461a      	mov	r2, r3
 800731a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731c:	643b      	str	r3, [r7, #64]	; 0x40
 800731e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800732a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e6      	bne.n	80072fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3308      	adds	r3, #8
 8007336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	f023 0301 	bic.w	r3, r3, #1
 8007346:	64bb      	str	r3, [r7, #72]	; 0x48
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3308      	adds	r3, #8
 800734e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007358:	e841 2300 	strex	r3, r2, [r1]
 800735c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1e5      	bne.n	8007330 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007368:	2b01      	cmp	r3, #1
 800736a:	d118      	bne.n	800739e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	60bb      	str	r3, [r7, #8]
   return(result);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f023 0310 	bic.w	r3, r3, #16
 8007380:	647b      	str	r3, [r7, #68]	; 0x44
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738a:	61bb      	str	r3, [r7, #24]
 800738c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6979      	ldr	r1, [r7, #20]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	613b      	str	r3, [r7, #16]
   return(result);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e6      	bne.n	800736c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073b2:	bf00      	nop
 80073b4:	3754      	adds	r7, #84	; 0x54
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <memset>:
 80073be:	4402      	add	r2, r0
 80073c0:	4603      	mov	r3, r0
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d100      	bne.n	80073c8 <memset+0xa>
 80073c6:	4770      	bx	lr
 80073c8:	f803 1b01 	strb.w	r1, [r3], #1
 80073cc:	e7f9      	b.n	80073c2 <memset+0x4>
	...

080073d0 <__libc_init_array>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	4d0d      	ldr	r5, [pc, #52]	; (8007408 <__libc_init_array+0x38>)
 80073d4:	4c0d      	ldr	r4, [pc, #52]	; (800740c <__libc_init_array+0x3c>)
 80073d6:	1b64      	subs	r4, r4, r5
 80073d8:	10a4      	asrs	r4, r4, #2
 80073da:	2600      	movs	r6, #0
 80073dc:	42a6      	cmp	r6, r4
 80073de:	d109      	bne.n	80073f4 <__libc_init_array+0x24>
 80073e0:	4d0b      	ldr	r5, [pc, #44]	; (8007410 <__libc_init_array+0x40>)
 80073e2:	4c0c      	ldr	r4, [pc, #48]	; (8007414 <__libc_init_array+0x44>)
 80073e4:	f000 f818 	bl	8007418 <_init>
 80073e8:	1b64      	subs	r4, r4, r5
 80073ea:	10a4      	asrs	r4, r4, #2
 80073ec:	2600      	movs	r6, #0
 80073ee:	42a6      	cmp	r6, r4
 80073f0:	d105      	bne.n	80073fe <__libc_init_array+0x2e>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f8:	4798      	blx	r3
 80073fa:	3601      	adds	r6, #1
 80073fc:	e7ee      	b.n	80073dc <__libc_init_array+0xc>
 80073fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007402:	4798      	blx	r3
 8007404:	3601      	adds	r6, #1
 8007406:	e7f2      	b.n	80073ee <__libc_init_array+0x1e>
 8007408:	08007480 	.word	0x08007480
 800740c:	08007480 	.word	0x08007480
 8007410:	08007480 	.word	0x08007480
 8007414:	08007484 	.word	0x08007484

08007418 <_init>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	bf00      	nop
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr

08007424 <_fini>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	bf00      	nop
 8007428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742a:	bc08      	pop	{r3}
 800742c:	469e      	mov	lr, r3
 800742e:	4770      	bx	lr
