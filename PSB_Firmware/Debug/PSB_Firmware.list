
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c3c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003dc8  08003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e08  08003e08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e08  08003e08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e08  08003e08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e08  08003e08  00013e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08003e1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08003e1c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a230  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c07  00000000  00000000  0002a2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a18  00000000  00000000  0002beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007af  00000000  00000000  0002c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020716  00000000  00000000  0002d07f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc0d  00000000  00000000  0004d795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c986e  00000000  00000000  000593a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002860  00000000  00000000  00122c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00125470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003db0 	.word	0x08003db0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003db0 	.word	0x08003db0

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fb8c 	bl	80008ec <HAL_Init>

  /* USER CODE BEGIN Init */
    aRxBuffer[0]=0x00;
 80001d4:	4b17      	ldr	r3, [pc, #92]	; (8000234 <main+0x68>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
    aTxBuffer[0]=0xAA;
 80001da:	4b17      	ldr	r3, [pc, #92]	; (8000238 <main+0x6c>)
 80001dc:	22aa      	movs	r2, #170	; 0xaa
 80001de:	701a      	strb	r2, [r3, #0]
    aTxBuffer[1]=0xBB;
 80001e0:	4b15      	ldr	r3, [pc, #84]	; (8000238 <main+0x6c>)
 80001e2:	22bb      	movs	r2, #187	; 0xbb
 80001e4:	705a      	strb	r2, [r3, #1]
    aTxBuffer[2]=0xCC;
 80001e6:	4b14      	ldr	r3, [pc, #80]	; (8000238 <main+0x6c>)
 80001e8:	22cc      	movs	r2, #204	; 0xcc
 80001ea:	709a      	strb	r2, [r3, #2]
    aTxBuffer[3]=0xDD;
 80001ec:	4b12      	ldr	r3, [pc, #72]	; (8000238 <main+0x6c>)
 80001ee:	22dd      	movs	r2, #221	; 0xdd
 80001f0:	70da      	strb	r2, [r3, #3]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f2:	f000 f827 	bl	8000244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f6:	f000 f8b7 	bl	8000368 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001fa:	f000 f875 	bl	80002e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
    if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80001fe:	480f      	ldr	r0, [pc, #60]	; (800023c <main+0x70>)
 8000200:	f001 f906 	bl	8001410 <HAL_I2C_EnableListen_IT>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <main+0x42>
    {
      /* Transfer error in reception process */
      Error_Handler();
 800020a:	f000 f9d1 	bl	80005b0 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
      while (1)
      {

		   if (Xfer_Complete ==1)
 800020e:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <main+0x74>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d1fb      	bne.n	800020e <main+0x42>
		   {
			HAL_Delay(1);
 8000216:	2001      	movs	r0, #1
 8000218:	f000 fbe4 	bl	80009e4 <HAL_Delay>
			 /*##- Put I2C peripheral in listen mode process ###########################*/
		 if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 800021c:	4807      	ldr	r0, [pc, #28]	; (800023c <main+0x70>)
 800021e:	f001 f8f7 	bl	8001410 <HAL_I2C_EnableListen_IT>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <main+0x60>
		 {
		   /* Transfer error in reception process */
		   Error_Handler();
 8000228:	f000 f9c2 	bl	80005b0 <Error_Handler>
		 }
		   Xfer_Complete =0;
 800022c:	4b04      	ldr	r3, [pc, #16]	; (8000240 <main+0x74>)
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
		   if (Xfer_Complete ==1)
 8000232:	e7ec      	b.n	800020e <main+0x42>
 8000234:	20000034 	.word	0x20000034
 8000238:	20000030 	.word	0x20000030
 800023c:	20000038 	.word	0x20000038
 8000240:	2000002c 	.word	0x2000002c

08000244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b096      	sub	sp, #88	; 0x58
 8000248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024a:	f107 0314 	add.w	r3, r7, #20
 800024e:	2244      	movs	r2, #68	; 0x44
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f003 fd80 	bl	8003d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000258:	463b      	mov	r3, r7
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]
 8000264:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000266:	f44f 7000 	mov.w	r0, #512	; 0x200
 800026a:	f002 fbe3 	bl	8002a34 <HAL_PWREx_ControlVoltageScaling>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000274:	f000 f99c 	bl	80005b0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	2302      	movs	r3, #2
 800027a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000280:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000282:	2310      	movs	r3, #16
 8000284:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000286:	2302      	movs	r3, #2
 8000288:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800028a:	2302      	movs	r3, #2
 800028c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800028e:	2301      	movs	r3, #1
 8000290:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000292:	230a      	movs	r3, #10
 8000294:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000296:	2307      	movs	r3, #7
 8000298:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800029a:	2302      	movs	r3, #2
 800029c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800029e:	2302      	movs	r3, #2
 80002a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0314 	add.w	r3, r7, #20
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fc1a 	bl	8002ae0 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002b2:	f000 f97d 	bl	80005b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ba:	2303      	movs	r3, #3
 80002bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002ca:	463b      	mov	r3, r7
 80002cc:	2104      	movs	r1, #4
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 f81a 	bl	8003308 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002da:	f000 f969 	bl	80005b0 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3758      	adds	r7, #88	; 0x58
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002ec:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_I2C1_Init+0x74>)
 80002ee:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <MX_I2C1_Init+0x78>)
 80002f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80002f2:	4b1a      	ldr	r3, [pc, #104]	; (800035c <MX_I2C1_Init+0x74>)
 80002f4:	4a1b      	ldr	r2, [pc, #108]	; (8000364 <MX_I2C1_Init+0x7c>)
 80002f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 50;
 80002f8:	4b18      	ldr	r3, [pc, #96]	; (800035c <MX_I2C1_Init+0x74>)
 80002fa:	2232      	movs	r2, #50	; 0x32
 80002fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_I2C1_Init+0x74>)
 8000300:	2201      	movs	r2, #1
 8000302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800030a:	4b14      	ldr	r3, [pc, #80]	; (800035c <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_I2C1_Init+0x74>)
 8000318:	2200      	movs	r2, #0
 800031a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_I2C1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000322:	480e      	ldr	r0, [pc, #56]	; (800035c <MX_I2C1_Init+0x74>)
 8000324:	f000 fe74 	bl	8001010 <HAL_I2C_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800032e:	f000 f93f 	bl	80005b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000332:	2100      	movs	r1, #0
 8000334:	4809      	ldr	r0, [pc, #36]	; (800035c <MX_I2C1_Init+0x74>)
 8000336:	f002 fad7 	bl	80028e8 <HAL_I2CEx_ConfigAnalogFilter>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000340:	f000 f936 	bl	80005b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000344:	2100      	movs	r1, #0
 8000346:	4805      	ldr	r0, [pc, #20]	; (800035c <MX_I2C1_Init+0x74>)
 8000348:	f002 fb19 	bl	800297e <HAL_I2CEx_ConfigDigitalFilter>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000352:	f000 f92d 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000038 	.word	0x20000038
 8000360:	40005400 	.word	0x40005400
 8000364:	10909cec 	.word	0x10909cec

08000368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	; 0x28
 800036c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036e:	f107 0314 	add.w	r3, r7, #20
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037e:	4b45      	ldr	r3, [pc, #276]	; (8000494 <MX_GPIO_Init+0x12c>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000382:	4a44      	ldr	r2, [pc, #272]	; (8000494 <MX_GPIO_Init+0x12c>)
 8000384:	f043 0304 	orr.w	r3, r3, #4
 8000388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038a:	4b42      	ldr	r3, [pc, #264]	; (8000494 <MX_GPIO_Init+0x12c>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038e:	f003 0304 	and.w	r3, r3, #4
 8000392:	613b      	str	r3, [r7, #16]
 8000394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000396:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <MX_GPIO_Init+0x12c>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039a:	4a3e      	ldr	r2, [pc, #248]	; (8000494 <MX_GPIO_Init+0x12c>)
 800039c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a2:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <MX_GPIO_Init+0x12c>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b39      	ldr	r3, [pc, #228]	; (8000494 <MX_GPIO_Init+0x12c>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a38      	ldr	r2, [pc, #224]	; (8000494 <MX_GPIO_Init+0x12c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b36      	ldr	r3, [pc, #216]	; (8000494 <MX_GPIO_Init+0x12c>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	4b33      	ldr	r3, [pc, #204]	; (8000494 <MX_GPIO_Init+0x12c>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ca:	4a32      	ldr	r2, [pc, #200]	; (8000494 <MX_GPIO_Init+0x12c>)
 80003cc:	f043 0302 	orr.w	r3, r3, #2
 80003d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003d2:	4b30      	ldr	r3, [pc, #192]	; (8000494 <MX_GPIO_Init+0x12c>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	f003 0302 	and.w	r3, r3, #2
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	21b0      	movs	r1, #176	; 0xb0
 80003e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e6:	f000 fdfb 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f0:	4829      	ldr	r0, [pc, #164]	; (8000498 <MX_GPIO_Init+0x130>)
 80003f2:	f000 fdf5 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	4619      	mov	r1, r3
 800040c:	4823      	ldr	r0, [pc, #140]	; (800049c <MX_GPIO_Init+0x134>)
 800040e:	f000 fc6d 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000412:	230c      	movs	r3, #12
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000416:	2302      	movs	r3, #2
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800041e:	2303      	movs	r3, #3
 8000420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000422:	2307      	movs	r3, #7
 8000424:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	4619      	mov	r1, r3
 800042c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000430:	f000 fc5c 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000434:	23b0      	movs	r3, #176	; 0xb0
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	2301      	movs	r3, #1
 800043a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000440:	2300      	movs	r3, #0
 8000442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000444:	f107 0314 	add.w	r3, r7, #20
 8000448:	4619      	mov	r1, r3
 800044a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800044e:	f000 fc4d 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000452:	2340      	movs	r3, #64	; 0x40
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800045a:	2301      	movs	r3, #1
 800045c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	4619      	mov	r1, r3
 8000464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000468:	f000 fc40 	bl	8000cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800046c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047a:	2300      	movs	r3, #0
 800047c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	4804      	ldr	r0, [pc, #16]	; (8000498 <MX_GPIO_Init+0x130>)
 8000486:	f000 fc31 	bl	8000cec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800048a:	bf00      	nop
 800048c:	3728      	adds	r7, #40	; 0x28
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	48000400 	.word	0x48000400
 800049c:	48000800 	.word	0x48000800

080004a0 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in transmission process is correct */

  Xfer_Complete = 1;
 80004a8:	4b10      	ldr	r3, [pc, #64]	; (80004ec <HAL_I2C_SlaveTxCpltCallback+0x4c>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	601a      	str	r2, [r3, #0]
  aTxBuffer[0]++;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	3301      	adds	r3, #1
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80004b8:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1]++;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80004bc:	785b      	ldrb	r3, [r3, #1]
 80004be:	3301      	adds	r3, #1
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80004c4:	705a      	strb	r2, [r3, #1]
  aTxBuffer[2]++;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80004c8:	789b      	ldrb	r3, [r3, #2]
 80004ca:	3301      	adds	r3, #1
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80004d0:	709a      	strb	r2, [r3, #2]
  aTxBuffer[3]++;
 80004d2:	4b07      	ldr	r3, [pc, #28]	; (80004f0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80004d4:	78db      	ldrb	r3, [r3, #3]
 80004d6:	3301      	adds	r3, #1
 80004d8:	b2da      	uxtb	r2, r3
 80004da:	4b05      	ldr	r3, [pc, #20]	; (80004f0 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 80004dc:	70da      	strb	r2, [r3, #3]

}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	2000002c 	.word	0x2000002c
 80004f0:	20000030 	.word	0x20000030

080004f4 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in reception process is correct */

  Xfer_Complete = 1;
 80004fc:	4b04      	ldr	r3, [pc, #16]	; (8000510 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80004fe:	2201      	movs	r2, #1
 8000500:	601a      	str	r2, [r3, #0]
  //aRxBuffer[0]=0x00;
  //aRxBuffer[1]=0x00;
  //aRxBuffer[2]=0x00;
  //aRxBuffer[3]=0x00;

}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	2000002c 	.word	0x2000002c

08000514 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
 8000520:	4613      	mov	r3, r2
 8000522:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	4a11      	ldr	r2, [pc, #68]	; (800056c <HAL_I2C_AddrCallback+0x58>)
 8000528:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <HAL_I2C_AddrCallback+0x58>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00c      	beq.n	800054c <HAL_I2C_AddrCallback+0x38>
  {
     /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "aTxBuffer" buffer */
  if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8000532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000536:	2204      	movs	r2, #4
 8000538:	490d      	ldr	r1, [pc, #52]	; (8000570 <HAL_I2C_AddrCallback+0x5c>)
 800053a:	480e      	ldr	r0, [pc, #56]	; (8000574 <HAL_I2C_AddrCallback+0x60>)
 800053c:	f000 fe04 	bl	8001148 <HAL_I2C_Slave_Seq_Transmit_IT>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00e      	beq.n	8000564 <HAL_I2C_AddrCallback+0x50>

    {
    /* Transfer error in transmission process */
    Error_Handler();
 8000546:	f000 f833 	bl	80005b0 <Error_Handler>
    Error_Handler();
  }

  }

}
 800054a:	e00b      	b.n	8000564 <HAL_I2C_AddrCallback+0x50>
  if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 800054c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000550:	2201      	movs	r2, #1
 8000552:	4909      	ldr	r1, [pc, #36]	; (8000578 <HAL_I2C_AddrCallback+0x64>)
 8000554:	4807      	ldr	r0, [pc, #28]	; (8000574 <HAL_I2C_AddrCallback+0x60>)
 8000556:	f000 fea9 	bl	80012ac <HAL_I2C_Slave_Seq_Receive_IT>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <HAL_I2C_AddrCallback+0x50>
    Error_Handler();
 8000560:	f000 f826 	bl	80005b0 <Error_Handler>
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000028 	.word	0x20000028
 8000570:	20000030 	.word	0x20000030
 8000574:	20000038 	.word	0x20000038
 8000578:	20000034 	.word	0x20000034

0800057c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f001 f800 	bl	800159e <HAL_I2C_GetError>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b04      	cmp	r3, #4
 80005a2:	d001      	beq.n	80005a8 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 80005a4:	f000 f804 	bl	80005b0 <Error_Handler>
  }
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
}
 80005b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <Error_Handler+0x8>
	...

080005bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_MspInit+0x44>)
 80005c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_MspInit+0x44>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6613      	str	r3, [r2, #96]	; 0x60
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_MspInit+0x44>)
 80005d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <HAL_MspInit+0x44>)
 80005dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <HAL_MspInit+0x44>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	6593      	str	r3, [r2, #88]	; 0x58
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_MspInit+0x44>)
 80005e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b0a6      	sub	sp, #152	; 0x98
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000620:	2260      	movs	r2, #96	; 0x60
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f003 fb97 	bl	8003d58 <memset>
  if(hi2c->Instance==I2C1)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a6c      	ldr	r2, [pc, #432]	; (80007e0 <HAL_I2C_MspInit+0x1dc>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d14d      	bne.n	80006d0 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000634:	2340      	movs	r3, #64	; 0x40
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000638:	2300      	movs	r3, #0
 800063a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000640:	4618      	mov	r0, r3
 8000642:	f003 f84d 	bl	80036e0 <HAL_RCCEx_PeriphCLKConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800064c:	f7ff ffb0 	bl	80005b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b64      	ldr	r3, [pc, #400]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 8000652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000654:	4a63      	ldr	r2, [pc, #396]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065c:	4b61      	ldr	r3, [pc, #388]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 800065e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	623b      	str	r3, [r7, #32]
 8000666:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000668:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800066c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000670:	2312      	movs	r3, #18
 8000672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000676:	2301      	movs	r3, #1
 8000678:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000682:	2304      	movs	r3, #4
 8000684:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800068c:	4619      	mov	r1, r3
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f000 fb2b 	bl	8000cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000696:	4b53      	ldr	r3, [pc, #332]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 8000698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800069a:	4a52      	ldr	r2, [pc, #328]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 800069c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a0:	6593      	str	r3, [r2, #88]	; 0x58
 80006a2:	4b50      	ldr	r3, [pc, #320]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 80006a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006aa:	61fb      	str	r3, [r7, #28]
 80006ac:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2100      	movs	r1, #0
 80006b2:	201f      	movs	r0, #31
 80006b4:	f000 fa95 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80006b8:	201f      	movs	r0, #31
 80006ba:	f000 faae 	bl	8000c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2020      	movs	r0, #32
 80006c4:	f000 fa8d 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80006c8:	2020      	movs	r0, #32
 80006ca:	f000 faa6 	bl	8000c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80006ce:	e082      	b.n	80007d6 <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C2)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a44      	ldr	r2, [pc, #272]	; (80007e8 <HAL_I2C_MspInit+0x1e4>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d13c      	bne.n	8000754 <HAL_I2C_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006de:	2300      	movs	r3, #0
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fffa 	bl	80036e0 <HAL_RCCEx_PeriphCLKConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 80006f2:	f7ff ff5d 	bl	80005b0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	4a3a      	ldr	r2, [pc, #232]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000702:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800070e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000716:	2312      	movs	r3, #18
 8000718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000728:	2304      	movs	r3, #4
 800072a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000732:	4619      	mov	r1, r3
 8000734:	482d      	ldr	r0, [pc, #180]	; (80007ec <HAL_I2C_MspInit+0x1e8>)
 8000736:	f000 fad9 	bl	8000cec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	4a29      	ldr	r2, [pc, #164]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 8000740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000744:	6593      	str	r3, [r2, #88]	; 0x58
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
}
 8000752:	e040      	b.n	80007d6 <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <HAL_I2C_MspInit+0x1ec>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d13b      	bne.n	80007d6 <HAL_I2C_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800075e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000764:	2300      	movs	r3, #0
 8000766:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076c:	4618      	mov	r0, r3
 800076e:	f002 ffb7 	bl	80036e0 <HAL_RCCEx_PeriphCLKConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <HAL_I2C_MspInit+0x178>
      Error_Handler();
 8000778:	f7ff ff1a 	bl	80005b0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 800077e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000780:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 800078a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000794:	2303      	movs	r3, #3
 8000796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079a:	2312      	movs	r3, #18
 800079c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80007ac:	2304      	movs	r3, #4
 80007ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80007b6:	4619      	mov	r1, r3
 80007b8:	480e      	ldr	r0, [pc, #56]	; (80007f4 <HAL_I2C_MspInit+0x1f0>)
 80007ba:	f000 fa97 	bl	8000cec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80007be:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c2:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 80007c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007c8:	6593      	str	r3, [r2, #88]	; 0x58
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_I2C_MspInit+0x1e0>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
}
 80007d6:	bf00      	nop
 80007d8:	3798      	adds	r7, #152	; 0x98
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40005400 	.word	0x40005400
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40005800 	.word	0x40005800
 80007ec:	48000400 	.word	0x48000400
 80007f0:	40005c00 	.word	0x40005c00
 80007f4:	48000800 	.word	0x48000800

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f8ae 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <I2C1_EV_IRQHandler+0x10>)
 8000852:	f000 fdfd 	bl	8001450 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000038 	.word	0x20000038

08000860 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000864:	4802      	ldr	r0, [pc, #8]	; (8000870 <I2C1_ER_IRQHandler+0x10>)
 8000866:	f000 fe0d 	bl	8001484 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000038 	.word	0x20000038

08000874 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <SystemInit+0x20>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <SystemInit+0x20>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800089c:	f7ff ffea 	bl	8000874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a2:	490d      	ldr	r1, [pc, #52]	; (80008d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <LoopForever+0xe>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a8:	e002      	b.n	80008b0 <LoopCopyDataInit>

080008aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ae:	3304      	adds	r3, #4

080008b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b4:	d3f9      	bcc.n	80008aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b6:	4a0a      	ldr	r2, [pc, #40]	; (80008e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b8:	4c0a      	ldr	r4, [pc, #40]	; (80008e4 <LoopForever+0x16>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008bc:	e001      	b.n	80008c2 <LoopFillZerobss>

080008be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c0:	3204      	adds	r2, #4

080008c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c4:	d3fb      	bcc.n	80008be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c6:	f003 fa4f 	bl	8003d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ca:	f7ff fc7f 	bl	80001cc <main>

080008ce <LoopForever>:

LoopForever:
    b LoopForever
 80008ce:	e7fe      	b.n	80008ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008dc:	08003e10 	.word	0x08003e10
  ldr r2, =_sbss
 80008e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e4:	20000090 	.word	0x20000090

080008e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e8:	e7fe      	b.n	80008e8 <ADC1_IRQHandler>
	...

080008ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <HAL_Init+0x3c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <HAL_Init+0x3c>)
 80008fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000900:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000902:	2003      	movs	r0, #3
 8000904:	f000 f962 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000908:	2000      	movs	r0, #0
 800090a:	f000 f80f 	bl	800092c <HAL_InitTick>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d002      	beq.n	800091a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	e001      	b.n	800091e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800091a:	f7ff fe4f 	bl	80005bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800091e:	79fb      	ldrb	r3, [r7, #7]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40022000 	.word	0x40022000

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_InitTick+0x6c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d023      	beq.n	8000988 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_InitTick+0x70>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_InitTick+0x6c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f96d 	bl	8000c36 <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10f      	bne.n	8000982 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d809      	bhi.n	800097c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000970:	f000 f937 	bl	8000be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_InitTick+0x74>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	e007      	b.n	800098c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	e004      	b.n	800098c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e001      	b.n	800098c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x20>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x24>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_IncTick+0x24>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008
 80009c8:	2000008c 	.word	0x2000008c

080009cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_GetTick+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	2000008c 	.word	0x2000008c

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff ffee 	bl	80009cc <HAL_GetTick>
 80009f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009fc:	d005      	beq.n	8000a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Delay+0x44>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0a:	bf00      	nop
 8000a0c:	f7ff ffde 	bl	80009cc <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8f7      	bhi.n	8000a0c <HAL_Delay+0x28>
  {
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4907      	ldr	r1, [pc, #28]	; (8000ac8 <__NVIC_EnableIRQ+0x38>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff29 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf4:	f7ff ff3e 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f7ff ff8e 	bl	8000b20 <NVIC_EncodePriority>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff5d 	bl	8000acc <__NVIC_SetPriority>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff31 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffa2 	bl	8000b88 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d005      	beq.n	8000c72 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2204      	movs	r2, #4
 8000c6a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	e029      	b.n	8000cc6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 020e 	bic.w	r2, r2, #14
 8000c80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 0201 	bic.w	r2, r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f003 021c 	and.w	r2, r3, #28
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	4798      	blx	r3
    }
  }
  return status;
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cde:	b2db      	uxtb	r3, r3
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cfa:	e154      	b.n	8000fa6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8146 	beq.w	8000fa0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d005      	beq.n	8000d2c <HAL_GPIO_Init+0x40>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d130      	bne.n	8000d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	2203      	movs	r2, #3
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d62:	2201      	movs	r2, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	f003 0201 	and.w	r2, r3, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d017      	beq.n	8000dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	68db      	ldr	r3, [r3, #12]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d123      	bne.n	8000e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	6939      	ldr	r1, [r7, #16]
 8000e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0203 	and.w	r2, r3, #3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 80a0 	beq.w	8000fa0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e60:	4b58      	ldr	r3, [pc, #352]	; (8000fc4 <HAL_GPIO_Init+0x2d8>)
 8000e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e64:	4a57      	ldr	r2, [pc, #348]	; (8000fc4 <HAL_GPIO_Init+0x2d8>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6c:	4b55      	ldr	r3, [pc, #340]	; (8000fc4 <HAL_GPIO_Init+0x2d8>)
 8000e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e78:	4a53      	ldr	r2, [pc, #332]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	089b      	lsrs	r3, r3, #2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ea2:	d019      	beq.n	8000ed8 <HAL_GPIO_Init+0x1ec>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a49      	ldr	r2, [pc, #292]	; (8000fcc <HAL_GPIO_Init+0x2e0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d013      	beq.n	8000ed4 <HAL_GPIO_Init+0x1e8>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <HAL_GPIO_Init+0x2e4>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d00d      	beq.n	8000ed0 <HAL_GPIO_Init+0x1e4>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a47      	ldr	r2, [pc, #284]	; (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d007      	beq.n	8000ecc <HAL_GPIO_Init+0x1e0>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a46      	ldr	r2, [pc, #280]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d101      	bne.n	8000ec8 <HAL_GPIO_Init+0x1dc>
 8000ec4:	2304      	movs	r3, #4
 8000ec6:	e008      	b.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ec8:	2307      	movs	r3, #7
 8000eca:	e006      	b.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e004      	b.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	e002      	b.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e000      	b.n	8000eda <HAL_GPIO_Init+0x1ee>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	f002 0203 	and.w	r2, r2, #3
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	4093      	lsls	r3, r2
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eea:	4937      	ldr	r1, [pc, #220]	; (8000fc8 <HAL_GPIO_Init+0x2dc>)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ef8:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f1c:	4a2f      	ldr	r2, [pc, #188]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f46:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f70:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f47f aea3 	bne.w	8000cfc <HAL_GPIO_Init+0x10>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	371c      	adds	r7, #28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40010000 	.word	0x40010000
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000800 	.word	0x48000800
 8000fd4:	48000c00 	.word	0x48000c00
 8000fd8:	48001000 	.word	0x48001000
 8000fdc:	40010400 	.word	0x40010400

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e08d      	b.n	800113e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fae4 	bl	8000604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2224      	movs	r2, #36	; 0x24
 8001040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0201 	bic.w	r2, r2, #1
 8001052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001060:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001070:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d107      	bne.n	800108a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	e006      	b.n	8001098 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001096:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d108      	bne.n	80010b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	e007      	b.n	80010c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69d9      	ldr	r1, [r3, #28]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1a      	ldr	r2, [r3, #32]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0201 	orr.w	r2, r2, #1
 800111e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2220      	movs	r2, #32
 800112a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	4613      	mov	r3, r2
 8001156:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800115e:	b2db      	uxtb	r3, r3
 8001160:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001164:	2b28      	cmp	r3, #40	; 0x28
 8001166:	f040 8098 	bne.w	800129a <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8001170:	88fb      	ldrh	r3, [r7, #6]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d105      	bne.n	8001182 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e08c      	b.n	800129c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001182:	f248 0101 	movw	r1, #32769	; 0x8001
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f001 fb50 	bl	800282c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8001196:	2302      	movs	r3, #2
 8001198:	e080      	b.n	800129c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b2a      	cmp	r3, #42	; 0x2a
 80011ac:	d12a      	bne.n	8001204 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80011ae:	2102      	movs	r1, #2
 80011b0:	68f8      	ldr	r0, [r7, #12]
 80011b2:	f001 fb3b 	bl	800282c <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011c4:	d11e      	bne.n	8001204 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d012      	beq.n	8001204 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011e2:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80011e4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fd2f 	bl	8000c4e <HAL_DMA_Abort_IT>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001200:	4610      	mov	r0, r2
 8001202:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2229      	movs	r2, #41	; 0x29
 8001208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2220      	movs	r2, #32
 8001210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2200      	movs	r2, #0
 8001218:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001228:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	88fa      	ldrh	r2, [r7, #6]
 8001234:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800123a:	b29a      	uxth	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b08      	cmp	r3, #8
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	0c1b      	lsrs	r3, r3, #16
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b01      	cmp	r3, #1
 8001274:	d106      	bne.n	8001284 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8001276:	7dfb      	ldrb	r3, [r7, #23]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2208      	movs	r2, #8
 8001282:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800128c:	f248 0101 	movw	r1, #32769	; 0x8001
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f001 fa47 	bl	8002724 <I2C_Enable_IRQ>

    return HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	e000      	b.n	800129c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
  }
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	08002683 	.word	0x08002683
 80012a8:	080015b7 	.word	0x080015b7

080012ac <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80012c8:	2b28      	cmp	r3, #40	; 0x28
 80012ca:	f040 8098 	bne.w	80013fe <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012e0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e08c      	b.n	8001400 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80012e6:	f248 0102 	movw	r1, #32770	; 0x8002
 80012ea:	68f8      	ldr	r0, [r7, #12]
 80012ec:	f001 fa9e 	bl	800282c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80012fa:	2302      	movs	r3, #2
 80012fc:	e080      	b.n	8001400 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2201      	movs	r2, #1
 8001302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b29      	cmp	r3, #41	; 0x29
 8001310:	d12a      	bne.n	8001368 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001312:	2101      	movs	r1, #1
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f001 fa89 	bl	800282c <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001328:	d11e      	bne.n	8001368 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001338:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	2b00      	cmp	r3, #0
 8001340:	d012      	beq.n	8001368 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001346:	4a30      	ldr	r2, [pc, #192]	; (8001408 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001348:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fc7d 	bl	8000c4e <HAL_DMA_Abort_IT>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001364:	4610      	mov	r0, r2
 8001366:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	222a      	movs	r2, #42	; 0x2a
 800136c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2220      	movs	r2, #32
 8001374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800138c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	88fa      	ldrh	r2, [r7, #6]
 8001398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139e:	b29a      	uxth	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	0c1b      	lsrs	r3, r3, #16
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2208      	movs	r2, #8
 80013e6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80013f0:	f248 0102 	movw	r1, #32770	; 0x8002
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f001 f995 	bl	8002724 <I2C_Enable_IRQ>

    return HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e000      	b.n	8001400 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
  }
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	08002683 	.word	0x08002683
 800140c:	080015b7 	.word	0x080015b7

08001410 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b20      	cmp	r3, #32
 8001422:	d10d      	bne.n	8001440 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2228      	movs	r2, #40	; 0x28
 8001428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_I2C_EnableListen_IT+0x3c>)
 8001430:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f001 f974 	bl	8002724 <I2C_Enable_IRQ>

    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001440:	2302      	movs	r3, #2
  }
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	080015b7 	.word	0x080015b7

08001450 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	68f9      	ldr	r1, [r7, #12]
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4798      	blx	r3
  }
}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00f      	beq.n	80014c6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00a      	beq.n	80014c6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b4:	f043 0201 	orr.w	r2, r3, #1
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00f      	beq.n	80014f0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00a      	beq.n	80014f0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f043 0208 	orr.w	r2, r3, #8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00f      	beq.n	800151a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00a      	beq.n	800151a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f043 0202 	orr.w	r2, r3, #2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001518:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 030b 	and.w	r3, r3, #11
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 ff6d 	bl	800240c <I2C_ITError>
  }
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <I2C_Slave_ISR_IT+0x24>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e0e1      	b.n	800179e <I2C_Slave_ISR_IT+0x1e8>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80015f6:	6939      	ldr	r1, [r7, #16]
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f000 fda1 	bl	8002140 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	2b00      	cmp	r3, #0
 8001606:	d04b      	beq.n	80016a0 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800160e:	2b00      	cmp	r3, #0
 8001610:	d046      	beq.n	80016a0 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d128      	bne.n	800166e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b28      	cmp	r3, #40	; 0x28
 8001626:	d108      	bne.n	800163a <I2C_Slave_ISR_IT+0x84>
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800162e:	d104      	bne.n	800163a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001630:	6939      	ldr	r1, [r7, #16]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fe96 	bl	8002364 <I2C_ITListenCplt>
 8001638:	e031      	b.n	800169e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b29      	cmp	r3, #41	; 0x29
 8001644:	d10e      	bne.n	8001664 <I2C_Slave_ISR_IT+0xae>
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800164c:	d00a      	beq.n	8001664 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2210      	movs	r2, #16
 8001654:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 ffef 	bl	800263a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 fc4a 	bl	8001ef6 <I2C_ITSlaveSeqCplt>
 8001662:	e01c      	b.n	800169e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2210      	movs	r2, #16
 800166a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800166c:	e08f      	b.n	800178e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2210      	movs	r2, #16
 8001674:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f043 0204 	orr.w	r2, r3, #4
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <I2C_Slave_ISR_IT+0xda>
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800168e:	d17e      	bne.n	800178e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	4619      	mov	r1, r3
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 feb8 	bl	800240c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800169c:	e077      	b.n	800178e <I2C_Slave_ISR_IT+0x1d8>
 800169e:	e076      	b.n	800178e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	f003 0304 	and.w	r3, r3, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d02f      	beq.n	800170a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d02a      	beq.n	800170a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d018      	beq.n	80016f0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d14b      	bne.n	8001792 <I2C_Slave_ISR_IT+0x1dc>
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001700:	d047      	beq.n	8001792 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 fbf7 	bl	8001ef6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001708:	e043      	b.n	8001792 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d009      	beq.n	8001728 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800171a:	2b00      	cmp	r3, #0
 800171c:	d004      	beq.n	8001728 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800171e:	6939      	ldr	r1, [r7, #16]
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 fb27 	bl	8001d74 <I2C_ITAddrCplt>
 8001726:	e035      	b.n	8001794 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d030      	beq.n	8001794 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001738:	2b00      	cmp	r3, #0
 800173a:	d02b      	beq.n	8001794 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29b      	uxth	r3, r3
 8001742:	2b00      	cmp	r3, #0
 8001744:	d018      	beq.n	8001778 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	781a      	ldrb	r2, [r3, #0]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001760:	b29b      	uxth	r3, r3
 8001762:	3b01      	subs	r3, #1
 8001764:	b29a      	uxth	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176e:	3b01      	subs	r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	851a      	strh	r2, [r3, #40]	; 0x28
 8001776:	e00d      	b.n	8001794 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800177e:	d002      	beq.n	8001786 <I2C_Slave_ISR_IT+0x1d0>
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d106      	bne.n	8001794 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f000 fbb5 	bl	8001ef6 <I2C_ITSlaveSeqCplt>
 800178c:	e002      	b.n	8001794 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800178e:	bf00      	nop
 8001790:	e000      	b.n	8001794 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001792:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b088      	sub	sp, #32
 80017aa:	af02      	add	r7, sp, #8
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <I2C_Master_ISR_DMA+0x1a>
 80017bc:	2302      	movs	r3, #2
 80017be:	e0d9      	b.n	8001974 <I2C_Master_ISR_DMA+0x1ce>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d016      	beq.n	8001800 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d011      	beq.n	8001800 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2210      	movs	r2, #16
 80017e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f043 0204 	orr.w	r2, r3, #4
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80017f0:	2120      	movs	r1, #32
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 ff96 	bl	8002724 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 ff1e 	bl	800263a <I2C_Flush_TXDR>
 80017fe:	e0b4      	b.n	800196a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	2b00      	cmp	r3, #0
 8001808:	d071      	beq.n	80018ee <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001810:	2b00      	cmp	r3, #0
 8001812:	d06c      	beq.n	80018ee <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001822:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001828:	b29b      	uxth	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d04e      	beq.n	80018cc <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	b29b      	uxth	r3, r3
 8001836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800183a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001840:	b29b      	uxth	r3, r3
 8001842:	2bff      	cmp	r3, #255	; 0xff
 8001844:	d906      	bls.n	8001854 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	22ff      	movs	r2, #255	; 0xff
 800184a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800184c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e010      	b.n	8001876 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001866:	d003      	beq.n	8001870 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e002      	b.n	8001876 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001874:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187a:	b2da      	uxtb	r2, r3
 800187c:	8a79      	ldrh	r1, [r7, #18]
 800187e:	2300      	movs	r3, #0
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 ff1b 	bl	80026c0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b22      	cmp	r3, #34	; 0x22
 80018a6:	d108      	bne.n	80018ba <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018b8:	e057      	b.n	800196a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018c8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018ca:	e04e      	b.n	800196a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018da:	d003      	beq.n	80018e4 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 facd 	bl	8001e7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80018e2:	e042      	b.n	800196a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80018e4:	2140      	movs	r1, #64	; 0x40
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 fd90 	bl	800240c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80018ec:	e03d      	b.n	800196a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d028      	beq.n	800194a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d023      	beq.n	800194a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001906:	b29b      	uxth	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d119      	bne.n	8001940 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800191a:	d025      	beq.n	8001968 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001924:	d108      	bne.n	8001938 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001934:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001936:	e017      	b.n	8001968 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fa9f 	bl	8001e7c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800193e:	e013      	b.n	8001968 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001940:	2140      	movs	r1, #64	; 0x40
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fd62 	bl	800240c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001948:	e00e      	b.n	8001968 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00a      	beq.n	800196a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 fb25 	bl	8001fb0 <I2C_ITMasterCplt>
 8001966:	e000      	b.n	800196a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8001968:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3718      	adds	r7, #24
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001988:	4b8d      	ldr	r3, [pc, #564]	; (8001bc0 <I2C_Mem_ISR_DMA+0x244>)
 800198a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <I2C_Mem_ISR_DMA+0x1e>
 8001996:	2302      	movs	r3, #2
 8001998:	e10e      	b.n	8001bb8 <I2C_Mem_ISR_DMA+0x23c>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d016      	beq.n	80019da <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d011      	beq.n	80019da <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2210      	movs	r2, #16
 80019bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f043 0204 	orr.w	r2, r3, #4
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80019ca:	2120      	movs	r1, #32
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 fea9 	bl	8002724 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fe31 	bl	800263a <I2C_Flush_TXDR>
 80019d8:	e0e9      	b.n	8001bae <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00e      	beq.n	8001a02 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019fe:	651a      	str	r2, [r3, #80]	; 0x50
 8001a00:	e0d5      	b.n	8001bae <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d05f      	beq.n	8001acc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d05a      	beq.n	8001acc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001a16:	2101      	movs	r1, #1
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 ff07 	bl	800282c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001a1e:	2110      	movs	r1, #16
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 fe7f 	bl	8002724 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d048      	beq.n	8001ac2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2bff      	cmp	r3, #255	; 0xff
 8001a38:	d910      	bls.n	8001a5c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	22ff      	movs	r2, #255	; 0xff
 8001a3e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	b299      	uxth	r1, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 fe33 	bl	80026c0 <I2C_TransferConfig>
 8001a5a:	e011      	b.n	8001a80 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	b299      	uxth	r1, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	2300      	movs	r3, #0
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 fe20 	bl	80026c0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b22      	cmp	r3, #34	; 0x22
 8001a9c:	d108      	bne.n	8001ab0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001aae:	e07e      	b.n	8001bae <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001abe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001ac0:	e075      	b.n	8001bae <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001ac2:	2140      	movs	r1, #64	; 0x40
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fca1 	bl	800240c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001aca:	e070      	b.n	8001bae <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d05d      	beq.n	8001b92 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d058      	beq.n	8001b92 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f000 fea2 	bl	800282c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001ae8:	2110      	movs	r1, #16
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 fe1a 	bl	8002724 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b22      	cmp	r3, #34	; 0x22
 8001afa:	d101      	bne.n	8001b00 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <I2C_Mem_ISR_DMA+0x248>)
 8001afe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2bff      	cmp	r3, #255	; 0xff
 8001b08:	d910      	bls.n	8001b2c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	22ff      	movs	r2, #255	; 0xff
 8001b0e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b14:	b299      	uxth	r1, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fdcb 	bl	80026c0 <I2C_TransferConfig>
 8001b2a:	e011      	b.n	8001b50 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	b299      	uxth	r1, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 fdb8 	bl	80026c0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b22      	cmp	r3, #34	; 0x22
 8001b6c:	d108      	bne.n	8001b80 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b7e:	e016      	b.n	8001bae <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b8e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b90:	e00d      	b.n	8001bae <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f003 0320 	and.w	r3, r3, #32
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 fa01 	bl	8001fb0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	80002000 	.word	0x80002000
 8001bc4:	80002400 	.word	0x80002400

08001bc8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d101      	bne.n	8001bec <I2C_Slave_ISR_DMA+0x24>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e0bf      	b.n	8001d6c <I2C_Slave_ISR_DMA+0x1a4>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 fa98 	bl	8002140 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8095 	beq.w	8001d46 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 808f 	beq.w	8001d46 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d104      	bne.n	8001c3c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d07d      	beq.n	8001d38 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00c      	beq.n	8001c5e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d007      	beq.n	8001c5e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00c      	beq.n	8001c80 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d128      	bne.n	8001cd8 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b28      	cmp	r3, #40	; 0x28
 8001c90:	d108      	bne.n	8001ca4 <I2C_Slave_ISR_DMA+0xdc>
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c98:	d104      	bne.n	8001ca4 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fb61 	bl	8002364 <I2C_ITListenCplt>
 8001ca2:	e048      	b.n	8001d36 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b29      	cmp	r3, #41	; 0x29
 8001cae:	d10e      	bne.n	8001cce <I2C_Slave_ISR_DMA+0x106>
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cb6:	d00a      	beq.n	8001cce <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2210      	movs	r2, #16
 8001cbe:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 fcba 	bl	800263a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f915 	bl	8001ef6 <I2C_ITSlaveSeqCplt>
 8001ccc:	e033      	b.n	8001d36 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2210      	movs	r2, #16
 8001cd4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001cd6:	e034      	b.n	8001d42 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2210      	movs	r2, #16
 8001cde:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	f043 0204 	orr.w	r2, r3, #4
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <I2C_Slave_ISR_DMA+0x13a>
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d11f      	bne.n	8001d42 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b21      	cmp	r3, #33	; 0x21
 8001d06:	d002      	beq.n	8001d0e <I2C_Slave_ISR_DMA+0x146>
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	2b29      	cmp	r3, #41	; 0x29
 8001d0c:	d103      	bne.n	8001d16 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2221      	movs	r2, #33	; 0x21
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
 8001d14:	e008      	b.n	8001d28 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d16:	7dfb      	ldrb	r3, [r7, #23]
 8001d18:	2b22      	cmp	r3, #34	; 0x22
 8001d1a:	d002      	beq.n	8001d22 <I2C_Slave_ISR_DMA+0x15a>
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d20:	d102      	bne.n	8001d28 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2222      	movs	r2, #34	; 0x22
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fb6c 	bl	800240c <I2C_ITError>
      if (treatdmanack == 1U)
 8001d34:	e005      	b.n	8001d42 <I2C_Slave_ISR_DMA+0x17a>
 8001d36:	e004      	b.n	8001d42 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2210      	movs	r2, #16
 8001d3e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d40:	e00f      	b.n	8001d62 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8001d42:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001d44:	e00d      	b.n	8001d62 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f809 	bl	8001d74 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3720      	adds	r7, #32
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001d8a:	2b28      	cmp	r3, #40	; 0x28
 8001d8c:	d16a      	bne.n	8001e64 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	0c1b      	lsrs	r3, r3, #16
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	0c1b      	lsrs	r3, r3, #16
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001dac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001dba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001dc8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d138      	bne.n	8001e44 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001dd2:	897b      	ldrh	r3, [r7, #10]
 8001dd4:	09db      	lsrs	r3, r3, #7
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	89bb      	ldrh	r3, [r7, #12]
 8001dda:	4053      	eors	r3, r2
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	f003 0306 	and.w	r3, r3, #6
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d11c      	bne.n	8001e20 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001de6:	897b      	ldrh	r3, [r7, #10]
 8001de8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d13b      	bne.n	8001e74 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2208      	movs	r2, #8
 8001e08:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e12:	89ba      	ldrh	r2, [r7, #12]
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	4619      	mov	r1, r3
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7fe fb7b 	bl	8000514 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001e1e:	e029      	b.n	8001e74 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001e20:	893b      	ldrh	r3, [r7, #8]
 8001e22:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 fcff 	bl	800282c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e36:	89ba      	ldrh	r2, [r7, #12]
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7fe fb69 	bl	8000514 <HAL_I2C_AddrCallback>
}
 8001e42:	e017      	b.n	8001e74 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001e44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 fcef 	bl	800282c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001e56:	89ba      	ldrh	r2, [r7, #12]
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7fe fb59 	bl	8000514 <HAL_I2C_AddrCallback>
}
 8001e62:	e007      	b.n	8001e74 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2208      	movs	r2, #8
 8001e6a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b21      	cmp	r3, #33	; 0x21
 8001e96:	d115      	bne.n	8001ec4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2211      	movs	r2, #17
 8001ea4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001eac:	2101      	movs	r1, #1
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 fcbc 	bl	800282c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff fb3c 	bl	800153a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ec2:	e014      	b.n	8001eee <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2212      	movs	r2, #18
 8001ed0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001ed8:	2102      	movs	r1, #2
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 fca6 	bl	800282c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fb30 	bl	800154e <HAL_I2C_MasterRxCpltCallback>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e00c      	b.n	8001f44 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f42:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b29      	cmp	r3, #41	; 0x29
 8001f4e:	d112      	bne.n	8001f76 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2228      	movs	r2, #40	; 0x28
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2221      	movs	r2, #33	; 0x21
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001f5e:	2101      	movs	r1, #1
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fc63 	bl	800282c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fa96 	bl	80004a0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001f74:	e017      	b.n	8001fa6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f80:	d111      	bne.n	8001fa6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2228      	movs	r2, #40	; 0x28
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2222      	movs	r2, #34	; 0x22
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001f90:	2102      	movs	r1, #2
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fc4a 	bl	800282c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7fe faa7 	bl	80004f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b21      	cmp	r3, #33	; 0x21
 8001fd0:	d107      	bne.n	8001fe2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fc29 	bl	800282c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2211      	movs	r2, #17
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe0:	e00c      	b.n	8001ffc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b22      	cmp	r3, #34	; 0x22
 8001fec:	d106      	bne.n	8001ffc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001fee:	2102      	movs	r1, #2
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fc1b 	bl	800282c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2212      	movs	r2, #18
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b4c      	ldr	r3, [pc, #304]	; (8002138 <I2C_ITMasterCplt+0x188>)
 8002008:	400b      	ands	r3, r1
 800200a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a49      	ldr	r2, [pc, #292]	; (800213c <I2C_ITMasterCplt+0x18c>)
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2210      	movs	r2, #16
 8002028:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f043 0204 	orr.w	r2, r3, #4
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b60      	cmp	r3, #96	; 0x60
 8002040:	d10a      	bne.n	8002058 <I2C_ITMasterCplt+0xa8>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2db      	uxtb	r3, r3
 8002054:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002056:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 faee 	bl	800263a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b60      	cmp	r3, #96	; 0x60
 800206e:	d002      	beq.n	8002076 <I2C_ITMasterCplt+0xc6>
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d006      	beq.n	8002084 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f9c5 	bl	800240c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002082:	e054      	b.n	800212e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b21      	cmp	r3, #33	; 0x21
 800208e:	d124      	bne.n	80020da <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b40      	cmp	r3, #64	; 0x40
 80020a8:	d10b      	bne.n	80020c2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fa51 	bl	8001562 <HAL_I2C_MemTxCpltCallback>
}
 80020c0:	e035      	b.n	800212e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff fa31 	bl	800153a <HAL_I2C_MasterTxCpltCallback>
}
 80020d8:	e029      	b.n	800212e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b22      	cmp	r3, #34	; 0x22
 80020e4:	d123      	bne.n	800212e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b40      	cmp	r3, #64	; 0x40
 80020fe:	d10b      	bne.n	8002118 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff fa30 	bl	8001576 <HAL_I2C_MemRxCpltCallback>
}
 8002116:	e00a      	b.n	800212e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fa10 	bl	800154e <HAL_I2C_MasterRxCpltCallback>
}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	fe00e800 	.word	0xfe00e800
 800213c:	ffff0000 	.word	0xffff0000

08002140 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800215c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2220      	movs	r2, #32
 8002164:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	2b21      	cmp	r3, #33	; 0x21
 800216a:	d002      	beq.n	8002172 <I2C_ITSlaveCplt+0x32>
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	2b29      	cmp	r3, #41	; 0x29
 8002170:	d108      	bne.n	8002184 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002172:	f248 0101 	movw	r1, #32769	; 0x8001
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fb58 	bl	800282c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2221      	movs	r2, #33	; 0x21
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
 8002182:	e019      	b.n	80021b8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	2b22      	cmp	r3, #34	; 0x22
 8002188:	d002      	beq.n	8002190 <I2C_ITSlaveCplt+0x50>
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2b2a      	cmp	r3, #42	; 0x2a
 800218e:	d108      	bne.n	80021a2 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002190:	f248 0102 	movw	r1, #32770	; 0x8002
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fb49 	bl	800282c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2222      	movs	r2, #34	; 0x22
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
 80021a0:	e00a      	b.n	80021b8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b28      	cmp	r3, #40	; 0x28
 80021a6:	d107      	bne.n	80021b8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80021a8:	f248 0103 	movw	r1, #32771	; 0x8003
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 fb3d 	bl	800282c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	4b62      	ldr	r3, [pc, #392]	; (800235c <I2C_ITSlaveCplt+0x21c>)
 80021d4:	400b      	ands	r3, r1
 80021d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 fa2e 	bl	800263a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d013      	beq.n	8002210 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01f      	beq.n	8002240 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	b29a      	uxth	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800220e:	e017      	b.n	8002240 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d012      	beq.n	8002240 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002228:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	b29a      	uxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d020      	beq.n	800228c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f023 0304 	bic.w	r3, r3, #4
 8002250:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00c      	beq.n	800228c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	f043 0204 	orr.w	r2, r3, #4
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d010      	beq.n	80022da <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8a4 	bl	800240c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b28      	cmp	r3, #40	; 0x28
 80022ce:	d141      	bne.n	8002354 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80022d0:	6979      	ldr	r1, [r7, #20]
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f846 	bl	8002364 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80022d8:	e03c      	b.n	8002354 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022e2:	d014      	beq.n	800230e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff fe06 	bl	8001ef6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <I2C_ITSlaveCplt+0x220>)
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe f938 	bl	800057c <HAL_I2C_ListenCpltCallback>
}
 800230c:	e022      	b.n	8002354 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b22      	cmp	r3, #34	; 0x22
 8002318:	d10e      	bne.n	8002338 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f7fe f8df 	bl	80004f4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002336:	e00d      	b.n	8002354 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe f8a6 	bl	80004a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8002354:	bf00      	nop
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	fe00e800 	.word	0xfe00e800
 8002360:	ffff0000 	.word	0xffff0000

08002364 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a25      	ldr	r2, [pc, #148]	; (8002408 <I2C_ITListenCplt+0xa4>)
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d022      	beq.n	80023e0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d012      	beq.n	80023e0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023be:	3b01      	subs	r3, #1
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	f043 0204 	orr.w	r2, r3, #4
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fa21 	bl	800282c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2210      	movs	r2, #16
 80023f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe f8be 	bl	800057c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	ffff0000 	.word	0xffff0000

0800240c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800241c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a6d      	ldr	r2, [pc, #436]	; (80025e0 <I2C_ITError+0x1d4>)
 800242a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b28      	cmp	r3, #40	; 0x28
 8002442:	d005      	beq.n	8002450 <I2C_ITError+0x44>
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b29      	cmp	r3, #41	; 0x29
 8002448:	d002      	beq.n	8002450 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b2a      	cmp	r3, #42	; 0x2a
 800244e:	d10b      	bne.n	8002468 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002450:	2103      	movs	r1, #3
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f9ea 	bl	800282c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2228      	movs	r2, #40	; 0x28
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a60      	ldr	r2, [pc, #384]	; (80025e4 <I2C_ITError+0x1d8>)
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
 8002466:	e030      	b.n	80024ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002468:	f248 0103 	movw	r1, #32771	; 0x8003
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f9dd 	bl	800282c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8e1 	bl	800263a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b60      	cmp	r3, #96	; 0x60
 8002482:	d01f      	beq.n	80024c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f003 0320 	and.w	r3, r3, #32
 8002496:	2b20      	cmp	r3, #32
 8002498:	d114      	bne.n	80024c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b10      	cmp	r3, #16
 80024a6:	d109      	bne.n	80024bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2210      	movs	r2, #16
 80024ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b4:	f043 0204 	orr.w	r2, r3, #4
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2220      	movs	r2, #32
 80024c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d039      	beq.n	800254c <I2C_ITError+0x140>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b11      	cmp	r3, #17
 80024dc:	d002      	beq.n	80024e4 <I2C_ITError+0xd8>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	2b21      	cmp	r3, #33	; 0x21
 80024e2:	d133      	bne.n	800254c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024f2:	d107      	bne.n	8002504 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002502:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe fbe1 	bl	8000cd0 <HAL_DMA_GetState>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d017      	beq.n	8002544 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <I2C_ITError+0x1dc>)
 800251a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fb90 	bl	8000c4e <HAL_DMA_Abort_IT>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d04d      	beq.n	80025d0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800253e:	4610      	mov	r0, r2
 8002540:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002542:	e045      	b.n	80025d0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f851 	bl	80025ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800254a:	e041      	b.n	80025d0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002550:	2b00      	cmp	r3, #0
 8002552:	d039      	beq.n	80025c8 <I2C_ITError+0x1bc>
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2b12      	cmp	r3, #18
 8002558:	d002      	beq.n	8002560 <I2C_ITError+0x154>
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b22      	cmp	r3, #34	; 0x22
 800255e:	d133      	bne.n	80025c8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800256e:	d107      	bne.n	8002580 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800257e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fba3 	bl	8000cd0 <HAL_DMA_GetState>
 800258a:	4603      	mov	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d017      	beq.n	80025c0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <I2C_ITError+0x1dc>)
 8002596:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fb52 	bl	8000c4e <HAL_DMA_Abort_IT>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d011      	beq.n	80025d4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025ba:	4610      	mov	r0, r2
 80025bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025be:	e009      	b.n	80025d4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f813 	bl	80025ec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025c6:	e005      	b.n	80025d4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f80f 	bl	80025ec <I2C_TreatErrorCallback>
  }
}
 80025ce:	e002      	b.n	80025d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80025d0:	bf00      	nop
 80025d2:	e000      	b.n	80025d6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025d4:	bf00      	nop
}
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	ffff0000 	.word	0xffff0000
 80025e4:	080015b7 	.word	0x080015b7
 80025e8:	08002683 	.word	0x08002683

080025ec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b60      	cmp	r3, #96	; 0x60
 80025fe:	d10e      	bne.n	800261e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2220      	movs	r2, #32
 8002604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fe ffb7 	bl	800158a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800261c:	e009      	b.n	8002632 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7fd ffaf 	bl	8000590 <HAL_I2C_ErrorCallback>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b02      	cmp	r3, #2
 800264e:	d103      	bne.n	8002658 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2200      	movs	r2, #0
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b01      	cmp	r3, #1
 8002664:	d007      	beq.n	8002676 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	619a      	str	r2, [r3, #24]
  }
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	2200      	movs	r2, #0
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	2200      	movs	r2, #0
 80026ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f7ff ff9b 	bl	80025ec <I2C_TreatErrorCallback>
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	817b      	strh	r3, [r7, #10]
 80026ce:	4613      	mov	r3, r2
 80026d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026d8:	7a7b      	ldrb	r3, [r7, #9]
 80026da:	041b      	lsls	r3, r3, #16
 80026dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	0d5b      	lsrs	r3, r3, #21
 80026fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <I2C_TransferConfig+0x60>)
 8002700:	430b      	orrs	r3, r1
 8002702:	43db      	mvns	r3, r3
 8002704:	ea02 0103 	and.w	r1, r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	03ff63ff 	.word	0x03ff63ff

08002724 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002738:	4a39      	ldr	r2, [pc, #228]	; (8002820 <I2C_Enable_IRQ+0xfc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d032      	beq.n	80027a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002742:	4a38      	ldr	r2, [pc, #224]	; (8002824 <I2C_Enable_IRQ+0x100>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d02d      	beq.n	80027a4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800274c:	4a36      	ldr	r2, [pc, #216]	; (8002828 <I2C_Enable_IRQ+0x104>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d028      	beq.n	80027a4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002752:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002756:	2b00      	cmp	r3, #0
 8002758:	da03      	bge.n	8002762 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002760:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002762:	887b      	ldrh	r3, [r7, #2]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002772:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002784:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	2b10      	cmp	r3, #16
 800278a:	d103      	bne.n	8002794 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002792:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	2b20      	cmp	r3, #32
 8002798:	d133      	bne.n	8002802 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f043 0320 	orr.w	r3, r3, #32
 80027a0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027a2:	e02e      	b.n	8002802 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80027a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da03      	bge.n	80027b4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80027b2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80027b4:	887b      	ldrh	r3, [r7, #2]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80027c4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80027d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d103      	bne.n	80027e6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80027e4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d103      	bne.n	80027f4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80027f2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80027f4:	887b      	ldrh	r3, [r7, #2]
 80027f6:	2b40      	cmp	r3, #64	; 0x40
 80027f8:	d103      	bne.n	8002802 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002800:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	430a      	orrs	r2, r1
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	080017a7 	.word	0x080017a7
 8002824:	08001bc9 	.word	0x08001bc9
 8002828:	0800197d 	.word	0x0800197d

0800282c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800283c:	887b      	ldrh	r3, [r7, #2]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00f      	beq.n	8002866 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800284c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002854:	b2db      	uxtb	r3, r3
 8002856:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800285a:	2b28      	cmp	r3, #40	; 0x28
 800285c:	d003      	beq.n	8002866 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002864:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00f      	beq.n	8002890 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002876:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002884:	2b28      	cmp	r3, #40	; 0x28
 8002886:	d003      	beq.n	8002890 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800288e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002890:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002894:	2b00      	cmp	r3, #0
 8002896:	da03      	bge.n	80028a0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800289e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	2b10      	cmp	r3, #16
 80028a4:	d103      	bne.n	80028ae <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80028ac:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d103      	bne.n	80028bc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f043 0320 	orr.w	r3, r3, #32
 80028ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d103      	bne.n	80028ca <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028c8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6819      	ldr	r1, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	43da      	mvns	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	400a      	ands	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d138      	bne.n	8002970 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002908:	2302      	movs	r3, #2
 800290a:	e032      	b.n	8002972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800293a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b20      	cmp	r3, #32
 8002992:	d139      	bne.n	8002a08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800299e:	2302      	movs	r3, #2
 80029a0:	e033      	b.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2224      	movs	r2, #36	; 0x24
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <HAL_PWREx_GetVoltageRange+0x18>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40007000 	.word	0x40007000

08002a34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a42:	d130      	bne.n	8002aa6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a44:	4b23      	ldr	r3, [pc, #140]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a50:	d038      	beq.n	8002ac4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a5a:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2232      	movs	r2, #50	; 0x32
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	4a1b      	ldr	r2, [pc, #108]	; (8002adc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0c9b      	lsrs	r3, r3, #18
 8002a74:	3301      	adds	r3, #1
 8002a76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a78:	e002      	b.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8c:	d102      	bne.n	8002a94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f2      	bne.n	8002a7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aa0:	d110      	bne.n	8002ac4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e00f      	b.n	8002ac6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab2:	d007      	beq.n	8002ac4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002abc:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ac2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
 8002ad2:	bf00      	nop
 8002ad4:	40007000 	.word	0x40007000
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	431bde83 	.word	0x431bde83

08002ae0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d102      	bne.n	8002af4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f000 bc02 	b.w	80032f8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002af4:	4b96      	ldr	r3, [pc, #600]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002afe:	4b94      	ldr	r3, [pc, #592]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80e4 	beq.w	8002cde <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d007      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4c>
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	f040 808b 	bne.w	8002c3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	f040 8087 	bne.w	8002c3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b2c:	4b88      	ldr	r3, [pc, #544]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_OscConfig+0x64>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e3d9      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a1a      	ldr	r2, [r3, #32]
 8002b48:	4b81      	ldr	r3, [pc, #516]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <HAL_RCC_OscConfig+0x7e>
 8002b54:	4b7e      	ldr	r3, [pc, #504]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5c:	e005      	b.n	8002b6a <HAL_RCC_OscConfig+0x8a>
 8002b5e:	4b7c      	ldr	r3, [pc, #496]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b64:	091b      	lsrs	r3, r3, #4
 8002b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d223      	bcs.n	8002bb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fd54 	bl	8003620 <RCC_SetFlashLatencyFromMSIRange>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e3ba      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b82:	4b73      	ldr	r3, [pc, #460]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a72      	ldr	r2, [pc, #456]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002b88:	f043 0308 	orr.w	r3, r3, #8
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b70      	ldr	r3, [pc, #448]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	496d      	ldr	r1, [pc, #436]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba0:	4b6b      	ldr	r3, [pc, #428]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	4968      	ldr	r1, [pc, #416]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]
 8002bb4:	e025      	b.n	8002c02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bb6:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002bbc:	f043 0308 	orr.w	r3, r3, #8
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	4960      	ldr	r1, [pc, #384]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bd4:	4b5e      	ldr	r3, [pc, #376]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	495b      	ldr	r1, [pc, #364]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fd14 	bl	8003620 <RCC_SetFlashLatencyFromMSIRange>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e37a      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c02:	f000 fc81 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	4950      	ldr	r1, [pc, #320]	; (8002d54 <HAL_RCC_OscConfig+0x274>)
 8002c14:	5ccb      	ldrb	r3, [r1, r3]
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	4a4e      	ldr	r2, [pc, #312]	; (8002d58 <HAL_RCC_OscConfig+0x278>)
 8002c20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c22:	4b4e      	ldr	r3, [pc, #312]	; (8002d5c <HAL_RCC_OscConfig+0x27c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fd fe80 	bl	800092c <HAL_InitTick>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d052      	beq.n	8002cdc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	e35e      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d032      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c42:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a42      	ldr	r2, [pc, #264]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c4e:	f7fd febd 	bl	80009cc <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c56:	f7fd feb9 	bl	80009cc <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e347      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c68:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c74:	4b36      	ldr	r3, [pc, #216]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a35      	ldr	r2, [pc, #212]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002c7a:	f043 0308 	orr.w	r3, r3, #8
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4930      	ldr	r1, [pc, #192]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c92:	4b2f      	ldr	r3, [pc, #188]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	492b      	ldr	r1, [pc, #172]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	604b      	str	r3, [r1, #4]
 8002ca6:	e01a      	b.n	8002cde <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ca8:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a28      	ldr	r2, [pc, #160]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cb4:	f7fd fe8a 	bl	80009cc <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cbc:	f7fd fe86 	bl	80009cc <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e314      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x1dc>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d073      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_OscConfig+0x21c>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b0c      	cmp	r3, #12
 8002cf4:	d10e      	bne.n	8002d14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d10b      	bne.n	8002d14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	4b14      	ldr	r3, [pc, #80]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d063      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x2f0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d15f      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e2f1      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1c:	d106      	bne.n	8002d2c <HAL_RCC_OscConfig+0x24c>
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e025      	b.n	8002d78 <HAL_RCC_OscConfig+0x298>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d34:	d114      	bne.n	8002d60 <HAL_RCC_OscConfig+0x280>
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a02      	ldr	r2, [pc, #8]	; (8002d50 <HAL_RCC_OscConfig+0x270>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	e013      	b.n	8002d78 <HAL_RCC_OscConfig+0x298>
 8002d50:	40021000 	.word	0x40021000
 8002d54:	08003dc8 	.word	0x08003dc8
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	20000004 	.word	0x20000004
 8002d60:	4ba0      	ldr	r3, [pc, #640]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a9f      	ldr	r2, [pc, #636]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b9d      	ldr	r3, [pc, #628]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a9c      	ldr	r2, [pc, #624]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fd fe24 	bl	80009cc <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fd fe20 	bl	80009cc <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	; 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e2ae      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9a:	4b92      	ldr	r3, [pc, #584]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x2a8>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da8:	f7fd fe10 	bl	80009cc <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fd fe0c 	bl	80009cc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e29a      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dc2:	4b88      	ldr	r3, [pc, #544]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x2d0>
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d060      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_OscConfig+0x310>
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d119      	bne.n	8002e1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d116      	bne.n	8002e1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df0:	4b7c      	ldr	r3, [pc, #496]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_OscConfig+0x328>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e277      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	061b      	lsls	r3, r3, #24
 8002e16:	4973      	ldr	r1, [pc, #460]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e1c:	e040      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d023      	beq.n	8002e6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e26:	4b6f      	ldr	r3, [pc, #444]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a6e      	ldr	r2, [pc, #440]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e32:	f7fd fdcb 	bl	80009cc <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3a:	f7fd fdc7 	bl	80009cc <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e255      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e4c:	4b65      	ldr	r3, [pc, #404]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e58:	4b62      	ldr	r3, [pc, #392]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	495f      	ldr	r1, [pc, #380]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
 8002e6c:	e018      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e6e:	4b5d      	ldr	r3, [pc, #372]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a5c      	ldr	r2, [pc, #368]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7fd fda7 	bl	80009cc <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e82:	f7fd fda3 	bl	80009cc <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e231      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d03c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01c      	beq.n	8002eee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb4:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eba:	4a4a      	ldr	r2, [pc, #296]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fd fd82 	bl	80009cc <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ecc:	f7fd fd7e 	bl	80009cc <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e20c      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ede:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ef      	beq.n	8002ecc <HAL_RCC_OscConfig+0x3ec>
 8002eec:	e01b      	b.n	8002f26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eee:	4b3d      	ldr	r3, [pc, #244]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef4:	4a3b      	ldr	r2, [pc, #236]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	f023 0301 	bic.w	r3, r3, #1
 8002efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efe:	f7fd fd65 	bl	80009cc <HAL_GetTick>
 8002f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f04:	e008      	b.n	8002f18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f06:	f7fd fd61 	bl	80009cc <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e1ef      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f18:	4b32      	ldr	r3, [pc, #200]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1ef      	bne.n	8002f06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 80a6 	beq.w	8003080 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f38:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10d      	bne.n	8002f60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	4a26      	ldr	r2, [pc, #152]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002f50:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_RCC_OscConfig+0x508>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d118      	bne.n	8002f9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6c:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <HAL_RCC_OscConfig+0x508>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <HAL_RCC_OscConfig+0x508>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f78:	f7fd fd28 	bl	80009cc <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f80:	f7fd fd24 	bl	80009cc <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1b2      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_RCC_OscConfig+0x508>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d108      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x4d8>
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb6:	e029      	b.n	800300c <HAL_RCC_OscConfig+0x52c>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d115      	bne.n	8002fec <HAL_RCC_OscConfig+0x50c>
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	4a07      	ldr	r2, [pc, #28]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002fc8:	f043 0304 	orr.w	r3, r3, #4
 8002fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd0:	4b04      	ldr	r3, [pc, #16]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd6:	4a03      	ldr	r2, [pc, #12]	; (8002fe4 <HAL_RCC_OscConfig+0x504>)
 8002fd8:	f043 0301 	orr.w	r3, r3, #1
 8002fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe0:	e014      	b.n	800300c <HAL_RCC_OscConfig+0x52c>
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	4b9a      	ldr	r3, [pc, #616]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	4a99      	ldr	r2, [pc, #612]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8002ff4:	f023 0301 	bic.w	r3, r3, #1
 8002ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ffc:	4b96      	ldr	r3, [pc, #600]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	4a95      	ldr	r2, [pc, #596]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003004:	f023 0304 	bic.w	r3, r3, #4
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d016      	beq.n	8003042 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003014:	f7fd fcda 	bl	80009cc <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301a:	e00a      	b.n	8003032 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fd fcd6 	bl	80009cc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e162      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003032:	4b89      	ldr	r3, [pc, #548]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ed      	beq.n	800301c <HAL_RCC_OscConfig+0x53c>
 8003040:	e015      	b.n	800306e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003042:	f7fd fcc3 	bl	80009cc <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fd fcbf 	bl	80009cc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	; 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e14b      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003060:	4b7d      	ldr	r3, [pc, #500]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ed      	bne.n	800304a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800306e:	7ffb      	ldrb	r3, [r7, #31]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	4b78      	ldr	r3, [pc, #480]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003078:	4a77      	ldr	r2, [pc, #476]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d03c      	beq.n	8003106 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01c      	beq.n	80030ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003094:	4b70      	ldr	r3, [pc, #448]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003096:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800309a:	4a6f      	ldr	r2, [pc, #444]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 800309c:	f043 0301 	orr.w	r3, r3, #1
 80030a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fd fc92 	bl	80009cc <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ac:	f7fd fc8e 	bl	80009cc <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e11c      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030be:	4b66      	ldr	r3, [pc, #408]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 80030c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ef      	beq.n	80030ac <HAL_RCC_OscConfig+0x5cc>
 80030cc:	e01b      	b.n	8003106 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030ce:	4b62      	ldr	r3, [pc, #392]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 80030d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030d4:	4a60      	ldr	r2, [pc, #384]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 80030d6:	f023 0301 	bic.w	r3, r3, #1
 80030da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fd fc75 	bl	80009cc <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030e6:	f7fd fc71 	bl	80009cc <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e0ff      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030f8:	4b57      	ldr	r3, [pc, #348]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 80030fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ef      	bne.n	80030e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80f3 	beq.w	80032f6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	2b02      	cmp	r3, #2
 8003116:	f040 80c9 	bne.w	80032ac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800311a:	4b4f      	ldr	r3, [pc, #316]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f003 0203 	and.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	429a      	cmp	r2, r3
 800312c:	d12c      	bne.n	8003188 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	3b01      	subs	r3, #1
 800313a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d123      	bne.n	8003188 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d11b      	bne.n	8003188 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d113      	bne.n	8003188 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003170:	429a      	cmp	r2, r3
 8003172:	d109      	bne.n	8003188 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	085b      	lsrs	r3, r3, #1
 8003180:	3b01      	subs	r3, #1
 8003182:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d06b      	beq.n	8003260 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b0c      	cmp	r3, #12
 800318c:	d062      	beq.n	8003254 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800318e:	4b32      	ldr	r3, [pc, #200]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e0ac      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 80031a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031aa:	f7fd fc0f 	bl	80009cc <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031b0:	e008      	b.n	80031c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b2:	f7fd fc0b 	bl	80009cc <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d901      	bls.n	80031c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e099      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d0:	4b21      	ldr	r3, [pc, #132]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	4b21      	ldr	r3, [pc, #132]	; (800325c <HAL_RCC_OscConfig+0x77c>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031e0:	3a01      	subs	r2, #1
 80031e2:	0112      	lsls	r2, r2, #4
 80031e4:	4311      	orrs	r1, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031ea:	0212      	lsls	r2, r2, #8
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031f2:	0852      	lsrs	r2, r2, #1
 80031f4:	3a01      	subs	r2, #1
 80031f6:	0552      	lsls	r2, r2, #21
 80031f8:	4311      	orrs	r1, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031fe:	0852      	lsrs	r2, r2, #1
 8003200:	3a01      	subs	r2, #1
 8003202:	0652      	lsls	r2, r2, #25
 8003204:	4311      	orrs	r1, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800320a:	06d2      	lsls	r2, r2, #27
 800320c:	430a      	orrs	r2, r1
 800320e:	4912      	ldr	r1, [pc, #72]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003210:	4313      	orrs	r3, r2
 8003212:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003214:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0f      	ldr	r2, [pc, #60]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 800321a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800321e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003220:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800322c:	f7fd fbce 	bl	80009cc <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fd fbca 	bl	80009cc <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e058      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <HAL_RCC_OscConfig+0x778>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0f0      	beq.n	8003234 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003252:	e050      	b.n	80032f6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e04f      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
 8003258:	40021000 	.word	0x40021000
 800325c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d144      	bne.n	80032f6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800326c:	4b24      	ldr	r3, [pc, #144]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a23      	ldr	r2, [pc, #140]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 8003272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003276:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003278:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 800327e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003282:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003284:	f7fd fba2 	bl	80009cc <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328c:	f7fd fb9e 	bl	80009cc <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e02c      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329e:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0x7ac>
 80032aa:	e024      	b.n	80032f6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	d01f      	beq.n	80032f2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a12      	ldr	r2, [pc, #72]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 80032b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fd fb85 	bl	80009cc <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c6:	f7fd fb81 	bl	80009cc <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e00f      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	4905      	ldr	r1, [pc, #20]	; (8003300 <HAL_RCC_OscConfig+0x820>)
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_OscConfig+0x824>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	60cb      	str	r3, [r1, #12]
 80032f0:	e001      	b.n	80032f6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	feeefffc 	.word	0xfeeefffc

08003308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0e7      	b.n	80034ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800331c:	4b75      	ldr	r3, [pc, #468]	; (80034f4 <HAL_RCC_ClockConfig+0x1ec>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d910      	bls.n	800334c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b72      	ldr	r3, [pc, #456]	; (80034f4 <HAL_RCC_ClockConfig+0x1ec>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 0207 	bic.w	r2, r3, #7
 8003332:	4970      	ldr	r1, [pc, #448]	; (80034f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b6e      	ldr	r3, [pc, #440]	; (80034f4 <HAL_RCC_ClockConfig+0x1ec>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0cf      	b.n	80034ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d010      	beq.n	800337a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003364:	429a      	cmp	r2, r3
 8003366:	d908      	bls.n	800337a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003368:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	4960      	ldr	r1, [pc, #384]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d04c      	beq.n	8003420 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d107      	bne.n	800339e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338e:	4b5a      	ldr	r3, [pc, #360]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d121      	bne.n	80033de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e0a6      	b.n	80034ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033a6:	4b54      	ldr	r3, [pc, #336]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d115      	bne.n	80033de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e09a      	b.n	80034ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033be:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e08e      	b.n	80034ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ce:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e086      	b.n	80034ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033de:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f023 0203 	bic.w	r2, r3, #3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	4943      	ldr	r1, [pc, #268]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f0:	f7fd faec 	bl	80009cc <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	e00a      	b.n	800340e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f8:	f7fd fae8 	bl	80009cc <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e06e      	b.n	80034ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340e:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 020c 	and.w	r2, r3, #12
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	429a      	cmp	r2, r3
 800341e:	d1eb      	bne.n	80033f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d010      	beq.n	800344e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003438:	429a      	cmp	r2, r3
 800343a:	d208      	bcs.n	800344e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800343c:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	492b      	ldr	r1, [pc, #172]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d210      	bcs.n	800347e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_RCC_ClockConfig+0x1ec>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 0207 	bic.w	r2, r3, #7
 8003464:	4923      	ldr	r1, [pc, #140]	; (80034f4 <HAL_RCC_ClockConfig+0x1ec>)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <HAL_RCC_ClockConfig+0x1ec>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e036      	b.n	80034ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4918      	ldr	r1, [pc, #96]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003498:	4313      	orrs	r3, r2
 800349a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d009      	beq.n	80034bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4910      	ldr	r1, [pc, #64]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034bc:	f000 f824 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80034c0:	4602      	mov	r2, r0
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	091b      	lsrs	r3, r3, #4
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	490b      	ldr	r1, [pc, #44]	; (80034fc <HAL_RCC_ClockConfig+0x1f4>)
 80034ce:	5ccb      	ldrb	r3, [r1, r3]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
 80034d8:	4a09      	ldr	r2, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1f8>)
 80034da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1fc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fa23 	bl	800092c <HAL_InitTick>
 80034e6:	4603      	mov	r3, r0
 80034e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80034ea:	7afb      	ldrb	r3, [r7, #11]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40022000 	.word	0x40022000
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08003dc8 	.word	0x08003dc8
 8003500:	20000000 	.word	0x20000000
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003516:	4b3e      	ldr	r3, [pc, #248]	; (8003610 <HAL_RCC_GetSysClockFreq+0x108>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003520:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCC_GetSysClockFreq+0x108>)
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0x34>
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d121      	bne.n	800357a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d11e      	bne.n	800357a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800353c:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HAL_RCC_GetSysClockFreq+0x108>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003548:	4b31      	ldr	r3, [pc, #196]	; (8003610 <HAL_RCC_GetSysClockFreq+0x108>)
 800354a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	e005      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003558:	4b2d      	ldr	r3, [pc, #180]	; (8003610 <HAL_RCC_GetSysClockFreq+0x108>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003564:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10d      	bne.n	8003590 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d102      	bne.n	8003586 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_RCC_GetSysClockFreq+0x110>)
 8003582:	61bb      	str	r3, [r7, #24]
 8003584:	e004      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b08      	cmp	r3, #8
 800358a:	d101      	bne.n	8003590 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800358c:	4b23      	ldr	r3, [pc, #140]	; (800361c <HAL_RCC_GetSysClockFreq+0x114>)
 800358e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d134      	bne.n	8003600 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003596:	4b1e      	ldr	r3, [pc, #120]	; (8003610 <HAL_RCC_GetSysClockFreq+0x108>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0xa6>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d003      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0xac>
 80035ac:	e005      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_RCC_GetSysClockFreq+0x110>)
 80035b0:	617b      	str	r3, [r7, #20]
      break;
 80035b2:	e005      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035b4:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_GetSysClockFreq+0x114>)
 80035b6:	617b      	str	r3, [r7, #20]
      break;
 80035b8:	e002      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	617b      	str	r3, [r7, #20]
      break;
 80035be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <HAL_RCC_GetSysClockFreq+0x108>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 0307 	and.w	r3, r3, #7
 80035ca:	3301      	adds	r3, #1
 80035cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	0a1b      	lsrs	r3, r3, #8
 80035d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	fb03 f202 	mul.w	r2, r3, r2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035e6:	4b0a      	ldr	r3, [pc, #40]	; (8003610 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	0e5b      	lsrs	r3, r3, #25
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	3301      	adds	r3, #1
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003600:	69bb      	ldr	r3, [r7, #24]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3724      	adds	r7, #36	; 0x24
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	08003dd8 	.word	0x08003dd8
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200

08003620 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800362c:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800362e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003638:	f7ff f9ee 	bl	8002a18 <HAL_PWREx_GetVoltageRange>
 800363c:	6178      	str	r0, [r7, #20]
 800363e:	e014      	b.n	800366a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	4a24      	ldr	r2, [pc, #144]	; (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364a:	6593      	str	r3, [r2, #88]	; 0x58
 800364c:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003658:	f7ff f9de 	bl	8002a18 <HAL_PWREx_GetVoltageRange>
 800365c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003668:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003670:	d10b      	bne.n	800368a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b80      	cmp	r3, #128	; 0x80
 8003676:	d919      	bls.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2ba0      	cmp	r3, #160	; 0xa0
 800367c:	d902      	bls.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800367e:	2302      	movs	r3, #2
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	e013      	b.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003684:	2301      	movs	r3, #1
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	e010      	b.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b80      	cmp	r3, #128	; 0x80
 800368e:	d902      	bls.n	8003696 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003690:	2303      	movs	r3, #3
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	e00a      	b.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b80      	cmp	r3, #128	; 0x80
 800369a:	d102      	bne.n	80036a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800369c:	2302      	movs	r3, #2
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	e004      	b.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b70      	cmp	r3, #112	; 0x70
 80036a6:	d101      	bne.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036a8:	2301      	movs	r3, #1
 80036aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 0207 	bic.w	r2, r3, #7
 80036b4:	4909      	ldr	r1, [pc, #36]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80036bc:	4b07      	ldr	r3, [pc, #28]	; (80036dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d001      	beq.n	80036ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40022000 	.word	0x40022000

080036e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036e8:	2300      	movs	r3, #0
 80036ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036ec:	2300      	movs	r3, #0
 80036ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d031      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003704:	d01a      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003706:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800370a:	d814      	bhi.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800370c:	2b00      	cmp	r3, #0
 800370e:	d009      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003710:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003714:	d10f      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003716:	4b5d      	ldr	r3, [pc, #372]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4a5c      	ldr	r2, [pc, #368]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003720:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003722:	e00c      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3304      	adds	r3, #4
 8003728:	2100      	movs	r1, #0
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fa22 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003734:	e003      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	74fb      	strb	r3, [r7, #19]
      break;
 800373a:	e000      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800373c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373e:	7cfb      	ldrb	r3, [r7, #19]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10b      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003744:	4b51      	ldr	r3, [pc, #324]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	494e      	ldr	r1, [pc, #312]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800375a:	e001      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7cfb      	ldrb	r3, [r7, #19]
 800375e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 809e 	beq.w	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376e:	2300      	movs	r3, #0
 8003770:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003772:	4b46      	ldr	r3, [pc, #280]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b40      	ldr	r3, [pc, #256]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	4a3f      	ldr	r2, [pc, #252]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003792:	6593      	str	r3, [r2, #88]	; 0x58
 8003794:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a0:	2301      	movs	r3, #1
 80037a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a4:	4b3a      	ldr	r3, [pc, #232]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a39      	ldr	r2, [pc, #228]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037b0:	f7fd f90c 	bl	80009cc <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b6:	e009      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b8:	f7fd f908 	bl	80009cc <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d902      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	74fb      	strb	r3, [r7, #19]
        break;
 80037ca:	e005      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037cc:	4b30      	ldr	r3, [pc, #192]	; (8003890 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ef      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80037d8:	7cfb      	ldrb	r3, [r7, #19]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d15a      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037de:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01e      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d019      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037fa:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003804:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003806:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	4a1f      	ldr	r2, [pc, #124]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800380e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	4a1b      	ldr	r2, [pc, #108]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800381e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003826:	4a19      	ldr	r2, [pc, #100]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	d016      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003838:	f7fd f8c8 	bl	80009cc <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	e00b      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fd f8c4 	bl	80009cc <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d902      	bls.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	74fb      	strb	r3, [r7, #19]
            break;
 8003856:	e006      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ec      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800386c:	4b07      	ldr	r3, [pc, #28]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	4904      	ldr	r1, [pc, #16]	; (800388c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003882:	e009      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	74bb      	strb	r3, [r7, #18]
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003898:	7c7b      	ldrb	r3, [r7, #17]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4b8d      	ldr	r3, [pc, #564]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	4a8c      	ldr	r2, [pc, #560]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b6:	4b87      	ldr	r3, [pc, #540]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038bc:	f023 0203 	bic.w	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	4983      	ldr	r1, [pc, #524]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038d8:	4b7e      	ldr	r3, [pc, #504]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038de:	f023 020c 	bic.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	497b      	ldr	r1, [pc, #492]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038fa:	4b76      	ldr	r3, [pc, #472]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003900:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	4972      	ldr	r1, [pc, #456]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800391c:	4b6d      	ldr	r3, [pc, #436]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003922:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	496a      	ldr	r1, [pc, #424]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800393e:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394c:	4961      	ldr	r1, [pc, #388]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003960:	4b5c      	ldr	r3, [pc, #368]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4959      	ldr	r1, [pc, #356]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003982:	4b54      	ldr	r3, [pc, #336]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	4950      	ldr	r1, [pc, #320]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a4:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	4948      	ldr	r1, [pc, #288]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c6:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	493f      	ldr	r1, [pc, #252]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d028      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039e8:	4b3a      	ldr	r3, [pc, #232]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f6:	4937      	ldr	r1, [pc, #220]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a06:	d106      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a08:	4b32      	ldr	r3, [pc, #200]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a31      	ldr	r2, [pc, #196]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a12:	60d3      	str	r3, [r2, #12]
 8003a14:	e011      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f8a4 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d028      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a46:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a54:	491f      	ldr	r1, [pc, #124]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a64:	d106      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a66:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003a6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a70:	60d3      	str	r3, [r2, #12]
 8003a72:	e011      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a7c:	d10c      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3304      	adds	r3, #4
 8003a82:	2101      	movs	r1, #1
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f875 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003a94:	7cfb      	ldrb	r3, [r7, #19]
 8003a96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02b      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab2:	4908      	ldr	r1, [pc, #32]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ac2:	d109      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ac4:	4b03      	ldr	r3, [pc, #12]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a02      	ldr	r2, [pc, #8]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ace:	60d3      	str	r3, [r2, #12]
 8003ad0:	e014      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003adc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f843 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003af8:	7cfb      	ldrb	r3, [r7, #19]
 8003afa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01c      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b08:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	4916      	ldr	r1, [pc, #88]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	2102      	movs	r1, #2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 f820 	bl	8003b74 <RCCEx_PLLSAI1_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003b3e:	7cfb      	ldrb	r3, [r7, #19]
 8003b40:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	4904      	ldr	r1, [pc, #16]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003b64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000

08003b74 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b82:	4b74      	ldr	r3, [pc, #464]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d018      	beq.n	8003bc0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b8e:	4b71      	ldr	r3, [pc, #452]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f003 0203 	and.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d10d      	bne.n	8003bba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ba6:	4b6b      	ldr	r3, [pc, #428]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d047      	beq.n	8003c4a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
 8003bbe:	e044      	b.n	8003c4a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d018      	beq.n	8003bfa <RCCEx_PLLSAI1_Config+0x86>
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d825      	bhi.n	8003c18 <RCCEx_PLLSAI1_Config+0xa4>
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d002      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0x62>
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d009      	beq.n	8003be8 <RCCEx_PLLSAI1_Config+0x74>
 8003bd4:	e020      	b.n	8003c18 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bd6:	4b5f      	ldr	r3, [pc, #380]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11d      	bne.n	8003c1e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be6:	e01a      	b.n	8003c1e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003be8:	4b5a      	ldr	r3, [pc, #360]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d116      	bne.n	8003c22 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf8:	e013      	b.n	8003c22 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bfa:	4b56      	ldr	r3, [pc, #344]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c06:	4b53      	ldr	r3, [pc, #332]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c16:	e006      	b.n	8003c26 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c1c:	e004      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e002      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10d      	bne.n	8003c4a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c2e:	4b49      	ldr	r3, [pc, #292]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	430b      	orrs	r3, r1
 8003c44:	4943      	ldr	r1, [pc, #268]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d17c      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c50:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a3f      	ldr	r2, [pc, #252]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c5c:	f7fc feb6 	bl	80009cc <HAL_GetTick>
 8003c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c62:	e009      	b.n	8003c78 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c64:	f7fc feb2 	bl	80009cc <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d902      	bls.n	8003c78 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	73fb      	strb	r3, [r7, #15]
        break;
 8003c76:	e005      	b.n	8003c84 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c78:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ef      	bne.n	8003c64 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d15f      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d110      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c90:	4b30      	ldr	r3, [pc, #192]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6892      	ldr	r2, [r2, #8]
 8003ca0:	0211      	lsls	r1, r2, #8
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	06d2      	lsls	r2, r2, #27
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	492a      	ldr	r1, [pc, #168]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	610b      	str	r3, [r1, #16]
 8003cb0:	e027      	b.n	8003d02 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d112      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cb8:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003cc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6892      	ldr	r2, [r2, #8]
 8003cc8:	0211      	lsls	r1, r2, #8
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6912      	ldr	r2, [r2, #16]
 8003cce:	0852      	lsrs	r2, r2, #1
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	0552      	lsls	r2, r2, #21
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	491f      	ldr	r1, [pc, #124]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	610b      	str	r3, [r1, #16]
 8003cdc:	e011      	b.n	8003d02 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ce6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6892      	ldr	r2, [r2, #8]
 8003cee:	0211      	lsls	r1, r2, #8
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6952      	ldr	r2, [r2, #20]
 8003cf4:	0852      	lsrs	r2, r2, #1
 8003cf6:	3a01      	subs	r2, #1
 8003cf8:	0652      	lsls	r2, r2, #25
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	4915      	ldr	r1, [pc, #84]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d02:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d0c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0e:	f7fc fe5d 	bl	80009cc <HAL_GetTick>
 8003d12:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d14:	e009      	b.n	8003d2a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d16:	f7fc fe59 	bl	80009cc <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d902      	bls.n	8003d2a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	73fb      	strb	r3, [r7, #15]
          break;
 8003d28:	e005      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ef      	beq.n	8003d16 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	4903      	ldr	r1, [pc, #12]	; (8003d54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000

08003d58 <memset>:
 8003d58:	4402      	add	r2, r0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d100      	bne.n	8003d62 <memset+0xa>
 8003d60:	4770      	bx	lr
 8003d62:	f803 1b01 	strb.w	r1, [r3], #1
 8003d66:	e7f9      	b.n	8003d5c <memset+0x4>

08003d68 <__libc_init_array>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	4d0d      	ldr	r5, [pc, #52]	; (8003da0 <__libc_init_array+0x38>)
 8003d6c:	4c0d      	ldr	r4, [pc, #52]	; (8003da4 <__libc_init_array+0x3c>)
 8003d6e:	1b64      	subs	r4, r4, r5
 8003d70:	10a4      	asrs	r4, r4, #2
 8003d72:	2600      	movs	r6, #0
 8003d74:	42a6      	cmp	r6, r4
 8003d76:	d109      	bne.n	8003d8c <__libc_init_array+0x24>
 8003d78:	4d0b      	ldr	r5, [pc, #44]	; (8003da8 <__libc_init_array+0x40>)
 8003d7a:	4c0c      	ldr	r4, [pc, #48]	; (8003dac <__libc_init_array+0x44>)
 8003d7c:	f000 f818 	bl	8003db0 <_init>
 8003d80:	1b64      	subs	r4, r4, r5
 8003d82:	10a4      	asrs	r4, r4, #2
 8003d84:	2600      	movs	r6, #0
 8003d86:	42a6      	cmp	r6, r4
 8003d88:	d105      	bne.n	8003d96 <__libc_init_array+0x2e>
 8003d8a:	bd70      	pop	{r4, r5, r6, pc}
 8003d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d90:	4798      	blx	r3
 8003d92:	3601      	adds	r6, #1
 8003d94:	e7ee      	b.n	8003d74 <__libc_init_array+0xc>
 8003d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d9a:	4798      	blx	r3
 8003d9c:	3601      	adds	r6, #1
 8003d9e:	e7f2      	b.n	8003d86 <__libc_init_array+0x1e>
 8003da0:	08003e08 	.word	0x08003e08
 8003da4:	08003e08 	.word	0x08003e08
 8003da8:	08003e08 	.word	0x08003e08
 8003dac:	08003e0c 	.word	0x08003e0c

08003db0 <_init>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	bf00      	nop
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr

08003dbc <_fini>:
 8003dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dbe:	bf00      	nop
 8003dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dc2:	bc08      	pop	{r3}
 8003dc4:	469e      	mov	lr, r3
 8003dc6:	4770      	bx	lr
