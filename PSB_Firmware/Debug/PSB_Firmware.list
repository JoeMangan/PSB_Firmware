
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d60  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007eec  08007eec  00017eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f3c  08007f3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f3c  08007f3c  00017f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f44  08007f44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f48  08007f48  00017f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000010  08007f58  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08007f58  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014649  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000251c  00000000  00000000  000346c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f41  00000000  00000000  00037f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bf9  00000000  00000000  00038e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bb2  00000000  00000000  0003ba72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d97ed  00000000  00000000  00051624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052ec  00000000  00000000  0012ae14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00130100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007ed4 	.word	0x08007ed4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08007ed4 	.word	0x08007ed4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f002 fd0d 	bl	8002eec <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_MspInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8ad 	bl	8000630 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fa3b 	bl	8000950 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 fa09 	bl	80008f0 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80004de:	f000 f979 	bl	80007d4 <MX_I2C3_Init>
  MX_I2C2_Init();
 80004e2:	f000 f937 	bl	8000754 <MX_I2C2_Init>
  MX_I2C1_Init();
 80004e6:	f000 f8f5 	bl	80006d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 80004ea:	f000 f9b3 	bl	8000854 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the system
  i2c_slv_init(); // Initialize the I2C slave module
 80004ee:	f002 f9d9 	bl	80028a4 <i2c_slv_init>

  // A PROPER INITIALISATION MUST GO HERE!!!
  //while(1);


  bool ijc_init_status = ijc_detector_init();
 80004f2:	f000 ff0f 	bl	8001314 <ijc_detector_init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  bool cea_init_status = cea_detector_init();
 80004fa:	f000 ff3d 	bl	8001378 <cea_detector_init>
 80004fe:	4603      	mov	r3, r0
 8000500:	71bb      	strb	r3, [r7, #6]


  if(ijc_init_status == EXIT_FAILURE)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d000      	beq.n	800050a <main+0x42>
  {
	  while(1);
 8000508:	e7fe      	b.n	8000508 <main+0x40>
  }

  if(cea_init_status == EXIT_FAILURE)
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d000      	beq.n	8000512 <main+0x4a>
  {
	  while(1);
 8000510:	e7fe      	b.n	8000510 <main+0x48>
  }

  // Start the timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000512:	4840      	ldr	r0, [pc, #256]	; (8000614 <main+0x14c>)
 8000514:	f006 fc2a 	bl	8006d6c <HAL_TIM_Base_Start_IT>

  // Configure the timeout for the I2C Bus 1
  hi2c1.Instance->TIMEOUTR = 0x0F00; 					// Set the timeout value
 8000518:	4b3f      	ldr	r3, [pc, #252]	; (8000618 <main+0x150>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000520:	615a      	str	r2, [r3, #20]
  hi2c1.Instance->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN; 		// Enable TEXTEN
 8000522:	4b3d      	ldr	r3, [pc, #244]	; (8000618 <main+0x150>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	4b3b      	ldr	r3, [pc, #236]	; (8000618 <main+0x150>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000530:	615a      	str	r2, [r3, #20]
  hi2c1.Instance->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;    // Enable the timeout TIMOUTEN
 8000532:	4b39      	ldr	r3, [pc, #228]	; (8000618 <main+0x150>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	4b37      	ldr	r3, [pc, #220]	; (8000618 <main+0x150>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000540:	615a      	str	r2, [r3, #20]
  hi2c1.Instance->CR1 |= I2C_CR1_ERRIE;					// Enable interrupts on CR1 ERR - This does not seem to work correctly
 8000542:	4b35      	ldr	r3, [pc, #212]	; (8000618 <main+0x150>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b33      	ldr	r3, [pc, #204]	; (8000618 <main+0x150>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000550:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ijc_dssd_ramp_loop();
 8000552:	f000 fc45 	bl	8000de0 <ijc_dssd_ramp_loop>
	  cea_dssd_ramp_loop();
 8000556:	f000 fcdd 	bl	8000f14 <cea_dssd_ramp_loop>

	  //HAL_I2C_StateTypeDef status_state = HAL_I2C_GetState(&hi2c1);
	  //HAL_I2C_StateTypeDef status_mode  = HAL_I2C_GetMode(&hi2c1);
	  //HAL_I2C_StateTypeDef status_error = HAL_I2C_GetError(&hi2c1);

	  if (Xfer_Complete ==1)                            // Check for the I2C read complete to have been executed
 800055a:	4b30      	ldr	r3, [pc, #192]	; (800061c <main+0x154>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10f      	bne.n	8000582 <main+0xba>
	  {

		  i2c_slv_cmd_rx_tx_handle();
 8000562:	f001 fa95 	bl	8001a90 <i2c_slv_cmd_rx_tx_handle>

		  HAL_Delay(1); 								// Delay for 1 ms
 8000566:	2001      	movs	r0, #1
 8000568:	f002 fd3c 	bl	8002fe4 <HAL_Delay>
		  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) // Put I2C peripheral in listen mode process
 800056c:	482a      	ldr	r0, [pc, #168]	; (8000618 <main+0x150>)
 800056e:	f003 fc8f 	bl	8003e90 <HAL_I2C_EnableListen_IT>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <main+0xb4>
		  {
			  Error_Handler();
 8000578:	f002 fa8e 	bl	8002a98 <Error_Handler>
		  }
		  Xfer_Complete =0;
 800057c:	4b27      	ldr	r3, [pc, #156]	; (800061c <main+0x154>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
	  }

	  if(ijc_detector.making_safe_inprogress && general_loop_flg == true)
 8000582:	4b27      	ldr	r3, [pc, #156]	; (8000620 <main+0x158>)
 8000584:	7cdb      	ldrb	r3, [r3, #19]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <main+0xd0>
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <main+0x15c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <main+0xd0>
	  {
		  // Make the IJC detector safe
		  make_ijc_dssd_safe();
 8000592:	f000 fd59 	bl	8001048 <make_ijc_dssd_safe>
 8000596:	e009      	b.n	80005ac <main+0xe4>
	  }
	  else if (cea_detector.making_safe_inprogress && general_loop_flg == true)
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <main+0x160>)
 800059a:	7cdb      	ldrb	r3, [r3, #19]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d005      	beq.n	80005ac <main+0xe4>
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <main+0x15c>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <main+0xe4>
	  {
		  make_cea_dssd_safe();
 80005a8:	f000 fdc4 	bl	8001134 <make_cea_dssd_safe>
	  }

	  if (general_loop_flg == true)
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <main+0x15c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d004      	beq.n	80005be <main+0xf6>
	  {
		  run_complete_readout();
 80005b4:	f001 fa2c 	bl	8001a10 <run_complete_readout>
		  general_loop_flg = false;
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <main+0x15c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
	  }

	  if (I2C1->ISR & I2C_FLAG_TIMEOUT)
 80005be:	4b1b      	ldr	r3, [pc, #108]	; (800062c <main+0x164>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0c3      	beq.n	8000552 <main+0x8a>
	  {

		// Perform I2C software reset
		hi2c1.Instance->CR1 &= ~I2C_CR1_PE;  			    // Write PE=0
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0x150>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <main+0x150>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f022 0201 	bic.w	r2, r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80005da:	2064      	movs	r0, #100	; 0x64
 80005dc:	f002 fd02 	bl	8002fe4 <HAL_Delay>
		while (hi2c1.Instance->CR1 & I2C_CR1_PE) {} 		// Wait until PE bit becomes 0 (waiting is optional but recommended)
 80005e0:	bf00      	nop
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <main+0x150>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f003 0301 	and.w	r3, r3, #1
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1f8      	bne.n	80005e2 <main+0x11a>
		HAL_Delay(100);
 80005f0:	2064      	movs	r0, #100	; 0x64
 80005f2:	f002 fcf7 	bl	8002fe4 <HAL_Delay>
		hi2c1.Instance->CR1 |= I2C_CR1_PE;                  // Write PE=1
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <main+0x150>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <main+0x150>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f042 0201 	orr.w	r2, r2, #1
 8000604:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f002 fcec 	bl	8002fe4 <HAL_Delay>
		HAL_I2C_EnableListen_IT(&hi2c1);
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <main+0x150>)
 800060e:	f003 fc3f 	bl	8003e90 <HAL_I2C_EnableListen_IT>
	  ijc_dssd_ramp_loop();
 8000612:	e79e      	b.n	8000552 <main+0x8a>
 8000614:	20000130 	.word	0x20000130
 8000618:	20000034 	.word	0x20000034
 800061c:	20000030 	.word	0x20000030
 8000620:	2000021c 	.word	0x2000021c
 8000624:	20000277 	.word	0x20000277
 8000628:	20000230 	.word	0x20000230
 800062c:	40005400 	.word	0x40005400

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b096      	sub	sp, #88	; 0x58
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2244      	movs	r2, #68	; 0x44
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f007 fc1b 	bl	8007e7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	463b      	mov	r3, r7
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000652:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000656:	f005 f967 	bl	8005928 <HAL_PWREx_ControlVoltageScaling>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000660:	f002 fa1a 	bl	8002a98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2310      	movs	r3, #16
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000676:	2302      	movs	r3, #2
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800067e:	230a      	movs	r3, #10
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4618      	mov	r0, r3
 8000694:	f005 f99e 	bl	80059d4 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800069e:	f002 f9fb 	bl	8002a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	230f      	movs	r3, #15
 80006a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a6:	2303      	movs	r3, #3
 80006a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	2104      	movs	r1, #4
 80006ba:	4618      	mov	r0, r3
 80006bc:	f005 fd9e 	bl	80061fc <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c6:	f002 f9e7 	bl	8002a98 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3758      	adds	r7, #88	; 0x58
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <MX_I2C1_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 50;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e6:	2232      	movs	r2, #50	; 0x32
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_I2C1_Init+0x74>)
 8000710:	f002 ffb0 	bl	8003674 <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071a:	f002 f9bd 	bl	8002a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C1_Init+0x74>)
 8000722:	f005 f85b 	bl	80057dc <HAL_I2CEx_ConfigAnalogFilter>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f002 f9b4 	bl	8002a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_I2C1_Init+0x74>)
 8000734:	f005 f89d 	bl	8005872 <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f002 f9ab 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000034 	.word	0x20000034
 800074c:	40005400 	.word	0x40005400
 8000750:	10909cec 	.word	0x10909cec

08000754 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000758:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_I2C2_Init+0x74>)
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_I2C2_Init+0x78>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800075e:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_I2C2_Init+0x74>)
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <MX_I2C2_Init+0x7c>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_I2C2_Init+0x74>)
 800076c:	2201      	movs	r2, #1
 800076e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_I2C2_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_I2C2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_I2C2_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_I2C2_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <MX_I2C2_Init+0x74>)
 8000790:	f002 ff70 	bl	8003674 <HAL_I2C_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800079a:	f002 f97d 	bl	8002a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <MX_I2C2_Init+0x74>)
 80007a2:	f005 f81b 	bl	80057dc <HAL_I2CEx_ConfigAnalogFilter>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007ac:	f002 f974 	bl	8002a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_I2C2_Init+0x74>)
 80007b4:	f005 f85d 	bl	8005872 <HAL_I2CEx_ConfigDigitalFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007be:	f002 f96b 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000088 	.word	0x20000088
 80007cc:	40005800 	.word	0x40005800
 80007d0:	10909cec 	.word	0x10909cec

080007d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_I2C3_Init+0x74>)
 80007da:	4a1c      	ldr	r2, [pc, #112]	; (800084c <MX_I2C3_Init+0x78>)
 80007dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_I2C3_Init+0x74>)
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <MX_I2C3_Init+0x7c>)
 80007e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_I2C3_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_I2C3_Init+0x74>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_I2C3_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_I2C3_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_I2C3_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_I2C3_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_I2C3_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_I2C3_Init+0x74>)
 8000810:	f002 ff30 	bl	8003674 <HAL_I2C_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800081a:	f002 f93d 	bl	8002a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081e:	2100      	movs	r1, #0
 8000820:	4809      	ldr	r0, [pc, #36]	; (8000848 <MX_I2C3_Init+0x74>)
 8000822:	f004 ffdb 	bl	80057dc <HAL_I2CEx_ConfigAnalogFilter>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800082c:	f002 f934 	bl	8002a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_I2C3_Init+0x74>)
 8000834:	f005 f81d 	bl	8005872 <HAL_I2CEx_ConfigDigitalFilter>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800083e:	f002 f92b 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000dc 	.word	0x200000dc
 800084c:	40005c00 	.word	0x40005c00
 8000850:	10909cec 	.word	0x10909cec

08000854 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000872:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <MX_TIM2_Init+0x98>)
 8000874:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000878:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_TIM2_Init+0x98>)
 800087c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000880:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_TIM2_Init+0x98>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_TIM2_Init+0x98>)
 800088a:	f649 4240 	movw	r2, #40000	; 0x9c40
 800088e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_TIM2_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_TIM2_Init+0x98>)
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800089c:	4813      	ldr	r0, [pc, #76]	; (80008ec <MX_TIM2_Init+0x98>)
 800089e:	f006 fa0d 	bl	8006cbc <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80008a8:	f002 f8f6 	bl	8002a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_TIM2_Init+0x98>)
 80008ba:	f006 fbad 	bl	8007018 <HAL_TIM_ConfigClockSource>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80008c4:	f002 f8e8 	bl	8002a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_TIM2_Init+0x98>)
 80008d6:	f006 fd8f 	bl	80073f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80008e0:	f002 f8da 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	3720      	adds	r7, #32
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000130 	.word	0x20000130

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USART2_UART_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_USART2_UART_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_USART2_UART_Init+0x58>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART2_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART2_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART2_UART_Init+0x58>)
 8000934:	f006 fde4 	bl	8007500 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800093e:	f002 f8ab 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000017c 	.word	0x2000017c
 800094c:	40004400 	.word	0x40004400

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b46      	ldr	r3, [pc, #280]	; (8000a80 <MX_GPIO_Init+0x130>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a45      	ldr	r2, [pc, #276]	; (8000a80 <MX_GPIO_Init+0x130>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b43      	ldr	r3, [pc, #268]	; (8000a80 <MX_GPIO_Init+0x130>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	4b40      	ldr	r3, [pc, #256]	; (8000a80 <MX_GPIO_Init+0x130>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a3f      	ldr	r2, [pc, #252]	; (8000a80 <MX_GPIO_Init+0x130>)
 8000984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b3d      	ldr	r3, [pc, #244]	; (8000a80 <MX_GPIO_Init+0x130>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <MX_GPIO_Init+0x130>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a39      	ldr	r2, [pc, #228]	; (8000a80 <MX_GPIO_Init+0x130>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <MX_GPIO_Init+0x130>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <MX_GPIO_Init+0x130>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a33      	ldr	r2, [pc, #204]	; (8000a80 <MX_GPIO_Init+0x130>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <MX_GPIO_Init+0x130>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	21b0      	movs	r1, #176	; 0xb0
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ce:	f002 fe1f 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_HT_CEA_DSSD_Pin|LD4_Pin|ENABLE_HT_IJC_DSSD_Pin|ENABLE_2_IJC_Pin
 80009d2:	2200      	movs	r2, #0
 80009d4:	f243 31e0 	movw	r1, #13280	; 0x33e0
 80009d8:	482a      	ldr	r0, [pc, #168]	; (8000a84 <MX_GPIO_Init+0x134>)
 80009da:	f002 fe19 	bl	8003610 <HAL_GPIO_WritePin>
                          |ENABLE_3_CEA_Pin|ENABLE_4_CAEN_Pin|ENABLE_5_UCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIMING_PIN_GPIO_Port, TIMING_PIN_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2140      	movs	r1, #64	; 0x40
 80009e2:	4829      	ldr	r0, [pc, #164]	; (8000a88 <MX_GPIO_Init+0x138>)
 80009e4:	f002 fe14 	bl	8003610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ee:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4822      	ldr	r0, [pc, #136]	; (8000a88 <MX_GPIO_Init+0x138>)
 8000a00:	f002 fc74 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a04:	23b0      	movs	r3, #176	; 0xb0
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f002 fc65 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a22:	2340      	movs	r3, #64	; 0x40
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f002 fc58 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_HT_CEA_DSSD_Pin LD4_Pin ENABLE_HT_IJC_DSSD_Pin ENABLE_2_IJC_Pin
                           ENABLE_3_CEA_Pin ENABLE_4_CAEN_Pin ENABLE_5_UCD_Pin */
  GPIO_InitStruct.Pin = ENABLE_HT_CEA_DSSD_Pin|LD4_Pin|ENABLE_HT_IJC_DSSD_Pin|ENABLE_2_IJC_Pin
 8000a3c:	f243 33e0 	movw	r3, #13280	; 0x33e0
 8000a40:	617b      	str	r3, [r7, #20]
                          |ENABLE_3_CEA_Pin|ENABLE_4_CAEN_Pin|ENABLE_5_UCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	480b      	ldr	r0, [pc, #44]	; (8000a84 <MX_GPIO_Init+0x134>)
 8000a56:	f002 fc49 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : TIMING_PIN_Pin */
  GPIO_InitStruct.Pin = TIMING_PIN_Pin;
 8000a5a:	2340      	movs	r3, #64	; 0x40
 8000a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIMING_PIN_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_GPIO_Init+0x138>)
 8000a72:	f002 fc3b 	bl	80032ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	; 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48000800 	.word	0x48000800

08000a8c <i2c_read>:
}
*/
// ###############################################

HAL_StatusTypeDef i2c_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b088      	sub	sp, #32
 8000a90:	af02      	add	r7, sp, #8
 8000a92:	60f8      	str	r0, [r7, #12]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	461a      	mov	r2, r3
 8000a98:	460b      	mov	r3, r1
 8000a9a:	72fb      	strb	r3, [r7, #11]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	813b      	strh	r3, [r7, #8]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(hi2c, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 8000aa0:	7afb      	ldrb	r3, [r7, #11]
 8000aa2:	b299      	uxth	r1, r3
 8000aa4:	893b      	ldrh	r3, [r7, #8]
 8000aa6:	220a      	movs	r2, #10
 8000aa8:	9200      	str	r2, [sp, #0]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f002 ff95 	bl	80039dc <HAL_I2C_Master_Receive>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <i2c_write>:

HAL_StatusTypeDef i2c_write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	461a      	mov	r2, r3
 8000acc:	460b      	mov	r3, r1
 8000ace:	72fb      	strb	r3, [r7, #11]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	813b      	strh	r3, [r7, #8]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8000ad4:	7afb      	ldrb	r3, [r7, #11]
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	893b      	ldrh	r3, [r7, #8]
 8000ada:	220a      	movs	r2, #10
 8000adc:	9200      	str	r2, [sp, #0]
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f002 fe63 	bl	80037ac <HAL_I2C_Master_Transmit>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <i2c_write_read>:

HAL_StatusTypeDef i2c_write_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	461a      	mov	r2, r3
 8000b00:	460b      	mov	r3, r1
 8000b02:	72fb      	strb	r3, [r7, #11]
 8000b04:	4613      	mov	r3, r2
 8000b06:	813b      	strh	r3, [r7, #8]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8000b0c:	2305      	movs	r3, #5
 8000b0e:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 8000b10:	2305      	movs	r3, #5
 8000b12:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	d802      	bhi.n	8000b20 <i2c_write_read+0x2c>
 8000b1a:	2064      	movs	r0, #100	; 0x64
 8000b1c:	f002 fa62 	bl	8002fe4 <HAL_Delay>
		status = i2c_write(hi2c, dev_addr, out_ptr, countTX);						// Perform I2C operation
 8000b20:	893b      	ldrh	r3, [r7, #8]
 8000b22:	7af9      	ldrb	r1, [r7, #11]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f7ff ffca 	bl	8000ac0 <i2c_write>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8000b36:	7d7b      	ldrb	r3, [r7, #21]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d102      	bne.n	8000b42 <i2c_write_read+0x4e>
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d1e8      	bne.n	8000b14 <i2c_write_read+0x20>

	if(status == HAL_ERROR){return(status);}
 8000b42:	7d7b      	ldrb	r3, [r7, #21]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d101      	bne.n	8000b4c <i2c_write_read+0x58>
 8000b48:	7d7b      	ldrb	r3, [r7, #21]
 8000b4a:	e01a      	b.n	8000b82 <i2c_write_read+0x8e>

	HAL_Delay(5);
 8000b4c:	2005      	movs	r0, #5
 8000b4e:	f002 fa49 	bl	8002fe4 <HAL_Delay>

	do
	{
		// Read operation
		status =  i2c_read(hi2c, dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 8000b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000b54:	7af9      	ldrb	r1, [r7, #11]
 8000b56:	6a3a      	ldr	r2, [r7, #32]
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff ff97 	bl	8000a8c <i2c_read>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8000b62:	7dbb      	ldrb	r3, [r7, #22]
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d802      	bhi.n	8000b6e <i2c_write_read+0x7a>
 8000b68:	2064      	movs	r0, #100	; 0x64
 8000b6a:	f002 fa3b 	bl	8002fe4 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8000b6e:	7dbb      	ldrb	r3, [r7, #22]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8000b74:	7d7b      	ldrb	r3, [r7, #21]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d102      	bne.n	8000b80 <i2c_write_read+0x8c>
 8000b7a:	7dbb      	ldrb	r3, [r7, #22]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d1e8      	bne.n	8000b52 <i2c_write_read+0x5e>

	return(status);
 8000b80:	7d7b      	ldrb	r3, [r7, #21]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <dac7574_write>:
//        Chips and Devs
//************************************


bool dac7574_write(uint8_t channel, uint16_t data_bytes)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	460a      	mov	r2, r1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t tx_data[3] = {0x00, 0x00, 0x00};
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <dac7574_write+0x5c>)
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	8019      	strh	r1, [r3, #0]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	0c12      	lsrs	r2, r2, #16
 8000bac:	701a      	strb	r2, [r3, #0]

	// Split the data_bytes into two bytes and add the command to the TX data
	tx_data[0] = channel;
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data_bytes >> 8) & 0xFF;
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data_bytes) & 0xFF;
 8000bbc:	88bb      	ldrh	r3, [r7, #4]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	73bb      	strb	r3, [r7, #14]

	status = ucd_i2c_write(ADDR_UCD_DAC, &tx_data[0], 3);
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	4619      	mov	r1, r3
 8000bca:	209e      	movs	r0, #158	; 0x9e
 8000bcc:	f000 fb88 	bl	80012e0 <ucd_i2c_write>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]

	return(status);
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bf14      	ite	ne
 8000bda:	2301      	movne	r3, #1
 8000bdc:	2300      	moveq	r3, #0
 8000bde:	b2db      	uxtb	r3, r3
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	08007eec 	.word	0x08007eec

08000bec <max6911_read>:


uint16_t max6911_read(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t cmd_msb, uint8_t cmd_lsb)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	70fb      	strb	r3, [r7, #3]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	70bb      	strb	r3, [r7, #2]
 8000c02:	4613      	mov	r3, r2
 8000c04:	707b      	strb	r3, [r7, #1]
	uint16_t temp_data = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	81fb      	strh	r3, [r7, #14]
	uint8_t rx_data[2] = {0x00, 0x00};
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	81bb      	strh	r3, [r7, #12]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000c0e:	2300      	movs	r3, #0
 8000c10:	813b      	strh	r3, [r7, #8]

	// Init the device ctrl reg1
	max6911_set_ctrl1_register(INIT_WITH_CURRENT_GAIN_8);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f864 	bl	8000ce0 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000c18:	230a      	movs	r3, #10
 8000c1a:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000c1c:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <max6911_read+0xec>)
 8000c1e:	7b1b      	ldrb	r3, [r3, #12]
 8000c20:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000c22:	f107 0208 	add.w	r2, r7, #8
 8000c26:	78f9      	ldrb	r1, [r7, #3]
 8000c28:	2302      	movs	r3, #2
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ff48 	bl	8000ac0 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000c30:	230b      	movs	r3, #11
 8000c32:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <max6911_read+0xec>)
 8000c36:	7b5b      	ldrb	r3, [r3, #13]
 8000c38:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000c3a:	f107 0208 	add.w	r2, r7, #8
 8000c3e:	78f9      	ldrb	r1, [r7, #3]
 8000c40:	2302      	movs	r3, #2
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ff3c 	bl	8000ac0 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the device for normal fast read operation
	max6911_set_ctrl1_register(FASTREAD_NORMAL_OPERATION);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f000 f849 	bl	8000ce0 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000c4e:	230a      	movs	r3, #10
 8000c50:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <max6911_read+0xec>)
 8000c54:	7b1b      	ldrb	r3, [r3, #12]
 8000c56:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000c58:	f107 0208 	add.w	r2, r7, #8
 8000c5c:	78f9      	ldrb	r1, [r7, #3]
 8000c5e:	2302      	movs	r3, #2
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff2d 	bl	8000ac0 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000c66:	230b      	movs	r3, #11
 8000c68:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <max6911_read+0xec>)
 8000c6c:	7b5b      	ldrb	r3, [r3, #13]
 8000c6e:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000c70:	f107 0208 	add.w	r2, r7, #8
 8000c74:	78f9      	ldrb	r1, [r7, #3]
 8000c76:	2302      	movs	r3, #2
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff21 	bl	8000ac0 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the read for MSB and LSB
	status = i2c_write_read(hi2c, device_addr, &cmd_msb, 1, &rx_data[0], 1);
 8000c7e:	1cba      	adds	r2, r7, #2
 8000c80:	78f9      	ldrb	r1, [r7, #3]
 8000c82:	2301      	movs	r3, #1
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff ff30 	bl	8000af4 <i2c_write_read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <max6911_read+0xf0>)
 8000c9a:	701a      	strb	r2, [r3, #0]
	status = i2c_write_read(hi2c, device_addr, &cmd_lsb, 1, &rx_data[1], 1);
 8000c9c:	1c7a      	adds	r2, r7, #1
 8000c9e:	78f9      	ldrb	r1, [r7, #3]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	f107 030c 	add.w	r3, r7, #12
 8000ca8:	3301      	adds	r3, #1
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff20 	bl	8000af4 <i2c_write_read>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <max6911_read+0xf0>)
 8000cba:	701a      	strb	r2, [r3, #0]

	temp_data = (rx_data[0]<<8) | (rx_data[1]);
 8000cbc:	7b3b      	ldrb	r3, [r7, #12]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	7b7b      	ldrb	r3, [r7, #13]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	81fb      	strh	r3, [r7, #14]
	return(temp_data);
 8000ccc:	89fb      	ldrh	r3, [r7, #14]

}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000258 	.word	0x20000258
 8000cdc:	20000204 	.word	0x20000204

08000ce0 <max6911_set_ctrl1_register>:


void max6911_set_ctrl1_register(_max6911_ctrl selector)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]

	switch(selector)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <max6911_set_ctrl1_register+0x16>
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d020      	beq.n	8000d36 <max6911_set_ctrl1_register+0x56>
			break;
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		default:
			break;
 8000cf4:	e03e      	b.n	8000d74 <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000cf6:	4a22      	ldr	r2, [pc, #136]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000cf8:	7b13      	ldrb	r3, [r2, #12]
 8000cfa:	f36f 03c3 	bfc	r3, #3, #1
 8000cfe:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d02:	7b13      	ldrb	r3, [r2, #12]
 8000d04:	f36f 1304 	bfc	r3, #4, #1
 8000d08:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000d0a:	4a1d      	ldr	r2, [pc, #116]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d0c:	7b13      	ldrb	r3, [r2, #12]
 8000d0e:	f36f 1347 	bfc	r3, #5, #3
 8000d12:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_A_GAIN_8x_DEC;
 8000d14:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d16:	7b13      	ldrb	r3, [r2, #12]
 8000d18:	2102      	movs	r1, #2
 8000d1a:	f361 0302 	bfi	r3, r1, #0, #3
 8000d1e:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000d20:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d22:	7b53      	ldrb	r3, [r2, #13]
 8000d24:	f36f 03c3 	bfc	r3, #3, #1
 8000d28:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d2c:	7b53      	ldrb	r3, [r2, #13]
 8000d2e:	f36f 0382 	bfc	r3, #2, #1
 8000d32:	7353      	strb	r3, [r2, #13]
			break;
 8000d34:	e01e      	b.n	8000d74 <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d38:	7b13      	ldrb	r3, [r2, #12]
 8000d3a:	f36f 03c3 	bfc	r3, #3, #1
 8000d3e:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000d40:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d42:	7b13      	ldrb	r3, [r2, #12]
 8000d44:	f36f 1304 	bfc	r3, #4, #1
 8000d48:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000d4a:	4a0d      	ldr	r2, [pc, #52]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d4c:	7b13      	ldrb	r3, [r2, #12]
 8000d4e:	f36f 1347 	bfc	r3, #5, #3
 8000d52:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_FAST_READ_DEC;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d56:	7b13      	ldrb	r3, [r2, #12]
 8000d58:	f043 0307 	orr.w	r3, r3, #7
 8000d5c:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d60:	7b53      	ldrb	r3, [r2, #13]
 8000d62:	f36f 03c3 	bfc	r3, #3, #1
 8000d66:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <max6911_set_ctrl1_register+0xa0>)
 8000d6a:	7b53      	ldrb	r3, [r2, #13]
 8000d6c:	f36f 0382 	bfc	r3, #2, #1
 8000d70:	7353      	strb	r3, [r2, #13]
			break;
 8000d72:	bf00      	nop
	}
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	20000258 	.word	0x20000258

08000d84 <ht_cea_enable_set>:
//            HV
//************************************

// Board enable functions
void ht_cea_enable_set(bool gpio_state)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_CEA_DSSD_GPIO_Port, ENABLE_HT_CEA_DSSD_Pin, gpio_state);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	461a      	mov	r2, r3
 8000d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <ht_cea_enable_set+0x28>)
 8000d98:	f002 fc3a 	bl	8003610 <HAL_GPIO_WritePin>
	cea_detector.hv_enable_state  = gpio_state;
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <ht_cea_enable_set+0x2c>)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	7493      	strb	r3, [r2, #18]

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	48000400 	.word	0x48000400
 8000db0:	20000230 	.word	0x20000230

08000db4 <ht_ijc_enable_set>:
	cea_detector.hv_enable_state = HAL_GPIO_ReadPin(ENABLE_HT_CEA_DSSD_GPIO_Port, ENABLE_HT_CEA_DSSD_Pin);
	return(cea_detector.hv_enable_state);
}

void ht_ijc_enable_set(bool gpio_state)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_IJC_DSSD_GPIO_Port, ENABLE_HT_IJC_DSSD_Pin, gpio_state);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	2120      	movs	r1, #32
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <ht_ijc_enable_set+0x24>)
 8000dc6:	f002 fc23 	bl	8003610 <HAL_GPIO_WritePin>
	ijc_detector.hv_enable_state  = gpio_state;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <ht_ijc_enable_set+0x28>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	7493      	strb	r3, [r2, #18]

}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	2000021c 	.word	0x2000021c

08000de0 <ijc_dssd_ramp_loop>:
	return(ijc_detector.hv_enable_state);
}


void ijc_dssd_ramp_loop(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the IJC voltage

	uint16_t max6911_measured_voltage = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000dea:	2300      	movs	r3, #0
 8000dec:	803b      	strh	r3, [r7, #0]

	if(ijc_detector.ramp_flag == true && ijc_detector.hv_loop_enable == true)
 8000dee:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 8082 	beq.w	8000efc <ijc_dssd_ramp_loop+0x11c>
 8000df8:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000dfa:	785b      	ldrb	r3, [r3, #1]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d07d      	beq.n	8000efc <ijc_dssd_ramp_loop+0x11c>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000e00:	2303      	movs	r3, #3
 8000e02:	2202      	movs	r2, #2
 8000e04:	21e4      	movs	r1, #228	; 0xe4
 8000e06:	4840      	ldr	r0, [pc, #256]	; (8000f08 <ijc_dssd_ramp_loop+0x128>)
 8000e08:	f7ff fef0 	bl	8000bec <max6911_read>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	091b      	lsrs	r3, r3, #4
 8000e14:	80fb      	strh	r3, [r7, #6]

		// Get the current digipot value
		status = ijc_i2c_read(ADDR_IJC_DIGIPOT, &ijc_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000e16:	2201      	movs	r2, #1
 8000e18:	493c      	ldr	r1, [pc, #240]	; (8000f0c <ijc_dssd_ramp_loop+0x12c>)
 8000e1a:	2058      	movs	r0, #88	; 0x58
 8000e1c:	f000 fb6e 	bl	80014fc <ijc_i2c_read>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <ijc_dssd_ramp_loop+0x130>)
 8000e26:	701a      	strb	r2, [r3, #0]

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((ijc_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (ijc_detector.hv_targate_value - ijc_detector.hv_lower_deadband)))
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e2a:	891b      	ldrh	r3, [r3, #8]
 8000e2c:	88fa      	ldrh	r2, [r7, #6]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d220      	bcs.n	8000e74 <ijc_dssd_ramp_loop+0x94>
 8000e32:	88fa      	ldrh	r2, [r7, #6]
 8000e34:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e36:	891b      	ldrh	r3, [r3, #8]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	429a      	cmp	r2, r3
 8000e42:	da17      	bge.n	8000e74 <ijc_dssd_ramp_loop+0x94>
		{
			// If the target is greater than the current value, increment the digipot value
			if (ijc_detector.hv_digipot_value <= 149)
 8000e44:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e46:	799b      	ldrb	r3, [r3, #6]
 8000e48:	2b95      	cmp	r3, #149	; 0x95
 8000e4a:	d854      	bhi.n	8000ef6 <ijc_dssd_ramp_loop+0x116>
			{
				ijc_detector.hv_digipot_value ++;
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e4e:	799b      	ldrb	r3, [r3, #6]
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e56:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e5a:	799b      	ldrb	r3, [r3, #6]
 8000e5c:	707b      	strb	r3, [r7, #1]
				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000e5e:	4639      	mov	r1, r7
 8000e60:	2301      	movs	r3, #1
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <ijc_dssd_ramp_loop+0x12c>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	2058      	movs	r0, #88	; 0x58
 8000e6a:	f000 fb61 	bl	8001530 <ijc_i2c_write_read>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	717b      	strb	r3, [r7, #5]
			if (ijc_detector.hv_digipot_value <= 149)
 8000e72:	e040      	b.n	8000ef6 <ijc_dssd_ramp_loop+0x116>
			}
		}
		else if ((ijc_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (ijc_detector.hv_targate_value + ijc_detector.hv_upper_deadband)))
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e76:	891b      	ldrh	r3, [r3, #8]
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d920      	bls.n	8000ec0 <ijc_dssd_ramp_loop+0xe0>
 8000e7e:	88fa      	ldrh	r2, [r7, #6]
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e82:	891b      	ldrh	r3, [r3, #8]
 8000e84:	4619      	mov	r1, r3
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e88:	791b      	ldrb	r3, [r3, #4]
 8000e8a:	440b      	add	r3, r1
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dd17      	ble.n	8000ec0 <ijc_dssd_ramp_loop+0xe0>
		{
			if (ijc_detector.hv_digipot_value >= 1)
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e92:	799b      	ldrb	r3, [r3, #6]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d02e      	beq.n	8000ef6 <ijc_dssd_ramp_loop+0x116>
			{
				// If the target is less than the current value
				ijc_detector.hv_digipot_value --;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000e9a:	799b      	ldrb	r3, [r3, #6]
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000ea2:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	707b      	strb	r3, [r7, #1]

				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000eaa:	4639      	mov	r1, r7
 8000eac:	2301      	movs	r3, #1
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <ijc_dssd_ramp_loop+0x12c>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	2058      	movs	r0, #88	; 0x58
 8000eb6:	f000 fb3b 	bl	8001530 <ijc_i2c_write_read>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	713b      	strb	r3, [r7, #4]
			if (ijc_detector.hv_digipot_value >= 1)
 8000ebe:	e01a      	b.n	8000ef6 <ijc_dssd_ramp_loop+0x116>
			}
		}
		else if((ijc_detector.hv_targate_value == 0) && (ijc_detector.hv_digipot_value > 0))
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000ec2:	891b      	ldrh	r3, [r3, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d116      	bne.n	8000ef6 <ijc_dssd_ramp_loop+0x116>
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000eca:	799b      	ldrb	r3, [r3, #6]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d012      	beq.n	8000ef6 <ijc_dssd_ramp_loop+0x116>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			ijc_detector.hv_digipot_value --;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000ed2:	799b      	ldrb	r3, [r3, #6]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000eda:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = ijc_detector.hv_digipot_value;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000ede:	799b      	ldrb	r3, [r3, #6]
 8000ee0:	707b      	strb	r3, [r7, #1]

			HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000ee2:	4639      	mov	r1, r7
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <ijc_dssd_ramp_loop+0x12c>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	2058      	movs	r0, #88	; 0x58
 8000eee:	f000 fb1f 	bl	8001530 <ijc_i2c_write_read>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	70fb      	strb	r3, [r7, #3]
		}
		ijc_detector.ramp_flag  = false;
 8000ef6:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <ijc_dssd_ramp_loop+0x124>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
	}
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000021c 	.word	0x2000021c
 8000f08:	20000088 	.word	0x20000088
 8000f0c:	20000222 	.word	0x20000222
 8000f10:	20000204 	.word	0x20000204

08000f14 <cea_dssd_ramp_loop>:




void cea_dssd_ramp_loop(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the CEA voltage

	uint16_t max6911_measured_voltage = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000f1e:	2300      	movs	r3, #0
 8000f20:	803b      	strh	r3, [r7, #0]

	if(cea_detector.ramp_flag == true && cea_detector.hv_loop_enable == true)
 8000f22:	4b45      	ldr	r3, [pc, #276]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 8082 	beq.w	8001030 <cea_dssd_ramp_loop+0x11c>
 8000f2c:	4b42      	ldr	r3, [pc, #264]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000f2e:	785b      	ldrb	r3, [r3, #1]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d07d      	beq.n	8001030 <cea_dssd_ramp_loop+0x11c>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000f34:	2303      	movs	r3, #3
 8000f36:	2202      	movs	r2, #2
 8000f38:	21ee      	movs	r1, #238	; 0xee
 8000f3a:	4840      	ldr	r0, [pc, #256]	; (800103c <cea_dssd_ramp_loop+0x128>)
 8000f3c:	f7ff fe56 	bl	8000bec <max6911_read>
 8000f40:	4603      	mov	r3, r0
 8000f42:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	80fb      	strh	r3, [r7, #6]

		//HAL_Delay(100);

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	493c      	ldr	r1, [pc, #240]	; (8001040 <cea_dssd_ramp_loop+0x12c>)
 8000f4e:	2058      	movs	r0, #88	; 0x58
 8000f50:	f000 fbc8 	bl	80016e4 <cea_i2c_read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <cea_dssd_ramp_loop+0x130>)
 8000f5a:	701a      	strb	r2, [r3, #0]

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((cea_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (cea_detector.hv_targate_value - cea_detector.hv_lower_deadband)))
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000f5e:	891b      	ldrh	r3, [r3, #8]
 8000f60:	88fa      	ldrh	r2, [r7, #6]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d220      	bcs.n	8000fa8 <cea_dssd_ramp_loop+0x94>
 8000f66:	88fa      	ldrh	r2, [r7, #6]
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000f6a:	891b      	ldrh	r3, [r3, #8]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000f70:	795b      	ldrb	r3, [r3, #5]
 8000f72:	1acb      	subs	r3, r1, r3
 8000f74:	429a      	cmp	r2, r3
 8000f76:	da17      	bge.n	8000fa8 <cea_dssd_ramp_loop+0x94>
		{
			// If the target is greater than the current value, increment the digipot value
			if (cea_detector.hv_digipot_value <= 149)
 8000f78:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000f7a:	799b      	ldrb	r3, [r3, #6]
 8000f7c:	2b95      	cmp	r3, #149	; 0x95
 8000f7e:	d854      	bhi.n	800102a <cea_dssd_ramp_loop+0x116>
			{
				cea_detector.hv_digipot_value ++;
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000f82:	799b      	ldrb	r3, [r3, #6]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000f8a:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000f8e:	799b      	ldrb	r3, [r3, #6]
 8000f90:	707b      	strb	r3, [r7, #1]
				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000f92:	4639      	mov	r1, r7
 8000f94:	2301      	movs	r3, #1
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <cea_dssd_ramp_loop+0x12c>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	2058      	movs	r0, #88	; 0x58
 8000f9e:	f000 fbd1 	bl	8001744 <cea_i2c_write_read>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	717b      	strb	r3, [r7, #5]
			if (cea_detector.hv_digipot_value <= 149)
 8000fa6:	e040      	b.n	800102a <cea_dssd_ramp_loop+0x116>
			}
		}
		else if ((cea_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (cea_detector.hv_targate_value + cea_detector.hv_upper_deadband)))
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000faa:	891b      	ldrh	r3, [r3, #8]
 8000fac:	88fa      	ldrh	r2, [r7, #6]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d920      	bls.n	8000ff4 <cea_dssd_ramp_loop+0xe0>
 8000fb2:	88fa      	ldrh	r2, [r7, #6]
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000fb6:	891b      	ldrh	r3, [r3, #8]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	440b      	add	r3, r1
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dd17      	ble.n	8000ff4 <cea_dssd_ramp_loop+0xe0>
		{
			if (cea_detector.hv_digipot_value >= 1)
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000fc6:	799b      	ldrb	r3, [r3, #6]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d02e      	beq.n	800102a <cea_dssd_ramp_loop+0x116>
			{
				// If the target is less than the current value
				cea_detector.hv_digipot_value --;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000fce:	799b      	ldrb	r3, [r3, #6]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000fd6:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000fda:	799b      	ldrb	r3, [r3, #6]
 8000fdc:	707b      	strb	r3, [r7, #1]

				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000fde:	4639      	mov	r1, r7
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <cea_dssd_ramp_loop+0x12c>)
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	2058      	movs	r0, #88	; 0x58
 8000fea:	f000 fbab 	bl	8001744 <cea_i2c_write_read>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	713b      	strb	r3, [r7, #4]
			if (cea_detector.hv_digipot_value >= 1)
 8000ff2:	e01a      	b.n	800102a <cea_dssd_ramp_loop+0x116>
			}
		}
		else if((cea_detector.hv_targate_value == 0) && (cea_detector.hv_digipot_value > 0))
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000ff6:	891b      	ldrh	r3, [r3, #8]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d116      	bne.n	800102a <cea_dssd_ramp_loop+0x116>
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8000ffe:	799b      	ldrb	r3, [r3, #6]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d012      	beq.n	800102a <cea_dssd_ramp_loop+0x116>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			cea_detector.hv_digipot_value --;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8001006:	799b      	ldrb	r3, [r3, #6]
 8001008:	3b01      	subs	r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 800100e:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = cea_detector.hv_digipot_value;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 8001012:	799b      	ldrb	r3, [r3, #6]
 8001014:	707b      	strb	r3, [r7, #1]

			HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8001016:	4639      	mov	r1, r7
 8001018:	2301      	movs	r3, #1
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <cea_dssd_ramp_loop+0x12c>)
 800101e:	2202      	movs	r2, #2
 8001020:	2058      	movs	r0, #88	; 0x58
 8001022:	f000 fb8f 	bl	8001744 <cea_i2c_write_read>
 8001026:	4603      	mov	r3, r0
 8001028:	70fb      	strb	r3, [r7, #3]
		}
		cea_detector.ramp_flag  = false;
 800102a:	4b03      	ldr	r3, [pc, #12]	; (8001038 <cea_dssd_ramp_loop+0x124>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
	}
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000230 	.word	0x20000230
 800103c:	200000dc 	.word	0x200000dc
 8001040:	20000236 	.word	0x20000236
 8001044:	20000204 	.word	0x20000204

08001048 <make_ijc_dssd_safe>:



bool make_ijc_dssd_safe(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
	// To make the IJCLab DSSD detector safe

	bool status = EXIT_SUCCESS;
 800104e:	2300      	movs	r3, #0
 8001050:	71fb      	strb	r3, [r7, #7]
	bool board_state;

	// Get the state of the IJCLab detector board
	board_state = ijc_board_enable_get();
 8001052:	f000 fa21 	bl	8001498 <ijc_board_enable_get>
 8001056:	4603      	mov	r3, r0
 8001058:	71bb      	strb	r3, [r7, #6]

	if(board_state == true)
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d04e      	beq.n	80010fe <make_ijc_dssd_safe+0xb6>
	{
		// If the detector board is enabled - Make it safe from here by ramping down if necessary

		// Get the current digipot value
		status = ijc_i2c_read(ADDR_IJC_DIGIPOT, &ijc_detector.hv_digipot_value, 1);
 8001060:	2201      	movs	r2, #1
 8001062:	4931      	ldr	r1, [pc, #196]	; (8001128 <make_ijc_dssd_safe+0xe0>)
 8001064:	2058      	movs	r0, #88	; 0x58
 8001066:	f000 fa49 	bl	80014fc <ijc_i2c_read>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	bf14      	ite	ne
 8001070:	2301      	movne	r3, #1
 8001072:	2300      	moveq	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]

		if(status == EXIT_SUCCESS && ijc_detector.hv_digipot_value > 0)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f083 0301 	eor.w	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d010      	beq.n	80010a4 <make_ijc_dssd_safe+0x5c>
 8001082:	4b2a      	ldr	r3, [pc, #168]	; (800112c <make_ijc_dssd_safe+0xe4>)
 8001084:	799b      	ldrb	r3, [r3, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00c      	beq.n	80010a4 <make_ijc_dssd_safe+0x5c>
		{
			// Begin ramp down
			// ----------------------------------------------------------------------------
			// Must enable the ramp enable flag
			ijc_detector.hv_loop_enable = true;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <make_ijc_dssd_safe+0xe4>)
 800108c:	2201      	movs	r2, #1
 800108e:	705a      	strb	r2, [r3, #1]

			// Must set the target value to 0
			ijc_detector.hv_targate_value = 0;
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <make_ijc_dssd_safe+0xe4>)
 8001092:	2200      	movs	r2, #0
 8001094:	811a      	strh	r2, [r3, #8]

			// Set the flag to indicate that the IJCLab board is currently being made safe
			ijc_detector.making_safe_inprogress = true;
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <make_ijc_dssd_safe+0xe4>)
 8001098:	2201      	movs	r2, #1
 800109a:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 800109c:	2301      	movs	r3, #1
 800109e:	71fb      	strb	r3, [r7, #7]
			return(status);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	e03d      	b.n	8001120 <make_ijc_dssd_safe+0xd8>
		}
		else if (status == EXIT_SUCCESS && ijc_detector.hv_digipot_value == 0)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f083 0301 	eor.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d015      	beq.n	80010dc <make_ijc_dssd_safe+0x94>
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <make_ijc_dssd_safe+0xe4>)
 80010b2:	799b      	ldrb	r3, [r3, #6]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d111      	bne.n	80010dc <make_ijc_dssd_safe+0x94>
		{
			// Board is enabled but the digipot is in the 0 position
			ijc_detector.making_safe_inprogress = false;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <make_ijc_dssd_safe+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	74da      	strb	r2, [r3, #19]
			// The digipot is in a 0 state - the make safe was successful

			// Disable HV and disable the board
			ht_ijc_enable_set(GPIO_PIN_RESET);          							     // Reset the IJC HV SUPPLY
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff fe78 	bl	8000db4 <ht_ijc_enable_set>
			HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, GPIO_PIN_RESET); // Disable the IJC Board
 80010c4:	2200      	movs	r2, #0
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <make_ijc_dssd_safe+0xe8>)
 80010ca:	f002 faa1 	bl	8003610 <HAL_GPIO_WritePin>
			ijc_detector.board_enable_state = 0;
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <make_ijc_dssd_safe+0xe4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	821a      	strh	r2, [r3, #16]

			status = EXIT_SUCCESS;
 80010d4:	2300      	movs	r3, #0
 80010d6:	71fb      	strb	r3, [r7, #7]
			return(status);
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	e021      	b.n	8001120 <make_ijc_dssd_safe+0xd8>
		}
		else if (status == EXIT_FAILURE)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d006      	beq.n	80010f0 <make_ijc_dssd_safe+0xa8>
		{
			// Failed to make communication to the digipot device
			ijc_detector.making_safe_inprogress = false;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <make_ijc_dssd_safe+0xe4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 80010e8:	2301      	movs	r3, #1
 80010ea:	71fb      	strb	r3, [r7, #7]
			return(status);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	e017      	b.n	8001120 <make_ijc_dssd_safe+0xd8>
		}
		else
		{
			ijc_detector.making_safe_inprogress = false;
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <make_ijc_dssd_safe+0xe4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 80010f6:	2301      	movs	r3, #1
 80010f8:	71fb      	strb	r3, [r7, #7]
			return(status);
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	e010      	b.n	8001120 <make_ijc_dssd_safe+0xd8>
		}
	}
	else
	{
		ijc_detector.making_safe_inprogress = false;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <make_ijc_dssd_safe+0xe4>)
 8001100:	2200      	movs	r2, #0
 8001102:	74da      	strb	r2, [r3, #19]
		ht_ijc_enable_set(GPIO_PIN_RESET);          							     // Reset the IJC HV SUPPLY
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fe55 	bl	8000db4 <ht_ijc_enable_set>
		HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, GPIO_PIN_RESET); // Disable the IJC Board
 800110a:	2200      	movs	r2, #0
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <make_ijc_dssd_safe+0xe8>)
 8001110:	f002 fa7e 	bl	8003610 <HAL_GPIO_WritePin>
		ijc_detector.board_enable_state = 0;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <make_ijc_dssd_safe+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	821a      	strh	r2, [r3, #16]
		// If board is disabled the board is already in a safe state
		status = EXIT_SUCCESS;
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]
		return(status);
 800111e:	79fb      	ldrb	r3, [r7, #7]
	}

}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000222 	.word	0x20000222
 800112c:	2000021c 	.word	0x2000021c
 8001130:	48000400 	.word	0x48000400

08001134 <make_cea_dssd_safe>:



bool make_cea_dssd_safe(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
	// To make the CEA DSSD detector safe

	bool status = EXIT_SUCCESS;
 800113a:	2300      	movs	r3, #0
 800113c:	71fb      	strb	r3, [r7, #7]
	bool board_state;

	// Get the state of the CEA detector board
	board_state = cea_board_enable_get();
 800113e:	f000 fa9f 	bl	8001680 <cea_board_enable_get>
 8001142:	4603      	mov	r3, r0
 8001144:	71bb      	strb	r3, [r7, #6]

	if(board_state == true)
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d04e      	beq.n	80011ea <make_cea_dssd_safe+0xb6>
	{
		// If the detector board is enabled - Make it safe from here by ramping down if necessary

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1);
 800114c:	2201      	movs	r2, #1
 800114e:	4931      	ldr	r1, [pc, #196]	; (8001214 <make_cea_dssd_safe+0xe0>)
 8001150:	2058      	movs	r0, #88	; 0x58
 8001152:	f000 fac7 	bl	80016e4 <cea_i2c_read>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	bf14      	ite	ne
 800115c:	2301      	movne	r3, #1
 800115e:	2300      	moveq	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]

		if(status == EXIT_SUCCESS && cea_detector.hv_digipot_value > 0)
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	f083 0301 	eor.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d010      	beq.n	8001190 <make_cea_dssd_safe+0x5c>
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <make_cea_dssd_safe+0xe4>)
 8001170:	799b      	ldrb	r3, [r3, #6]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00c      	beq.n	8001190 <make_cea_dssd_safe+0x5c>
		{
			// Begin ramp down
			// ----------------------------------------------------------------------------
			// Must enable the ramp enable flag
			cea_detector.hv_loop_enable = true;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <make_cea_dssd_safe+0xe4>)
 8001178:	2201      	movs	r2, #1
 800117a:	705a      	strb	r2, [r3, #1]

			// Must set the target value to 0
			cea_detector.hv_targate_value = 0;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <make_cea_dssd_safe+0xe4>)
 800117e:	2200      	movs	r2, #0
 8001180:	811a      	strh	r2, [r3, #8]

			// Set the flag to indicate that the CEA board is currently being made safe
			cea_detector.making_safe_inprogress = true;
 8001182:	4b25      	ldr	r3, [pc, #148]	; (8001218 <make_cea_dssd_safe+0xe4>)
 8001184:	2201      	movs	r2, #1
 8001186:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 8001188:	2301      	movs	r3, #1
 800118a:	71fb      	strb	r3, [r7, #7]
			return(status);
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	e03d      	b.n	800120c <make_cea_dssd_safe+0xd8>
		}
		else if (status == EXIT_SUCCESS && cea_detector.hv_digipot_value == 0)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f083 0301 	eor.w	r3, r3, #1
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d015      	beq.n	80011c8 <make_cea_dssd_safe+0x94>
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <make_cea_dssd_safe+0xe4>)
 800119e:	799b      	ldrb	r3, [r3, #6]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d111      	bne.n	80011c8 <make_cea_dssd_safe+0x94>
		{
			// Board is enabled but the digipot is in the 0 position
			cea_detector.making_safe_inprogress = false;
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <make_cea_dssd_safe+0xe4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	74da      	strb	r2, [r3, #19]
			// The digipot is in a 0 state - the make safe was successful

			// Disable HV and disable the board
			ht_cea_enable_set(GPIO_PIN_RESET);          							     // Reset the CEA HV SUPPLY
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fdea 	bl	8000d84 <ht_cea_enable_set>
			HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, GPIO_PIN_RESET); // Disable the CEA Board
 80011b0:	2200      	movs	r2, #0
 80011b2:	2180      	movs	r1, #128	; 0x80
 80011b4:	4819      	ldr	r0, [pc, #100]	; (800121c <make_cea_dssd_safe+0xe8>)
 80011b6:	f002 fa2b 	bl	8003610 <HAL_GPIO_WritePin>
			cea_detector.board_enable_state = 0;
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <make_cea_dssd_safe+0xe4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	821a      	strh	r2, [r3, #16]

			status = EXIT_SUCCESS;
 80011c0:	2300      	movs	r3, #0
 80011c2:	71fb      	strb	r3, [r7, #7]
			return(status);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	e021      	b.n	800120c <make_cea_dssd_safe+0xd8>
		}
		else if (status == EXIT_FAILURE)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <make_cea_dssd_safe+0xa8>
		{
			// Failed to make communication to the digipot device
			cea_detector.making_safe_inprogress = false;
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <make_cea_dssd_safe+0xe4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	71fb      	strb	r3, [r7, #7]
			return(status);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	e017      	b.n	800120c <make_cea_dssd_safe+0xd8>
		}
		else
		{
			cea_detector.making_safe_inprogress = false;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <make_cea_dssd_safe+0xe4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 80011e2:	2301      	movs	r3, #1
 80011e4:	71fb      	strb	r3, [r7, #7]
			return(status);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	e010      	b.n	800120c <make_cea_dssd_safe+0xd8>
		}
	}
	else
	{
		cea_detector.making_safe_inprogress = false;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <make_cea_dssd_safe+0xe4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	74da      	strb	r2, [r3, #19]
		// If board is disabled the board is already in a safe state
		ht_cea_enable_set(GPIO_PIN_RESET);          							     // Reset the CEA HV SUPPLY
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fdc7 	bl	8000d84 <ht_cea_enable_set>
		HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, GPIO_PIN_RESET); // Disable the CEA Board
 80011f6:	2200      	movs	r2, #0
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <make_cea_dssd_safe+0xe8>)
 80011fc:	f002 fa08 	bl	8003610 <HAL_GPIO_WritePin>
		cea_detector.board_enable_state = 0;							 // Set the board state in the struct
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <make_cea_dssd_safe+0xe4>)
 8001202:	2200      	movs	r2, #0
 8001204:	821a      	strh	r2, [r3, #16]

		status = EXIT_SUCCESS;
 8001206:	2300      	movs	r3, #0
 8001208:	71fb      	strb	r3, [r7, #7]
		return(status);
 800120a:	79fb      	ldrb	r3, [r7, #7]
	}

}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000236 	.word	0x20000236
 8001218:	20000230 	.word	0x20000230
 800121c:	48000400 	.word	0x48000400

08001220 <caen_board_enable_set>:
//            CAEN PSB
//************************************

// Board enable functions
void caen_board_enable_set(bool gpio_state)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_4_CAEN_GPIO_Port, ENABLE_4_CAEN_Pin, gpio_state);
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	461a      	mov	r2, r3
 800122e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <caen_board_enable_set+0x28>)
 8001234:	f002 f9ec 	bl	8003610 <HAL_GPIO_WritePin>
	caen_detector.board_enable_state = gpio_state;
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	b29a      	uxth	r2, r3
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <caen_board_enable_set+0x2c>)
 800123e:	821a      	strh	r2, [r3, #16]

}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	48000400 	.word	0x48000400
 800124c:	20000244 	.word	0x20000244

08001250 <caen_board_enable_get>:

bool caen_board_enable_get(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	caen_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_4_CAEN_GPIO_Port, ENABLE_4_CAEN_Pin);
 8001254:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001258:	4807      	ldr	r0, [pc, #28]	; (8001278 <caen_board_enable_get+0x28>)
 800125a:	f002 f9c1 	bl	80035e0 <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <caen_board_enable_get+0x2c>)
 8001264:	821a      	strh	r2, [r3, #16]
	return(caen_detector.board_enable_state);
 8001266:	4b05      	ldr	r3, [pc, #20]	; (800127c <caen_board_enable_get+0x2c>)
 8001268:	8a1b      	ldrh	r3, [r3, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	bf14      	ite	ne
 800126e:	2301      	movne	r3, #1
 8001270:	2300      	moveq	r3, #0
 8001272:	b2db      	uxtb	r3, r3
}
 8001274:	4618      	mov	r0, r3
 8001276:	bd80      	pop	{r7, pc}
 8001278:	48000400 	.word	0x48000400
 800127c:	20000244 	.word	0x20000244

08001280 <ucd_board_enable_set>:
//            UCD PSB
//************************************

// Board enable functions
void ucd_board_enable_set(bool gpio_state)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin, gpio_state);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	461a      	mov	r2, r3
 800128e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <ucd_board_enable_set+0x28>)
 8001294:	f002 f9bc 	bl	8003610 <HAL_GPIO_WritePin>
	ucd_detector.board_enable_state = gpio_state;
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	b29a      	uxth	r2, r3
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <ucd_board_enable_set+0x2c>)
 800129e:	821a      	strh	r2, [r3, #16]

}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	48000400 	.word	0x48000400
 80012ac:	20000208 	.word	0x20000208

080012b0 <ucd_board_enable_get>:

bool ucd_board_enable_get(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	ucd_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin);
 80012b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <ucd_board_enable_get+0x28>)
 80012ba:	f002 f991 	bl	80035e0 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <ucd_board_enable_get+0x2c>)
 80012c4:	821a      	strh	r2, [r3, #16]
	return(ucd_detector.board_enable_state);
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <ucd_board_enable_get+0x2c>)
 80012c8:	8a1b      	ldrh	r3, [r3, #16]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf14      	ite	ne
 80012ce:	2301      	movne	r3, #1
 80012d0:	2300      	moveq	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	48000400 	.word	0x48000400
 80012dc:	20000208 	.word	0x20000208

080012e0 <ucd_i2c_write>:

HAL_StatusTypeDef ucd_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	6039      	str	r1, [r7, #0]
 80012ea:	71fb      	strb	r3, [r7, #7]
 80012ec:	4613      	mov	r3, r2
 80012ee:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c3, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	b299      	uxth	r1, r3
 80012f4:	88bb      	ldrh	r3, [r7, #4]
 80012f6:	220a      	movs	r2, #10
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <ucd_i2c_write+0x30>)
 80012fe:	f002 fa55 	bl	80037ac <HAL_I2C_Master_Transmit>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8001306:	7bfb      	ldrb	r3, [r7, #15]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200000dc 	.word	0x200000dc

08001314 <ijc_detector_init>:
//            IJC PSB
//************************************

// Init function
bool ijc_detector_init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 800131a:	2300      	movs	r3, #0
 800131c:	71fb      	strb	r3, [r7, #7]

	// Init the IJC lab detector
	ijc_detector.ramp_flag            = 0;
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <ijc_detector_init+0x60>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
	ijc_detector.hv_max_digipot_value = IJC_MAX_DIGIPOT_VALUE - 1;
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <ijc_detector_init+0x60>)
 8001326:	2295      	movs	r2, #149	; 0x95
 8001328:	709a      	strb	r2, [r3, #2]
	ijc_detector.hv_min_digipot_value = IJC_MIN_DIGIPOT_VALUE - 1;
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <ijc_detector_init+0x60>)
 800132c:	22ff      	movs	r2, #255	; 0xff
 800132e:	70da      	strb	r2, [r3, #3]
	ijc_detector.hv_lower_deadband 	  = IJC_LOWER_DEADBAND;
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <ijc_detector_init+0x60>)
 8001332:	222b      	movs	r2, #43	; 0x2b
 8001334:	715a      	strb	r2, [r3, #5]
	ijc_detector.hv_upper_deadband 	  = IJC_UPPER_DEADBAND;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <ijc_detector_init+0x60>)
 8001338:	222b      	movs	r2, #43	; 0x2b
 800133a:	711a      	strb	r2, [r3, #4]
	ijc_detector.hv_digipot_value 	  = 0;
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <ijc_detector_init+0x60>)
 800133e:	2200      	movs	r2, #0
 8001340:	719a      	strb	r2, [r3, #6]
	ijc_detector.hv_targate_value 	  = 0;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <ijc_detector_init+0x60>)
 8001344:	2200      	movs	r2, #0
 8001346:	811a      	strh	r2, [r3, #8]
	ijc_detector.board_enable_state   = 0;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <ijc_detector_init+0x60>)
 800134a:	2200      	movs	r2, #0
 800134c:	821a      	strh	r2, [r3, #16]
	ijc_detector.hv_enable_state	  = 0;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <ijc_detector_init+0x60>)
 8001350:	2200      	movs	r2, #0
 8001352:	749a      	strb	r2, [r3, #18]
	ijc_detector.hv_loop_enable 	  = 1;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <ijc_detector_init+0x60>)
 8001356:	2201      	movs	r2, #1
 8001358:	705a      	strb	r2, [r3, #1]
	ijc_detector.making_safe_inprogress = 0;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <ijc_detector_init+0x60>)
 800135c:	2200      	movs	r2, #0
 800135e:	74da      	strb	r2, [r3, #19]

	// Configure the board enable state
	ht_ijc_enable_set(GPIO_PIN_RESET);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fd27 	bl	8000db4 <ht_ijc_enable_set>
//		status = EXIT_FAILURE;
//		return(status);
//	}
//	else
//	{
		status = EXIT_SUCCESS;
 8001366:	2300      	movs	r3, #0
 8001368:	71fb      	strb	r3, [r7, #7]
		return(status);
 800136a:	79fb      	ldrb	r3, [r7, #7]
//	}
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000021c 	.word	0x2000021c

08001378 <cea_detector_init>:


bool cea_detector_init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 800137e:	2300      	movs	r3, #0
 8001380:	71fb      	strb	r3, [r7, #7]

	// Init the CEA lab detector
	cea_detector.ramp_flag            = 0;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <cea_detector_init+0x60>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
	cea_detector.hv_max_digipot_value = CEA_MAX_DIGIPOT_VALUE - 1;
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <cea_detector_init+0x60>)
 800138a:	22c7      	movs	r2, #199	; 0xc7
 800138c:	709a      	strb	r2, [r3, #2]
	cea_detector.hv_min_digipot_value = CEA_MIN_DIGIPOT_VALUE - 1;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <cea_detector_init+0x60>)
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	70da      	strb	r2, [r3, #3]
	cea_detector.hv_lower_deadband 	  = CEA_LOWER_DEADBAND;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <cea_detector_init+0x60>)
 8001396:	222b      	movs	r2, #43	; 0x2b
 8001398:	715a      	strb	r2, [r3, #5]
	cea_detector.hv_upper_deadband 	  = CEA_UPPER_DEADBAND;
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <cea_detector_init+0x60>)
 800139c:	222b      	movs	r2, #43	; 0x2b
 800139e:	711a      	strb	r2, [r3, #4]
	cea_detector.hv_digipot_value 	  = 0;
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <cea_detector_init+0x60>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	719a      	strb	r2, [r3, #6]
	cea_detector.hv_targate_value 	  = 0;
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <cea_detector_init+0x60>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	811a      	strh	r2, [r3, #8]
	cea_detector.board_enable_state   = 0;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <cea_detector_init+0x60>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	821a      	strh	r2, [r3, #16]
	cea_detector.hv_enable_state	  = 0;
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <cea_detector_init+0x60>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	749a      	strb	r2, [r3, #18]
	cea_detector.hv_loop_enable 	  = 1;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <cea_detector_init+0x60>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	705a      	strb	r2, [r3, #1]
	cea_detector.making_safe_inprogress = 0;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <cea_detector_init+0x60>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	74da      	strb	r2, [r3, #19]

	// Configure the board enable state
	ht_cea_enable_set(GPIO_PIN_RESET);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff fcdd 	bl	8000d84 <ht_cea_enable_set>
//		status = EXIT_FAILURE;
//		return(status);
//	}
//	else
//	{
		status = EXIT_SUCCESS;
 80013ca:	2300      	movs	r3, #0
 80013cc:	71fb      	strb	r3, [r7, #7]
		return(status);
 80013ce:	79fb      	ldrb	r3, [r7, #7]
//	}
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000230 	.word	0x20000230

080013dc <ijc_board_enable_set>:


// Board enable functions
bool ijc_board_enable_set(bool gpio_state)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af02      	add	r7, sp, #8
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_digipot_status;
	uint8_t tx_data[2] = {0x00, 0x00};
 80013e6:	2300      	movs	r3, #0
 80013e8:	81bb      	strh	r3, [r7, #12]

	bool ijc_board_state = ijc_board_enable_get();								 // Get the current state of the board
 80013ea:	f000 f855 	bl	8001498 <ijc_board_enable_get>
 80013ee:	4603      	mov	r3, r0
 80013f0:	73fb      	strb	r3, [r7, #15]
	if (gpio_state == ENABLE && ijc_board_state == DISABLED) 					 // If the board is disabled
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d036      	beq.n	8001466 <ijc_board_enable_set+0x8a>
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	f083 0301 	eor.w	r3, r3, #1
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d030      	beq.n	8001466 <ijc_board_enable_set+0x8a>
	{
		ht_ijc_enable_set(GPIO_PIN_RESET);          							 // Reset the ijc HV SUPPLY
 8001404:	2000      	movs	r0, #0
 8001406:	f7ff fcd5 	bl	8000db4 <ht_ijc_enable_set>
		HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, gpio_state); // Enable the ijc Board
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	461a      	mov	r2, r3
 800140e:	2140      	movs	r1, #64	; 0x40
 8001410:	481e      	ldr	r0, [pc, #120]	; (800148c <ijc_board_enable_set+0xb0>)
 8001412:	f002 f8fd 	bl	8003610 <HAL_GPIO_WritePin>
		ijc_detector.board_enable_state = gpio_state;							 // Set the board state in the struct
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	b29a      	uxth	r2, r3
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <ijc_board_enable_set+0xb4>)
 800141c:	821a      	strh	r2, [r3, #16]

		// Set the digipot to 0
		ijc_detector.hv_digipot_value = 0;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <ijc_board_enable_set+0xb4>)
 8001420:	2200      	movs	r2, #0
 8001422:	719a      	strb	r2, [r3, #6]
		i2c_digipot_status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8001424:	f107 010c 	add.w	r1, r7, #12
 8001428:	2301      	movs	r3, #1
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <ijc_board_enable_set+0xb8>)
 800142e:	2202      	movs	r2, #2
 8001430:	2058      	movs	r0, #88	; 0x58
 8001432:	f000 f87d 	bl	8001530 <ijc_i2c_write_read>
 8001436:	4603      	mov	r3, r0
 8001438:	73bb      	strb	r3, [r7, #14]

		if(i2c_digipot_status == HAL_OK && ijc_detector.hv_digipot_value == 0)
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d108      	bne.n	8001452 <ijc_board_enable_set+0x76>
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <ijc_board_enable_set+0xb4>)
 8001442:	799b      	ldrb	r3, [r3, #6]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d104      	bne.n	8001452 <ijc_board_enable_set+0x76>
		{
			// Enable the HV Supply
			ht_ijc_enable_set(GPIO_PIN_SET);          							 // Reset the IJC HV SUPPLY
 8001448:	2001      	movs	r0, #1
 800144a:	f7ff fcb3 	bl	8000db4 <ht_ijc_enable_set>
			return(EXIT_SUCCESS);
 800144e:	2300      	movs	r3, #0
 8001450:	e018      	b.n	8001484 <ijc_board_enable_set+0xa8>
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, 0);  // Enable the ijc Board
 8001452:	2200      	movs	r2, #0
 8001454:	2140      	movs	r1, #64	; 0x40
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <ijc_board_enable_set+0xb0>)
 8001458:	f002 f8da 	bl	8003610 <HAL_GPIO_WritePin>
			ijc_detector.board_enable_state = 0;							 // Set the board state in the struct
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <ijc_board_enable_set+0xb4>)
 800145e:	2200      	movs	r2, #0
 8001460:	821a      	strh	r2, [r3, #16]

			// Return fail
			return(EXIT_FAILURE);
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <ijc_board_enable_set+0xa8>
		}
	}
	else if (gpio_state == DISABLE && ijc_board_state == ENABLED) 				 // If the board is enabled
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	f083 0301 	eor.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <ijc_board_enable_set+0xa6>
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <ijc_board_enable_set+0xa6>
	{
		// Enable the ijc loop and set the target value to 0
		// Have a flag in the main loop then disable the HV and disable the board once the digipot is at 0
		ijc_detector.making_safe_inprogress = true;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <ijc_board_enable_set+0xb4>)
 800147a:	2201      	movs	r2, #1
 800147c:	74da      	strb	r2, [r3, #19]
		return(EXIT_SUCCESS);
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <ijc_board_enable_set+0xa8>
	}
	else
	{
		return(EXIT_SUCCESS);
 8001482:	2300      	movs	r3, #0
	}
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	48000400 	.word	0x48000400
 8001490:	2000021c 	.word	0x2000021c
 8001494:	20000222 	.word	0x20000222

08001498 <ijc_board_enable_get>:


bool ijc_board_enable_get(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	ijc_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin);
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	4808      	ldr	r0, [pc, #32]	; (80014c0 <ijc_board_enable_get+0x28>)
 80014a0:	f002 f89e 	bl	80035e0 <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <ijc_board_enable_get+0x2c>)
 80014aa:	821a      	strh	r2, [r3, #16]
	return(ijc_detector.board_enable_state);
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <ijc_board_enable_get+0x2c>)
 80014ae:	8a1b      	ldrh	r3, [r3, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	bf14      	ite	ne
 80014b4:	2301      	movne	r3, #1
 80014b6:	2300      	moveq	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	48000400 	.word	0x48000400
 80014c4:	2000021c 	.word	0x2000021c

080014c8 <ijc_i2c_write>:

HAL_StatusTypeDef ijc_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	4603      	mov	r3, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	4613      	mov	r3, r2
 80014d6:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c2, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	b299      	uxth	r1, r3
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	220a      	movs	r2, #10
 80014e0:	9200      	str	r2, [sp, #0]
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	4804      	ldr	r0, [pc, #16]	; (80014f8 <ijc_i2c_write+0x30>)
 80014e6:	f002 f961 	bl	80037ac <HAL_I2C_Master_Transmit>
 80014ea:	4603      	mov	r3, r0
 80014ec:	73fb      	strb	r3, [r7, #15]
	return(ret);
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000088 	.word	0x20000088

080014fc <ijc_i2c_read>:

HAL_StatusTypeDef ijc_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af02      	add	r7, sp, #8
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	4613      	mov	r3, r2
 800150a:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c2, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	b299      	uxth	r1, r3
 8001510:	88bb      	ldrh	r3, [r7, #4]
 8001512:	220a      	movs	r2, #10
 8001514:	9200      	str	r2, [sp, #0]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <ijc_i2c_read+0x30>)
 800151a:	f002 fa5f 	bl	80039dc <HAL_I2C_Master_Receive>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000088 	.word	0x20000088

08001530 <ijc_i2c_write_read>:
}
*/
// ###############################################

HAL_StatusTypeDef ijc_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	4613      	mov	r3, r2
 8001540:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8001546:	2305      	movs	r3, #5
 8001548:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 800154a:	2305      	movs	r3, #5
 800154c:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 800154e:	7dfb      	ldrb	r3, [r7, #23]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d802      	bhi.n	800155a <ijc_i2c_write_read+0x2a>
 8001554:	2064      	movs	r0, #100	; 0x64
 8001556:	f001 fd45 	bl	8002fe4 <HAL_Delay>
		status = ijc_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 800155a:	89ba      	ldrh	r2, [r7, #12]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	68b9      	ldr	r1, [r7, #8]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ffb1 	bl	80014c8 <ijc_i2c_write>
 8001566:	4603      	mov	r3, r0
 8001568:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	3b01      	subs	r3, #1
 800156e:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8001570:	7d7b      	ldrb	r3, [r7, #21]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d102      	bne.n	800157c <ijc_i2c_write_read+0x4c>
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1e8      	bne.n	800154e <ijc_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 800157c:	7d7b      	ldrb	r3, [r7, #21]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <ijc_i2c_write_read+0x56>
 8001582:	7d7b      	ldrb	r3, [r7, #21]
 8001584:	e01a      	b.n	80015bc <ijc_i2c_write_read+0x8c>

	HAL_Delay(5);
 8001586:	2005      	movs	r0, #5
 8001588:	f001 fd2c 	bl	8002fe4 <HAL_Delay>

	do
	{
		// Read operation
		status =  ijc_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 800158c:	8c3a      	ldrh	r2, [r7, #32]
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ffb2 	bl	80014fc <ijc_i2c_read>
 8001598:	4603      	mov	r3, r0
 800159a:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 800159c:	7dbb      	ldrb	r3, [r7, #22]
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d802      	bhi.n	80015a8 <ijc_i2c_write_read+0x78>
 80015a2:	2064      	movs	r0, #100	; 0x64
 80015a4:	f001 fd1e 	bl	8002fe4 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 80015a8:	7dbb      	ldrb	r3, [r7, #22]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 80015ae:	7d7b      	ldrb	r3, [r7, #21]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d102      	bne.n	80015ba <ijc_i2c_write_read+0x8a>
 80015b4:	7dbb      	ldrb	r3, [r7, #22]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1e8      	bne.n	800158c <ijc_i2c_write_read+0x5c>

	return(status);
 80015ba:	7d7b      	ldrb	r3, [r7, #21]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <cea_board_enable_set>:
//            CEA PSB
//************************************

// Board enable functions
bool cea_board_enable_set(bool gpio_state)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_digipot_status;
	uint8_t tx_data[2] = {0x00, 0x00};
 80015ce:	2300      	movs	r3, #0
 80015d0:	81bb      	strh	r3, [r7, #12]

	bool cea_board_state = cea_board_enable_get();								 // Get the current state of the board
 80015d2:	f000 f855 	bl	8001680 <cea_board_enable_get>
 80015d6:	4603      	mov	r3, r0
 80015d8:	73fb      	strb	r3, [r7, #15]
	if (gpio_state == ENABLE && cea_board_state == DISABLED) 					 // If the board is disabled
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d036      	beq.n	800164e <cea_board_enable_set+0x8a>
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f083 0301 	eor.w	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d030      	beq.n	800164e <cea_board_enable_set+0x8a>
	{
		ht_cea_enable_set(GPIO_PIN_RESET);          							 // Reset the CEA HV SUPPLY
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fbc9 	bl	8000d84 <ht_cea_enable_set>
		HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, gpio_state); // Enable the CEA Board
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	461a      	mov	r2, r3
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	481e      	ldr	r0, [pc, #120]	; (8001674 <cea_board_enable_set+0xb0>)
 80015fa:	f002 f809 	bl	8003610 <HAL_GPIO_WritePin>
		cea_detector.board_enable_state = gpio_state;							 // Set the board state in the struct
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <cea_board_enable_set+0xb4>)
 8001604:	821a      	strh	r2, [r3, #16]

		// Set the digipot to 0
		cea_detector.hv_digipot_value = 0;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <cea_board_enable_set+0xb4>)
 8001608:	2200      	movs	r2, #0
 800160a:	719a      	strb	r2, [r3, #6]
		i2c_digipot_status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 800160c:	f107 010c 	add.w	r1, r7, #12
 8001610:	2301      	movs	r3, #1
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <cea_board_enable_set+0xb8>)
 8001616:	2202      	movs	r2, #2
 8001618:	2058      	movs	r0, #88	; 0x58
 800161a:	f000 f893 	bl	8001744 <cea_i2c_write_read>
 800161e:	4603      	mov	r3, r0
 8001620:	73bb      	strb	r3, [r7, #14]

		if(i2c_digipot_status == HAL_OK && cea_detector.hv_digipot_value == 0)
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <cea_board_enable_set+0x76>
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <cea_board_enable_set+0xb4>)
 800162a:	799b      	ldrb	r3, [r3, #6]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d104      	bne.n	800163a <cea_board_enable_set+0x76>
		{
			// Enable the HV Supply
			ht_cea_enable_set(GPIO_PIN_SET);          							 // Reset the CEA HV SUPPLY
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fba7 	bl	8000d84 <ht_cea_enable_set>
			return(EXIT_SUCCESS);
 8001636:	2300      	movs	r3, #0
 8001638:	e018      	b.n	800166c <cea_board_enable_set+0xa8>
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, 0); // Enable the CEA Board
 800163a:	2200      	movs	r2, #0
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	480d      	ldr	r0, [pc, #52]	; (8001674 <cea_board_enable_set+0xb0>)
 8001640:	f001 ffe6 	bl	8003610 <HAL_GPIO_WritePin>
			cea_detector.board_enable_state = 0;							 // Set the board state in the struct
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <cea_board_enable_set+0xb4>)
 8001646:	2200      	movs	r2, #0
 8001648:	821a      	strh	r2, [r3, #16]

			// Return fail
			return(EXIT_FAILURE);
 800164a:	2301      	movs	r3, #1
 800164c:	e00e      	b.n	800166c <cea_board_enable_set+0xa8>
		}
	}
	else if (gpio_state == DISABLE && cea_board_state == ENABLED) 				 // If the board is enabled
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	f083 0301 	eor.w	r3, r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <cea_board_enable_set+0xa6>
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d004      	beq.n	800166a <cea_board_enable_set+0xa6>
	{
		// Enable the CEA loop and set the target value to 0
		// Have a flag in the main loop then disable the HV and disable the board once the digipot is at 0
		cea_detector.making_safe_inprogress = true;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <cea_board_enable_set+0xb4>)
 8001662:	2201      	movs	r2, #1
 8001664:	74da      	strb	r2, [r3, #19]
		return(EXIT_SUCCESS);
 8001666:	2300      	movs	r3, #0
 8001668:	e000      	b.n	800166c <cea_board_enable_set+0xa8>
	}
	else
	{
		return(EXIT_SUCCESS);
 800166a:	2300      	movs	r3, #0
	}
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	48000400 	.word	0x48000400
 8001678:	20000230 	.word	0x20000230
 800167c:	20000236 	.word	0x20000236

08001680 <cea_board_enable_get>:

bool cea_board_enable_get(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	cea_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin);
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <cea_board_enable_get+0x28>)
 8001688:	f001 ffaa 	bl	80035e0 <HAL_GPIO_ReadPin>
 800168c:	4603      	mov	r3, r0
 800168e:	b29a      	uxth	r2, r3
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <cea_board_enable_get+0x2c>)
 8001692:	821a      	strh	r2, [r3, #16]
	return(cea_detector.board_enable_state);
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <cea_board_enable_get+0x2c>)
 8001696:	8a1b      	ldrh	r3, [r3, #16]
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf14      	ite	ne
 800169c:	2301      	movne	r3, #1
 800169e:	2300      	moveq	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	48000400 	.word	0x48000400
 80016ac:	20000230 	.word	0x20000230

080016b0 <cea_i2c_write>:

HAL_StatusTypeDef cea_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	4613      	mov	r3, r2
 80016be:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c3, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	b299      	uxth	r1, r3
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	220a      	movs	r2, #10
 80016c8:	9200      	str	r2, [sp, #0]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <cea_i2c_write+0x30>)
 80016ce:	f002 f86d 	bl	80037ac <HAL_I2C_Master_Transmit>
 80016d2:	4603      	mov	r3, r0
 80016d4:	73fb      	strb	r3, [r7, #15]
	return(ret);
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200000dc 	.word	0x200000dc

080016e4 <cea_i2c_read>:

HAL_StatusTypeDef cea_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73bb      	strb	r3, [r7, #14]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 80016f8:	2305      	movs	r3, #5
 80016fa:	737b      	strb	r3, [r7, #13]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 80016fc:	2305      	movs	r3, #5
 80016fe:	73fb      	strb	r3, [r7, #15]

	//HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
	do
	{
		// Read operation
		ret =  HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION); // Delay if re-attempting I2C Operation
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	b299      	uxth	r1, r3
 8001704:	88bb      	ldrh	r3, [r7, #4]
 8001706:	220a      	movs	r2, #10
 8001708:	9200      	str	r2, [sp, #0]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <cea_i2c_read+0x5c>)
 800170e:	f002 f965 	bl	80039dc <HAL_I2C_Master_Receive>
 8001712:	4603      	mov	r3, r0
 8001714:	73bb      	strb	r3, [r7, #14]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	2b04      	cmp	r3, #4
 800171a:	d802      	bhi.n	8001722 <cea_i2c_read+0x3e>
 800171c:	2064      	movs	r0, #100	; 0x64
 800171e:	f001 fc61 	bl	8002fe4 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3b01      	subs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
	}while((ret == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8001728:	7bbb      	ldrb	r3, [r7, #14]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d102      	bne.n	8001734 <cea_i2c_read+0x50>
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1e5      	bne.n	8001700 <cea_i2c_read+0x1c>

	return(ret);
 8001734:	7bbb      	ldrb	r3, [r7, #14]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200000dc 	.word	0x200000dc

08001744 <cea_i2c_write_read>:

HAL_StatusTypeDef cea_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4603      	mov	r3, r0
 8001750:	73fb      	strb	r3, [r7, #15]
 8001752:	4613      	mov	r3, r2
 8001754:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 800175a:	2305      	movs	r3, #5
 800175c:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 800175e:	2305      	movs	r3, #5
 8001760:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8001762:	7dfb      	ldrb	r3, [r7, #23]
 8001764:	2b04      	cmp	r3, #4
 8001766:	d802      	bhi.n	800176e <cea_i2c_write_read+0x2a>
 8001768:	2064      	movs	r0, #100	; 0x64
 800176a:	f001 fc3b 	bl	8002fe4 <HAL_Delay>
		status = cea_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 800176e:	89ba      	ldrh	r2, [r7, #12]
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	68b9      	ldr	r1, [r7, #8]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff9b 	bl	80016b0 <cea_i2c_write>
 800177a:	4603      	mov	r3, r0
 800177c:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 800177e:	7dfb      	ldrb	r3, [r7, #23]
 8001780:	3b01      	subs	r3, #1
 8001782:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8001784:	7d7b      	ldrb	r3, [r7, #21]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d102      	bne.n	8001790 <cea_i2c_write_read+0x4c>
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1e8      	bne.n	8001762 <cea_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 8001790:	7d7b      	ldrb	r3, [r7, #21]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <cea_i2c_write_read+0x56>
 8001796:	7d7b      	ldrb	r3, [r7, #21]
 8001798:	e01a      	b.n	80017d0 <cea_i2c_write_read+0x8c>

	HAL_Delay(5);
 800179a:	2005      	movs	r0, #5
 800179c:	f001 fc22 	bl	8002fe4 <HAL_Delay>

	do
	{
		// Read operation
		status =  cea_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 80017a0:	8c3a      	ldrh	r2, [r7, #32]
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	6879      	ldr	r1, [r7, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff9c 	bl	80016e4 <cea_i2c_read>
 80017ac:	4603      	mov	r3, r0
 80017ae:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 80017b0:	7dbb      	ldrb	r3, [r7, #22]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d802      	bhi.n	80017bc <cea_i2c_write_read+0x78>
 80017b6:	2064      	movs	r0, #100	; 0x64
 80017b8:	f001 fc14 	bl	8002fe4 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 80017bc:	7dbb      	ldrb	r3, [r7, #22]
 80017be:	3b01      	subs	r3, #1
 80017c0:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 80017c2:	7d7b      	ldrb	r3, [r7, #21]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d102      	bne.n	80017ce <cea_i2c_write_read+0x8a>
 80017c8:	7dbb      	ldrb	r3, [r7, #22]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1e8      	bne.n	80017a0 <cea_i2c_write_read+0x5c>

	return(status);
 80017ce:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <i2c_pt_reset>:




bool i2c_pt_reset(I2C_HandleTypeDef *hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    // I2C command to reset the MS5611 module
    // A 3 ms delay should be placed after reset command is complete
    bool status = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = CMD_RESET;
 80017e4:	231e      	movs	r3, #30
 80017e6:	73bb      	strb	r3, [r7, #14]

    // Send the command
    status = i2c_write(hi2c, ADDR_PRESS_TEMP, &cmd, 1);
 80017e8:	f107 020e 	add.w	r2, r7, #14
 80017ec:	2301      	movs	r3, #1
 80017ee:	21ee      	movs	r1, #238	; 0xee
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff f965 	bl	8000ac0 <i2c_write>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(3);
 8001802:	2003      	movs	r0, #3
 8001804:	f001 fbee 	bl	8002fe4 <HAL_Delay>

    return(status);
 8001808:	7bfb      	ldrb	r3, [r7, #15]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <i2c_pt_d1_pressure_conversion>:

    return(status);
}

bool i2c_pt_d1_pressure_conversion(I2C_HandleTypeDef *hi2c, uint8_t osr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]

    // Perform the I2C conversion for D1 - pressure sensor
    bool status = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
    uint8_t command;

    switch(osr)
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	2b04      	cmp	r3, #4
 8001828:	d81b      	bhi.n	8001862 <i2c_pt_d1_pressure_conversion+0x4e>
 800182a:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <i2c_pt_d1_pressure_conversion+0x1c>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	08001845 	.word	0x08001845
 8001834:	0800184b 	.word	0x0800184b
 8001838:	08001851 	.word	0x08001851
 800183c:	08001857 	.word	0x08001857
 8001840:	0800185d 	.word	0x0800185d
    {
        case OSR_256:
        	command = CMD_CONVERT_D1_OSR_256;
 8001844:	2340      	movs	r3, #64	; 0x40
 8001846:	73bb      	strb	r3, [r7, #14]
            break;
 8001848:	e00c      	b.n	8001864 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_512:
        	command = CMD_CONVERT_D1_OSR_512;
 800184a:	2342      	movs	r3, #66	; 0x42
 800184c:	73bb      	strb	r3, [r7, #14]
            break;
 800184e:	e009      	b.n	8001864 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_1024:
        	command = CMD_CONVERT_D1_OSR_1024;
 8001850:	2344      	movs	r3, #68	; 0x44
 8001852:	73bb      	strb	r3, [r7, #14]
            break;
 8001854:	e006      	b.n	8001864 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_2048:
        	command = CMD_CONVERT_D1_OSR_2048;
 8001856:	2346      	movs	r3, #70	; 0x46
 8001858:	73bb      	strb	r3, [r7, #14]
            break;
 800185a:	e003      	b.n	8001864 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_4096:
        	command = CMD_CONVERT_D1_OSR_4096;
 800185c:	2348      	movs	r3, #72	; 0x48
 800185e:	73bb      	strb	r3, [r7, #14]
            break;
 8001860:	e000      	b.n	8001864 <i2c_pt_d1_pressure_conversion+0x50>
        default:
            break;
 8001862:	bf00      	nop
    }

    // Send the command
    status = i2c_write(hi2c, ADDR_PRESS_TEMP, &command, 1);
 8001864:	f107 020e 	add.w	r2, r7, #14
 8001868:	2301      	movs	r3, #1
 800186a:	21ee      	movs	r1, #238	; 0xee
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff f927 	bl	8000ac0 <i2c_write>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]

    // Around 10ms for conversion
    HAL_Delay(10);
 800187e:	200a      	movs	r0, #10
 8001880:	f001 fbb0 	bl	8002fe4 <HAL_Delay>

    return(status);
 8001884:	7bfb      	ldrb	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop

08001890 <i2c_pt_d2_temperature_conversion>:

bool i2c_pt_d2_temperature_conversion(I2C_HandleTypeDef *hi2c, uint8_t osr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]

    // Perform the I2C conversion for D2 - temperature sensor
    bool status = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	73fb      	strb	r3, [r7, #15]
    uint8_t command;

    switch(osr)
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d81b      	bhi.n	80018de <i2c_pt_d2_temperature_conversion+0x4e>
 80018a6:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <i2c_pt_d2_temperature_conversion+0x1c>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	080018c1 	.word	0x080018c1
 80018b0:	080018c7 	.word	0x080018c7
 80018b4:	080018cd 	.word	0x080018cd
 80018b8:	080018d3 	.word	0x080018d3
 80018bc:	080018d9 	.word	0x080018d9
    {
        case OSR_256:
            command = CMD_CONVERT_D2_OSR_256;
 80018c0:	2350      	movs	r3, #80	; 0x50
 80018c2:	73bb      	strb	r3, [r7, #14]
            break;
 80018c4:	e00c      	b.n	80018e0 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_512:
            command = CMD_CONVERT_D2_OSR_512;
 80018c6:	2352      	movs	r3, #82	; 0x52
 80018c8:	73bb      	strb	r3, [r7, #14]
            break;
 80018ca:	e009      	b.n	80018e0 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_1024:
            command = CMD_CONVERT_D2_OSR_1024;
 80018cc:	2354      	movs	r3, #84	; 0x54
 80018ce:	73bb      	strb	r3, [r7, #14]
            break;
 80018d0:	e006      	b.n	80018e0 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_2048:
            command = CMD_CONVERT_D2_OSR_2048;
 80018d2:	2356      	movs	r3, #86	; 0x56
 80018d4:	73bb      	strb	r3, [r7, #14]
            break;
 80018d6:	e003      	b.n	80018e0 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_4096:
            command = CMD_CONVERT_D2_OSR_4096;
 80018d8:	2358      	movs	r3, #88	; 0x58
 80018da:	73bb      	strb	r3, [r7, #14]
            break;
 80018dc:	e000      	b.n	80018e0 <i2c_pt_d2_temperature_conversion+0x50>
        default:
            break;
 80018de:	bf00      	nop
    }

    // Send the command
    status = i2c_write(hi2c, ADDR_PRESS_TEMP, &command, 1);
 80018e0:	f107 020e 	add.w	r2, r7, #14
 80018e4:	2301      	movs	r3, #1
 80018e6:	21ee      	movs	r1, #238	; 0xee
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff f8e9 	bl	8000ac0 <i2c_write>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]

    HAL_Delay(10);
 80018fa:	200a      	movs	r0, #10
 80018fc:	f001 fb72 	bl	8002fe4 <HAL_Delay>

    return(status);
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop

0800190c <i2c_pt_measure_d2_temperature>:


bool i2c_pt_measure_d2_temperature(I2C_HandleTypeDef *hi2c, uint8_t osr, uint32_t *r_buffer)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	460b      	mov	r3, r1
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	72fb      	strb	r3, [r7, #11]

    // Should check that the ADC has actully measured something
    bool status = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	75fb      	strb	r3, [r7, #23]

    // Send the command to initiate the conversion
    if(status == 0) status = i2c_pt_d2_temperature_conversion(hi2c, osr);
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	f083 0301 	eor.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <i2c_pt_measure_d2_temperature+0x2c>
 800192a:	7afb      	ldrb	r3, [r7, #11]
 800192c:	4619      	mov	r1, r3
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f7ff ffae 	bl	8001890 <i2c_pt_d2_temperature_conversion>
 8001934:	4603      	mov	r3, r0
 8001936:	75fb      	strb	r3, [r7, #23]
    // Read the ADC
    if(status == 0) status = i2c_pt_adc_read_sequence(hi2c, r_buffer);
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <i2c_pt_measure_d2_temperature+0x44>
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f82e 	bl	80019a8 <i2c_pt_adc_read_sequence>
 800194c:	4603      	mov	r3, r0
 800194e:	75fb      	strb	r3, [r7, #23]

    return(status);
 8001950:	7dfb      	ldrb	r3, [r7, #23]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <i2c_pt_measure_d1_pressure>:


bool i2c_pt_measure_d1_pressure(I2C_HandleTypeDef *hi2c, uint8_t osr, uint32_t *r_buffer)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	460b      	mov	r3, r1
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	72fb      	strb	r3, [r7, #11]

    // Should check that the ADC has actully measured something
    bool status = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	75fb      	strb	r3, [r7, #23]

    // Send the command to initiate the conversion
    if(status == 0) status = i2c_pt_d1_pressure_conversion(hi2c, osr);
 800196c:	7dfb      	ldrb	r3, [r7, #23]
 800196e:	f083 0301 	eor.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <i2c_pt_measure_d1_pressure+0x2c>
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	4619      	mov	r1, r3
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff ff49 	bl	8001814 <i2c_pt_d1_pressure_conversion>
 8001982:	4603      	mov	r3, r0
 8001984:	75fb      	strb	r3, [r7, #23]
    // Read the ADC
    if(status == 0) status = i2c_pt_adc_read_sequence(hi2c, r_buffer);
 8001986:	7dfb      	ldrb	r3, [r7, #23]
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <i2c_pt_measure_d1_pressure+0x44>
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 f807 	bl	80019a8 <i2c_pt_adc_read_sequence>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]

    return(status);
 800199e:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <i2c_pt_adc_read_sequence>:


bool i2c_pt_adc_read_sequence(I2C_HandleTypeDef *hi2c, uint32_t *r_buffer)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
    // Need to check the number of returned bytes is correct
    bool status = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73fb      	strb	r3, [r7, #15]
    uint8_t command = CMD_ADC_READ;
 80019b6:	2300      	movs	r3, #0
 80019b8:	737b      	strb	r3, [r7, #13]
    uint8_t number_of_bytes = 3;
 80019ba:	2303      	movs	r3, #3
 80019bc:	73bb      	strb	r3, [r7, #14]
    uint8_t read_buffer[3] = {0};
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <i2c_pt_adc_read_sequence+0x64>)
 80019c0:	881b      	ldrh	r3, [r3, #0]
 80019c2:	813b      	strh	r3, [r7, #8]
 80019c4:	2300      	movs	r3, #0
 80019c6:	72bb      	strb	r3, [r7, #10]


    // Send the command

    status = i2c_write_read(hi2c, ADDR_PRESS_TEMP, &command, 1, &read_buffer[0], number_of_bytes);
 80019c8:	7bbb      	ldrb	r3, [r7, #14]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f107 020d 	add.w	r2, r7, #13
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2301      	movs	r3, #1
 80019da:	21ee      	movs	r1, #238	; 0xee
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff f889 	bl	8000af4 <i2c_write_read>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bf14      	ite	ne
 80019e8:	2301      	movne	r3, #1
 80019ea:	2300      	moveq	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]

    //*r_buffer = *r_buffer | ((read_buffer[0]<<16 | read_buffer[1]<<8 | read_buffer[2]));
    *r_buffer = ((read_buffer[0]<<16 | read_buffer[1]<<8 | read_buffer[2]));
 80019ee:	7a3b      	ldrb	r3, [r7, #8]
 80019f0:	041a      	lsls	r2, r3, #16
 80019f2:	7a7b      	ldrb	r3, [r7, #9]
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	4313      	orrs	r3, r2
 80019f8:	7aba      	ldrb	r2, [r7, #10]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	461a      	mov	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	601a      	str	r2, [r3, #0]

    return(status);
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	08007ef0 	.word	0x08007ef0

08001a10 <run_complete_readout>:


bool run_complete_readout()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
    bool status = EXIT_SUCCESS;      // A status record of the operation
 8001a16:	2300      	movs	r3, #0
 8001a18:	71fb      	strb	r3, [r7, #7]

    // Attempt to reset the I2C device - add a delay at the end to allow the device to reset
    if(status == 0) status = i2c_pt_reset(&hi2c2);
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d004      	beq.n	8001a30 <run_complete_readout+0x20>
 8001a26:	4818      	ldr	r0, [pc, #96]	; (8001a88 <run_complete_readout+0x78>)
 8001a28:	f7ff fed6 	bl	80017d8 <i2c_pt_reset>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]

    // Attempt to read into memory all the I2C prom calibration bytes
    //if(status == 0) status = i2c_pt_prom_read_all(&hi2c2, &measurement.prom_regs[0]);

    // Attempt conversion sequence for pressure at OSR 4096 with conversion duration <9.04ms
    uint32_t rx_buffer = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]

    if(status == 0) status = i2c_pt_measure_d1_pressure(&hi2c2, OSR_4096, &rx_buffer);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f083 0301 	eor.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <run_complete_readout+0x40>
 8001a40:	463b      	mov	r3, r7
 8001a42:	461a      	mov	r2, r3
 8001a44:	2104      	movs	r1, #4
 8001a46:	4810      	ldr	r0, [pc, #64]	; (8001a88 <run_complete_readout+0x78>)
 8001a48:	f7ff ff87 	bl	800195a <i2c_pt_measure_d1_pressure>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
    measurement.uncomp_press = rx_buffer;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	4a0e      	ldr	r2, [pc, #56]	; (8001a8c <run_complete_readout+0x7c>)
 8001a54:	6053      	str	r3, [r2, #4]

    HAL_Delay(10);
 8001a56:	200a      	movs	r0, #10
 8001a58:	f001 fac4 	bl	8002fe4 <HAL_Delay>

    // Attempt conversion sequence for temperature at OSR 4096 with conversion duration <9.04ms
    if(status == 0) status = i2c_pt_measure_d2_temperature(&hi2c2, OSR_4096, &rx_buffer);
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	f083 0301 	eor.w	r3, r3, #1
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <run_complete_readout+0x68>
 8001a68:	463b      	mov	r3, r7
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	4806      	ldr	r0, [pc, #24]	; (8001a88 <run_complete_readout+0x78>)
 8001a70:	f7ff ff4c 	bl	800190c <i2c_pt_measure_d2_temperature>
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
    measurement.uncomp_temp = rx_buffer;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <run_complete_readout+0x7c>)
 8001a7c:	6013      	str	r3, [r2, #0]

    return(status);
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000088 	.word	0x20000088
 8001a8c:	20000278 	.word	0x20000278

08001a90 <i2c_slv_cmd_rx_tx_handle>:
//************************************
//            I2C Slave
//************************************

bool i2c_slv_cmd_rx_tx_handle(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af00      	add	r7, sp, #0
	bool status = EXIT_SUCCESS;
 8001a96:	2300      	movs	r3, #0
 8001a98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	// SOME FUNCTION HERE TO HANDLE RX/TX
	switch(i2c_slv_rx.bytes.cmd)
 8001a9c:	4bdc      	ldr	r3, [pc, #880]	; (8001e10 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001a9e:	78db      	ldrb	r3, [r3, #3]
 8001aa0:	3b21      	subs	r3, #33	; 0x21
 8001aa2:	2b93      	cmp	r3, #147	; 0x93
 8001aa4:	f200 86a4 	bhi.w	80027f0 <i2c_slv_cmd_rx_tx_handle+0xd60>
 8001aa8:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <i2c_slv_cmd_rx_tx_handle+0x20>)
 8001aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aae:	bf00      	nop
 8001ab0:	08001d01 	.word	0x08001d01
 8001ab4:	08001d4b 	.word	0x08001d4b
 8001ab8:	080027f1 	.word	0x080027f1
 8001abc:	080027f1 	.word	0x080027f1
 8001ac0:	080027f1 	.word	0x080027f1
 8001ac4:	080027f1 	.word	0x080027f1
 8001ac8:	080027f1 	.word	0x080027f1
 8001acc:	080027f1 	.word	0x080027f1
 8001ad0:	080027f1 	.word	0x080027f1
 8001ad4:	080027f1 	.word	0x080027f1
 8001ad8:	080027f1 	.word	0x080027f1
 8001adc:	080027f1 	.word	0x080027f1
 8001ae0:	080027f1 	.word	0x080027f1
 8001ae4:	080027f1 	.word	0x080027f1
 8001ae8:	080027f1 	.word	0x080027f1
 8001aec:	080027f1 	.word	0x080027f1
 8001af0:	080027f1 	.word	0x080027f1
 8001af4:	080027f1 	.word	0x080027f1
 8001af8:	080027f1 	.word	0x080027f1
 8001afc:	080027f1 	.word	0x080027f1
 8001b00:	080027f1 	.word	0x080027f1
 8001b04:	080027f1 	.word	0x080027f1
 8001b08:	080027f1 	.word	0x080027f1
 8001b0c:	080027f1 	.word	0x080027f1
 8001b10:	080027f1 	.word	0x080027f1
 8001b14:	080027f1 	.word	0x080027f1
 8001b18:	080027f1 	.word	0x080027f1
 8001b1c:	080027f1 	.word	0x080027f1
 8001b20:	080027f1 	.word	0x080027f1
 8001b24:	080027f1 	.word	0x080027f1
 8001b28:	080027f1 	.word	0x080027f1
 8001b2c:	08002167 	.word	0x08002167
 8001b30:	08002207 	.word	0x08002207
 8001b34:	08002271 	.word	0x08002271
 8001b38:	080022b7 	.word	0x080022b7
 8001b3c:	080022fd 	.word	0x080022fd
 8001b40:	080027f1 	.word	0x080027f1
 8001b44:	080027f1 	.word	0x080027f1
 8001b48:	080027f1 	.word	0x080027f1
 8001b4c:	080027f1 	.word	0x080027f1
 8001b50:	080027f1 	.word	0x080027f1
 8001b54:	080027f1 	.word	0x080027f1
 8001b58:	080027f1 	.word	0x080027f1
 8001b5c:	080027f1 	.word	0x080027f1
 8001b60:	080027f1 	.word	0x080027f1
 8001b64:	080027f1 	.word	0x080027f1
 8001b68:	080027f1 	.word	0x080027f1
 8001b6c:	080027f1 	.word	0x080027f1
 8001b70:	080027f1 	.word	0x080027f1
 8001b74:	080027f1 	.word	0x080027f1
 8001b78:	080027f1 	.word	0x080027f1
 8001b7c:	080027f1 	.word	0x080027f1
 8001b80:	080027f1 	.word	0x080027f1
 8001b84:	080027f1 	.word	0x080027f1
 8001b88:	080027f1 	.word	0x080027f1
 8001b8c:	080027f1 	.word	0x080027f1
 8001b90:	080027f1 	.word	0x080027f1
 8001b94:	080027f1 	.word	0x080027f1
 8001b98:	080027f1 	.word	0x080027f1
 8001b9c:	080027f1 	.word	0x080027f1
 8001ba0:	080027f1 	.word	0x080027f1
 8001ba4:	080027f1 	.word	0x080027f1
 8001ba8:	080027f1 	.word	0x080027f1
 8001bac:	08002373 	.word	0x08002373
 8001bb0:	08002413 	.word	0x08002413
 8001bb4:	080025b9 	.word	0x080025b9
 8001bb8:	080025ff 	.word	0x080025ff
 8001bbc:	08002645 	.word	0x08002645
 8001bc0:	0800247d 	.word	0x0800247d
 8001bc4:	080024c3 	.word	0x080024c3
 8001bc8:	08002513 	.word	0x08002513
 8001bcc:	08002559 	.word	0x08002559
 8001bd0:	080027f1 	.word	0x080027f1
 8001bd4:	080027f1 	.word	0x080027f1
 8001bd8:	080027f1 	.word	0x080027f1
 8001bdc:	080027f1 	.word	0x080027f1
 8001be0:	080027f1 	.word	0x080027f1
 8001be4:	080027f1 	.word	0x080027f1
 8001be8:	080027f1 	.word	0x080027f1
 8001bec:	080027f1 	.word	0x080027f1
 8001bf0:	080027f1 	.word	0x080027f1
 8001bf4:	080027f1 	.word	0x080027f1
 8001bf8:	080027f1 	.word	0x080027f1
 8001bfc:	080027f1 	.word	0x080027f1
 8001c00:	080027f1 	.word	0x080027f1
 8001c04:	080027f1 	.word	0x080027f1
 8001c08:	080027f1 	.word	0x080027f1
 8001c0c:	080027f1 	.word	0x080027f1
 8001c10:	080027f1 	.word	0x080027f1
 8001c14:	080027f1 	.word	0x080027f1
 8001c18:	080027f1 	.word	0x080027f1
 8001c1c:	080027f1 	.word	0x080027f1
 8001c20:	080027f1 	.word	0x080027f1
 8001c24:	080027f1 	.word	0x080027f1
 8001c28:	080027f1 	.word	0x080027f1
 8001c2c:	08001d95 	.word	0x08001d95
 8001c30:	08001f49 	.word	0x08001f49
 8001c34:	08001f93 	.word	0x08001f93
 8001c38:	080027f1 	.word	0x080027f1
 8001c3c:	08001fdd 	.word	0x08001fdd
 8001c40:	08002027 	.word	0x08002027
 8001c44:	08001e21 	.word	0x08001e21
 8001c48:	08001e6b 	.word	0x08001e6b
 8001c4c:	08001eb5 	.word	0x08001eb5
 8001c50:	08001eff 	.word	0x08001eff
 8001c54:	0800208f 	.word	0x0800208f
 8001c58:	08002103 	.word	0x08002103
 8001c5c:	080027f1 	.word	0x080027f1
 8001c60:	080027f1 	.word	0x080027f1
 8001c64:	080027f1 	.word	0x080027f1
 8001c68:	080027f1 	.word	0x080027f1
 8001c6c:	080027f1 	.word	0x080027f1
 8001c70:	080027f1 	.word	0x080027f1
 8001c74:	080027f1 	.word	0x080027f1
 8001c78:	080027f1 	.word	0x080027f1
 8001c7c:	080027f1 	.word	0x080027f1
 8001c80:	080027f1 	.word	0x080027f1
 8001c84:	080027f1 	.word	0x080027f1
 8001c88:	080027f1 	.word	0x080027f1
 8001c8c:	080027f1 	.word	0x080027f1
 8001c90:	080027f1 	.word	0x080027f1
 8001c94:	080027f1 	.word	0x080027f1
 8001c98:	080027f1 	.word	0x080027f1
 8001c9c:	080027f1 	.word	0x080027f1
 8001ca0:	080027f1 	.word	0x080027f1
 8001ca4:	080027f1 	.word	0x080027f1
 8001ca8:	080027f1 	.word	0x080027f1
 8001cac:	080026a5 	.word	0x080026a5
 8001cb0:	080027f1 	.word	0x080027f1
 8001cb4:	080027f1 	.word	0x080027f1
 8001cb8:	080027f1 	.word	0x080027f1
 8001cbc:	080027f1 	.word	0x080027f1
 8001cc0:	080027f1 	.word	0x080027f1
 8001cc4:	080027f1 	.word	0x080027f1
 8001cc8:	080027f1 	.word	0x080027f1
 8001ccc:	080027f1 	.word	0x080027f1
 8001cd0:	080027f1 	.word	0x080027f1
 8001cd4:	080027f1 	.word	0x080027f1
 8001cd8:	080027f1 	.word	0x080027f1
 8001cdc:	080027f1 	.word	0x080027f1
 8001ce0:	080027f1 	.word	0x080027f1
 8001ce4:	080027f1 	.word	0x080027f1
 8001ce8:	080027f1 	.word	0x080027f1
 8001cec:	080027f1 	.word	0x080027f1
 8001cf0:	08002719 	.word	0x08002719
 8001cf4:	08002751 	.word	0x08002751
 8001cf8:	08002787 	.word	0x08002787
 8001cfc:	080027bd 	.word	0x080027bd
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------

		case(CMD_FPGA_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001d00:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d02:	789b      	ldrb	r3, [r3, #2]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d110      	bne.n	8001d2a <i2c_slv_cmd_rx_tx_handle+0x29a>
			{
				uint16_t dataread = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	80bb      	strh	r3, [r7, #4]
				dataread = max6911_read(&hi2c3, ADDR_FPGA_MAX6911_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	2202      	movs	r2, #2
 8001d10:	21f2      	movs	r1, #242	; 0xf2
 8001d12:	4840      	ldr	r0, [pc, #256]	; (8001e14 <i2c_slv_cmd_rx_tx_handle+0x384>)
 8001d14:	f7fe ff6a 	bl	8000bec <max6911_read>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	80bb      	strh	r3, [r7, #4]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001d1c:	4a3e      	ldr	r2, [pc, #248]	; (8001e18 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d1e:	88bb      	ldrh	r3, [r7, #4]
 8001d20:	8013      	strh	r3, [r2, #0]

				return(status);
 8001d22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d26:	f000 bdb9 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001d2a:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d2c:	789b      	ldrb	r3, [r3, #2]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f040 8564 	bne.w	80027fc <i2c_slv_cmd_rx_tx_handle+0xd6c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001d34:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d46:	f000 bda9 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		case(CMD_FPGA_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001d4a:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d4c:	789b      	ldrb	r3, [r3, #2]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d110      	bne.n	8001d74 <i2c_slv_cmd_rx_tx_handle+0x2e4>
			{
				uint16_t dataread = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	80fb      	strh	r3, [r7, #6]
				dataread = max6911_read(&hi2c3, ADDR_FPGA_MAX6911_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001d56:	2301      	movs	r3, #1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	21f2      	movs	r1, #242	; 0xf2
 8001d5c:	482d      	ldr	r0, [pc, #180]	; (8001e14 <i2c_slv_cmd_rx_tx_handle+0x384>)
 8001d5e:	f7fe ff45 	bl	8000bec <max6911_read>
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001d66:	4a2c      	ldr	r2, [pc, #176]	; (8001e18 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	8013      	strh	r3, [r2, #0]

				return(status);
 8001d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d70:	f000 bd94 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001d74:	4b26      	ldr	r3, [pc, #152]	; (8001e10 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d76:	789b      	ldrb	r3, [r3, #2]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f040 8541 	bne.w	8002800 <i2c_slv_cmd_rx_tx_handle+0xd70>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001d7e:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d84:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d90:	f000 bd84 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		//                     UCD Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d96:	789b      	ldrb	r3, [r3, #2]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d10d      	bne.n	8001db8 <i2c_slv_cmd_rx_tx_handle+0x328>
			{
				ucd_detector.board_enable_state = (uint16_t)ucd_board_enable_get(); // Read the state enable pin
 8001d9c:	f7ff fa88 	bl	80012b0 <ucd_board_enable_get>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <i2c_slv_cmd_rx_tx_handle+0x38c>)
 8001da6:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = ucd_detector.board_enable_state; 					// Prepare the date into the transmit
 8001da8:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <i2c_slv_cmd_rx_tx_handle+0x38c>)
 8001daa:	8a1a      	ldrh	r2, [r3, #16]
 8001dac:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001dae:	801a      	strh	r2, [r3, #0]
				return(status);
 8001db0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001db4:	f000 bd72 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001dba:	789b      	ldrb	r3, [r3, #2]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f040 8521 	bne.w	8002804 <i2c_slv_cmd_rx_tx_handle+0xd74>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d109      	bne.n	8001dde <i2c_slv_cmd_rx_tx_handle+0x34e>
				{
					ucd_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f7ff fa58 	bl	8001280 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	801a      	strh	r2, [r3, #0]
					return(status);
 8001dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dda:	f000 bd5f 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8001dde:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d109      	bne.n	8001dfa <i2c_slv_cmd_rx_tx_handle+0x36a>
				{
					ucd_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff fa4a 	bl	8001280 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	801a      	strh	r2, [r3, #0]
					return(status);
 8001df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001df6:	f000 bd51 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001dfa:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e00:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e0c:	f000 bd46 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
 8001e10:	20000270 	.word	0x20000270
 8001e14:	200000dc 	.word	0x200000dc
 8001e18:	20000274 	.word	0x20000274
 8001e1c:	20000208 	.word	0x20000208
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001e20:	4ba0      	ldr	r3, [pc, #640]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001e22:	789b      	ldrb	r3, [r3, #2]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d110      	bne.n	8001e4a <i2c_slv_cmd_rx_tx_handle+0x3ba>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	84bb      	strh	r3, [r7, #36]	; 0x24
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	2202      	movs	r2, #2
 8001e30:	21e4      	movs	r1, #228	; 0xe4
 8001e32:	489d      	ldr	r0, [pc, #628]	; (80020a8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001e34:	f7fe feda 	bl	8000bec <max6911_read>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	84bb      	strh	r3, [r7, #36]	; 0x24

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001e3c:	4a9b      	ldr	r2, [pc, #620]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e40:	8013      	strh	r3, [r2, #0]

				return(status);
 8001e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e46:	f000 bd29 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001e4a:	4b96      	ldr	r3, [pc, #600]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001e4c:	789b      	ldrb	r3, [r3, #2]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f040 84da 	bne.w	8002808 <i2c_slv_cmd_rx_tx_handle+0xd78>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001e54:	4b95      	ldr	r3, [pc, #596]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e66:	f000 bd19 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001e6a:	4b8e      	ldr	r3, [pc, #568]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001e6c:	789b      	ldrb	r3, [r3, #2]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d110      	bne.n	8001e94 <i2c_slv_cmd_rx_tx_handle+0x404>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	84fb      	strh	r3, [r7, #38]	; 0x26
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001e76:	2301      	movs	r3, #1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	21e4      	movs	r1, #228	; 0xe4
 8001e7c:	488a      	ldr	r0, [pc, #552]	; (80020a8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001e7e:	f7fe feb5 	bl	8000bec <max6911_read>
 8001e82:	4603      	mov	r3, r0
 8001e84:	84fb      	strh	r3, [r7, #38]	; 0x26

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001e86:	4a89      	ldr	r2, [pc, #548]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001e88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e8a:	8013      	strh	r3, [r2, #0]

				return(status);
 8001e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e90:	f000 bd04 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001e94:	4b83      	ldr	r3, [pc, #524]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001e96:	789b      	ldrb	r3, [r3, #2]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f040 84b7 	bne.w	800280c <i2c_slv_cmd_rx_tx_handle+0xd7c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001e9e:	4b83      	ldr	r3, [pc, #524]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001eac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eb0:	f000 bcf4 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_DVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001eb4:	4b7b      	ldr	r3, [pc, #492]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001eb6:	789b      	ldrb	r3, [r3, #2]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d110      	bne.n	8001ede <i2c_slv_cmd_rx_tx_handle+0x44e>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	853b      	strh	r3, [r7, #40]	; 0x28
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_DVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	21e2      	movs	r1, #226	; 0xe2
 8001ec6:	4878      	ldr	r0, [pc, #480]	; (80020a8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001ec8:	f7fe fe90 	bl	8000bec <max6911_read>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	853b      	strh	r3, [r7, #40]	; 0x28

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001ed0:	4a76      	ldr	r2, [pc, #472]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001ed2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed4:	8013      	strh	r3, [r2, #0]

				return(status);
 8001ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eda:	f000 bcdf 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001ede:	4b71      	ldr	r3, [pc, #452]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001ee0:	789b      	ldrb	r3, [r3, #2]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f040 8494 	bne.w	8002810 <i2c_slv_cmd_rx_tx_handle+0xd80>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001ee8:	4b70      	ldr	r3, [pc, #448]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eee:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001efa:	f000 bccf 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_DVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001efe:	4b69      	ldr	r3, [pc, #420]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001f00:	789b      	ldrb	r3, [r3, #2]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d110      	bne.n	8001f28 <i2c_slv_cmd_rx_tx_handle+0x498>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001f06:	2300      	movs	r3, #0
 8001f08:	857b      	strh	r3, [r7, #42]	; 0x2a
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_DVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	21e2      	movs	r1, #226	; 0xe2
 8001f10:	4865      	ldr	r0, [pc, #404]	; (80020a8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001f12:	f7fe fe6b 	bl	8000bec <max6911_read>
 8001f16:	4603      	mov	r3, r0
 8001f18:	857b      	strh	r3, [r7, #42]	; 0x2a

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001f1a:	4a64      	ldr	r2, [pc, #400]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f1e:	8013      	strh	r3, [r2, #0]

				return(status);
 8001f20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f24:	f000 bcba 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001f28:	4b5e      	ldr	r3, [pc, #376]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001f2a:	789b      	ldrb	r3, [r3, #2]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 8471 	bne.w	8002814 <i2c_slv_cmd_rx_tx_handle+0xd84>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001f32:	4b5e      	ldr	r3, [pc, #376]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f38:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001f40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f44:	f000 bcaa 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_POSITIVE_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001f48:	4b56      	ldr	r3, [pc, #344]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001f4a:	789b      	ldrb	r3, [r3, #2]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d110      	bne.n	8001f72 <i2c_slv_cmd_rx_tx_handle+0x4e2>
			{
				uint16_t dataread = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	83bb      	strh	r3, [r7, #28]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_POSI, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001f54:	2303      	movs	r3, #3
 8001f56:	2202      	movs	r2, #2
 8001f58:	21e8      	movs	r1, #232	; 0xe8
 8001f5a:	4853      	ldr	r0, [pc, #332]	; (80020a8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001f5c:	f7fe fe46 	bl	8000bec <max6911_read>
 8001f60:	4603      	mov	r3, r0
 8001f62:	83bb      	strh	r3, [r7, #28]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001f64:	4a51      	ldr	r2, [pc, #324]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f66:	8bbb      	ldrh	r3, [r7, #28]
 8001f68:	8013      	strh	r3, [r2, #0]

				return(status);
 8001f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f6e:	f000 bc95 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001f72:	4b4c      	ldr	r3, [pc, #304]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001f74:	789b      	ldrb	r3, [r3, #2]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 844e 	bne.w	8002818 <i2c_slv_cmd_rx_tx_handle+0xd88>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001f7c:	4b4b      	ldr	r3, [pc, #300]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f82:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001f84:	2301      	movs	r3, #1
 8001f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f8e:	f000 bc85 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_NEGITIVE_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001f92:	4b44      	ldr	r3, [pc, #272]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001f94:	789b      	ldrb	r3, [r3, #2]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d110      	bne.n	8001fbc <i2c_slv_cmd_rx_tx_handle+0x52c>
			{
				uint16_t dataread = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	83fb      	strh	r3, [r7, #30]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_NEGI, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	21e6      	movs	r1, #230	; 0xe6
 8001fa4:	4840      	ldr	r0, [pc, #256]	; (80020a8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001fa6:	f7fe fe21 	bl	8000bec <max6911_read>
 8001faa:	4603      	mov	r3, r0
 8001fac:	83fb      	strh	r3, [r7, #30]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001fae:	4a3f      	ldr	r2, [pc, #252]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001fb0:	8bfb      	ldrh	r3, [r7, #30]
 8001fb2:	8013      	strh	r3, [r2, #0]

				return(status);
 8001fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fb8:	f000 bc70 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001fbe:	789b      	ldrb	r3, [r3, #2]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f040 842b 	bne.w	800281c <i2c_slv_cmd_rx_tx_handle+0xd8c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fcc:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001fd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fd8:	f000 bc60 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001fde:	789b      	ldrb	r3, [r3, #2]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d110      	bne.n	8002006 <i2c_slv_cmd_rx_tx_handle+0x576>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	843b      	strh	r3, [r7, #32]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_BCUR, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001fe8:	2301      	movs	r3, #1
 8001fea:	2200      	movs	r2, #0
 8001fec:	21e8      	movs	r1, #232	; 0xe8
 8001fee:	482e      	ldr	r0, [pc, #184]	; (80020a8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001ff0:	f7fe fdfc 	bl	8000bec <max6911_read>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	843b      	strh	r3, [r7, #32]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001ff8:	4a2c      	ldr	r2, [pc, #176]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001ffa:	8c3b      	ldrh	r3, [r7, #32]
 8001ffc:	8013      	strh	r3, [r2, #0]

				return(status);
 8001ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002002:	f000 bc4b 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002006:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8002008:	789b      	ldrb	r3, [r3, #2]
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 8408 	bne.w	8002820 <i2c_slv_cmd_rx_tx_handle+0xd90>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8002012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002016:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002018:	2301      	movs	r3, #1
 800201a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800201e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002022:	f000 bc3b 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_CTL):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002026:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8002028:	789b      	ldrb	r3, [r3, #2]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d107      	bne.n	800203e <i2c_slv_cmd_rx_tx_handle+0x5ae>
			{
				i2c_slv_tx.data = ucd_detector.voltage_target; 						// Prepare the date into the transmit
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8002030:	895a      	ldrh	r2, [r3, #10]
 8002032:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8002034:	801a      	strh	r2, [r3, #0]
				return(status);
 8002036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800203a:	f000 bc2f 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8002040:	789b      	ldrb	r3, [r3, #2]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f040 83ee 	bne.w	8002824 <i2c_slv_cmd_rx_tx_handle+0xd94>
			{
				// Read the data from the buffer
				ucd_detector.voltage_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 800204a:	785b      	ldrb	r3, [r3, #1]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b21a      	sxth	r2, r3
												 i2c_slv_rx.bytes.data_byte_lsb;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b21b      	sxth	r3, r3
				ucd_detector.voltage_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002056:	4313      	orrs	r3, r2
 8002058:	b21b      	sxth	r3, r3
 800205a:	b29a      	uxth	r2, r3
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <i2c_slv_cmd_rx_tx_handle+0x620>)
 800205e:	815a      	strh	r2, [r3, #10]

				HAL_StatusTypeDef status = dac7574_write(UCD_DAC_VBIAS_INDEX, ucd_detector.voltage_target);
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8002062:	895b      	ldrh	r3, [r3, #10]
 8002064:	4619      	mov	r1, r3
 8002066:	2010      	movs	r0, #16
 8002068:	f7fe fd90 	bl	8000b8c <dac7574_write>
 800206c:	4603      	mov	r3, r0
 800206e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

				i2c_slv_tx.data = status;
 8002072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002076:	b29a      	uxth	r2, r3
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 800207a:	801a      	strh	r2, [r3, #0]
				return(status);
 800207c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f000 bc07 	b.w	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_MBIAS_1_CTRL):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8002090:	789b      	ldrb	r3, [r3, #2]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d10e      	bne.n	80020b4 <i2c_slv_cmd_rx_tx_handle+0x624>
			{
				i2c_slv_tx.data = ucd_detector.mbias_1_target; 						// Prepare the date into the transmit
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8002098:	899a      	ldrh	r2, [r3, #12]
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <i2c_slv_cmd_rx_tx_handle+0x61c>)
 800209c:	801a      	strh	r2, [r3, #0]
				return(status);
 800209e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a2:	e3fb      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
 80020a4:	20000270 	.word	0x20000270
 80020a8:	200000dc 	.word	0x200000dc
 80020ac:	20000274 	.word	0x20000274
 80020b0:	20000208 	.word	0x20000208
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80020b4:	4b97      	ldr	r3, [pc, #604]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80020b6:	789b      	ldrb	r3, [r3, #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 83b5 	bne.w	8002828 <i2c_slv_cmd_rx_tx_handle+0xd98>
			{
				// Read the data from the buffer
				ucd_detector.mbias_1_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80020be:	4b95      	ldr	r3, [pc, #596]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80020c0:	785b      	ldrb	r3, [r3, #1]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21a      	sxth	r2, r3
												 i2c_slv_rx.bytes.data_byte_lsb;
 80020c6:	4b93      	ldr	r3, [pc, #588]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b21b      	sxth	r3, r3
				ucd_detector.mbias_1_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b91      	ldr	r3, [pc, #580]	; (8002318 <i2c_slv_cmd_rx_tx_handle+0x888>)
 80020d4:	819a      	strh	r2, [r3, #12]

				HAL_StatusTypeDef status = dac7574_write(UCD_DAC_MBIAS_1_INDEX, ucd_detector.mbias_1_target);
 80020d6:	4b90      	ldr	r3, [pc, #576]	; (8002318 <i2c_slv_cmd_rx_tx_handle+0x888>)
 80020d8:	899b      	ldrh	r3, [r3, #12]
 80020da:	4619      	mov	r1, r3
 80020dc:	2012      	movs	r0, #18
 80020de:	f7fe fd55 	bl	8000b8c <dac7574_write>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				i2c_slv_tx.data = status;
 80020e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	4b8b      	ldr	r3, [pc, #556]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80020f0:	801a      	strh	r2, [r3, #0]
				return(status);
 80020f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf14      	ite	ne
 80020fa:	2301      	movne	r3, #1
 80020fc:	2300      	moveq	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	e3cc      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_MBIAS_2_CTRL):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002102:	4b84      	ldr	r3, [pc, #528]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002104:	789b      	ldrb	r3, [r3, #2]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d106      	bne.n	8002118 <i2c_slv_cmd_rx_tx_handle+0x688>
			{
				i2c_slv_tx.data = ucd_detector.mbias_2_target; 						// Prepare the date into the transmit
 800210a:	4b83      	ldr	r3, [pc, #524]	; (8002318 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800210c:	89da      	ldrh	r2, [r3, #14]
 800210e:	4b83      	ldr	r3, [pc, #524]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002110:	801a      	strh	r2, [r3, #0]
				return(status);
 8002112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002116:	e3c1      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002118:	4b7e      	ldr	r3, [pc, #504]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800211a:	789b      	ldrb	r3, [r3, #2]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f040 8385 	bne.w	800282c <i2c_slv_cmd_rx_tx_handle+0xd9c>
			{
				// Read the data from the buffer
				ucd_detector.mbias_2_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002122:	4b7c      	ldr	r3, [pc, #496]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002124:	785b      	ldrb	r3, [r3, #1]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b21a      	sxth	r2, r3
												 i2c_slv_rx.bytes.data_byte_lsb;
 800212a:	4b7a      	ldr	r3, [pc, #488]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b21b      	sxth	r3, r3
				ucd_detector.mbias_2_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002130:	4313      	orrs	r3, r2
 8002132:	b21b      	sxth	r3, r3
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b78      	ldr	r3, [pc, #480]	; (8002318 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002138:	81da      	strh	r2, [r3, #14]

				HAL_StatusTypeDef status = dac7574_write(UCD_DAC_MBIAS_2_INDEX, ucd_detector.mbias_2_target);
 800213a:	4b77      	ldr	r3, [pc, #476]	; (8002318 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800213c:	89db      	ldrh	r3, [r3, #14]
 800213e:	4619      	mov	r1, r3
 8002140:	2014      	movs	r0, #20
 8002142:	f7fe fd23 	bl	8000b8c <dac7574_write>
 8002146:	4603      	mov	r3, r0
 8002148:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

				i2c_slv_tx.data = status;
 800214c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002150:	b29a      	uxth	r2, r3
 8002152:	4b72      	ldr	r3, [pc, #456]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002154:	801a      	strh	r2, [r3, #0]
				return(status);
 8002156:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800215a:	2b00      	cmp	r3, #0
 800215c:	bf14      	ite	ne
 800215e:	2301      	movne	r3, #1
 8002160:	2300      	moveq	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	e39a      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
    	//                     CEA Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002166:	4b6b      	ldr	r3, [pc, #428]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002168:	789b      	ldrb	r3, [r3, #2]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10c      	bne.n	8002188 <i2c_slv_cmd_rx_tx_handle+0x6f8>
			{
				cea_detector.board_enable_state = (uint16_t)cea_board_enable_get(); // Read the state enable pin
 800216e:	f7ff fa87 	bl	8001680 <cea_board_enable_get>
 8002172:	4603      	mov	r3, r0
 8002174:	b29a      	uxth	r2, r3
 8002176:	4b6a      	ldr	r3, [pc, #424]	; (8002320 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002178:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = cea_detector.board_enable_state; 					// Prepare the date into the transmit
 800217a:	4b69      	ldr	r3, [pc, #420]	; (8002320 <i2c_slv_cmd_rx_tx_handle+0x890>)
 800217c:	8a1a      	ldrh	r2, [r3, #16]
 800217e:	4b67      	ldr	r3, [pc, #412]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002180:	801a      	strh	r2, [r3, #0]
				return(status);
 8002182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002186:	e389      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002188:	4b62      	ldr	r3, [pc, #392]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800218a:	789b      	ldrb	r3, [r3, #2]
 800218c:	2b00      	cmp	r3, #0
 800218e:	f040 834f 	bne.w	8002830 <i2c_slv_cmd_rx_tx_handle+0xda0>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8002192:	4b60      	ldr	r3, [pc, #384]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d11e      	bne.n	80021d8 <i2c_slv_cmd_rx_tx_handle+0x748>
				{
					bool enable_status = cea_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff fa12 	bl	80015c4 <cea_board_enable_set>
 80021a0:	4603      	mov	r3, r0
 80021a2:	727b      	strb	r3, [r7, #9]
					if(enable_status == EXIT_SUCCESS)
 80021a4:	7a7b      	ldrb	r3, [r7, #9]
 80021a6:	f083 0301 	eor.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <i2c_slv_cmd_rx_tx_handle+0x72e>
					{
						i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80021b0:	4b5a      	ldr	r3, [pc, #360]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	801a      	strh	r2, [r3, #0]
						status =  EXIT_SUCCESS;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021bc:	e009      	b.n	80021d2 <i2c_slv_cmd_rx_tx_handle+0x742>
					}
					else if (enable_status == EXIT_FAILURE)
 80021be:	7a7b      	ldrb	r3, [r7, #9]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <i2c_slv_cmd_rx_tx_handle+0x742>
					{
						status =  EXIT_FAILURE;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80021ca:	4b54      	ldr	r3, [pc, #336]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80021cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d0:	801a      	strh	r2, [r3, #0]
					}
					return(status);
 80021d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021d6:	e361      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 80021d8:	4b4e      	ldr	r3, [pc, #312]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d108      	bne.n	80021f2 <i2c_slv_cmd_rx_tx_handle+0x762>
				{
					cea_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7ff f9ef 	bl	80015c4 <cea_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80021e6:	4b4d      	ldr	r3, [pc, #308]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	801a      	strh	r2, [r3, #0]
					return(status);
 80021ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021f0:	e354      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80021f2:	4b4a      	ldr	r3, [pc, #296]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80021f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f8:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002204:	e34a      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002206:	4b43      	ldr	r3, [pc, #268]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002208:	789b      	ldrb	r3, [r3, #2]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d107      	bne.n	800221e <i2c_slv_cmd_rx_tx_handle+0x78e>
			{
				i2c_slv_tx.data = cea_detector.hv_loop_enable; 						// Prepare the date into the transmit
 800220e:	4b44      	ldr	r3, [pc, #272]	; (8002320 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002210:	785b      	ldrb	r3, [r3, #1]
 8002212:	b29a      	uxth	r2, r3
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002216:	801a      	strh	r2, [r3, #0]
				return(status);
 8002218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800221c:	e33e      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002220:	789b      	ldrb	r3, [r3, #2]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f040 8306 	bne.w	8002834 <i2c_slv_cmd_rx_tx_handle+0xda4>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 8002228:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d108      	bne.n	8002242 <i2c_slv_cmd_rx_tx_handle+0x7b2>
				{
					cea_detector.hv_loop_enable = true;								// Set the state of the flag
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002232:	2201      	movs	r2, #1
 8002234:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002236:	4b39      	ldr	r3, [pc, #228]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002238:	2201      	movs	r2, #1
 800223a:	801a      	strh	r2, [r3, #0]
					return(status);
 800223c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002240:	e32c      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 8002242:	4b34      	ldr	r3, [pc, #208]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d108      	bne.n	800225c <i2c_slv_cmd_rx_tx_handle+0x7cc>
				{
					cea_detector.hv_loop_enable = false;						    // Set the state of the flag
 800224a:	4b35      	ldr	r3, [pc, #212]	; (8002320 <i2c_slv_cmd_rx_tx_handle+0x890>)
 800224c:	2200      	movs	r2, #0
 800224e:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002250:	4b32      	ldr	r3, [pc, #200]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002252:	2201      	movs	r2, #1
 8002254:	801a      	strh	r2, [r3, #0]
					return(status);
 8002256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800225a:	e31f      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 800225e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002262:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800226a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800226e:	e315      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002272:	789b      	ldrb	r3, [r3, #2]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d10f      	bne.n	8002298 <i2c_slv_cmd_rx_tx_handle+0x808>
			{
				uint16_t dataread = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	817b      	strh	r3, [r7, #10]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 800227c:	2303      	movs	r3, #3
 800227e:	2202      	movs	r2, #2
 8002280:	21ee      	movs	r1, #238	; 0xee
 8002282:	4828      	ldr	r0, [pc, #160]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x894>)
 8002284:	f7fe fcb2 	bl	8000bec <max6911_read>
 8002288:	4603      	mov	r3, r0
 800228a:	817b      	strh	r3, [r7, #10]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800228c:	4a23      	ldr	r2, [pc, #140]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 800228e:	897b      	ldrh	r3, [r7, #10]
 8002290:	8013      	strh	r3, [r2, #0]

				return(status);
 8002292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002296:	e301      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800229a:	789b      	ldrb	r3, [r3, #2]
 800229c:	2b00      	cmp	r3, #0
 800229e:	f040 82cb 	bne.w	8002838 <i2c_slv_cmd_rx_tx_handle+0xda8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80022a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a8:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80022b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022b4:	e2f2      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80022b6:	4b17      	ldr	r3, [pc, #92]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80022b8:	789b      	ldrb	r3, [r3, #2]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d10f      	bne.n	80022de <i2c_slv_cmd_rx_tx_handle+0x84e>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	81bb      	strh	r3, [r7, #12]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 80022c2:	2301      	movs	r3, #1
 80022c4:	2200      	movs	r2, #0
 80022c6:	21f0      	movs	r1, #240	; 0xf0
 80022c8:	4816      	ldr	r0, [pc, #88]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x894>)
 80022ca:	f7fe fc8f 	bl	8000bec <max6911_read>
 80022ce:	4603      	mov	r3, r0
 80022d0:	81bb      	strh	r3, [r7, #12]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80022d4:	89bb      	ldrh	r3, [r7, #12]
 80022d6:	8013      	strh	r3, [r2, #0]

				return(status);
 80022d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022dc:	e2de      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80022e0:	789b      	ldrb	r3, [r3, #2]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 82aa 	bne.w	800283c <i2c_slv_cmd_rx_tx_handle+0xdac>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80022ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ee:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80022f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022fa:	e2cf      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80022fc:	4b05      	ldr	r3, [pc, #20]	; (8002314 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80022fe:	789b      	ldrb	r3, [r3, #2]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d111      	bne.n	8002328 <i2c_slv_cmd_rx_tx_handle+0x898>
			{
				i2c_slv_tx.data = cea_detector.hv_targate_value;        // Prepare the date into the transmit
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002306:	891a      	ldrh	r2, [r3, #8]
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 800230a:	801a      	strh	r2, [r3, #0]
				return(status);
 800230c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002310:	e2c4      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
 8002312:	bf00      	nop
 8002314:	20000270 	.word	0x20000270
 8002318:	20000208 	.word	0x20000208
 800231c:	20000274 	.word	0x20000274
 8002320:	20000230 	.word	0x20000230
 8002324:	200000dc 	.word	0x200000dc
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002328:	4b9d      	ldr	r3, [pc, #628]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800232a:	789b      	ldrb	r3, [r3, #2]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 8293 	bne.w	8002858 <i2c_slv_cmd_rx_tx_handle+0xdc8>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 8002332:	4b9b      	ldr	r3, [pc, #620]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002334:	785b      	ldrb	r3, [r3, #1]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	d811      	bhi.n	800235e <i2c_slv_cmd_rx_tx_handle+0x8ce>
				{
					// Read the data from the buffer
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 800233a:	4b99      	ldr	r3, [pc, #612]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800233c:	785b      	ldrb	r3, [r3, #1]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 8002342:	4b97      	ldr	r3, [pc, #604]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	b21b      	sxth	r3, r3
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002348:	4313      	orrs	r3, r2
 800234a:	b21b      	sxth	r3, r3
 800234c:	b29a      	uxth	r2, r3
 800234e:	4b95      	ldr	r3, [pc, #596]	; (80025a4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002350:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002352:	4b95      	ldr	r3, [pc, #596]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002354:	2201      	movs	r2, #1
 8002356:	801a      	strh	r2, [r3, #0]
					return(status);
 8002358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800235c:	e29e      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800235e:	4b92      	ldr	r3, [pc, #584]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002364:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					return(status);
 800236c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002370:	e294      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
    	//                     IJC Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002372:	4b8b      	ldr	r3, [pc, #556]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002374:	789b      	ldrb	r3, [r3, #2]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d10c      	bne.n	8002394 <i2c_slv_cmd_rx_tx_handle+0x904>
			{
				ijc_detector.board_enable_state = (uint16_t)ijc_board_enable_get(); // Read the state enable pin
 800237a:	f7ff f88d 	bl	8001498 <ijc_board_enable_get>
 800237e:	4603      	mov	r3, r0
 8002380:	b29a      	uxth	r2, r3
 8002382:	4b8a      	ldr	r3, [pc, #552]	; (80025ac <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002384:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = ijc_detector.board_enable_state; 					// Prepare the date into the transmit
 8002386:	4b89      	ldr	r3, [pc, #548]	; (80025ac <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002388:	8a1a      	ldrh	r2, [r3, #16]
 800238a:	4b87      	ldr	r3, [pc, #540]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 800238c:	801a      	strh	r2, [r3, #0]
				return(status);
 800238e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002392:	e283      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002394:	4b82      	ldr	r3, [pc, #520]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 825f 	bne.w	800285c <i2c_slv_cmd_rx_tx_handle+0xdcc>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 800239e:	4b80      	ldr	r3, [pc, #512]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d11e      	bne.n	80023e4 <i2c_slv_cmd_rx_tx_handle+0x954>
				{
					bool enable_status = ijc_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7ff f818 	bl	80013dc <ijc_board_enable_set>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]
					if(enable_status == EXIT_SUCCESS)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	f083 0301 	eor.w	r3, r3, #1
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <i2c_slv_cmd_rx_tx_handle+0x93a>
					{
						i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80023bc:	4b7a      	ldr	r3, [pc, #488]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80023be:	2201      	movs	r2, #1
 80023c0:	801a      	strh	r2, [r3, #0]
						status =  EXIT_SUCCESS;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80023c8:	e009      	b.n	80023de <i2c_slv_cmd_rx_tx_handle+0x94e>
					}
					else if (enable_status == EXIT_FAILURE)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d006      	beq.n	80023de <i2c_slv_cmd_rx_tx_handle+0x94e>
					{
						status =  EXIT_FAILURE;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80023d6:	4b74      	ldr	r3, [pc, #464]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80023d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023dc:	801a      	strh	r2, [r3, #0]
					}
					return(status);
 80023de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023e2:	e25b      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 80023e4:	4b6e      	ldr	r3, [pc, #440]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d108      	bne.n	80023fe <i2c_slv_cmd_rx_tx_handle+0x96e>
				{
					ijc_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7fe fff5 	bl	80013dc <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	801a      	strh	r2, [r3, #0]
					return(status);
 80023f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023fc:	e24e      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80023fe:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002404:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800240c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002410:	e244      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002412:	4b63      	ldr	r3, [pc, #396]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002414:	789b      	ldrb	r3, [r3, #2]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d107      	bne.n	800242a <i2c_slv_cmd_rx_tx_handle+0x99a>
			{
				i2c_slv_tx.data = ijc_detector.hv_loop_enable; 						// Prepare the date into the transmit
 800241a:	4b64      	ldr	r3, [pc, #400]	; (80025ac <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 800241c:	785b      	ldrb	r3, [r3, #1]
 800241e:	b29a      	uxth	r2, r3
 8002420:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002422:	801a      	strh	r2, [r3, #0]
				return(status);
 8002424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002428:	e238      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800242a:	4b5d      	ldr	r3, [pc, #372]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800242c:	789b      	ldrb	r3, [r3, #2]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 8216 	bne.w	8002860 <i2c_slv_cmd_rx_tx_handle+0xdd0>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 8002434:	4b5a      	ldr	r3, [pc, #360]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d108      	bne.n	800244e <i2c_slv_cmd_rx_tx_handle+0x9be>
				{
					ijc_detector.hv_loop_enable = true;								// Set the state of the flag
 800243c:	4b5b      	ldr	r3, [pc, #364]	; (80025ac <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 800243e:	2201      	movs	r2, #1
 8002440:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002442:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002444:	2201      	movs	r2, #1
 8002446:	801a      	strh	r2, [r3, #0]
					return(status);
 8002448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800244c:	e226      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 800244e:	4b54      	ldr	r3, [pc, #336]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d108      	bne.n	8002468 <i2c_slv_cmd_rx_tx_handle+0x9d8>
				{
					ijc_detector.hv_loop_enable = false;						    // Set the state of the flag
 8002456:	4b55      	ldr	r3, [pc, #340]	; (80025ac <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002458:	2200      	movs	r2, #0
 800245a:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800245c:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 800245e:	2201      	movs	r2, #1
 8002460:	801a      	strh	r2, [r3, #0]
					return(status);
 8002462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002466:	e219      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002468:	4b4f      	ldr	r3, [pc, #316]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 800246a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800246e:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800247a:	e20f      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800247c:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800247e:	789b      	ldrb	r3, [r3, #2]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10f      	bne.n	80024a4 <i2c_slv_cmd_rx_tx_handle+0xa14>
			{
				uint16_t dataread = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	82bb      	strh	r3, [r7, #20]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8002488:	2303      	movs	r3, #3
 800248a:	2202      	movs	r2, #2
 800248c:	21e0      	movs	r1, #224	; 0xe0
 800248e:	4848      	ldr	r0, [pc, #288]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 8002490:	f7fe fbac 	bl	8000bec <max6911_read>
 8002494:	4603      	mov	r3, r0
 8002496:	82bb      	strh	r3, [r7, #20]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8002498:	4a43      	ldr	r2, [pc, #268]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 800249a:	8abb      	ldrh	r3, [r7, #20]
 800249c:	8013      	strh	r3, [r2, #0]

				return(status);
 800249e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024a2:	e1fb      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80024a4:	4b3e      	ldr	r3, [pc, #248]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80024a6:	789b      	ldrb	r3, [r3, #2]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f040 81db 	bne.w	8002864 <i2c_slv_cmd_rx_tx_handle+0xdd4>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80024ae:	4b3e      	ldr	r3, [pc, #248]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80024b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80024bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024c0:	e1ec      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80024c2:	4b37      	ldr	r3, [pc, #220]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80024c4:	789b      	ldrb	r3, [r3, #2]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d10f      	bne.n	80024ea <i2c_slv_cmd_rx_tx_handle+0xa5a>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	82fb      	strh	r3, [r7, #22]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 80024ce:	2301      	movs	r3, #1
 80024d0:	2200      	movs	r2, #0
 80024d2:	21e0      	movs	r1, #224	; 0xe0
 80024d4:	4836      	ldr	r0, [pc, #216]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 80024d6:	f7fe fb89 	bl	8000bec <max6911_read>
 80024da:	4603      	mov	r3, r0
 80024dc:	82fb      	strh	r3, [r7, #22]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80024de:	4a32      	ldr	r2, [pc, #200]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80024e0:	8afb      	ldrh	r3, [r7, #22]
 80024e2:	8013      	strh	r3, [r2, #0]

				return(status);
 80024e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024e8:	e1d8      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80024ec:	789b      	ldrb	r3, [r3, #2]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 81ba 	bne.w	8002868 <i2c_slv_cmd_rx_tx_handle+0xdd8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80024f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fa:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				{
				    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002506:	482b      	ldr	r0, [pc, #172]	; (80025b4 <i2c_slv_cmd_rx_tx_handle+0xb24>)
 8002508:	f001 f89a 	bl	8003640 <HAL_GPIO_TogglePin>
				}
				return(status);
 800250c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002510:	e1c4      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002514:	789b      	ldrb	r3, [r3, #2]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10f      	bne.n	800253a <i2c_slv_cmd_rx_tx_handle+0xaaa>
			{
				uint16_t dataread = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	833b      	strh	r3, [r7, #24]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 800251e:	2303      	movs	r3, #3
 8002520:	2202      	movs	r2, #2
 8002522:	21e2      	movs	r1, #226	; 0xe2
 8002524:	4822      	ldr	r0, [pc, #136]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 8002526:	f7fe fb61 	bl	8000bec <max6911_read>
 800252a:	4603      	mov	r3, r0
 800252c:	833b      	strh	r3, [r7, #24]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002530:	8b3b      	ldrh	r3, [r7, #24]
 8002532:	8013      	strh	r3, [r2, #0]

				return(status);
 8002534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002538:	e1b0      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800253c:	789b      	ldrb	r3, [r3, #2]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8194 	bne.w	800286c <i2c_slv_cmd_rx_tx_handle+0xddc>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002544:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800254c:	2301      	movs	r3, #1
 800254e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002556:	e1a1      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800255a:	789b      	ldrb	r3, [r3, #2]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d10f      	bne.n	8002580 <i2c_slv_cmd_rx_tx_handle+0xaf0>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	837b      	strh	r3, [r7, #26]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8002564:	2301      	movs	r3, #1
 8002566:	2200      	movs	r2, #0
 8002568:	21e2      	movs	r1, #226	; 0xe2
 800256a:	4811      	ldr	r0, [pc, #68]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 800256c:	f7fe fb3e 	bl	8000bec <max6911_read>
 8002570:	4603      	mov	r3, r0
 8002572:	837b      	strh	r3, [r7, #26]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8002574:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002576:	8b7b      	ldrh	r3, [r7, #26]
 8002578:	8013      	strh	r3, [r2, #0]

				return(status);
 800257a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800257e:	e18d      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002582:	789b      	ldrb	r3, [r3, #2]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 8173 	bne.w	8002870 <i2c_slv_cmd_rx_tx_handle+0xde0>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 800258c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002590:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002592:	2301      	movs	r3, #1
 8002594:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800259c:	e17e      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
 800259e:	bf00      	nop
 80025a0:	20000270 	.word	0x20000270
 80025a4:	20000230 	.word	0x20000230
 80025a8:	20000274 	.word	0x20000274
 80025ac:	2000021c 	.word	0x2000021c
 80025b0:	20000088 	.word	0x20000088
 80025b4:	48000400 	.word	0x48000400
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80025b8:	4ba1      	ldr	r3, [pc, #644]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80025ba:	789b      	ldrb	r3, [r3, #2]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10f      	bne.n	80025e0 <i2c_slv_cmd_rx_tx_handle+0xb50>
			{
				uint16_t dataread = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	823b      	strh	r3, [r7, #16]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80025c4:	2303      	movs	r3, #3
 80025c6:	2202      	movs	r2, #2
 80025c8:	21e4      	movs	r1, #228	; 0xe4
 80025ca:	489e      	ldr	r0, [pc, #632]	; (8002844 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80025cc:	f7fe fb0e 	bl	8000bec <max6911_read>
 80025d0:	4603      	mov	r3, r0
 80025d2:	823b      	strh	r3, [r7, #16]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80025d4:	4a9c      	ldr	r2, [pc, #624]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80025d6:	8a3b      	ldrh	r3, [r7, #16]
 80025d8:	8013      	strh	r3, [r2, #0]

				return(status);
 80025da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025de:	e15d      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80025e0:	4b97      	ldr	r3, [pc, #604]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80025e2:	789b      	ldrb	r3, [r3, #2]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 8145 	bne.w	8002874 <i2c_slv_cmd_rx_tx_handle+0xde4>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80025ea:	4b97      	ldr	r3, [pc, #604]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80025ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f0:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80025f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025fc:	e14e      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80025fe:	4b90      	ldr	r3, [pc, #576]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002600:	789b      	ldrb	r3, [r3, #2]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d10f      	bne.n	8002626 <i2c_slv_cmd_rx_tx_handle+0xb96>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	827b      	strh	r3, [r7, #18]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 800260a:	2301      	movs	r3, #1
 800260c:	2200      	movs	r2, #0
 800260e:	21e6      	movs	r1, #230	; 0xe6
 8002610:	488c      	ldr	r0, [pc, #560]	; (8002844 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002612:	f7fe faeb 	bl	8000bec <max6911_read>
 8002616:	4603      	mov	r3, r0
 8002618:	827b      	strh	r3, [r7, #18]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800261a:	4a8b      	ldr	r2, [pc, #556]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 800261c:	8a7b      	ldrh	r3, [r7, #18]
 800261e:	8013      	strh	r3, [r2, #0]

				return(status);
 8002620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002624:	e13a      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002626:	4b86      	ldr	r3, [pc, #536]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002628:	789b      	ldrb	r3, [r3, #2]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 8124 	bne.w	8002878 <i2c_slv_cmd_rx_tx_handle+0xde8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002630:	4b85      	ldr	r3, [pc, #532]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002636:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800263e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002642:	e12b      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002644:	4b7e      	ldr	r3, [pc, #504]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002646:	789b      	ldrb	r3, [r3, #2]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <i2c_slv_cmd_rx_tx_handle+0xbca>
			{
				i2c_slv_tx.data = ijc_detector.hv_targate_value;        // Prepare the date into the transmit
 800264c:	4b7f      	ldr	r3, [pc, #508]	; (800284c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 800264e:	891a      	ldrh	r2, [r3, #8]
 8002650:	4b7d      	ldr	r3, [pc, #500]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002652:	801a      	strh	r2, [r3, #0]
				return(status);
 8002654:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002658:	e120      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800265a:	4b79      	ldr	r3, [pc, #484]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 800265c:	789b      	ldrb	r3, [r3, #2]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 810c 	bne.w	800287c <i2c_slv_cmd_rx_tx_handle+0xdec>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 8002664:	4b76      	ldr	r3, [pc, #472]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	2b0f      	cmp	r3, #15
 800266a:	d811      	bhi.n	8002690 <i2c_slv_cmd_rx_tx_handle+0xc00>
				{
					// Read the data from the buffer
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 800266c:	4b74      	ldr	r3, [pc, #464]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 800266e:	785b      	ldrb	r3, [r3, #1]
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 8002674:	4b72      	ldr	r3, [pc, #456]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b21b      	sxth	r3, r3
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 800267a:	4313      	orrs	r3, r2
 800267c:	b21b      	sxth	r3, r3
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b72      	ldr	r3, [pc, #456]	; (800284c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002682:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002684:	4b70      	ldr	r3, [pc, #448]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002686:	2201      	movs	r2, #1
 8002688:	801a      	strh	r2, [r3, #0]
					return(status);
 800268a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800268e:	e105      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002690:	4b6d      	ldr	r3, [pc, #436]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002696:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 8002698:	2301      	movs	r3, #1
 800269a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					return(status);
 800269e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026a2:	e0fb      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
    	//                            CAEN MODULE BOARD
		// ---------------------------------------------------------------------
       	// ---------------------------------------------------------------------
    	case(CMD_CAEN_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80026a4:	4b66      	ldr	r3, [pc, #408]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80026a6:	789b      	ldrb	r3, [r3, #2]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d10c      	bne.n	80026c6 <i2c_slv_cmd_rx_tx_handle+0xc36>
			{
				caen_detector.board_enable_state = (uint16_t)caen_board_enable_get(); // Read the state enable pin
 80026ac:	f7fe fdd0 	bl	8001250 <caen_board_enable_get>
 80026b0:	4603      	mov	r3, r0
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdc0>)
 80026b6:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = caen_detector.board_enable_state; 					// Prepare the date into the transmit
 80026b8:	4b65      	ldr	r3, [pc, #404]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdc0>)
 80026ba:	8a1a      	ldrh	r2, [r3, #16]
 80026bc:	4b62      	ldr	r3, [pc, #392]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80026be:	801a      	strh	r2, [r3, #0]
				return(status);
 80026c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026c4:	e0ea      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80026c6:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80026c8:	789b      	ldrb	r3, [r3, #2]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f040 80d8 	bne.w	8002880 <i2c_slv_cmd_rx_tx_handle+0xdf0>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 80026d0:	4b5b      	ldr	r3, [pc, #364]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d108      	bne.n	80026ea <i2c_slv_cmd_rx_tx_handle+0xc5a>
				{
					caen_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 80026d8:	2001      	movs	r0, #1
 80026da:	f7fe fda1 	bl	8001220 <caen_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80026de:	4b5a      	ldr	r3, [pc, #360]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	801a      	strh	r2, [r3, #0]
					return(status);
 80026e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026e8:	e0d8      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 80026ea:	4b55      	ldr	r3, [pc, #340]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <i2c_slv_cmd_rx_tx_handle+0xc74>
				{
					caen_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe fd94 	bl	8001220 <caen_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	801a      	strh	r2, [r3, #0]
					return(status);
 80026fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002702:	e0cb      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800270a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800270c:	2301      	movs	r3, #1
 800270e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002716:	e0c1      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
    	//                            TEMP PRESSURE
		// ---------------------------------------------------------------------
       	// ---------------------------------------------------------------------
    	case(CMD_TEMP_MSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002718:	4b49      	ldr	r3, [pc, #292]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 800271a:	789b      	ldrb	r3, [r3, #2]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d108      	bne.n	8002732 <i2c_slv_cmd_rx_tx_handle+0xca2>
			{
				i2c_slv_tx.data = (measurement.uncomp_temp >> 16) & 0xFFFF;  	// Prepare the date into the transmit
 8002720:	4b4c      	ldr	r3, [pc, #304]	; (8002854 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b47      	ldr	r3, [pc, #284]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 800272a:	801a      	strh	r2, [r3, #0]
				return(status);
 800272c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002730:	e0b4      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002734:	789b      	ldrb	r3, [r3, #2]
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 80a4 	bne.w	8002884 <i2c_slv_cmd_rx_tx_handle+0xdf4>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800273c:	4b42      	ldr	r3, [pc, #264]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 800273e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002742:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800274a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800274e:	e0a5      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_TEMP_LSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002750:	4b3b      	ldr	r3, [pc, #236]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002752:	789b      	ldrb	r3, [r3, #2]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <i2c_slv_cmd_rx_tx_handle+0xcd8>
			{
				i2c_slv_tx.data = (measurement.uncomp_temp) & 0xFFFF;  	// Prepare the date into the transmit
 8002758:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	b29a      	uxth	r2, r3
 800275e:	4b3a      	ldr	r3, [pc, #232]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002760:	801a      	strh	r2, [r3, #0]
				return(status);
 8002762:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002766:	e099      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 800276a:	789b      	ldrb	r3, [r3, #2]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 808b 	bne.w	8002888 <i2c_slv_cmd_rx_tx_handle+0xdf8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002772:	4b35      	ldr	r3, [pc, #212]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002778:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800277a:	2301      	movs	r3, #1
 800277c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002784:	e08a      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>

    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_PRES_MSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002786:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002788:	789b      	ldrb	r3, [r3, #2]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d108      	bne.n	80027a0 <i2c_slv_cmd_rx_tx_handle+0xd10>
			{
				i2c_slv_tx.data = (measurement.uncomp_press >> 16) & 0xFFFF;  	// Prepare the date into the transmit
 800278e:	4b31      	ldr	r3, [pc, #196]	; (8002854 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b29a      	uxth	r2, r3
 8002796:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002798:	801a      	strh	r2, [r3, #0]
				return(status);
 800279a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800279e:	e07d      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80027a2:	789b      	ldrb	r3, [r3, #2]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d171      	bne.n	800288c <i2c_slv_cmd_rx_tx_handle+0xdfc>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80027aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ae:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80027b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027ba:	e06f      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_PRES_LSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80027bc:	4b20      	ldr	r3, [pc, #128]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80027be:	789b      	ldrb	r3, [r3, #2]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <i2c_slv_cmd_rx_tx_handle+0xd44>
			{
				i2c_slv_tx.data = (measurement.uncomp_press) & 0xFFFF;  	// Prepare the date into the transmit
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80027cc:	801a      	strh	r2, [r3, #0]
				return(status);
 80027ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027d2:	e063      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80027d4:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80027d6:	789b      	ldrb	r3, [r3, #2]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d159      	bne.n	8002890 <i2c_slv_cmd_rx_tx_handle+0xe00>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80027de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e2:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80027e4:	2301      	movs	r3, #1
 80027e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80027ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027ee:	e055      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			break;
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	default:
			status =  EXIT_FAILURE;
 80027f0:	2301      	movs	r3, #1
 80027f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return(status);
 80027f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027fa:	e04f      	b.n	800289c <i2c_slv_cmd_rx_tx_handle+0xe0c>
			break;
 80027fc:	bf00      	nop
 80027fe:	e048      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002800:	bf00      	nop
 8002802:	e046      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002804:	bf00      	nop
 8002806:	e044      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002808:	bf00      	nop
 800280a:	e042      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800280c:	bf00      	nop
 800280e:	e040      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002810:	bf00      	nop
 8002812:	e03e      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002814:	bf00      	nop
 8002816:	e03c      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002818:	bf00      	nop
 800281a:	e03a      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800281c:	bf00      	nop
 800281e:	e038      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002820:	bf00      	nop
 8002822:	e036      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002824:	bf00      	nop
 8002826:	e034      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002828:	bf00      	nop
 800282a:	e032      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800282c:	bf00      	nop
 800282e:	e030      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002830:	bf00      	nop
 8002832:	e02e      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002834:	bf00      	nop
 8002836:	e02c      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002838:	bf00      	nop
 800283a:	e02a      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800283c:	bf00      	nop
 800283e:	e028      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
 8002840:	20000270 	.word	0x20000270
 8002844:	20000088 	.word	0x20000088
 8002848:	20000274 	.word	0x20000274
 800284c:	2000021c 	.word	0x2000021c
 8002850:	20000244 	.word	0x20000244
 8002854:	20000278 	.word	0x20000278
			break;
 8002858:	bf00      	nop
 800285a:	e01a      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800285c:	bf00      	nop
 800285e:	e018      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002860:	bf00      	nop
 8002862:	e016      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002864:	bf00      	nop
 8002866:	e014      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002868:	bf00      	nop
 800286a:	e012      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800286c:	bf00      	nop
 800286e:	e010      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002870:	bf00      	nop
 8002872:	e00e      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002874:	bf00      	nop
 8002876:	e00c      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002878:	bf00      	nop
 800287a:	e00a      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800287c:	bf00      	nop
 800287e:	e008      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002880:	bf00      	nop
 8002882:	e006      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002884:	bf00      	nop
 8002886:	e004      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002888:	bf00      	nop
 800288a:	e002      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002890:	bf00      	nop
	}

    // If no command is matched - return failure
	status =  EXIT_FAILURE;
 8002892:	2301      	movs	r3, #1
 8002894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return(status);
 8002898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800289c:	4618      	mov	r0, r3
 800289e:	3730      	adds	r7, #48	; 0x30
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <i2c_slv_init>:



void i2c_slv_init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	// Clear the Tx and Rx buffers before use
	i2c_slv_clear_buffer(&i2c_tx_buffer[0], TXBUFFERSIZE);
 80028a8:	2102      	movs	r1, #2
 80028aa:	4808      	ldr	r0, [pc, #32]	; (80028cc <i2c_slv_init+0x28>)
 80028ac:	f000 f814 	bl	80028d8 <i2c_slv_clear_buffer>
	i2c_slv_clear_buffer(&i2c_rx_buffer[0], RXBUFFERSIZE);
 80028b0:	2104      	movs	r1, #4
 80028b2:	4807      	ldr	r0, [pc, #28]	; (80028d0 <i2c_slv_init+0x2c>)
 80028b4:	f000 f810 	bl	80028d8 <i2c_slv_clear_buffer>

	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80028b8:	4806      	ldr	r0, [pc, #24]	; (80028d4 <i2c_slv_init+0x30>)
 80028ba:	f001 fae9 	bl	8003e90 <HAL_I2C_EnableListen_IT>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <i2c_slv_init+0x24>
	{
		/* Transfer error in reception process */
		Error_Handler();
 80028c4:	f000 f8e8 	bl	8002a98 <Error_Handler>
	}
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	20000268 	.word	0x20000268
 80028d0:	2000026c 	.word	0x2000026c
 80028d4:	20000034 	.word	0x20000034

080028d8 <i2c_slv_clear_buffer>:


void i2c_slv_clear_buffer(uint8_t* buffer, uint8_t size)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]

	uint8_t idx = 0; // An index
 80028e4:	2300      	movs	r3, #0
 80028e6:	73fb      	strb	r3, [r7, #15]

	for(idx = 0; idx < size; idx++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	e008      	b.n	8002900 <i2c_slv_clear_buffer+0x28>
	{
		// Cycle through and clear the buffer array
		*buffer = 0x00;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
		buffer++;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3301      	adds	r3, #1
 80028f8:	607b      	str	r3, [r7, #4]
	for(idx = 0; idx < size; idx++)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	3301      	adds	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	429a      	cmp	r2, r3
 8002906:	d3f2      	bcc.n	80028ee <i2c_slv_clear_buffer+0x16>
	}

}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
	Xfer_Complete = 1;        // Set flag for RX completion
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000030 	.word	0x20000030

08002938 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	// Handle the I2C receive callback complete
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	061a      	lsls	r2, r3, #24
					| (i2c_rx_buffer[1] << 16)
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8002948:	785b      	ldrb	r3, [r3, #1]
 800294a:	041b      	lsls	r3, r3, #16
 800294c:	431a      	orrs	r2, r3
					| (i2c_rx_buffer[2] << 8)
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8002950:	789b      	ldrb	r3, [r3, #2]
 8002952:	021b      	lsls	r3, r3, #8
 8002954:	4313      	orrs	r3, r2
					| (i2c_rx_buffer[3]);
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8002958:	78d2      	ldrb	r2, [r2, #3]
 800295a:	4313      	orrs	r3, r2
 800295c:	461a      	mov	r2, r3
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8002960:	601a      	str	r2, [r3, #0]

	// Load the init/fail value into the tx buffer
	i2c_slv_tx.data = CMD_FAIL_OP_INPROG_RESP;
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8002964:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002968:	801a      	strh	r2, [r3, #0]

	Xfer_Complete = 1;                           // Set flag for RX completion
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	2000026c 	.word	0x2000026c
 8002980:	20000270 	.word	0x20000270
 8002984:	20000274 	.word	0x20000274
 8002988:	20000030 	.word	0x20000030

0800298c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	70fb      	strb	r3, [r7, #3]
 8002998:	4613      	mov	r3, r2
 800299a:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_I2C_AddrCallback+0x68>)
 80029a0:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <HAL_I2C_AddrCallback+0x68>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d014      	beq.n	80029d4 <HAL_I2C_AddrCallback+0x48>
	/*##- Start the transmission process #####################################*/
	/* While the I2C in reception process, user can transmit data through
	"i2c_tx_buffer" buffer */

	// Update the TX buffer
	i2c_tx_buffer[0] = i2c_slv_tx.bytes.byte_1;
 80029aa:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_I2C_AddrCallback+0x6c>)
 80029ac:	785a      	ldrb	r2, [r3, #1]
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_I2C_AddrCallback+0x70>)
 80029b0:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_slv_tx.bytes.byte_2;
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_I2C_AddrCallback+0x6c>)
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_I2C_AddrCallback+0x70>)
 80029b8:	705a      	strb	r2, [r3, #1]
	//copy_array(&i2c_slv_tx.bytes.byte_1, i2c_tx_buffer[0], TXBUFFERSIZE);

	if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)i2c_tx_buffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	2202      	movs	r2, #2
 80029c0:	490e      	ldr	r1, [pc, #56]	; (80029fc <HAL_I2C_AddrCallback+0x70>)
 80029c2:	480f      	ldr	r0, [pc, #60]	; (8002a00 <HAL_I2C_AddrCallback+0x74>)
 80029c4:	f001 f900 	bl	8003bc8 <HAL_I2C_Slave_Seq_Transmit_IT>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00e      	beq.n	80029ec <HAL_I2C_AddrCallback+0x60>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 80029ce:	f000 f863 	bl	8002a98 <Error_Handler>
	}

  }
  //Xfer_Complete =1;

}
 80029d2:	e00b      	b.n	80029ec <HAL_I2C_AddrCallback+0x60>
	if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)i2c_rx_buffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80029d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d8:	2204      	movs	r2, #4
 80029da:	490a      	ldr	r1, [pc, #40]	; (8002a04 <HAL_I2C_AddrCallback+0x78>)
 80029dc:	4808      	ldr	r0, [pc, #32]	; (8002a00 <HAL_I2C_AddrCallback+0x74>)
 80029de:	f001 f9a5 	bl	8003d2c <HAL_I2C_Slave_Seq_Receive_IT>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_AddrCallback+0x60>
		Error_Handler();
 80029e8:	f000 f856 	bl	8002a98 <Error_Handler>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	2000002c 	.word	0x2000002c
 80029f8:	20000274 	.word	0x20000274
 80029fc:	20000268 	.word	0x20000268
 8002a00:	20000034 	.word	0x20000034
 8002a04:	2000026c 	.word	0x2000026c

08002a08 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	//HAL_I2C_EnableListen_IT(&hi2c1);
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f001 fafa 	bl	800401e <HAL_I2C_GetError>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8002a30:	f000 f832 	bl	8002a98 <Error_Handler>
  }

  if (I2cHandle->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	d102      	bne.n	8002a42 <HAL_I2C_ErrorCallback+0x26>
      HAL_Delay(10);
 8002a3c:	200a      	movs	r0, #10
 8002a3e:	f000 fad1 	bl	8002fe4 <HAL_Delay>
	  //I2C_TimeoutInterruptHandler();
  }

}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	counter ++;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a5e:	701a      	strb	r2, [r3, #0]

	// Set the flags responsable for running through the DSSD loop
	ijc_detector.ramp_flag = true;
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
	cea_detector.ramp_flag = true;
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
	general_loop_flg = true;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002a72:	2140      	movs	r1, #64	; 0x40
 8002a74:	4807      	ldr	r0, [pc, #28]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a76:	f000 fde3 	bl	8003640 <HAL_GPIO_TogglePin>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000276 	.word	0x20000276
 8002a88:	2000021c 	.word	0x2000021c
 8002a8c:	20000230 	.word	0x20000230
 8002a90:	20000277 	.word	0x20000277
 8002a94:	48000800 	.word	0x48000800

08002a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a9c:	b672      	cpsid	i
}
 8002a9e:	bf00      	nop
	  error ++;

  }
  */
  /* USER CODE END Error_Handler_Debug */
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_MspInit+0x44>)
 8002ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ab6:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <HAL_MspInit+0x44>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6613      	str	r3, [r2, #96]	; 0x60
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_MspInit+0x44>)
 8002ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_MspInit+0x44>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <HAL_MspInit+0x44>)
 8002ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ad6:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <HAL_MspInit+0x44>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b0a6      	sub	sp, #152	; 0x98
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b10:	2260      	movs	r2, #96	; 0x60
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f005 f9b0 	bl	8007e7a <memset>
  if(hi2c->Instance==I2C1)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a6c      	ldr	r2, [pc, #432]	; (8002cd0 <HAL_I2C_MspInit+0x1dc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d14d      	bne.n	8002bc0 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b24:	2340      	movs	r3, #64	; 0x40
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 fd87 	bl	8006644 <HAL_RCCEx_PeriphCLKConfig>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002b3c:	f7ff ffac 	bl	8002a98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b40:	4b64      	ldr	r3, [pc, #400]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b44:	4a63      	ldr	r2, [pc, #396]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b60:	2312      	movs	r3, #18
 8002b62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b72:	2304      	movs	r3, #4
 8002b74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b82:	f000 fbb3 	bl	80032ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b86:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8a:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b90:	6593      	str	r3, [r2, #88]	; 0x58
 8002b92:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	201f      	movs	r0, #31
 8002ba4:	f000 fb1d 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002ba8:	201f      	movs	r0, #31
 8002baa:	f000 fb36 	bl	800321a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	2020      	movs	r0, #32
 8002bb4:	f000 fb15 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002bb8:	2020      	movs	r0, #32
 8002bba:	f000 fb2e 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002bbe:	e082      	b.n	8002cc6 <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a44      	ldr	r2, [pc, #272]	; (8002cd8 <HAL_I2C_MspInit+0x1e4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d13c      	bne.n	8002c44 <HAL_I2C_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 fd34 	bl	8006644 <HAL_RCCEx_PeriphCLKConfig>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8002be2:	f7ff ff59 	bl	8002a98 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	4a3a      	ldr	r2, [pc, #232]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bf2:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c06:	2312      	movs	r3, #18
 8002c08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c12:	2303      	movs	r3, #3
 8002c14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c18:	2304      	movs	r3, #4
 8002c1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c22:	4619      	mov	r1, r3
 8002c24:	482d      	ldr	r0, [pc, #180]	; (8002cdc <HAL_I2C_MspInit+0x1e8>)
 8002c26:	f000 fb61 	bl	80032ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	4a29      	ldr	r2, [pc, #164]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002c30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c34:	6593      	str	r3, [r2, #88]	; 0x58
 8002c36:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697b      	ldr	r3, [r7, #20]
}
 8002c42:	e040      	b.n	8002cc6 <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C3)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a25      	ldr	r2, [pc, #148]	; (8002ce0 <HAL_I2C_MspInit+0x1ec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d13b      	bne.n	8002cc6 <HAL_I2C_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 fcf1 	bl	8006644 <HAL_RCCEx_PeriphCLKConfig>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_I2C_MspInit+0x178>
      Error_Handler();
 8002c68:	f7ff ff16 	bl	8002a98 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c70:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002c72:	f043 0304 	orr.w	r3, r3, #4
 8002c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c84:	2303      	movs	r3, #3
 8002c86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c8a:	2312      	movs	r3, #18
 8002c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	480e      	ldr	r0, [pc, #56]	; (8002ce4 <HAL_I2C_MspInit+0x1f0>)
 8002caa:	f000 fb1f 	bl	80032ec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	4a08      	ldr	r2, [pc, #32]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002cb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_I2C_MspInit+0x1e0>)
 8002cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
}
 8002cc6:	bf00      	nop
 8002cc8:	3798      	adds	r7, #152	; 0x98
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40005400 	.word	0x40005400
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40005800 	.word	0x40005800
 8002cdc:	48000400 	.word	0x48000400
 8002ce0:	40005c00 	.word	0x40005c00
 8002ce4:	48000800 	.word	0x48000800

08002ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d113      	bne.n	8002d22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_TIM_Base_MspInit+0x44>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <HAL_TIM_Base_MspInit+0x44>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_TIM_Base_MspInit+0x44>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2100      	movs	r1, #0
 8002d16:	201c      	movs	r0, #28
 8002d18:	f000 fa63 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d1c:	201c      	movs	r0, #28
 8002d1e:	f000 fa7c 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0a2      	sub	sp, #136	; 0x88
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2260      	movs	r2, #96	; 0x60
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4618      	mov	r0, r3
 8002d52:	f005 f892 	bl	8007e7a <memset>
  if(huart->Instance==USART2)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <HAL_UART_MspInit+0xac>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d138      	bne.n	8002dd2 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d60:	2302      	movs	r3, #2
 8002d62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d64:	2300      	movs	r3, #0
 8002d66:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d68:	f107 0314 	add.w	r3, r7, #20
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fc69 	bl	8006644 <HAL_RCCEx_PeriphCLKConfig>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d78:	f7ff fe8e 	bl	8002a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_UART_MspInit+0xb0>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <HAL_UART_MspInit+0xb0>)
 8002d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d86:	6593      	str	r3, [r2, #88]	; 0x58
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_UART_MspInit+0xb0>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_UART_MspInit+0xb0>)
 8002d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d98:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <HAL_UART_MspInit+0xb0>)
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_UART_MspInit+0xb0>)
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dac:	230c      	movs	r3, #12
 8002dae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db0:	2302      	movs	r3, #2
 8002db2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db8:	2303      	movs	r3, #3
 8002dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dc8:	4619      	mov	r1, r3
 8002dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dce:	f000 fa8d 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dd2:	bf00      	nop
 8002dd4:	3788      	adds	r7, #136	; 0x88
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40004400 	.word	0x40004400
 8002de0:	40021000 	.word	0x40021000

08002de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <NMI_Handler+0x4>

08002dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dea:	b480      	push	{r7}
 8002dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dee:	e7fe      	b.n	8002dee <HardFault_Handler+0x4>

08002df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <MemManage_Handler+0x4>

08002df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dfa:	e7fe      	b.n	8002dfa <BusFault_Handler+0x4>

08002dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e00:	e7fe      	b.n	8002e00 <UsageFault_Handler+0x4>

08002e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e30:	f000 f8b8 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <TIM2_IRQHandler+0x10>)
 8002e3e:	f003 ffe9 	bl	8006e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20000130 	.word	0x20000130

08002e4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <I2C1_EV_IRQHandler+0x10>)
 8002e52:	f001 f83d 	bl	8003ed0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000034 	.word	0x20000034

08002e60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <I2C1_ER_IRQHandler+0x10>)
 8002e66:	f001 f84d 	bl	8003f04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000034 	.word	0x20000034

08002e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <SystemInit+0x20>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <SystemInit+0x20>)
 8002e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ed0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e9c:	f7ff ffea 	bl	8002e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ea0:	480c      	ldr	r0, [pc, #48]	; (8002ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ea2:	490d      	ldr	r1, [pc, #52]	; (8002ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	; (8002edc <LoopForever+0xe>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea8:	e002      	b.n	8002eb0 <LoopCopyDataInit>

08002eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eae:	3304      	adds	r3, #4

08002eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb4:	d3f9      	bcc.n	8002eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eb8:	4c0a      	ldr	r4, [pc, #40]	; (8002ee4 <LoopForever+0x16>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ebc:	e001      	b.n	8002ec2 <LoopFillZerobss>

08002ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec0:	3204      	adds	r2, #4

08002ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec4:	d3fb      	bcc.n	8002ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ec6:	f004 ffe1 	bl	8007e8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002eca:	f7fd fafd 	bl	80004c8 <main>

08002ece <LoopForever>:

LoopForever:
    b LoopForever
 8002ece:	e7fe      	b.n	8002ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ed0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002edc:	08007f4c 	.word	0x08007f4c
  ldr r2, =_sbss
 8002ee0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002ee4:	200002d4 	.word	0x200002d4

08002ee8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ee8:	e7fe      	b.n	8002ee8 <ADC1_IRQHandler>
	...

08002eec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef6:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HAL_Init+0x3c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a0b      	ldr	r2, [pc, #44]	; (8002f28 <HAL_Init+0x3c>)
 8002efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f02:	2003      	movs	r0, #3
 8002f04:	f000 f962 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f000 f80f 	bl	8002f2c <HAL_InitTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d002      	beq.n	8002f1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	71fb      	strb	r3, [r7, #7]
 8002f18:	e001      	b.n	8002f1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f1a:	f7ff fdc7 	bl	8002aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40022000 	.word	0x40022000

08002f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f38:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <HAL_InitTick+0x6c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d023      	beq.n	8002f88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <HAL_InitTick+0x70>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <HAL_InitTick+0x6c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f96d 	bl	8003236 <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b0f      	cmp	r3, #15
 8002f66:	d809      	bhi.n	8002f7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f70:	f000 f937 	bl	80031e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f74:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_InitTick+0x74>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e007      	b.n	8002f8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
 8002f80:	e004      	b.n	8002f8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e001      	b.n	8002f8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000008 	.word	0x20000008
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000008 	.word	0x20000008
 8002fc8:	200002d0 	.word	0x200002d0

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200002d0 	.word	0x200002d0

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <HAL_Delay+0x44>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	bf00      	nop
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000008 	.word	0x20000008

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff29 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff3e 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff31 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d005      	beq.n	8003272 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2204      	movs	r2, #4
 800326a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	e029      	b.n	80032c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 020e 	bic.w	r2, r2, #14
 8003280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0201 	bic.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f003 021c 	and.w	r2, r3, #28
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2101      	movs	r1, #1
 80032a0:	fa01 f202 	lsl.w	r2, r1, r2
 80032a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	4798      	blx	r3
    }
  }
  return status;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032de:	b2db      	uxtb	r3, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032fa:	e154      	b.n	80035a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2101      	movs	r1, #1
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8146 	beq.w	80035a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d005      	beq.n	800332c <HAL_GPIO_Init+0x40>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 0303 	and.w	r3, r3, #3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d130      	bne.n	800338e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4013      	ands	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68da      	ldr	r2, [r3, #12]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003362:	2201      	movs	r2, #1
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4013      	ands	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 0201 	and.w	r2, r3, #1
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b03      	cmp	r3, #3
 8003398:	d017      	beq.n	80033ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2203      	movs	r2, #3
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689a      	ldr	r2, [r3, #8]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d123      	bne.n	800341e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	08da      	lsrs	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	220f      	movs	r2, #15
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	08da      	lsrs	r2, r3, #3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3208      	adds	r2, #8
 8003418:	6939      	ldr	r1, [r7, #16]
 800341a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0203 	and.w	r2, r3, #3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80a0 	beq.w	80035a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003460:	4b58      	ldr	r3, [pc, #352]	; (80035c4 <HAL_GPIO_Init+0x2d8>)
 8003462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003464:	4a57      	ldr	r2, [pc, #348]	; (80035c4 <HAL_GPIO_Init+0x2d8>)
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	6613      	str	r3, [r2, #96]	; 0x60
 800346c:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <HAL_GPIO_Init+0x2d8>)
 800346e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	60bb      	str	r3, [r7, #8]
 8003476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003478:	4a53      	ldr	r2, [pc, #332]	; (80035c8 <HAL_GPIO_Init+0x2dc>)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3302      	adds	r3, #2
 8003480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034a2:	d019      	beq.n	80034d8 <HAL_GPIO_Init+0x1ec>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a49      	ldr	r2, [pc, #292]	; (80035cc <HAL_GPIO_Init+0x2e0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_GPIO_Init+0x1e8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a48      	ldr	r2, [pc, #288]	; (80035d0 <HAL_GPIO_Init+0x2e4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00d      	beq.n	80034d0 <HAL_GPIO_Init+0x1e4>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a47      	ldr	r2, [pc, #284]	; (80035d4 <HAL_GPIO_Init+0x2e8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d007      	beq.n	80034cc <HAL_GPIO_Init+0x1e0>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a46      	ldr	r2, [pc, #280]	; (80035d8 <HAL_GPIO_Init+0x2ec>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d101      	bne.n	80034c8 <HAL_GPIO_Init+0x1dc>
 80034c4:	2304      	movs	r3, #4
 80034c6:	e008      	b.n	80034da <HAL_GPIO_Init+0x1ee>
 80034c8:	2307      	movs	r3, #7
 80034ca:	e006      	b.n	80034da <HAL_GPIO_Init+0x1ee>
 80034cc:	2303      	movs	r3, #3
 80034ce:	e004      	b.n	80034da <HAL_GPIO_Init+0x1ee>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e002      	b.n	80034da <HAL_GPIO_Init+0x1ee>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_GPIO_Init+0x1ee>
 80034d8:	2300      	movs	r3, #0
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	f002 0203 	and.w	r2, r2, #3
 80034e0:	0092      	lsls	r2, r2, #2
 80034e2:	4093      	lsls	r3, r2
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ea:	4937      	ldr	r1, [pc, #220]	; (80035c8 <HAL_GPIO_Init+0x2dc>)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	089b      	lsrs	r3, r3, #2
 80034f0:	3302      	adds	r3, #2
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034f8:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800351c:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003522:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003546:	4a25      	ldr	r2, [pc, #148]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800354c:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	43db      	mvns	r3, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003570:	4a1a      	ldr	r2, [pc, #104]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	43db      	mvns	r3, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4013      	ands	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800359a:	4a10      	ldr	r2, [pc, #64]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3301      	adds	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f47f aea3 	bne.w	80032fc <HAL_GPIO_Init+0x10>
  }
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40010000 	.word	0x40010000
 80035cc:	48000400 	.word	0x48000400
 80035d0:	48000800 	.word	0x48000800
 80035d4:	48000c00 	.word	0x48000c00
 80035d8:	48001000 	.word	0x48001000
 80035dc:	40010400 	.word	0x40010400

080035e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691a      	ldr	r2, [r3, #16]
 80035f0:	887b      	ldrh	r3, [r7, #2]
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
 80035fc:	e001      	b.n	8003602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	4613      	mov	r3, r2
 800361e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003620:	787b      	ldrb	r3, [r7, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800362c:	e002      	b.n	8003634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4013      	ands	r3, r2
 8003658:	041a      	lsls	r2, r3, #16
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	43d9      	mvns	r1, r3
 800365e:	887b      	ldrh	r3, [r7, #2]
 8003660:	400b      	ands	r3, r1
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e08d      	b.n	80037a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d106      	bne.n	80036a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fa2a 	bl	8002af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2224      	movs	r2, #36	; 0x24
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0201 	bic.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	e006      	b.n	80036fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b02      	cmp	r3, #2
 8003702:	d108      	bne.n	8003716 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	e007      	b.n	8003726 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003724:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6812      	ldr	r2, [r2, #0]
 8003730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003738:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003748:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691a      	ldr	r2, [r3, #16]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69d9      	ldr	r1, [r3, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1a      	ldr	r2, [r3, #32]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	461a      	mov	r2, r3
 80037b8:	460b      	mov	r3, r1
 80037ba:	817b      	strh	r3, [r7, #10]
 80037bc:	4613      	mov	r3, r2
 80037be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	f040 80fd 	bne.w	80039c8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_I2C_Master_Transmit+0x30>
 80037d8:	2302      	movs	r3, #2
 80037da:	e0f6      	b.n	80039ca <HAL_I2C_Master_Transmit+0x21e>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037e4:	f7ff fbf2 	bl	8002fcc <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	2319      	movs	r3, #25
 80037f0:	2201      	movs	r2, #1
 80037f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f001 fca1 	bl	800513e <I2C_WaitOnFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0e1      	b.n	80039ca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2221      	movs	r2, #33	; 0x21
 800380a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2210      	movs	r2, #16
 8003812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	893a      	ldrh	r2, [r7, #8]
 8003826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	2bff      	cmp	r3, #255	; 0xff
 8003836:	d906      	bls.n	8003846 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	22ff      	movs	r2, #255	; 0xff
 800383c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800383e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e007      	b.n	8003856 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003850:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003854:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d024      	beq.n	80038a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	781a      	ldrb	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003878:	b29b      	uxth	r3, r3
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	b2db      	uxtb	r3, r3
 8003894:	3301      	adds	r3, #1
 8003896:	b2da      	uxtb	r2, r3
 8003898:	8979      	ldrh	r1, [r7, #10]
 800389a:	4b4e      	ldr	r3, [pc, #312]	; (80039d4 <HAL_I2C_Master_Transmit+0x228>)
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f001 fe87 	bl	80055b4 <I2C_TransferConfig>
 80038a6:	e066      	b.n	8003976 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	8979      	ldrh	r1, [r7, #10]
 80038b0:	4b48      	ldr	r3, [pc, #288]	; (80039d4 <HAL_I2C_Master_Transmit+0x228>)
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f001 fe7c 	bl	80055b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038bc:	e05b      	b.n	8003976 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	6a39      	ldr	r1, [r7, #32]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f001 fc8a 	bl	80051dc <I2C_WaitOnTXISFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07b      	b.n	80039ca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	3b01      	subs	r3, #1
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d034      	beq.n	8003976 <HAL_I2C_Master_Transmit+0x1ca>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	2b00      	cmp	r3, #0
 8003912:	d130      	bne.n	8003976 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	2200      	movs	r2, #0
 800391c:	2180      	movs	r1, #128	; 0x80
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f001 fc0d 	bl	800513e <I2C_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e04d      	b.n	80039ca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2bff      	cmp	r3, #255	; 0xff
 8003936:	d90e      	bls.n	8003956 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	22ff      	movs	r2, #255	; 0xff
 800393c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	b2da      	uxtb	r2, r3
 8003944:	8979      	ldrh	r1, [r7, #10]
 8003946:	2300      	movs	r3, #0
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f001 fe30 	bl	80055b4 <I2C_TransferConfig>
 8003954:	e00f      	b.n	8003976 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	b2da      	uxtb	r2, r3
 8003966:	8979      	ldrh	r1, [r7, #10]
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f001 fe1f 	bl	80055b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d19e      	bne.n	80038be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	6a39      	ldr	r1, [r7, #32]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f001 fc70 	bl	800526a <I2C_WaitOnSTOPFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e01a      	b.n	80039ca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2220      	movs	r2, #32
 800399a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6859      	ldr	r1, [r3, #4]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <HAL_I2C_Master_Transmit+0x22c>)
 80039a8:	400b      	ands	r3, r1
 80039aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2220      	movs	r2, #32
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e000      	b.n	80039ca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
  }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	80002000 	.word	0x80002000
 80039d8:	fe00e800 	.word	0xfe00e800

080039dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	461a      	mov	r2, r3
 80039e8:	460b      	mov	r3, r1
 80039ea:	817b      	strh	r3, [r7, #10]
 80039ec:	4613      	mov	r3, r2
 80039ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	f040 80db 	bne.w	8003bb4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_I2C_Master_Receive+0x30>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e0d4      	b.n	8003bb6 <HAL_I2C_Master_Receive+0x1da>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a14:	f7ff fada 	bl	8002fcc <HAL_GetTick>
 8003a18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2319      	movs	r3, #25
 8003a20:	2201      	movs	r2, #1
 8003a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f001 fb89 	bl	800513e <I2C_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e0bf      	b.n	8003bb6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2222      	movs	r2, #34	; 0x22
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2210      	movs	r2, #16
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	893a      	ldrh	r2, [r7, #8]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2bff      	cmp	r3, #255	; 0xff
 8003a66:	d90e      	bls.n	8003a86 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	22ff      	movs	r2, #255	; 0xff
 8003a6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	8979      	ldrh	r1, [r7, #10]
 8003a76:	4b52      	ldr	r3, [pc, #328]	; (8003bc0 <HAL_I2C_Master_Receive+0x1e4>)
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f001 fd98 	bl	80055b4 <I2C_TransferConfig>
 8003a84:	e06d      	b.n	8003b62 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	8979      	ldrh	r1, [r7, #10]
 8003a98:	4b49      	ldr	r3, [pc, #292]	; (8003bc0 <HAL_I2C_Master_Receive+0x1e4>)
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f001 fd87 	bl	80055b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003aa6:	e05c      	b.n	8003b62 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	6a39      	ldr	r1, [r7, #32]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f001 fc1f 	bl	80052f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e07c      	b.n	8003bb6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d034      	beq.n	8003b62 <HAL_I2C_Master_Receive+0x186>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d130      	bne.n	8003b62 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	2200      	movs	r2, #0
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f001 fb17 	bl	800513e <I2C_WaitOnFlagUntilTimeout>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e04d      	b.n	8003bb6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2bff      	cmp	r3, #255	; 0xff
 8003b22:	d90e      	bls.n	8003b42 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	22ff      	movs	r2, #255	; 0xff
 8003b28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	8979      	ldrh	r1, [r7, #10]
 8003b32:	2300      	movs	r3, #0
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f001 fd3a 	bl	80055b4 <I2C_TransferConfig>
 8003b40:	e00f      	b.n	8003b62 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	8979      	ldrh	r1, [r7, #10]
 8003b54:	2300      	movs	r3, #0
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f001 fd29 	bl	80055b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d19d      	bne.n	8003aa8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	6a39      	ldr	r1, [r7, #32]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f001 fb7a 	bl	800526a <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e01a      	b.n	8003bb6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2220      	movs	r2, #32
 8003b86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6859      	ldr	r1, [r3, #4]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_I2C_Master_Receive+0x1e8>)
 8003b94:	400b      	ands	r3, r1
 8003b96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e000      	b.n	8003bb6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003bb4:	2302      	movs	r3, #2
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	80002400 	.word	0x80002400
 8003bc4:	fe00e800 	.word	0xfe00e800

08003bc8 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003be4:	2b28      	cmp	r3, #40	; 0x28
 8003be6:	f040 8098 	bne.w	8003d1a <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e08c      	b.n	8003d1c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c02:	f248 0101 	movw	r1, #32769	; 0x8001
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f001 fd8a 	bl	8005720 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e080      	b.n	8003d1c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b2a      	cmp	r3, #42	; 0x2a
 8003c2c:	d12a      	bne.n	8003c84 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c2e:	2102      	movs	r1, #2
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f001 fd75 	bl	8005720 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	d11e      	bne.n	8003c84 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c54:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d012      	beq.n	8003c84 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	4a30      	ldr	r2, [pc, #192]	; (8003d24 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8003c64:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff faef 	bl	800324e <HAL_DMA_Abort_IT>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d006      	beq.n	8003c84 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c80:	4610      	mov	r0, r2
 8003c82:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2229      	movs	r2, #41	; 0x29
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ca8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8003cca:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d106      	bne.n	8003d04 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8003cf6:	7dfb      	ldrb	r3, [r7, #23]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2208      	movs	r2, #8
 8003d02:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003d0c:	f248 0101 	movw	r1, #32769	; 0x8001
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f001 fc81 	bl	8005618 <I2C_Enable_IRQ>

    return HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e000      	b.n	8003d1c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
  }
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	08005103 	.word	0x08005103
 8003d28:	08004037 	.word	0x08004037

08003d2c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d48:	2b28      	cmp	r3, #40	; 0x28
 8003d4a:	f040 8098 	bne.w	8003e7e <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d105      	bne.n	8003d66 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e08c      	b.n	8003e80 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003d66:	f248 0102 	movw	r1, #32770	; 0x8002
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f001 fcd8 	bl	8005720 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e080      	b.n	8003e80 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b29      	cmp	r3, #41	; 0x29
 8003d90:	d12a      	bne.n	8003de8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d92:	2101      	movs	r1, #1
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f001 fcc3 	bl	8005720 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da8:	d11e      	bne.n	8003de8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003db8:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d012      	beq.n	8003de8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	4a30      	ldr	r2, [pc, #192]	; (8003e88 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fa3d 	bl	800324e <HAL_DMA_Abort_IT>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d006      	beq.n	8003de8 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003de4:	4610      	mov	r0, r2
 8003de6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	222a      	movs	r2, #42	; 0x2a
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e0c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8003e2e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2301      	moveq	r3, #1
 8003e40:	2300      	movne	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2208      	movs	r2, #8
 8003e66:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003e70:	f248 0102 	movw	r1, #32770	; 0x8002
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f001 fbcf 	bl	8005618 <I2C_Enable_IRQ>

    return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e000      	b.n	8003e80 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
  }
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	08005103 	.word	0x08005103
 8003e8c:	08004037 	.word	0x08004037

08003e90 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d10d      	bne.n	8003ec0 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2228      	movs	r2, #40	; 0x28
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <HAL_I2C_EnableListen_IT+0x3c>)
 8003eb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f001 fbae 	bl	8005618 <I2C_Enable_IRQ>

    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e000      	b.n	8003ec2 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
  }
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	08004037 	.word	0x08004037

08003ed0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
  }
}
 8003efc:	bf00      	nop
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00f      	beq.n	8003f46 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	f043 0201 	orr.w	r2, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f44:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00f      	beq.n	8003f70 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	f043 0208 	orr.w	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f6e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00f      	beq.n	8003f9a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	f043 0202 	orr.w	r2, r3, #2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f98:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 030b 	and.w	r3, r3, #11
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003faa:	68f9      	ldr	r1, [r7, #12]
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 ff6d 	bl	8004e8c <I2C_ITError>
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004052:	2b01      	cmp	r3, #1
 8004054:	d101      	bne.n	800405a <I2C_Slave_ISR_IT+0x24>
 8004056:	2302      	movs	r3, #2
 8004058:	e0e1      	b.n	800421e <I2C_Slave_ISR_IT+0x1e8>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f003 0320 	and.w	r3, r3, #32
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004076:	6939      	ldr	r1, [r7, #16]
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fda1 	bl	8004bc0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b00      	cmp	r3, #0
 8004086:	d04b      	beq.n	8004120 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800408e:	2b00      	cmp	r3, #0
 8004090:	d046      	beq.n	8004120 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d128      	bne.n	80040ee <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b28      	cmp	r3, #40	; 0x28
 80040a6:	d108      	bne.n	80040ba <I2C_Slave_ISR_IT+0x84>
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ae:	d104      	bne.n	80040ba <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80040b0:	6939      	ldr	r1, [r7, #16]
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 fe96 	bl	8004de4 <I2C_ITListenCplt>
 80040b8:	e031      	b.n	800411e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b29      	cmp	r3, #41	; 0x29
 80040c4:	d10e      	bne.n	80040e4 <I2C_Slave_ISR_IT+0xae>
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040cc:	d00a      	beq.n	80040e4 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2210      	movs	r2, #16
 80040d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 ffef 	bl	80050ba <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fc4a 	bl	8004976 <I2C_ITSlaveSeqCplt>
 80040e2:	e01c      	b.n	800411e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2210      	movs	r2, #16
 80040ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80040ec:	e08f      	b.n	800420e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2210      	movs	r2, #16
 80040f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fa:	f043 0204 	orr.w	r2, r3, #4
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <I2C_Slave_ISR_IT+0xda>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800410e:	d17e      	bne.n	800420e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	4619      	mov	r1, r3
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 feb8 	bl	8004e8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800411c:	e077      	b.n	800420e <I2C_Slave_ISR_IT+0x1d8>
 800411e:	e076      	b.n	800420e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d02f      	beq.n	800418a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02a      	beq.n	800418a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d14b      	bne.n	8004212 <I2C_Slave_ISR_IT+0x1dc>
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004180:	d047      	beq.n	8004212 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fbf7 	bl	8004976 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004188:	e043      	b.n	8004212 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800419e:	6939      	ldr	r1, [r7, #16]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 fb27 	bl	80047f4 <I2C_ITAddrCplt>
 80041a6:	e035      	b.n	8004214 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d030      	beq.n	8004214 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02b      	beq.n	8004214 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d018      	beq.n	80041f8 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	781a      	ldrb	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	851a      	strh	r2, [r3, #40]	; 0x28
 80041f6:	e00d      	b.n	8004214 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041fe:	d002      	beq.n	8004206 <I2C_Slave_ISR_IT+0x1d0>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fbb5 	bl	8004976 <I2C_ITSlaveSeqCplt>
 800420c:	e002      	b.n	8004214 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004212:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b088      	sub	sp, #32
 800422a:	af02      	add	r7, sp, #8
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <I2C_Master_ISR_DMA+0x1a>
 800423c:	2302      	movs	r3, #2
 800423e:	e0d9      	b.n	80043f4 <I2C_Master_ISR_DMA+0x1ce>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f003 0310 	and.w	r3, r3, #16
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004258:	2b00      	cmp	r3, #0
 800425a:	d011      	beq.n	8004280 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2210      	movs	r2, #16
 8004262:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	f043 0204 	orr.w	r2, r3, #4
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004270:	2120      	movs	r1, #32
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f001 f9d0 	bl	8005618 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 ff1e 	bl	80050ba <I2C_Flush_TXDR>
 800427e:	e0b4      	b.n	80043ea <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b00      	cmp	r3, #0
 8004288:	d071      	beq.n	800436e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004290:	2b00      	cmp	r3, #0
 8004292:	d06c      	beq.n	800436e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d04e      	beq.n	800434c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ba:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2bff      	cmp	r3, #255	; 0xff
 80042c4:	d906      	bls.n	80042d4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	22ff      	movs	r2, #255	; 0xff
 80042ca:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80042cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e010      	b.n	80042f6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d8:	b29a      	uxth	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042e6:	d003      	beq.n	80042f0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e002      	b.n	80042f6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80042f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042f4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	8a79      	ldrh	r1, [r7, #18]
 80042fe:	2300      	movs	r3, #0
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f001 f955 	bl	80055b4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b22      	cmp	r3, #34	; 0x22
 8004326:	d108      	bne.n	800433a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004336:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004338:	e057      	b.n	80043ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004348:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800434a:	e04e      	b.n	80043ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800435a:	d003      	beq.n	8004364 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 facd 	bl	80048fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004362:	e042      	b.n	80043ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004364:	2140      	movs	r1, #64	; 0x40
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 fd90 	bl	8004e8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800436c:	e03d      	b.n	80043ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d028      	beq.n	80043ca <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800437e:	2b00      	cmp	r3, #0
 8004380:	d023      	beq.n	80043ca <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	2b00      	cmp	r3, #0
 800438a:	d119      	bne.n	80043c0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800439a:	d025      	beq.n	80043e8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043a4:	d108      	bne.n	80043b8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043b4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80043b6:	e017      	b.n	80043e8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fa9f 	bl	80048fc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80043be:	e013      	b.n	80043e8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043c0:	2140      	movs	r1, #64	; 0x40
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fd62 	bl	8004e8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043c8:	e00e      	b.n	80043e8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f000 fb25 	bl	8004a30 <I2C_ITMasterCplt>
 80043e6:	e000      	b.n	80043ea <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80043e8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004408:	4b8d      	ldr	r3, [pc, #564]	; (8004640 <I2C_Mem_ISR_DMA+0x244>)
 800440a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <I2C_Mem_ISR_DMA+0x1e>
 8004416:	2302      	movs	r3, #2
 8004418:	e10e      	b.n	8004638 <I2C_Mem_ISR_DMA+0x23c>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d016      	beq.n	800445a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004432:	2b00      	cmp	r3, #0
 8004434:	d011      	beq.n	800445a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2210      	movs	r2, #16
 800443c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004442:	f043 0204 	orr.w	r2, r3, #4
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800444a:	2120      	movs	r1, #32
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f001 f8e3 	bl	8005618 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fe31 	bl	80050ba <I2C_Flush_TXDR>
 8004458:	e0e9      	b.n	800462e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004476:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800447e:	651a      	str	r2, [r3, #80]	; 0x50
 8004480:	e0d5      	b.n	800462e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05f      	beq.n	800454c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004492:	2b00      	cmp	r3, #0
 8004494:	d05a      	beq.n	800454c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004496:	2101      	movs	r1, #1
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f001 f941 	bl	8005720 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800449e:	2110      	movs	r1, #16
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f001 f8b9 	bl	8005618 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d048      	beq.n	8004542 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2bff      	cmp	r3, #255	; 0xff
 80044b8:	d910      	bls.n	80044dc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	22ff      	movs	r2, #255	; 0xff
 80044be:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c4:	b299      	uxth	r1, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f001 f86d 	bl	80055b4 <I2C_TransferConfig>
 80044da:	e011      	b.n	8004500 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	b299      	uxth	r1, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	2300      	movs	r3, #0
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f001 f85a 	bl	80055b4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b22      	cmp	r3, #34	; 0x22
 800451c:	d108      	bne.n	8004530 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800452c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800452e:	e07e      	b.n	800462e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800453e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004540:	e075      	b.n	800462e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004542:	2140      	movs	r1, #64	; 0x40
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fca1 	bl	8004e8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800454a:	e070      	b.n	800462e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d05d      	beq.n	8004612 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800455c:	2b00      	cmp	r3, #0
 800455e:	d058      	beq.n	8004612 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004560:	2101      	movs	r1, #1
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f001 f8dc 	bl	8005720 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004568:	2110      	movs	r1, #16
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	f001 f854 	bl	8005618 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b22      	cmp	r3, #34	; 0x22
 800457a:	d101      	bne.n	8004580 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800457c:	4b31      	ldr	r3, [pc, #196]	; (8004644 <I2C_Mem_ISR_DMA+0x248>)
 800457e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	2bff      	cmp	r3, #255	; 0xff
 8004588:	d910      	bls.n	80045ac <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	22ff      	movs	r2, #255	; 0xff
 800458e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004594:	b299      	uxth	r1, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459a:	b2da      	uxtb	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f001 f805 	bl	80055b4 <I2C_TransferConfig>
 80045aa:	e011      	b.n	80045d0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ba:	b299      	uxth	r1, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fff2 	bl	80055b4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	b29a      	uxth	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b22      	cmp	r3, #34	; 0x22
 80045ec:	d108      	bne.n	8004600 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045fc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045fe:	e016      	b.n	800462e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800460e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004610:	e00d      	b.n	800462e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d008      	beq.n	800462e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004626:	68b9      	ldr	r1, [r7, #8]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 fa01 	bl	8004a30 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	80002000 	.word	0x80002000
 8004644:	80002400 	.word	0x80002400

08004648 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <I2C_Slave_ISR_DMA+0x24>
 8004668:	2302      	movs	r3, #2
 800466a:	e0bf      	b.n	80047ec <I2C_Slave_ISR_DMA+0x1a4>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d008      	beq.n	8004690 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 fa98 	bl	8004bc0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	f000 8095 	beq.w	80047c6 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 808f 	beq.w	80047c6 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d104      	bne.n	80046bc <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d07d      	beq.n	80047b8 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00c      	beq.n	80046de <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80046da:	2301      	movs	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00c      	beq.n	8004700 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80046fc:	2301      	movs	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d128      	bne.n	8004758 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b28      	cmp	r3, #40	; 0x28
 8004710:	d108      	bne.n	8004724 <I2C_Slave_ISR_DMA+0xdc>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004718:	d104      	bne.n	8004724 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fb61 	bl	8004de4 <I2C_ITListenCplt>
 8004722:	e048      	b.n	80047b6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b29      	cmp	r3, #41	; 0x29
 800472e:	d10e      	bne.n	800474e <I2C_Slave_ISR_DMA+0x106>
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004736:	d00a      	beq.n	800474e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2210      	movs	r2, #16
 800473e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 fcba 	bl	80050ba <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f915 	bl	8004976 <I2C_ITSlaveSeqCplt>
 800474c:	e033      	b.n	80047b6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2210      	movs	r2, #16
 8004754:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004756:	e034      	b.n	80047c2 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2210      	movs	r2, #16
 800475e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	f043 0204 	orr.w	r2, r3, #4
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004772:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <I2C_Slave_ISR_DMA+0x13a>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004780:	d11f      	bne.n	80047c2 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	2b21      	cmp	r3, #33	; 0x21
 8004786:	d002      	beq.n	800478e <I2C_Slave_ISR_DMA+0x146>
 8004788:	7dfb      	ldrb	r3, [r7, #23]
 800478a:	2b29      	cmp	r3, #41	; 0x29
 800478c:	d103      	bne.n	8004796 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2221      	movs	r2, #33	; 0x21
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
 8004794:	e008      	b.n	80047a8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004796:	7dfb      	ldrb	r3, [r7, #23]
 8004798:	2b22      	cmp	r3, #34	; 0x22
 800479a:	d002      	beq.n	80047a2 <I2C_Slave_ISR_DMA+0x15a>
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	2b2a      	cmp	r3, #42	; 0x2a
 80047a0:	d102      	bne.n	80047a8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2222      	movs	r2, #34	; 0x22
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ac:	4619      	mov	r1, r3
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fb6c 	bl	8004e8c <I2C_ITError>
      if (treatdmanack == 1U)
 80047b4:	e005      	b.n	80047c2 <I2C_Slave_ISR_DMA+0x17a>
 80047b6:	e004      	b.n	80047c2 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2210      	movs	r2, #16
 80047be:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80047c0:	e00f      	b.n	80047e2 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80047c2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80047c4:	e00d      	b.n	80047e2 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 f809 	bl	80047f4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004804:	b2db      	uxtb	r3, r3
 8004806:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800480a:	2b28      	cmp	r3, #40	; 0x28
 800480c:	d16a      	bne.n	80048e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	b2db      	uxtb	r3, r3
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	b29b      	uxth	r3, r3
 8004828:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800482c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800483a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	b29b      	uxth	r3, r3
 8004844:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004848:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d138      	bne.n	80048c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004852:	897b      	ldrh	r3, [r7, #10]
 8004854:	09db      	lsrs	r3, r3, #7
 8004856:	b29a      	uxth	r2, r3
 8004858:	89bb      	ldrh	r3, [r7, #12]
 800485a:	4053      	eors	r3, r2
 800485c:	b29b      	uxth	r3, r3
 800485e:	f003 0306 	and.w	r3, r3, #6
 8004862:	2b00      	cmp	r3, #0
 8004864:	d11c      	bne.n	80048a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004866:	897b      	ldrh	r3, [r7, #10]
 8004868:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004878:	2b02      	cmp	r3, #2
 800487a:	d13b      	bne.n	80048f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2208      	movs	r2, #8
 8004888:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004892:	89ba      	ldrh	r2, [r7, #12]
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7fe f877 	bl	800298c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800489e:	e029      	b.n	80048f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80048a0:	893b      	ldrh	r3, [r7, #8]
 80048a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 ff39 	bl	8005720 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048b6:	89ba      	ldrh	r2, [r7, #12]
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
 80048ba:	4619      	mov	r1, r3
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fe f865 	bl	800298c <HAL_I2C_AddrCallback>
}
 80048c2:	e017      	b.n	80048f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 ff29 	bl	8005720 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048d6:	89ba      	ldrh	r2, [r7, #12]
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fe f855 	bl	800298c <HAL_I2C_AddrCallback>
}
 80048e2:	e007      	b.n	80048f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2208      	movs	r2, #8
 80048ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b21      	cmp	r3, #33	; 0x21
 8004916:	d115      	bne.n	8004944 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2211      	movs	r2, #17
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800492c:	2101      	movs	r1, #1
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fef6 	bl	8005720 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff fb3c 	bl	8003fba <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004942:	e014      	b.n	800496e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2212      	movs	r2, #18
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004958:	2102      	movs	r1, #2
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fee0 	bl	8005720 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff fb30 	bl	8003fce <HAL_I2C_MasterRxCpltCallback>
}
 800496e:	bf00      	nop
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e00c      	b.n	80049c4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049c2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b29      	cmp	r3, #41	; 0x29
 80049ce:	d112      	bne.n	80049f6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2228      	movs	r2, #40	; 0x28
 80049d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2221      	movs	r2, #33	; 0x21
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049de:	2101      	movs	r1, #1
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fe9d 	bl	8005720 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd ff92 	bl	8002918 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80049f4:	e017      	b.n	8004a26 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004a00:	d111      	bne.n	8004a26 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2228      	movs	r2, #40	; 0x28
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2222      	movs	r2, #34	; 0x22
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a10:	2102      	movs	r1, #2
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fe84 	bl	8005720 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f7fd ff89 	bl	8002938 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2220      	movs	r2, #32
 8004a44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b21      	cmp	r3, #33	; 0x21
 8004a50:	d107      	bne.n	8004a62 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a52:	2101      	movs	r1, #1
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fe63 	bl	8005720 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2211      	movs	r2, #17
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a60:	e00c      	b.n	8004a7c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b22      	cmp	r3, #34	; 0x22
 8004a6c:	d106      	bne.n	8004a7c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a6e:	2102      	movs	r1, #2
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fe55 	bl	8005720 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2212      	movs	r2, #18
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6859      	ldr	r1, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b4c      	ldr	r3, [pc, #304]	; (8004bb8 <I2C_ITMasterCplt+0x188>)
 8004a88:	400b      	ands	r3, r1
 8004a8a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a49      	ldr	r2, [pc, #292]	; (8004bbc <I2C_ITMasterCplt+0x18c>)
 8004a96:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2210      	movs	r2, #16
 8004aa8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	f043 0204 	orr.w	r2, r3, #4
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b60      	cmp	r3, #96	; 0x60
 8004ac0:	d10a      	bne.n	8004ad8 <I2C_ITMasterCplt+0xa8>
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d005      	beq.n	8004ad8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 faee 	bl	80050ba <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b60      	cmp	r3, #96	; 0x60
 8004aee:	d002      	beq.n	8004af6 <I2C_ITMasterCplt+0xc6>
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f9c5 	bl	8004e8c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b02:	e054      	b.n	8004bae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b21      	cmp	r3, #33	; 0x21
 8004b0e:	d124      	bne.n	8004b5a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d10b      	bne.n	8004b42 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fa51 	bl	8003fe2 <HAL_I2C_MemTxCpltCallback>
}
 8004b40:	e035      	b.n	8004bae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff fa31 	bl	8003fba <HAL_I2C_MasterTxCpltCallback>
}
 8004b58:	e029      	b.n	8004bae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b22      	cmp	r3, #34	; 0x22
 8004b64:	d123      	bne.n	8004bae <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d10b      	bne.n	8004b98 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7ff fa30 	bl	8003ff6 <HAL_I2C_MemRxCpltCallback>
}
 8004b96:	e00a      	b.n	8004bae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff fa10 	bl	8003fce <HAL_I2C_MasterRxCpltCallback>
}
 8004bae:	bf00      	nop
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	fe00e800 	.word	0xfe00e800
 8004bbc:	ffff0000 	.word	0xffff0000

08004bc0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bdc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2220      	movs	r2, #32
 8004be4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b21      	cmp	r3, #33	; 0x21
 8004bea:	d002      	beq.n	8004bf2 <I2C_ITSlaveCplt+0x32>
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
 8004bee:	2b29      	cmp	r3, #41	; 0x29
 8004bf0:	d108      	bne.n	8004c04 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004bf2:	f248 0101 	movw	r1, #32769	; 0x8001
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fd92 	bl	8005720 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2221      	movs	r2, #33	; 0x21
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
 8004c02:	e019      	b.n	8004c38 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	2b22      	cmp	r3, #34	; 0x22
 8004c08:	d002      	beq.n	8004c10 <I2C_ITSlaveCplt+0x50>
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c0e:	d108      	bne.n	8004c22 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c10:	f248 0102 	movw	r1, #32770	; 0x8002
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fd83 	bl	8005720 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2222      	movs	r2, #34	; 0x22
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c20:	e00a      	b.n	8004c38 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	2b28      	cmp	r3, #40	; 0x28
 8004c26:	d107      	bne.n	8004c38 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004c28:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fd77 	bl	8005720 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c46:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b62      	ldr	r3, [pc, #392]	; (8004ddc <I2C_ITSlaveCplt+0x21c>)
 8004c54:	400b      	ands	r3, r1
 8004c56:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fa2e 	bl	80050ba <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d013      	beq.n	8004c90 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c76:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01f      	beq.n	8004cc0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c8e:	e017      	b.n	8004cc0 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d012      	beq.n	8004cc0 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d006      	beq.n	8004cc0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d020      	beq.n	8004d0c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 0304 	bic.w	r3, r3, #4
 8004cd0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	f043 0204 	orr.w	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d010      	beq.n	8004d5a <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f8a4 	bl	8004e8c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b28      	cmp	r3, #40	; 0x28
 8004d4e:	d141      	bne.n	8004dd4 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d50:	6979      	ldr	r1, [r7, #20]
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f846 	bl	8004de4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d58:	e03c      	b.n	8004dd4 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d62:	d014      	beq.n	8004d8e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fe06 	bl	8004976 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <I2C_ITSlaveCplt+0x220>)
 8004d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7fd fe3e 	bl	8002a08 <HAL_I2C_ListenCpltCallback>
}
 8004d8c:	e022      	b.n	8004dd4 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b22      	cmp	r3, #34	; 0x22
 8004d98:	d10e      	bne.n	8004db8 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7fd fdc1 	bl	8002938 <HAL_I2C_SlaveRxCpltCallback>
}
 8004db6:	e00d      	b.n	8004dd4 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fd fda2 	bl	8002918 <HAL_I2C_SlaveTxCpltCallback>
}
 8004dd4:	bf00      	nop
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	fe00e800 	.word	0xfe00e800
 8004de0:	ffff0000 	.word	0xffff0000

08004de4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a25      	ldr	r2, [pc, #148]	; (8004e88 <I2C_ITListenCplt+0xa4>)
 8004df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d022      	beq.n	8004e60 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d012      	beq.n	8004e60 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e58:	f043 0204 	orr.w	r2, r3, #4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e60:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fc5b 	bl	8005720 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fd fdc4 	bl	8002a08 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	ffff0000 	.word	0xffff0000

08004e8c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a6d      	ldr	r2, [pc, #436]	; (8005060 <I2C_ITError+0x1d4>)
 8004eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b28      	cmp	r3, #40	; 0x28
 8004ec2:	d005      	beq.n	8004ed0 <I2C_ITError+0x44>
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b29      	cmp	r3, #41	; 0x29
 8004ec8:	d002      	beq.n	8004ed0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ece:	d10b      	bne.n	8004ee8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ed0:	2103      	movs	r1, #3
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fc24 	bl	8005720 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2228      	movs	r2, #40	; 0x28
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a60      	ldr	r2, [pc, #384]	; (8005064 <I2C_ITError+0x1d8>)
 8004ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ee6:	e030      	b.n	8004f4a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ee8:	f248 0103 	movw	r1, #32771	; 0x8003
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fc17 	bl	8005720 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8e1 	bl	80050ba <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b60      	cmp	r3, #96	; 0x60
 8004f02:	d01f      	beq.n	8004f44 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d114      	bne.n	8004f44 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d109      	bne.n	8004f3c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f34:	f043 0204 	orr.w	r2, r3, #4
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2220      	movs	r2, #32
 8004f42:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d039      	beq.n	8004fcc <I2C_ITError+0x140>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b11      	cmp	r3, #17
 8004f5c:	d002      	beq.n	8004f64 <I2C_ITError+0xd8>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b21      	cmp	r3, #33	; 0x21
 8004f62:	d133      	bne.n	8004fcc <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f72:	d107      	bne.n	8004f84 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe f9a1 	bl	80032d0 <HAL_DMA_GetState>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d017      	beq.n	8004fc4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	4a33      	ldr	r2, [pc, #204]	; (8005068 <I2C_ITError+0x1dc>)
 8004f9a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fe f950 	bl	800324e <HAL_DMA_Abort_IT>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d04d      	beq.n	8005050 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fc2:	e045      	b.n	8005050 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f851 	bl	800506c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fca:	e041      	b.n	8005050 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d039      	beq.n	8005048 <I2C_ITError+0x1bc>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b12      	cmp	r3, #18
 8004fd8:	d002      	beq.n	8004fe0 <I2C_ITError+0x154>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b22      	cmp	r3, #34	; 0x22
 8004fde:	d133      	bne.n	8005048 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fee:	d107      	bne.n	8005000 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ffe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005004:	4618      	mov	r0, r3
 8005006:	f7fe f963 	bl	80032d0 <HAL_DMA_GetState>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d017      	beq.n	8005040 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005014:	4a14      	ldr	r2, [pc, #80]	; (8005068 <I2C_ITError+0x1dc>)
 8005016:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe f912 	bl	800324e <HAL_DMA_Abort_IT>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d011      	beq.n	8005054 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800503a:	4610      	mov	r0, r2
 800503c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800503e:	e009      	b.n	8005054 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f813 	bl	800506c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005046:	e005      	b.n	8005054 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f80f 	bl	800506c <I2C_TreatErrorCallback>
  }
}
 800504e:	e002      	b.n	8005056 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005050:	bf00      	nop
 8005052:	e000      	b.n	8005056 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005054:	bf00      	nop
}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	ffff0000 	.word	0xffff0000
 8005064:	08004037 	.word	0x08004037
 8005068:	08005103 	.word	0x08005103

0800506c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b60      	cmp	r3, #96	; 0x60
 800507e:	d10e      	bne.n	800509e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fe ffb7 	bl	800400a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800509c:	e009      	b.n	80050b2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7fd fcb5 	bl	8002a1c <HAL_I2C_ErrorCallback>
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d103      	bne.n	80050d8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2200      	movs	r2, #0
 80050d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d007      	beq.n	80050f6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699a      	ldr	r2, [r3, #24]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0201 	orr.w	r2, r2, #1
 80050f4:	619a      	str	r2, [r3, #24]
  }
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	2200      	movs	r2, #0
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512c:	2200      	movs	r2, #0
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff9b 	bl	800506c <I2C_TreatErrorCallback>
}
 8005136:	bf00      	nop
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	603b      	str	r3, [r7, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800514e:	e031      	b.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005156:	d02d      	beq.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005158:	f7fd ff38 	bl	8002fcc <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d302      	bcc.n	800516e <I2C_WaitOnFlagUntilTimeout+0x30>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d122      	bne.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4013      	ands	r3, r2
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	461a      	mov	r2, r3
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	429a      	cmp	r2, r3
 800518a:	d113      	bne.n	80051b4 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	f043 0220 	orr.w	r2, r3, #32
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e00f      	b.n	80051d4 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	4013      	ands	r3, r2
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	bf0c      	ite	eq
 80051c4:	2301      	moveq	r3, #1
 80051c6:	2300      	movne	r3, #0
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	79fb      	ldrb	r3, [r7, #7]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d0be      	beq.n	8005150 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051e8:	e033      	b.n	8005252 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f900 	bl	80053f4 <I2C_IsErrorOccurred>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e031      	b.n	8005262 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005204:	d025      	beq.n	8005252 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005206:	f7fd fee1 	bl	8002fcc <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	d302      	bcc.n	800521c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d11a      	bne.n	8005252 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b02      	cmp	r3, #2
 8005228:	d013      	beq.n	8005252 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e007      	b.n	8005262 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d1c4      	bne.n	80051ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005276:	e02f      	b.n	80052d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f8b9 	bl	80053f4 <I2C_IsErrorOccurred>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e02d      	b.n	80052e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528c:	f7fd fe9e 	bl	8002fcc <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	d302      	bcc.n	80052a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d11a      	bne.n	80052d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d013      	beq.n	80052d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e007      	b.n	80052e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d1c8      	bne.n	8005278 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052fc:	e06b      	b.n	80053d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 f876 	bl	80053f4 <I2C_IsErrorOccurred>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e069      	b.n	80053e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b20      	cmp	r3, #32
 800531e:	d138      	bne.n	8005392 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f003 0304 	and.w	r3, r3, #4
 800532a:	2b04      	cmp	r3, #4
 800532c:	d105      	bne.n	800533a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e055      	b.n	80053e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	2b10      	cmp	r3, #16
 8005346:	d107      	bne.n	8005358 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2210      	movs	r2, #16
 800534e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2204      	movs	r2, #4
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
 8005356:	e002      	b.n	800535e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2220      	movs	r2, #32
 8005364:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6859      	ldr	r1, [r3, #4]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005372:	400b      	ands	r3, r1
 8005374:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e029      	b.n	80053e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005392:	f7fd fe1b 	bl	8002fcc <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d302      	bcc.n	80053a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d116      	bne.n	80053d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d00f      	beq.n	80053d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ba:	f043 0220 	orr.w	r2, r3, #32
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e007      	b.n	80053e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d18c      	bne.n	80052fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	fe00e800 	.word	0xfe00e800

080053f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005400:	2300      	movs	r3, #0
 8005402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800540e:	2300      	movs	r3, #0
 8005410:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f003 0310 	and.w	r3, r3, #16
 800541c:	2b00      	cmp	r3, #0
 800541e:	d068      	beq.n	80054f2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2210      	movs	r2, #16
 8005426:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005428:	e049      	b.n	80054be <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005430:	d045      	beq.n	80054be <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005432:	f7fd fdcb 	bl	8002fcc <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <I2C_IsErrorOccurred+0x54>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d13a      	bne.n	80054be <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005452:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800545a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800546a:	d121      	bne.n	80054b0 <I2C_IsErrorOccurred+0xbc>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005472:	d01d      	beq.n	80054b0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005474:	7cfb      	ldrb	r3, [r7, #19]
 8005476:	2b20      	cmp	r3, #32
 8005478:	d01a      	beq.n	80054b0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005488:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800548a:	f7fd fd9f 	bl	8002fcc <HAL_GetTick>
 800548e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005490:	e00e      	b.n	80054b0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005492:	f7fd fd9b 	bl	8002fcc <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b19      	cmp	r3, #25
 800549e:	d907      	bls.n	80054b0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	f043 0320 	orr.w	r3, r3, #32
 80054a6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80054ae:	e006      	b.n	80054be <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d1e9      	bne.n	8005492 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d003      	beq.n	80054d4 <I2C_IsErrorOccurred+0xe0>
 80054cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0aa      	beq.n	800542a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2220      	movs	r2, #32
 80054e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	f043 0304 	orr.w	r3, r3, #4
 80054ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00b      	beq.n	800551c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005514:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	f043 0308 	orr.w	r3, r3, #8
 800552c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005536:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00b      	beq.n	8005560 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	f043 0302 	orr.w	r3, r3, #2
 800554e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005558:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01c      	beq.n	80055a2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff fda6 	bl	80050ba <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6859      	ldr	r1, [r3, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b0d      	ldr	r3, [pc, #52]	; (80055b0 <I2C_IsErrorOccurred+0x1bc>)
 800557a:	400b      	ands	r3, r1
 800557c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	431a      	orrs	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80055a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3728      	adds	r7, #40	; 0x28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	fe00e800 	.word	0xfe00e800

080055b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	607b      	str	r3, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	817b      	strh	r3, [r7, #10]
 80055c2:	4613      	mov	r3, r2
 80055c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055c6:	897b      	ldrh	r3, [r7, #10]
 80055c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055cc:	7a7b      	ldrb	r3, [r7, #9]
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	4313      	orrs	r3, r2
 80055de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	0d5b      	lsrs	r3, r3, #21
 80055ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055f2:	4b08      	ldr	r3, [pc, #32]	; (8005614 <I2C_TransferConfig+0x60>)
 80055f4:	430b      	orrs	r3, r1
 80055f6:	43db      	mvns	r3, r3
 80055f8:	ea02 0103 	and.w	r1, r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	03ff63ff 	.word	0x03ff63ff

08005618 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	4a39      	ldr	r2, [pc, #228]	; (8005714 <I2C_Enable_IRQ+0xfc>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d032      	beq.n	8005698 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005636:	4a38      	ldr	r2, [pc, #224]	; (8005718 <I2C_Enable_IRQ+0x100>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d02d      	beq.n	8005698 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005640:	4a36      	ldr	r2, [pc, #216]	; (800571c <I2C_Enable_IRQ+0x104>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d028      	beq.n	8005698 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800564a:	2b00      	cmp	r3, #0
 800564c:	da03      	bge.n	8005656 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005654:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005666:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005668:	887b      	ldrh	r3, [r7, #2]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005678:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	2b10      	cmp	r3, #16
 800567e:	d103      	bne.n	8005688 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005686:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005688:	887b      	ldrh	r3, [r7, #2]
 800568a:	2b20      	cmp	r3, #32
 800568c:	d133      	bne.n	80056f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f043 0320 	orr.w	r3, r3, #32
 8005694:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005696:	e02e      	b.n	80056f6 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005698:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800569c:	2b00      	cmp	r3, #0
 800569e:	da03      	bge.n	80056a8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80056a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056a8:	887b      	ldrh	r3, [r7, #2]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80056b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056ba:	887b      	ldrh	r3, [r7, #2]
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80056ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80056cc:	887b      	ldrh	r3, [r7, #2]
 80056ce:	2b10      	cmp	r3, #16
 80056d0:	d103      	bne.n	80056da <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80056d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056da:	887b      	ldrh	r3, [r7, #2]
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d103      	bne.n	80056e8 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056e8:	887b      	ldrh	r3, [r7, #2]
 80056ea:	2b40      	cmp	r3, #64	; 0x40
 80056ec:	d103      	bne.n	80056f6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6819      	ldr	r1, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	08004227 	.word	0x08004227
 8005718:	08004649 	.word	0x08004649
 800571c:	080043fd 	.word	0x080043fd

08005720 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00f      	beq.n	800575a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005740:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005748:	b2db      	uxtb	r3, r3
 800574a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800574e:	2b28      	cmp	r3, #40	; 0x28
 8005750:	d003      	beq.n	800575a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005758:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800575a:	887b      	ldrh	r3, [r7, #2]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00f      	beq.n	8005784 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800576a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005778:	2b28      	cmp	r3, #40	; 0x28
 800577a:	d003      	beq.n	8005784 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005782:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005788:	2b00      	cmp	r3, #0
 800578a:	da03      	bge.n	8005794 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005792:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005794:	887b      	ldrh	r3, [r7, #2]
 8005796:	2b10      	cmp	r3, #16
 8005798:	d103      	bne.n	80057a2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80057a0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80057a2:	887b      	ldrh	r3, [r7, #2]
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d103      	bne.n	80057b0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f043 0320 	orr.w	r3, r3, #32
 80057ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057b0:	887b      	ldrh	r3, [r7, #2]
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d103      	bne.n	80057be <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057bc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6819      	ldr	r1, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	43da      	mvns	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	400a      	ands	r2, r1
 80057ce:	601a      	str	r2, [r3, #0]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d138      	bne.n	8005864 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e032      	b.n	8005866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2224      	movs	r2, #36	; 0x24
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800582e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6819      	ldr	r1, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b20      	cmp	r3, #32
 8005886:	d139      	bne.n	80058fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005892:	2302      	movs	r3, #2
 8005894:	e033      	b.n	80058fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2224      	movs	r2, #36	; 0x24
 80058a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0201 	bic.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	021b      	lsls	r3, r3, #8
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	e000      	b.n	80058fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058fc:	2302      	movs	r3, #2
  }
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
	...

0800590c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005910:	4b04      	ldr	r3, [pc, #16]	; (8005924 <HAL_PWREx_GetVoltageRange+0x18>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005918:	4618      	mov	r0, r3
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40007000 	.word	0x40007000

08005928 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005936:	d130      	bne.n	800599a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005938:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005944:	d038      	beq.n	80059b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800594e:	4a1e      	ldr	r2, [pc, #120]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005954:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005956:	4b1d      	ldr	r3, [pc, #116]	; (80059cc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2232      	movs	r2, #50	; 0x32
 800595c:	fb02 f303 	mul.w	r3, r2, r3
 8005960:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005962:	fba2 2303 	umull	r2, r3, r2, r3
 8005966:	0c9b      	lsrs	r3, r3, #18
 8005968:	3301      	adds	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800596c:	e002      	b.n	8005974 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	3b01      	subs	r3, #1
 8005972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005974:	4b14      	ldr	r3, [pc, #80]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005980:	d102      	bne.n	8005988 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f2      	bne.n	800596e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005994:	d110      	bne.n	80059b8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e00f      	b.n	80059ba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a6:	d007      	beq.n	80059b8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059a8:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059b0:	4a05      	ldr	r2, [pc, #20]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059b6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40007000 	.word	0x40007000
 80059cc:	20000000 	.word	0x20000000
 80059d0:	431bde83 	.word	0x431bde83

080059d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b088      	sub	sp, #32
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	f000 bc02 	b.w	80061ec <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059e8:	4b96      	ldr	r3, [pc, #600]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 030c 	and.w	r3, r3, #12
 80059f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059f2:	4b94      	ldr	r3, [pc, #592]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80e4 	beq.w	8005bd2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d007      	beq.n	8005a20 <HAL_RCC_OscConfig+0x4c>
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b0c      	cmp	r3, #12
 8005a14:	f040 808b 	bne.w	8005b2e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	f040 8087 	bne.w	8005b2e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a20:	4b88      	ldr	r3, [pc, #544]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_OscConfig+0x64>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e3d9      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	4b81      	ldr	r3, [pc, #516]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <HAL_RCC_OscConfig+0x7e>
 8005a48:	4b7e      	ldr	r3, [pc, #504]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a50:	e005      	b.n	8005a5e <HAL_RCC_OscConfig+0x8a>
 8005a52:	4b7c      	ldr	r3, [pc, #496]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d223      	bcs.n	8005aaa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fd8c 	bl	8006584 <RCC_SetFlashLatencyFromMSIRange>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e3ba      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a76:	4b73      	ldr	r3, [pc, #460]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a72      	ldr	r2, [pc, #456]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005a7c:	f043 0308 	orr.w	r3, r3, #8
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	4b70      	ldr	r3, [pc, #448]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	496d      	ldr	r1, [pc, #436]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a94:	4b6b      	ldr	r3, [pc, #428]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	4968      	ldr	r1, [pc, #416]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	604b      	str	r3, [r1, #4]
 8005aa8:	e025      	b.n	8005af6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aaa:	4b66      	ldr	r3, [pc, #408]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a65      	ldr	r2, [pc, #404]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005ab0:	f043 0308 	orr.w	r3, r3, #8
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b63      	ldr	r3, [pc, #396]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	4960      	ldr	r1, [pc, #384]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ac8:	4b5e      	ldr	r3, [pc, #376]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	69db      	ldr	r3, [r3, #28]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	495b      	ldr	r1, [pc, #364]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 fd4c 	bl	8006584 <RCC_SetFlashLatencyFromMSIRange>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e37a      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005af6:	f000 fc81 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b51      	ldr	r3, [pc, #324]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	091b      	lsrs	r3, r3, #4
 8005b02:	f003 030f 	and.w	r3, r3, #15
 8005b06:	4950      	ldr	r1, [pc, #320]	; (8005c48 <HAL_RCC_OscConfig+0x274>)
 8005b08:	5ccb      	ldrb	r3, [r1, r3]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	4a4e      	ldr	r2, [pc, #312]	; (8005c4c <HAL_RCC_OscConfig+0x278>)
 8005b14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b16:	4b4e      	ldr	r3, [pc, #312]	; (8005c50 <HAL_RCC_OscConfig+0x27c>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fd fa06 	bl	8002f2c <HAL_InitTick>
 8005b20:	4603      	mov	r3, r0
 8005b22:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d052      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005b2a:	7bfb      	ldrb	r3, [r7, #15]
 8005b2c:	e35e      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d032      	beq.n	8005b9c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b36:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a42      	ldr	r2, [pc, #264]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b3c:	f043 0301 	orr.w	r3, r3, #1
 8005b40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b42:	f7fd fa43 	bl	8002fcc <HAL_GetTick>
 8005b46:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b4a:	f7fd fa3f 	bl	8002fcc <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e347      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b5c:	4b39      	ldr	r3, [pc, #228]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0f0      	beq.n	8005b4a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b68:	4b36      	ldr	r3, [pc, #216]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a35      	ldr	r2, [pc, #212]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b6e:	f043 0308 	orr.w	r3, r3, #8
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	4b33      	ldr	r3, [pc, #204]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	4930      	ldr	r1, [pc, #192]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b86:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	492b      	ldr	r1, [pc, #172]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	604b      	str	r3, [r1, #4]
 8005b9a:	e01a      	b.n	8005bd2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b9c:	4b29      	ldr	r3, [pc, #164]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a28      	ldr	r2, [pc, #160]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005ba2:	f023 0301 	bic.w	r3, r3, #1
 8005ba6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ba8:	f7fd fa10 	bl	8002fcc <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bb0:	f7fd fa0c 	bl	8002fcc <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e314      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bc2:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x1dc>
 8005bce:	e000      	b.n	8005bd2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bd0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d073      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d005      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x21c>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b0c      	cmp	r3, #12
 8005be8:	d10e      	bne.n	8005c08 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d10b      	bne.n	8005c08 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf0:	4b14      	ldr	r3, [pc, #80]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d063      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x2f0>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d15f      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e2f1      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d106      	bne.n	8005c20 <HAL_RCC_OscConfig+0x24c>
 8005c12:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a0b      	ldr	r2, [pc, #44]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e025      	b.n	8005c6c <HAL_RCC_OscConfig+0x298>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c28:	d114      	bne.n	8005c54 <HAL_RCC_OscConfig+0x280>
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a05      	ldr	r2, [pc, #20]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	4b03      	ldr	r3, [pc, #12]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a02      	ldr	r2, [pc, #8]	; (8005c44 <HAL_RCC_OscConfig+0x270>)
 8005c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e013      	b.n	8005c6c <HAL_RCC_OscConfig+0x298>
 8005c44:	40021000 	.word	0x40021000
 8005c48:	08007ef4 	.word	0x08007ef4
 8005c4c:	20000000 	.word	0x20000000
 8005c50:	20000004 	.word	0x20000004
 8005c54:	4ba0      	ldr	r3, [pc, #640]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a9f      	ldr	r2, [pc, #636]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	4b9d      	ldr	r3, [pc, #628]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a9c      	ldr	r2, [pc, #624]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d013      	beq.n	8005c9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c74:	f7fd f9aa 	bl	8002fcc <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c7c:	f7fd f9a6 	bl	8002fcc <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	; 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e2ae      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c8e:	4b92      	ldr	r3, [pc, #584]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0x2a8>
 8005c9a:	e014      	b.n	8005cc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9c:	f7fd f996 	bl	8002fcc <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca4:	f7fd f992 	bl	8002fcc <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	; 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e29a      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cb6:	4b88      	ldr	r3, [pc, #544]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x2d0>
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d060      	beq.n	8005d94 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d005      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x310>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	2b0c      	cmp	r3, #12
 8005cdc:	d119      	bne.n	8005d12 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d116      	bne.n	8005d12 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ce4:	4b7c      	ldr	r3, [pc, #496]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d005      	beq.n	8005cfc <HAL_RCC_OscConfig+0x328>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e277      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfc:	4b76      	ldr	r3, [pc, #472]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	4973      	ldr	r1, [pc, #460]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d10:	e040      	b.n	8005d94 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d023      	beq.n	8005d62 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d1a:	4b6f      	ldr	r3, [pc, #444]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a6e      	ldr	r2, [pc, #440]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d26:	f7fd f951 	bl	8002fcc <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d2e:	f7fd f94d 	bl	8002fcc <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e255      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d40:	4b65      	ldr	r3, [pc, #404]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4c:	4b62      	ldr	r3, [pc, #392]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	061b      	lsls	r3, r3, #24
 8005d5a:	495f      	ldr	r1, [pc, #380]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	604b      	str	r3, [r1, #4]
 8005d60:	e018      	b.n	8005d94 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d62:	4b5d      	ldr	r3, [pc, #372]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a5c      	ldr	r2, [pc, #368]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d6e:	f7fd f92d 	bl	8002fcc <HAL_GetTick>
 8005d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d76:	f7fd f929 	bl	8002fcc <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e231      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d88:	4b53      	ldr	r3, [pc, #332]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1f0      	bne.n	8005d76 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d03c      	beq.n	8005e1a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01c      	beq.n	8005de2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005da8:	4b4b      	ldr	r3, [pc, #300]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dae:	4a4a      	ldr	r2, [pc, #296]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005db0:	f043 0301 	orr.w	r3, r3, #1
 8005db4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db8:	f7fd f908 	bl	8002fcc <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc0:	f7fd f904 	bl	8002fcc <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e20c      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dd2:	4b41      	ldr	r3, [pc, #260]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ef      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x3ec>
 8005de0:	e01b      	b.n	8005e1a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de2:	4b3d      	ldr	r3, [pc, #244]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de8:	4a3b      	ldr	r2, [pc, #236]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df2:	f7fd f8eb 	bl	8002fcc <HAL_GetTick>
 8005df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005df8:	e008      	b.n	8005e0c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dfa:	f7fd f8e7 	bl	8002fcc <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d901      	bls.n	8005e0c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	e1ef      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e0c:	4b32      	ldr	r3, [pc, #200]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1ef      	bne.n	8005dfa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80a6 	beq.w	8005f74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10d      	bne.n	8005e54 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e38:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3c:	4a26      	ldr	r2, [pc, #152]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e42:	6593      	str	r3, [r2, #88]	; 0x58
 8005e44:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4c:	60bb      	str	r3, [r7, #8]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e50:	2301      	movs	r3, #1
 8005e52:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e54:	4b21      	ldr	r3, [pc, #132]	; (8005edc <HAL_RCC_OscConfig+0x508>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d118      	bne.n	8005e92 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e60:	4b1e      	ldr	r3, [pc, #120]	; (8005edc <HAL_RCC_OscConfig+0x508>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1d      	ldr	r2, [pc, #116]	; (8005edc <HAL_RCC_OscConfig+0x508>)
 8005e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e6c:	f7fd f8ae 	bl	8002fcc <HAL_GetTick>
 8005e70:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e74:	f7fd f8aa 	bl	8002fcc <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e1b2      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e86:	4b15      	ldr	r3, [pc, #84]	; (8005edc <HAL_RCC_OscConfig+0x508>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d108      	bne.n	8005eac <HAL_RCC_OscConfig+0x4d8>
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	4a0d      	ldr	r2, [pc, #52]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eaa:	e029      	b.n	8005f00 <HAL_RCC_OscConfig+0x52c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b05      	cmp	r3, #5
 8005eb2:	d115      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x50c>
 8005eb4:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eba:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005ebc:	f043 0304 	orr.w	r3, r3, #4
 8005ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ec4:	4b04      	ldr	r3, [pc, #16]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eca:	4a03      	ldr	r2, [pc, #12]	; (8005ed8 <HAL_RCC_OscConfig+0x504>)
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ed4:	e014      	b.n	8005f00 <HAL_RCC_OscConfig+0x52c>
 8005ed6:	bf00      	nop
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	40007000 	.word	0x40007000
 8005ee0:	4b9a      	ldr	r3, [pc, #616]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	4a99      	ldr	r2, [pc, #612]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005ee8:	f023 0301 	bic.w	r3, r3, #1
 8005eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ef0:	4b96      	ldr	r3, [pc, #600]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef6:	4a95      	ldr	r2, [pc, #596]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005ef8:	f023 0304 	bic.w	r3, r3, #4
 8005efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d016      	beq.n	8005f36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f08:	f7fd f860 	bl	8002fcc <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f10:	f7fd f85c 	bl	8002fcc <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e162      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f26:	4b89      	ldr	r3, [pc, #548]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d0ed      	beq.n	8005f10 <HAL_RCC_OscConfig+0x53c>
 8005f34:	e015      	b.n	8005f62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f36:	f7fd f849 	bl	8002fcc <HAL_GetTick>
 8005f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f3c:	e00a      	b.n	8005f54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f3e:	f7fd f845 	bl	8002fcc <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e14b      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f54:	4b7d      	ldr	r3, [pc, #500]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1ed      	bne.n	8005f3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f62:	7ffb      	ldrb	r3, [r7, #31]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d105      	bne.n	8005f74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f68:	4b78      	ldr	r3, [pc, #480]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6c:	4a77      	ldr	r2, [pc, #476]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d03c      	beq.n	8005ffa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d01c      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f88:	4b70      	ldr	r3, [pc, #448]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f8e:	4a6f      	ldr	r2, [pc, #444]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f98:	f7fd f818 	bl	8002fcc <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fa0:	f7fd f814 	bl	8002fcc <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e11c      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fb2:	4b66      	ldr	r3, [pc, #408]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0ef      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x5cc>
 8005fc0:	e01b      	b.n	8005ffa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fc2:	4b62      	ldr	r3, [pc, #392]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fc8:	4a60      	ldr	r2, [pc, #384]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd2:	f7fc fffb 	bl	8002fcc <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fda:	f7fc fff7 	bl	8002fcc <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e0ff      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fec:	4b57      	ldr	r3, [pc, #348]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8005fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1ef      	bne.n	8005fda <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	f000 80f3 	beq.w	80061ea <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	2b02      	cmp	r3, #2
 800600a:	f040 80c9 	bne.w	80061a0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800600e:	4b4f      	ldr	r3, [pc, #316]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	f003 0203 	and.w	r2, r3, #3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	429a      	cmp	r2, r3
 8006020:	d12c      	bne.n	800607c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	3b01      	subs	r3, #1
 800602e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006030:	429a      	cmp	r2, r3
 8006032:	d123      	bne.n	800607c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006040:	429a      	cmp	r2, r3
 8006042:	d11b      	bne.n	800607c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006050:	429a      	cmp	r2, r3
 8006052:	d113      	bne.n	800607c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	3b01      	subs	r3, #1
 8006062:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006064:	429a      	cmp	r2, r3
 8006066:	d109      	bne.n	800607c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	3b01      	subs	r3, #1
 8006076:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006078:	429a      	cmp	r2, r3
 800607a:	d06b      	beq.n	8006154 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	2b0c      	cmp	r3, #12
 8006080:	d062      	beq.n	8006148 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006082:	4b32      	ldr	r3, [pc, #200]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e0ac      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006092:	4b2e      	ldr	r3, [pc, #184]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a2d      	ldr	r2, [pc, #180]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8006098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800609c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800609e:	f7fc ff95 	bl	8002fcc <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fc ff91 	bl	8002fcc <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e099      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060b8:	4b24      	ldr	r3, [pc, #144]	; (800614c <HAL_RCC_OscConfig+0x778>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f0      	bne.n	80060a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060c4:	4b21      	ldr	r3, [pc, #132]	; (800614c <HAL_RCC_OscConfig+0x778>)
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	4b21      	ldr	r3, [pc, #132]	; (8006150 <HAL_RCC_OscConfig+0x77c>)
 80060ca:	4013      	ands	r3, r2
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80060d4:	3a01      	subs	r2, #1
 80060d6:	0112      	lsls	r2, r2, #4
 80060d8:	4311      	orrs	r1, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060de:	0212      	lsls	r2, r2, #8
 80060e0:	4311      	orrs	r1, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060e6:	0852      	lsrs	r2, r2, #1
 80060e8:	3a01      	subs	r2, #1
 80060ea:	0552      	lsls	r2, r2, #21
 80060ec:	4311      	orrs	r1, r2
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060f2:	0852      	lsrs	r2, r2, #1
 80060f4:	3a01      	subs	r2, #1
 80060f6:	0652      	lsls	r2, r2, #25
 80060f8:	4311      	orrs	r1, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060fe:	06d2      	lsls	r2, r2, #27
 8006100:	430a      	orrs	r2, r1
 8006102:	4912      	ldr	r1, [pc, #72]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8006104:	4313      	orrs	r3, r2
 8006106:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006108:	4b10      	ldr	r3, [pc, #64]	; (800614c <HAL_RCC_OscConfig+0x778>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a0f      	ldr	r2, [pc, #60]	; (800614c <HAL_RCC_OscConfig+0x778>)
 800610e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006112:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006114:	4b0d      	ldr	r3, [pc, #52]	; (800614c <HAL_RCC_OscConfig+0x778>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4a0c      	ldr	r2, [pc, #48]	; (800614c <HAL_RCC_OscConfig+0x778>)
 800611a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800611e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006120:	f7fc ff54 	bl	8002fcc <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006128:	f7fc ff50 	bl	8002fcc <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b02      	cmp	r3, #2
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e058      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800613a:	4b04      	ldr	r3, [pc, #16]	; (800614c <HAL_RCC_OscConfig+0x778>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0f0      	beq.n	8006128 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006146:	e050      	b.n	80061ea <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e04f      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
 800614c:	40021000 	.word	0x40021000
 8006150:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006154:	4b27      	ldr	r3, [pc, #156]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d144      	bne.n	80061ea <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006160:	4b24      	ldr	r3, [pc, #144]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a23      	ldr	r2, [pc, #140]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 8006166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800616a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800616c:	4b21      	ldr	r3, [pc, #132]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	4a20      	ldr	r2, [pc, #128]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 8006172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006176:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006178:	f7fc ff28 	bl	8002fcc <HAL_GetTick>
 800617c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800617e:	e008      	b.n	8006192 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006180:	f7fc ff24 	bl	8002fcc <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	2b02      	cmp	r3, #2
 800618c:	d901      	bls.n	8006192 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e02c      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006192:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f0      	beq.n	8006180 <HAL_RCC_OscConfig+0x7ac>
 800619e:	e024      	b.n	80061ea <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	2b0c      	cmp	r3, #12
 80061a4:	d01f      	beq.n	80061e6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a12      	ldr	r2, [pc, #72]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 80061ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b2:	f7fc ff0b 	bl	8002fcc <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ba:	f7fc ff07 	bl	8002fcc <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e00f      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061cc:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1f0      	bne.n	80061ba <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	4905      	ldr	r1, [pc, #20]	; (80061f4 <HAL_RCC_OscConfig+0x820>)
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <HAL_RCC_OscConfig+0x824>)
 80061e0:	4013      	ands	r3, r2
 80061e2:	60cb      	str	r3, [r1, #12]
 80061e4:	e001      	b.n	80061ea <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40021000 	.word	0x40021000
 80061f8:	feeefffc 	.word	0xfeeefffc

080061fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e0e7      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006210:	4b75      	ldr	r3, [pc, #468]	; (80063e8 <HAL_RCC_ClockConfig+0x1ec>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d910      	bls.n	8006240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621e:	4b72      	ldr	r3, [pc, #456]	; (80063e8 <HAL_RCC_ClockConfig+0x1ec>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f023 0207 	bic.w	r2, r3, #7
 8006226:	4970      	ldr	r1, [pc, #448]	; (80063e8 <HAL_RCC_ClockConfig+0x1ec>)
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	4313      	orrs	r3, r2
 800622c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800622e:	4b6e      	ldr	r3, [pc, #440]	; (80063e8 <HAL_RCC_ClockConfig+0x1ec>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0307 	and.w	r3, r3, #7
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d001      	beq.n	8006240 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0cf      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d010      	beq.n	800626e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	4b66      	ldr	r3, [pc, #408]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006258:	429a      	cmp	r2, r3
 800625a:	d908      	bls.n	800626e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800625c:	4b63      	ldr	r3, [pc, #396]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4960      	ldr	r1, [pc, #384]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 800626a:	4313      	orrs	r3, r2
 800626c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d04c      	beq.n	8006314 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b03      	cmp	r3, #3
 8006280:	d107      	bne.n	8006292 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006282:	4b5a      	ldr	r3, [pc, #360]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d121      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e0a6      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d107      	bne.n	80062aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800629a:	4b54      	ldr	r3, [pc, #336]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d115      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e09a      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d107      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062b2:	4b4e      	ldr	r3, [pc, #312]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e08e      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062c2:	4b4a      	ldr	r3, [pc, #296]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e086      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062d2:	4b46      	ldr	r3, [pc, #280]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f023 0203 	bic.w	r2, r3, #3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	4943      	ldr	r1, [pc, #268]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e4:	f7fc fe72 	bl	8002fcc <HAL_GetTick>
 80062e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ea:	e00a      	b.n	8006302 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ec:	f7fc fe6e 	bl	8002fcc <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e06e      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006302:	4b3a      	ldr	r3, [pc, #232]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 020c 	and.w	r2, r3, #12
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	429a      	cmp	r2, r3
 8006312:	d1eb      	bne.n	80062ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d010      	beq.n	8006342 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	4b31      	ldr	r3, [pc, #196]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800632c:	429a      	cmp	r2, r3
 800632e:	d208      	bcs.n	8006342 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006330:	4b2e      	ldr	r3, [pc, #184]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	492b      	ldr	r1, [pc, #172]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 800633e:	4313      	orrs	r3, r2
 8006340:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006342:	4b29      	ldr	r3, [pc, #164]	; (80063e8 <HAL_RCC_ClockConfig+0x1ec>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	429a      	cmp	r2, r3
 800634e:	d210      	bcs.n	8006372 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <HAL_RCC_ClockConfig+0x1ec>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f023 0207 	bic.w	r2, r3, #7
 8006358:	4923      	ldr	r1, [pc, #140]	; (80063e8 <HAL_RCC_ClockConfig+0x1ec>)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	4313      	orrs	r3, r2
 800635e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006360:	4b21      	ldr	r3, [pc, #132]	; (80063e8 <HAL_RCC_ClockConfig+0x1ec>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d001      	beq.n	8006372 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e036      	b.n	80063e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	d008      	beq.n	8006390 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800637e:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	4918      	ldr	r1, [pc, #96]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 800638c:	4313      	orrs	r3, r2
 800638e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800639c:	4b13      	ldr	r3, [pc, #76]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4910      	ldr	r1, [pc, #64]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063b0:	f000 f824 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <HAL_RCC_ClockConfig+0x1f0>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	091b      	lsrs	r3, r3, #4
 80063bc:	f003 030f 	and.w	r3, r3, #15
 80063c0:	490b      	ldr	r1, [pc, #44]	; (80063f0 <HAL_RCC_ClockConfig+0x1f4>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	fa22 f303 	lsr.w	r3, r2, r3
 80063cc:	4a09      	ldr	r2, [pc, #36]	; (80063f4 <HAL_RCC_ClockConfig+0x1f8>)
 80063ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063d0:	4b09      	ldr	r3, [pc, #36]	; (80063f8 <HAL_RCC_ClockConfig+0x1fc>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fc fda9 	bl	8002f2c <HAL_InitTick>
 80063da:	4603      	mov	r3, r0
 80063dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80063de:	7afb      	ldrb	r3, [r7, #11]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40022000 	.word	0x40022000
 80063ec:	40021000 	.word	0x40021000
 80063f0:	08007ef4 	.word	0x08007ef4
 80063f4:	20000000 	.word	0x20000000
 80063f8:	20000004 	.word	0x20000004

080063fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b089      	sub	sp, #36	; 0x24
 8006400:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	2300      	movs	r3, #0
 8006408:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800640a:	4b3e      	ldr	r3, [pc, #248]	; (8006504 <HAL_RCC_GetSysClockFreq+0x108>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 030c 	and.w	r3, r3, #12
 8006412:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006414:	4b3b      	ldr	r3, [pc, #236]	; (8006504 <HAL_RCC_GetSysClockFreq+0x108>)
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d005      	beq.n	8006430 <HAL_RCC_GetSysClockFreq+0x34>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b0c      	cmp	r3, #12
 8006428:	d121      	bne.n	800646e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d11e      	bne.n	800646e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006430:	4b34      	ldr	r3, [pc, #208]	; (8006504 <HAL_RCC_GetSysClockFreq+0x108>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0308 	and.w	r3, r3, #8
 8006438:	2b00      	cmp	r3, #0
 800643a:	d107      	bne.n	800644c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800643c:	4b31      	ldr	r3, [pc, #196]	; (8006504 <HAL_RCC_GetSysClockFreq+0x108>)
 800643e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006442:	0a1b      	lsrs	r3, r3, #8
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	e005      	b.n	8006458 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800644c:	4b2d      	ldr	r3, [pc, #180]	; (8006504 <HAL_RCC_GetSysClockFreq+0x108>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006458:	4a2b      	ldr	r2, [pc, #172]	; (8006508 <HAL_RCC_GetSysClockFreq+0x10c>)
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006460:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10d      	bne.n	8006484 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800646c:	e00a      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b04      	cmp	r3, #4
 8006472:	d102      	bne.n	800647a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006474:	4b25      	ldr	r3, [pc, #148]	; (800650c <HAL_RCC_GetSysClockFreq+0x110>)
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	e004      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d101      	bne.n	8006484 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006480:	4b23      	ldr	r3, [pc, #140]	; (8006510 <HAL_RCC_GetSysClockFreq+0x114>)
 8006482:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	2b0c      	cmp	r3, #12
 8006488:	d134      	bne.n	80064f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800648a:	4b1e      	ldr	r3, [pc, #120]	; (8006504 <HAL_RCC_GetSysClockFreq+0x108>)
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b02      	cmp	r3, #2
 8006498:	d003      	beq.n	80064a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b03      	cmp	r3, #3
 800649e:	d003      	beq.n	80064a8 <HAL_RCC_GetSysClockFreq+0xac>
 80064a0:	e005      	b.n	80064ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064a2:	4b1a      	ldr	r3, [pc, #104]	; (800650c <HAL_RCC_GetSysClockFreq+0x110>)
 80064a4:	617b      	str	r3, [r7, #20]
      break;
 80064a6:	e005      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064a8:	4b19      	ldr	r3, [pc, #100]	; (8006510 <HAL_RCC_GetSysClockFreq+0x114>)
 80064aa:	617b      	str	r3, [r7, #20]
      break;
 80064ac:	e002      	b.n	80064b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	617b      	str	r3, [r7, #20]
      break;
 80064b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064b4:	4b13      	ldr	r3, [pc, #76]	; (8006504 <HAL_RCC_GetSysClockFreq+0x108>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	091b      	lsrs	r3, r3, #4
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	3301      	adds	r3, #1
 80064c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064c2:	4b10      	ldr	r3, [pc, #64]	; (8006504 <HAL_RCC_GetSysClockFreq+0x108>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	0a1b      	lsrs	r3, r3, #8
 80064c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	fb03 f202 	mul.w	r2, r3, r2
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064da:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <HAL_RCC_GetSysClockFreq+0x108>)
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	0e5b      	lsrs	r3, r3, #25
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	3301      	adds	r3, #1
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064f4:	69bb      	ldr	r3, [r7, #24]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3724      	adds	r7, #36	; 0x24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40021000 	.word	0x40021000
 8006508:	08007f0c 	.word	0x08007f0c
 800650c:	00f42400 	.word	0x00f42400
 8006510:	007a1200 	.word	0x007a1200

08006514 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006518:	4b03      	ldr	r3, [pc, #12]	; (8006528 <HAL_RCC_GetHCLKFreq+0x14>)
 800651a:	681b      	ldr	r3, [r3, #0]
}
 800651c:	4618      	mov	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000000 	.word	0x20000000

0800652c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006530:	f7ff fff0 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 8006534:	4602      	mov	r2, r0
 8006536:	4b06      	ldr	r3, [pc, #24]	; (8006550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	0a1b      	lsrs	r3, r3, #8
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	4904      	ldr	r1, [pc, #16]	; (8006554 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006542:	5ccb      	ldrb	r3, [r1, r3]
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800654c:	4618      	mov	r0, r3
 800654e:	bd80      	pop	{r7, pc}
 8006550:	40021000 	.word	0x40021000
 8006554:	08007f04 	.word	0x08007f04

08006558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800655c:	f7ff ffda 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 8006560:	4602      	mov	r2, r0
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	0adb      	lsrs	r3, r3, #11
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	4904      	ldr	r1, [pc, #16]	; (8006580 <HAL_RCC_GetPCLK2Freq+0x28>)
 800656e:	5ccb      	ldrb	r3, [r1, r3]
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006578:	4618      	mov	r0, r3
 800657a:	bd80      	pop	{r7, pc}
 800657c:	40021000 	.word	0x40021000
 8006580:	08007f04 	.word	0x08007f04

08006584 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006590:	4b2a      	ldr	r3, [pc, #168]	; (800663c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800659c:	f7ff f9b6 	bl	800590c <HAL_PWREx_GetVoltageRange>
 80065a0:	6178      	str	r0, [r7, #20]
 80065a2:	e014      	b.n	80065ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065a4:	4b25      	ldr	r3, [pc, #148]	; (800663c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a8:	4a24      	ldr	r2, [pc, #144]	; (800663c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ae:	6593      	str	r3, [r2, #88]	; 0x58
 80065b0:	4b22      	ldr	r3, [pc, #136]	; (800663c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065bc:	f7ff f9a6 	bl	800590c <HAL_PWREx_GetVoltageRange>
 80065c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80065c2:	4b1e      	ldr	r3, [pc, #120]	; (800663c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c6:	4a1d      	ldr	r2, [pc, #116]	; (800663c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065d4:	d10b      	bne.n	80065ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b80      	cmp	r3, #128	; 0x80
 80065da:	d919      	bls.n	8006610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2ba0      	cmp	r3, #160	; 0xa0
 80065e0:	d902      	bls.n	80065e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065e2:	2302      	movs	r3, #2
 80065e4:	613b      	str	r3, [r7, #16]
 80065e6:	e013      	b.n	8006610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065e8:	2301      	movs	r3, #1
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	e010      	b.n	8006610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2b80      	cmp	r3, #128	; 0x80
 80065f2:	d902      	bls.n	80065fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80065f4:	2303      	movs	r3, #3
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	e00a      	b.n	8006610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b80      	cmp	r3, #128	; 0x80
 80065fe:	d102      	bne.n	8006606 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006600:	2302      	movs	r3, #2
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	e004      	b.n	8006610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b70      	cmp	r3, #112	; 0x70
 800660a:	d101      	bne.n	8006610 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800660c:	2301      	movs	r3, #1
 800660e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006610:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f023 0207 	bic.w	r2, r3, #7
 8006618:	4909      	ldr	r1, [pc, #36]	; (8006640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	429a      	cmp	r2, r3
 800662c:	d001      	beq.n	8006632 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	40021000 	.word	0x40021000
 8006640:	40022000 	.word	0x40022000

08006644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800664c:	2300      	movs	r3, #0
 800664e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006650:	2300      	movs	r3, #0
 8006652:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800665c:	2b00      	cmp	r3, #0
 800665e:	d031      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006664:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006668:	d01a      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800666a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800666e:	d814      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006674:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006678:	d10f      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800667a:	4b5d      	ldr	r3, [pc, #372]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	4a5c      	ldr	r2, [pc, #368]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006684:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006686:	e00c      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3304      	adds	r3, #4
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fa22 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006698:	e003      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	74fb      	strb	r3, [r7, #19]
      break;
 800669e:	e000      	b.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80066a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a2:	7cfb      	ldrb	r3, [r7, #19]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10b      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066a8:	4b51      	ldr	r3, [pc, #324]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b6:	494e      	ldr	r1, [pc, #312]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80066be:	e001      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7cfb      	ldrb	r3, [r7, #19]
 80066c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 809e 	beq.w	800680e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d2:	2300      	movs	r3, #0
 80066d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066d6:	4b46      	ldr	r3, [pc, #280]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80066e6:	2300      	movs	r3, #0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00d      	beq.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ec:	4b40      	ldr	r3, [pc, #256]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f0:	4a3f      	ldr	r2, [pc, #252]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066f6:	6593      	str	r3, [r2, #88]	; 0x58
 80066f8:	4b3d      	ldr	r3, [pc, #244]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006700:	60bb      	str	r3, [r7, #8]
 8006702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006704:	2301      	movs	r3, #1
 8006706:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006708:	4b3a      	ldr	r3, [pc, #232]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a39      	ldr	r2, [pc, #228]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800670e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006712:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006714:	f7fc fc5a 	bl	8002fcc <HAL_GetTick>
 8006718:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800671a:	e009      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800671c:	f7fc fc56 	bl	8002fcc <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d902      	bls.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	74fb      	strb	r3, [r7, #19]
        break;
 800672e:	e005      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006730:	4b30      	ldr	r3, [pc, #192]	; (80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0ef      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800673c:	7cfb      	ldrb	r3, [r7, #19]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d15a      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006742:	4b2b      	ldr	r3, [pc, #172]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800674c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d01e      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	429a      	cmp	r2, r3
 800675c:	d019      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800675e:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006768:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800676a:	4b21      	ldr	r3, [pc, #132]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800676c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006770:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800677a:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800678a:	4a19      	ldr	r2, [pc, #100]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d016      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679c:	f7fc fc16 	bl	8002fcc <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067a2:	e00b      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a4:	f7fc fc12 	bl	8002fcc <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d902      	bls.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	74fb      	strb	r3, [r7, #19]
            break;
 80067ba:	e006      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d0ec      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80067ca:	7cfb      	ldrb	r3, [r7, #19]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10b      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067de:	4904      	ldr	r1, [pc, #16]	; (80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067e6:	e009      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067e8:	7cfb      	ldrb	r3, [r7, #19]
 80067ea:	74bb      	strb	r3, [r7, #18]
 80067ec:	e006      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80067ee:	bf00      	nop
 80067f0:	40021000 	.word	0x40021000
 80067f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f8:	7cfb      	ldrb	r3, [r7, #19]
 80067fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067fc:	7c7b      	ldrb	r3, [r7, #17]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d105      	bne.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006802:	4b8d      	ldr	r3, [pc, #564]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006806:	4a8c      	ldr	r2, [pc, #560]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800680c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800681a:	4b87      	ldr	r3, [pc, #540]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800681c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006820:	f023 0203 	bic.w	r2, r3, #3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	4983      	ldr	r1, [pc, #524]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800682a:	4313      	orrs	r3, r2
 800682c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d00a      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800683c:	4b7e      	ldr	r3, [pc, #504]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	f023 020c 	bic.w	r2, r3, #12
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	497b      	ldr	r1, [pc, #492]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800684c:	4313      	orrs	r3, r2
 800684e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800685e:	4b76      	ldr	r3, [pc, #472]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006864:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686c:	4972      	ldr	r1, [pc, #456]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800686e:	4313      	orrs	r3, r2
 8006870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006880:	4b6d      	ldr	r3, [pc, #436]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006886:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	496a      	ldr	r1, [pc, #424]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068a2:	4b65      	ldr	r3, [pc, #404]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b0:	4961      	ldr	r1, [pc, #388]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068c4:	4b5c      	ldr	r3, [pc, #368]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	4959      	ldr	r1, [pc, #356]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068e6:	4b54      	ldr	r3, [pc, #336]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f4:	4950      	ldr	r1, [pc, #320]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006908:	4b4b      	ldr	r3, [pc, #300]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800690a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	4948      	ldr	r1, [pc, #288]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006918:	4313      	orrs	r3, r2
 800691a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800692a:	4b43      	ldr	r3, [pc, #268]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800692c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	493f      	ldr	r1, [pc, #252]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d028      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800694c:	4b3a      	ldr	r3, [pc, #232]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695a:	4937      	ldr	r1, [pc, #220]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800695c:	4313      	orrs	r3, r2
 800695e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800696a:	d106      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800696c:	4b32      	ldr	r3, [pc, #200]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4a31      	ldr	r2, [pc, #196]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006976:	60d3      	str	r3, [r2, #12]
 8006978:	e011      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006982:	d10c      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3304      	adds	r3, #4
 8006988:	2101      	movs	r1, #1
 800698a:	4618      	mov	r0, r3
 800698c:	f000 f8a4 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006994:	7cfb      	ldrb	r3, [r7, #19]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800699a:	7cfb      	ldrb	r3, [r7, #19]
 800699c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d028      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069aa:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b8:	491f      	ldr	r1, [pc, #124]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c8:	d106      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069ca:	4b1b      	ldr	r3, [pc, #108]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	4a1a      	ldr	r2, [pc, #104]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069d4:	60d3      	str	r3, [r2, #12]
 80069d6:	e011      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069e0:	d10c      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3304      	adds	r3, #4
 80069e6:	2101      	movs	r1, #1
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 f875 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 80069ee:	4603      	mov	r3, r0
 80069f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069f2:	7cfb      	ldrb	r3, [r7, #19]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80069f8:	7cfb      	ldrb	r3, [r7, #19]
 80069fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d02b      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a08:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a16:	4908      	ldr	r1, [pc, #32]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a26:	d109      	bne.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a28:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4a02      	ldr	r2, [pc, #8]	; (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a32:	60d3      	str	r3, [r2, #12]
 8006a34:	e014      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006a36:	bf00      	nop
 8006a38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a44:	d10c      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 f843 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 8006a52:	4603      	mov	r3, r0
 8006a54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a56:	7cfb      	ldrb	r3, [r7, #19]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8006a5c:	7cfb      	ldrb	r3, [r7, #19]
 8006a5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01c      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a6c:	4b19      	ldr	r3, [pc, #100]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	4916      	ldr	r1, [pc, #88]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a8a:	d10c      	bne.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3304      	adds	r3, #4
 8006a90:	2102      	movs	r1, #2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 f820 	bl	8006ad8 <RCCEx_PLLSAI1_Config>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a9c:	7cfb      	ldrb	r3, [r7, #19]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00a      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac0:	4904      	ldr	r1, [pc, #16]	; (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006ac8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40021000 	.word	0x40021000

08006ad8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ae6:	4b74      	ldr	r3, [pc, #464]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d018      	beq.n	8006b24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006af2:	4b71      	ldr	r3, [pc, #452]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f003 0203 	and.w	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d10d      	bne.n	8006b1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
       ||
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d009      	beq.n	8006b1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b0a:	4b6b      	ldr	r3, [pc, #428]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	091b      	lsrs	r3, r3, #4
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
       ||
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d047      	beq.n	8006bae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	73fb      	strb	r3, [r7, #15]
 8006b22:	e044      	b.n	8006bae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d018      	beq.n	8006b5e <RCCEx_PLLSAI1_Config+0x86>
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d825      	bhi.n	8006b7c <RCCEx_PLLSAI1_Config+0xa4>
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d002      	beq.n	8006b3a <RCCEx_PLLSAI1_Config+0x62>
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d009      	beq.n	8006b4c <RCCEx_PLLSAI1_Config+0x74>
 8006b38:	e020      	b.n	8006b7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b3a:	4b5f      	ldr	r3, [pc, #380]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d11d      	bne.n	8006b82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b4a:	e01a      	b.n	8006b82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b4c:	4b5a      	ldr	r3, [pc, #360]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d116      	bne.n	8006b86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b5c:	e013      	b.n	8006b86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b5e:	4b56      	ldr	r3, [pc, #344]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10f      	bne.n	8006b8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b6a:	4b53      	ldr	r3, [pc, #332]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b7a:	e006      	b.n	8006b8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b80:	e004      	b.n	8006b8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10d      	bne.n	8006bae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b92:	4b49      	ldr	r3, [pc, #292]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	4943      	ldr	r1, [pc, #268]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d17c      	bne.n	8006cae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bb4:	4b40      	ldr	r3, [pc, #256]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a3f      	ldr	r2, [pc, #252]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc0:	f7fc fa04 	bl	8002fcc <HAL_GetTick>
 8006bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bc6:	e009      	b.n	8006bdc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bc8:	f7fc fa00 	bl	8002fcc <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d902      	bls.n	8006bdc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8006bda:	e005      	b.n	8006be8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bdc:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1ef      	bne.n	8006bc8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d15f      	bne.n	8006cae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d110      	bne.n	8006c16 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bf4:	4b30      	ldr	r3, [pc, #192]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006bfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6892      	ldr	r2, [r2, #8]
 8006c04:	0211      	lsls	r1, r2, #8
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68d2      	ldr	r2, [r2, #12]
 8006c0a:	06d2      	lsls	r2, r2, #27
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	492a      	ldr	r1, [pc, #168]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	610b      	str	r3, [r1, #16]
 8006c14:	e027      	b.n	8006c66 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d112      	bne.n	8006c42 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c1c:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6892      	ldr	r2, [r2, #8]
 8006c2c:	0211      	lsls	r1, r2, #8
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6912      	ldr	r2, [r2, #16]
 8006c32:	0852      	lsrs	r2, r2, #1
 8006c34:	3a01      	subs	r2, #1
 8006c36:	0552      	lsls	r2, r2, #21
 8006c38:	430a      	orrs	r2, r1
 8006c3a:	491f      	ldr	r1, [pc, #124]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	610b      	str	r3, [r1, #16]
 8006c40:	e011      	b.n	8006c66 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c42:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c4a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	6892      	ldr	r2, [r2, #8]
 8006c52:	0211      	lsls	r1, r2, #8
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6952      	ldr	r2, [r2, #20]
 8006c58:	0852      	lsrs	r2, r2, #1
 8006c5a:	3a01      	subs	r2, #1
 8006c5c:	0652      	lsls	r2, r2, #25
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	4915      	ldr	r1, [pc, #84]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c66:	4b14      	ldr	r3, [pc, #80]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a13      	ldr	r2, [pc, #76]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c72:	f7fc f9ab 	bl	8002fcc <HAL_GetTick>
 8006c76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c78:	e009      	b.n	8006c8e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c7a:	f7fc f9a7 	bl	8002fcc <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d902      	bls.n	8006c8e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	73fb      	strb	r3, [r7, #15]
          break;
 8006c8c:	e005      	b.n	8006c9a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c8e:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0ef      	beq.n	8006c7a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d106      	bne.n	8006cae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ca0:	4b05      	ldr	r3, [pc, #20]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	4903      	ldr	r1, [pc, #12]	; (8006cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40021000 	.word	0x40021000

08006cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e049      	b.n	8006d62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fc f800 	bl	8002ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f000 fa7e 	bl	80071fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d001      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e03b      	b.n	8006dfc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a19      	ldr	r2, [pc, #100]	; (8006e08 <HAL_TIM_Base_Start_IT+0x9c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d009      	beq.n	8006dba <HAL_TIM_Base_Start_IT+0x4e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dae:	d004      	beq.n	8006dba <HAL_TIM_Base_Start_IT+0x4e>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a15      	ldr	r2, [pc, #84]	; (8006e0c <HAL_TIM_Base_Start_IT+0xa0>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d115      	bne.n	8006de6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <HAL_TIM_Base_Start_IT+0xa4>)
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b06      	cmp	r3, #6
 8006dca:	d015      	beq.n	8006df8 <HAL_TIM_Base_Start_IT+0x8c>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd2:	d011      	beq.n	8006df8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	e008      	b.n	8006df8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f042 0201 	orr.w	r2, r2, #1
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e000      	b.n	8006dfa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	40012c00 	.word	0x40012c00
 8006e0c:	40014000 	.word	0x40014000
 8006e10:	00010007 	.word	0x00010007

08006e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d020      	beq.n	8006e78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01b      	beq.n	8006e78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0202 	mvn.w	r2, #2
 8006e48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d003      	beq.n	8006e66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f9ad 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006e64:	e005      	b.n	8006e72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f99f 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f000 f9b0 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 0304 	and.w	r3, r3, #4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d020      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01b      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0204 	mvn.w	r2, #4
 8006e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f987 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006eb0:	e005      	b.n	8006ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f979 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f98a 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f003 0308 	and.w	r3, r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d020      	beq.n	8006f10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01b      	beq.n	8006f10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f06f 0208 	mvn.w	r2, #8
 8006ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2204      	movs	r2, #4
 8006ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f961 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006efc:	e005      	b.n	8006f0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f953 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f964 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0310 	and.w	r3, r3, #16
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d020      	beq.n	8006f5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01b      	beq.n	8006f5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0210 	mvn.w	r2, #16
 8006f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2208      	movs	r2, #8
 8006f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f93b 	bl	80071be <HAL_TIM_IC_CaptureCallback>
 8006f48:	e005      	b.n	8006f56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f92d 	bl	80071aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f93e 	bl	80071d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00c      	beq.n	8006f80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d007      	beq.n	8006f80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f06f 0201 	mvn.w	r2, #1
 8006f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fb fd66 	bl	8002a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00c      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fa9a 	bl	80074d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00c      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa92 	bl	80074ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00c      	beq.n	8006fec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d007      	beq.n	8006fec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 f8fd 	bl	80071e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f003 0320 	and.w	r3, r3, #32
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00c      	beq.n	8007010 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0220 	mvn.w	r2, #32
 8007008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fa5a 	bl	80074c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007010:	bf00      	nop
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_TIM_ConfigClockSource+0x1c>
 8007030:	2302      	movs	r3, #2
 8007032:	e0b6      	b.n	80071a2 <HAL_TIM_ConfigClockSource+0x18a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007052:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007056:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800705e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007070:	d03e      	beq.n	80070f0 <HAL_TIM_ConfigClockSource+0xd8>
 8007072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007076:	f200 8087 	bhi.w	8007188 <HAL_TIM_ConfigClockSource+0x170>
 800707a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707e:	f000 8086 	beq.w	800718e <HAL_TIM_ConfigClockSource+0x176>
 8007082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007086:	d87f      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x170>
 8007088:	2b70      	cmp	r3, #112	; 0x70
 800708a:	d01a      	beq.n	80070c2 <HAL_TIM_ConfigClockSource+0xaa>
 800708c:	2b70      	cmp	r3, #112	; 0x70
 800708e:	d87b      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x170>
 8007090:	2b60      	cmp	r3, #96	; 0x60
 8007092:	d050      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x11e>
 8007094:	2b60      	cmp	r3, #96	; 0x60
 8007096:	d877      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x170>
 8007098:	2b50      	cmp	r3, #80	; 0x50
 800709a:	d03c      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0xfe>
 800709c:	2b50      	cmp	r3, #80	; 0x50
 800709e:	d873      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x170>
 80070a0:	2b40      	cmp	r3, #64	; 0x40
 80070a2:	d058      	beq.n	8007156 <HAL_TIM_ConfigClockSource+0x13e>
 80070a4:	2b40      	cmp	r3, #64	; 0x40
 80070a6:	d86f      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x170>
 80070a8:	2b30      	cmp	r3, #48	; 0x30
 80070aa:	d064      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x15e>
 80070ac:	2b30      	cmp	r3, #48	; 0x30
 80070ae:	d86b      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x170>
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d060      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x15e>
 80070b4:	2b20      	cmp	r3, #32
 80070b6:	d867      	bhi.n	8007188 <HAL_TIM_ConfigClockSource+0x170>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d05c      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x15e>
 80070bc:	2b10      	cmp	r3, #16
 80070be:	d05a      	beq.n	8007176 <HAL_TIM_ConfigClockSource+0x15e>
 80070c0:	e062      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070d2:	f000 f971 	bl	80073b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	609a      	str	r2, [r3, #8]
      break;
 80070ee:	e04f      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007100:	f000 f95a 	bl	80073b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689a      	ldr	r2, [r3, #8]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007112:	609a      	str	r2, [r3, #8]
      break;
 8007114:	e03c      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007122:	461a      	mov	r2, r3
 8007124:	f000 f8ce 	bl	80072c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2150      	movs	r1, #80	; 0x50
 800712e:	4618      	mov	r0, r3
 8007130:	f000 f927 	bl	8007382 <TIM_ITRx_SetConfig>
      break;
 8007134:	e02c      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007142:	461a      	mov	r2, r3
 8007144:	f000 f8ed 	bl	8007322 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2160      	movs	r1, #96	; 0x60
 800714e:	4618      	mov	r0, r3
 8007150:	f000 f917 	bl	8007382 <TIM_ITRx_SetConfig>
      break;
 8007154:	e01c      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007162:	461a      	mov	r2, r3
 8007164:	f000 f8ae 	bl	80072c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2140      	movs	r1, #64	; 0x40
 800716e:	4618      	mov	r0, r3
 8007170:	f000 f907 	bl	8007382 <TIM_ITRx_SetConfig>
      break;
 8007174:	e00c      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4619      	mov	r1, r3
 8007180:	4610      	mov	r0, r2
 8007182:	f000 f8fe 	bl	8007382 <TIM_ITRx_SetConfig>
      break;
 8007186:	e003      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	73fb      	strb	r3, [r7, #15]
      break;
 800718c:	e000      	b.n	8007190 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800718e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b083      	sub	sp, #12
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <TIM_Base_SetConfig+0xbc>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d003      	beq.n	800721c <TIM_Base_SetConfig+0x20>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d108      	bne.n	800722e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <TIM_Base_SetConfig+0xbc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00b      	beq.n	800724e <TIM_Base_SetConfig+0x52>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723c:	d007      	beq.n	800724e <TIM_Base_SetConfig+0x52>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a1e      	ldr	r2, [pc, #120]	; (80072bc <TIM_Base_SetConfig+0xc0>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d003      	beq.n	800724e <TIM_Base_SetConfig+0x52>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a1d      	ldr	r2, [pc, #116]	; (80072c0 <TIM_Base_SetConfig+0xc4>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d108      	bne.n	8007260 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a0c      	ldr	r2, [pc, #48]	; (80072b8 <TIM_Base_SetConfig+0xbc>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d007      	beq.n	800729c <TIM_Base_SetConfig+0xa0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a0b      	ldr	r2, [pc, #44]	; (80072bc <TIM_Base_SetConfig+0xc0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d003      	beq.n	800729c <TIM_Base_SetConfig+0xa0>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <TIM_Base_SetConfig+0xc4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d103      	bne.n	80072a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	615a      	str	r2, [r3, #20]
}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40012c00 	.word	0x40012c00
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40014400 	.word	0x40014400

080072c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b087      	sub	sp, #28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	f023 0201 	bic.w	r2, r3, #1
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f023 030a 	bic.w	r3, r3, #10
 8007300:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	621a      	str	r2, [r3, #32]
}
 8007316:	bf00      	nop
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007322:	b480      	push	{r7}
 8007324:	b087      	sub	sp, #28
 8007326:	af00      	add	r7, sp, #0
 8007328:	60f8      	str	r0, [r7, #12]
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	f023 0210 	bic.w	r2, r3, #16
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	699b      	ldr	r3, [r3, #24]
 8007344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800734c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	031b      	lsls	r3, r3, #12
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800735e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	f043 0307 	orr.w	r3, r3, #7
 80073a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	609a      	str	r2, [r3, #8]
}
 80073ac:	bf00      	nop
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	021a      	lsls	r2, r3, #8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	431a      	orrs	r2, r3
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	4313      	orrs	r3, r2
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	609a      	str	r2, [r3, #8]
}
 80073ec:	bf00      	nop
 80073ee:	371c      	adds	r7, #28
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007408:	2b01      	cmp	r3, #1
 800740a:	d101      	bne.n	8007410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800740c:	2302      	movs	r3, #2
 800740e:	e04f      	b.n	80074b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2202      	movs	r2, #2
 800741c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a21      	ldr	r2, [pc, #132]	; (80074bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d108      	bne.n	800744c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007440:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4313      	orrs	r3, r2
 800744a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a14      	ldr	r2, [pc, #80]	; (80074bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d009      	beq.n	8007484 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007478:	d004      	beq.n	8007484 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a10      	ldr	r2, [pc, #64]	; (80074c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d10c      	bne.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800748a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	4313      	orrs	r3, r2
 8007494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	40012c00 	.word	0x40012c00
 80074c0:	40014000 	.word	0x40014000

080074c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e040      	b.n	8007594 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d106      	bne.n	8007528 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fb fc04 	bl	8002d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2224      	movs	r2, #36	; 0x24
 800752c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0201 	bic.w	r2, r2, #1
 800753c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fa82 	bl	8007a50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f825 	bl	800759c <UART_SetConfig>
 8007552:	4603      	mov	r3, r0
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e01b      	b.n	8007594 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800756a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800757a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fb01 	bl	8007b94 <UART_CheckIdleState>
 8007592:	4603      	mov	r3, r0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3708      	adds	r7, #8
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800759c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075a0:	b08a      	sub	sp, #40	; 0x28
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	431a      	orrs	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	4b9e      	ldr	r3, [pc, #632]	; (8007844 <UART_SetConfig+0x2a8>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	6812      	ldr	r2, [r2, #0]
 80075d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075d4:	430b      	orrs	r3, r1
 80075d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68da      	ldr	r2, [r3, #12]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	430a      	orrs	r2, r1
 80075ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a93      	ldr	r2, [pc, #588]	; (8007848 <UART_SetConfig+0x2ac>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d004      	beq.n	8007608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007604:	4313      	orrs	r3, r2
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007618:	430a      	orrs	r2, r1
 800761a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a8a      	ldr	r2, [pc, #552]	; (800784c <UART_SetConfig+0x2b0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d126      	bne.n	8007674 <UART_SetConfig+0xd8>
 8007626:	4b8a      	ldr	r3, [pc, #552]	; (8007850 <UART_SetConfig+0x2b4>)
 8007628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	2b03      	cmp	r3, #3
 8007632:	d81b      	bhi.n	800766c <UART_SetConfig+0xd0>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <UART_SetConfig+0xa0>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765d 	.word	0x0800765d
 8007644:	08007655 	.word	0x08007655
 8007648:	08007665 	.word	0x08007665
 800764c:	2301      	movs	r3, #1
 800764e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007652:	e0ab      	b.n	80077ac <UART_SetConfig+0x210>
 8007654:	2302      	movs	r3, #2
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765a:	e0a7      	b.n	80077ac <UART_SetConfig+0x210>
 800765c:	2304      	movs	r3, #4
 800765e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007662:	e0a3      	b.n	80077ac <UART_SetConfig+0x210>
 8007664:	2308      	movs	r3, #8
 8007666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800766a:	e09f      	b.n	80077ac <UART_SetConfig+0x210>
 800766c:	2310      	movs	r3, #16
 800766e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007672:	e09b      	b.n	80077ac <UART_SetConfig+0x210>
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a76      	ldr	r2, [pc, #472]	; (8007854 <UART_SetConfig+0x2b8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d138      	bne.n	80076f0 <UART_SetConfig+0x154>
 800767e:	4b74      	ldr	r3, [pc, #464]	; (8007850 <UART_SetConfig+0x2b4>)
 8007680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007684:	f003 030c 	and.w	r3, r3, #12
 8007688:	2b0c      	cmp	r3, #12
 800768a:	d82d      	bhi.n	80076e8 <UART_SetConfig+0x14c>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <UART_SetConfig+0xf8>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076c9 	.word	0x080076c9
 8007698:	080076e9 	.word	0x080076e9
 800769c:	080076e9 	.word	0x080076e9
 80076a0:	080076e9 	.word	0x080076e9
 80076a4:	080076d9 	.word	0x080076d9
 80076a8:	080076e9 	.word	0x080076e9
 80076ac:	080076e9 	.word	0x080076e9
 80076b0:	080076e9 	.word	0x080076e9
 80076b4:	080076d1 	.word	0x080076d1
 80076b8:	080076e9 	.word	0x080076e9
 80076bc:	080076e9 	.word	0x080076e9
 80076c0:	080076e9 	.word	0x080076e9
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	2300      	movs	r3, #0
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ce:	e06d      	b.n	80077ac <UART_SetConfig+0x210>
 80076d0:	2302      	movs	r3, #2
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d6:	e069      	b.n	80077ac <UART_SetConfig+0x210>
 80076d8:	2304      	movs	r3, #4
 80076da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076de:	e065      	b.n	80077ac <UART_SetConfig+0x210>
 80076e0:	2308      	movs	r3, #8
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e6:	e061      	b.n	80077ac <UART_SetConfig+0x210>
 80076e8:	2310      	movs	r3, #16
 80076ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ee:	e05d      	b.n	80077ac <UART_SetConfig+0x210>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a58      	ldr	r2, [pc, #352]	; (8007858 <UART_SetConfig+0x2bc>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d125      	bne.n	8007746 <UART_SetConfig+0x1aa>
 80076fa:	4b55      	ldr	r3, [pc, #340]	; (8007850 <UART_SetConfig+0x2b4>)
 80076fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007700:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007704:	2b30      	cmp	r3, #48	; 0x30
 8007706:	d016      	beq.n	8007736 <UART_SetConfig+0x19a>
 8007708:	2b30      	cmp	r3, #48	; 0x30
 800770a:	d818      	bhi.n	800773e <UART_SetConfig+0x1a2>
 800770c:	2b20      	cmp	r3, #32
 800770e:	d00a      	beq.n	8007726 <UART_SetConfig+0x18a>
 8007710:	2b20      	cmp	r3, #32
 8007712:	d814      	bhi.n	800773e <UART_SetConfig+0x1a2>
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <UART_SetConfig+0x182>
 8007718:	2b10      	cmp	r3, #16
 800771a:	d008      	beq.n	800772e <UART_SetConfig+0x192>
 800771c:	e00f      	b.n	800773e <UART_SetConfig+0x1a2>
 800771e:	2300      	movs	r3, #0
 8007720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007724:	e042      	b.n	80077ac <UART_SetConfig+0x210>
 8007726:	2302      	movs	r3, #2
 8007728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800772c:	e03e      	b.n	80077ac <UART_SetConfig+0x210>
 800772e:	2304      	movs	r3, #4
 8007730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007734:	e03a      	b.n	80077ac <UART_SetConfig+0x210>
 8007736:	2308      	movs	r3, #8
 8007738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800773c:	e036      	b.n	80077ac <UART_SetConfig+0x210>
 800773e:	2310      	movs	r3, #16
 8007740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007744:	e032      	b.n	80077ac <UART_SetConfig+0x210>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a3f      	ldr	r2, [pc, #252]	; (8007848 <UART_SetConfig+0x2ac>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d12a      	bne.n	80077a6 <UART_SetConfig+0x20a>
 8007750:	4b3f      	ldr	r3, [pc, #252]	; (8007850 <UART_SetConfig+0x2b4>)
 8007752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007756:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800775a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800775e:	d01a      	beq.n	8007796 <UART_SetConfig+0x1fa>
 8007760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007764:	d81b      	bhi.n	800779e <UART_SetConfig+0x202>
 8007766:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800776a:	d00c      	beq.n	8007786 <UART_SetConfig+0x1ea>
 800776c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007770:	d815      	bhi.n	800779e <UART_SetConfig+0x202>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <UART_SetConfig+0x1e2>
 8007776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777a:	d008      	beq.n	800778e <UART_SetConfig+0x1f2>
 800777c:	e00f      	b.n	800779e <UART_SetConfig+0x202>
 800777e:	2300      	movs	r3, #0
 8007780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007784:	e012      	b.n	80077ac <UART_SetConfig+0x210>
 8007786:	2302      	movs	r3, #2
 8007788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800778c:	e00e      	b.n	80077ac <UART_SetConfig+0x210>
 800778e:	2304      	movs	r3, #4
 8007790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007794:	e00a      	b.n	80077ac <UART_SetConfig+0x210>
 8007796:	2308      	movs	r3, #8
 8007798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800779c:	e006      	b.n	80077ac <UART_SetConfig+0x210>
 800779e:	2310      	movs	r3, #16
 80077a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077a4:	e002      	b.n	80077ac <UART_SetConfig+0x210>
 80077a6:	2310      	movs	r3, #16
 80077a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a25      	ldr	r2, [pc, #148]	; (8007848 <UART_SetConfig+0x2ac>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	f040 808a 	bne.w	80078cc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077bc:	2b08      	cmp	r3, #8
 80077be:	d824      	bhi.n	800780a <UART_SetConfig+0x26e>
 80077c0:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <UART_SetConfig+0x22c>)
 80077c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c6:	bf00      	nop
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	0800780b 	.word	0x0800780b
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	0800780b 	.word	0x0800780b
 80077d8:	080077fb 	.word	0x080077fb
 80077dc:	0800780b 	.word	0x0800780b
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	0800780b 	.word	0x0800780b
 80077e8:	08007803 	.word	0x08007803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ec:	f7fe fe9e 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 80077f0:	61f8      	str	r0, [r7, #28]
        break;
 80077f2:	e010      	b.n	8007816 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077f4:	4b19      	ldr	r3, [pc, #100]	; (800785c <UART_SetConfig+0x2c0>)
 80077f6:	61fb      	str	r3, [r7, #28]
        break;
 80077f8:	e00d      	b.n	8007816 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077fa:	f7fe fdff 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 80077fe:	61f8      	str	r0, [r7, #28]
        break;
 8007800:	e009      	b.n	8007816 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007806:	61fb      	str	r3, [r7, #28]
        break;
 8007808:	e005      	b.n	8007816 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 8109 	beq.w	8007a30 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	685a      	ldr	r2, [r3, #4]
 8007822:	4613      	mov	r3, r2
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	4413      	add	r3, r2
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	429a      	cmp	r2, r3
 800782c:	d305      	bcc.n	800783a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	429a      	cmp	r2, r3
 8007838:	d912      	bls.n	8007860 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007840:	e0f6      	b.n	8007a30 <UART_SetConfig+0x494>
 8007842:	bf00      	nop
 8007844:	efff69f3 	.word	0xefff69f3
 8007848:	40008000 	.word	0x40008000
 800784c:	40013800 	.word	0x40013800
 8007850:	40021000 	.word	0x40021000
 8007854:	40004400 	.word	0x40004400
 8007858:	40004800 	.word	0x40004800
 800785c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	2200      	movs	r2, #0
 8007864:	461c      	mov	r4, r3
 8007866:	4615      	mov	r5, r2
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	f04f 0300 	mov.w	r3, #0
 8007870:	022b      	lsls	r3, r5, #8
 8007872:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007876:	0222      	lsls	r2, r4, #8
 8007878:	68f9      	ldr	r1, [r7, #12]
 800787a:	6849      	ldr	r1, [r1, #4]
 800787c:	0849      	lsrs	r1, r1, #1
 800787e:	2000      	movs	r0, #0
 8007880:	4688      	mov	r8, r1
 8007882:	4681      	mov	r9, r0
 8007884:	eb12 0a08 	adds.w	sl, r2, r8
 8007888:	eb43 0b09 	adc.w	fp, r3, r9
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	607a      	str	r2, [r7, #4]
 8007896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800789a:	4650      	mov	r0, sl
 800789c:	4659      	mov	r1, fp
 800789e:	f7f8 fc95 	bl	80001cc <__aeabi_uldivmod>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4613      	mov	r3, r2
 80078a8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078b0:	d308      	bcc.n	80078c4 <UART_SetConfig+0x328>
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b8:	d204      	bcs.n	80078c4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69ba      	ldr	r2, [r7, #24]
 80078c0:	60da      	str	r2, [r3, #12]
 80078c2:	e0b5      	b.n	8007a30 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078ca:	e0b1      	b.n	8007a30 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078d4:	d15d      	bne.n	8007992 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80078d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078da:	2b08      	cmp	r3, #8
 80078dc:	d827      	bhi.n	800792e <UART_SetConfig+0x392>
 80078de:	a201      	add	r2, pc, #4	; (adr r2, 80078e4 <UART_SetConfig+0x348>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	08007909 	.word	0x08007909
 80078e8:	08007911 	.word	0x08007911
 80078ec:	08007919 	.word	0x08007919
 80078f0:	0800792f 	.word	0x0800792f
 80078f4:	0800791f 	.word	0x0800791f
 80078f8:	0800792f 	.word	0x0800792f
 80078fc:	0800792f 	.word	0x0800792f
 8007900:	0800792f 	.word	0x0800792f
 8007904:	08007927 	.word	0x08007927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007908:	f7fe fe10 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 800790c:	61f8      	str	r0, [r7, #28]
        break;
 800790e:	e014      	b.n	800793a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007910:	f7fe fe22 	bl	8006558 <HAL_RCC_GetPCLK2Freq>
 8007914:	61f8      	str	r0, [r7, #28]
        break;
 8007916:	e010      	b.n	800793a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007918:	4b4c      	ldr	r3, [pc, #304]	; (8007a4c <UART_SetConfig+0x4b0>)
 800791a:	61fb      	str	r3, [r7, #28]
        break;
 800791c:	e00d      	b.n	800793a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800791e:	f7fe fd6d 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 8007922:	61f8      	str	r0, [r7, #28]
        break;
 8007924:	e009      	b.n	800793a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800792a:	61fb      	str	r3, [r7, #28]
        break;
 800792c:	e005      	b.n	800793a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007938:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d077      	beq.n	8007a30 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	005a      	lsls	r2, r3, #1
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	085b      	lsrs	r3, r3, #1
 800794a:	441a      	add	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	fbb2 f3f3 	udiv	r3, r2, r3
 8007954:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	2b0f      	cmp	r3, #15
 800795a:	d916      	bls.n	800798a <UART_SetConfig+0x3ee>
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007962:	d212      	bcs.n	800798a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	b29b      	uxth	r3, r3
 8007968:	f023 030f 	bic.w	r3, r3, #15
 800796c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	085b      	lsrs	r3, r3, #1
 8007972:	b29b      	uxth	r3, r3
 8007974:	f003 0307 	and.w	r3, r3, #7
 8007978:	b29a      	uxth	r2, r3
 800797a:	8afb      	ldrh	r3, [r7, #22]
 800797c:	4313      	orrs	r3, r2
 800797e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	8afa      	ldrh	r2, [r7, #22]
 8007986:	60da      	str	r2, [r3, #12]
 8007988:	e052      	b.n	8007a30 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007990:	e04e      	b.n	8007a30 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007992:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007996:	2b08      	cmp	r3, #8
 8007998:	d827      	bhi.n	80079ea <UART_SetConfig+0x44e>
 800799a:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <UART_SetConfig+0x404>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079c5 	.word	0x080079c5
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079d5 	.word	0x080079d5
 80079ac:	080079eb 	.word	0x080079eb
 80079b0:	080079db 	.word	0x080079db
 80079b4:	080079eb 	.word	0x080079eb
 80079b8:	080079eb 	.word	0x080079eb
 80079bc:	080079eb 	.word	0x080079eb
 80079c0:	080079e3 	.word	0x080079e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c4:	f7fe fdb2 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 80079c8:	61f8      	str	r0, [r7, #28]
        break;
 80079ca:	e014      	b.n	80079f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079cc:	f7fe fdc4 	bl	8006558 <HAL_RCC_GetPCLK2Freq>
 80079d0:	61f8      	str	r0, [r7, #28]
        break;
 80079d2:	e010      	b.n	80079f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079d4:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <UART_SetConfig+0x4b0>)
 80079d6:	61fb      	str	r3, [r7, #28]
        break;
 80079d8:	e00d      	b.n	80079f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079da:	f7fe fd0f 	bl	80063fc <HAL_RCC_GetSysClockFreq>
 80079de:	61f8      	str	r0, [r7, #28]
        break;
 80079e0:	e009      	b.n	80079f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e6:	61fb      	str	r3, [r7, #28]
        break;
 80079e8:	e005      	b.n	80079f6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079f4:	bf00      	nop
    }

    if (pclk != 0U)
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d019      	beq.n	8007a30 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	085a      	lsrs	r2, r3, #1
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	441a      	add	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	2b0f      	cmp	r3, #15
 8007a14:	d909      	bls.n	8007a2a <UART_SetConfig+0x48e>
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1c:	d205      	bcs.n	8007a2a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60da      	str	r2, [r3, #12]
 8007a28:	e002      	b.n	8007a30 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3728      	adds	r7, #40	; 0x28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a4a:	bf00      	nop
 8007a4c:	00f42400 	.word	0x00f42400

08007a50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00a      	beq.n	8007a7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	430a      	orrs	r2, r1
 8007a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	430a      	orrs	r2, r1
 8007a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	f003 0304 	and.w	r3, r3, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00a      	beq.n	8007ae0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01a      	beq.n	8007b66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b4e:	d10a      	bne.n	8007b66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	605a      	str	r2, [r3, #4]
  }
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b098      	sub	sp, #96	; 0x60
 8007b98:	af02      	add	r7, sp, #8
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ba4:	f7fb fa12 	bl	8002fcc <HAL_GetTick>
 8007ba8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d12e      	bne.n	8007c16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f88c 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d021      	beq.n	8007c16 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	e853 3f00 	ldrex	r3, [r3]
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007be6:	653b      	str	r3, [r7, #80]	; 0x50
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	461a      	mov	r2, r3
 8007bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bf8:	e841 2300 	strex	r3, r2, [r1]
 8007bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1e6      	bne.n	8007bd2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2220      	movs	r2, #32
 8007c08:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e062      	b.n	8007cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0304 	and.w	r3, r3, #4
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d149      	bne.n	8007cb8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f856 	bl	8007ce4 <UART_WaitOnFlagUntilTimeout>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d03c      	beq.n	8007cb8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e6      	bne.n	8007c3e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3308      	adds	r3, #8
 8007c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f023 0301 	bic.w	r3, r3, #1
 8007c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c90:	61fa      	str	r2, [r7, #28]
 8007c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	69b9      	ldr	r1, [r7, #24]
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e5      	bne.n	8007c70 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e011      	b.n	8007cdc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3758      	adds	r7, #88	; 0x58
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cf4:	e049      	b.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cfc:	d045      	beq.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cfe:	f7fb f965 	bl	8002fcc <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d302      	bcc.n	8007d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e048      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d031      	beq.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	f003 0308 	and.w	r3, r3, #8
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d110      	bne.n	8007d56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f000 f838 	bl	8007db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2208      	movs	r2, #8
 8007d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e029      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d64:	d111      	bne.n	8007d8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f000 f81e 	bl	8007db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e00f      	b.n	8007daa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69da      	ldr	r2, [r3, #28]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	4013      	ands	r3, r2
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	bf0c      	ite	eq
 8007d9a:	2301      	moveq	r3, #1
 8007d9c:	2300      	movne	r3, #0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	79fb      	ldrb	r3, [r7, #7]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d0a6      	beq.n	8007cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b095      	sub	sp, #84	; 0x54
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e6      	bne.n	8007dba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3308      	adds	r3, #8
 8007df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	e853 3f00 	ldrex	r3, [r3]
 8007dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	f023 0301 	bic.w	r3, r3, #1
 8007e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3308      	adds	r3, #8
 8007e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e5      	bne.n	8007dec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d118      	bne.n	8007e5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	e853 3f00 	ldrex	r3, [r3]
 8007e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	f023 0310 	bic.w	r3, r3, #16
 8007e3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	461a      	mov	r2, r3
 8007e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e46:	61bb      	str	r3, [r7, #24]
 8007e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4a:	6979      	ldr	r1, [r7, #20]
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	e841 2300 	strex	r3, r2, [r1]
 8007e52:	613b      	str	r3, [r7, #16]
   return(result);
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e6      	bne.n	8007e28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e6e:	bf00      	nop
 8007e70:	3754      	adds	r7, #84	; 0x54
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <memset>:
 8007e7a:	4402      	add	r2, r0
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d100      	bne.n	8007e84 <memset+0xa>
 8007e82:	4770      	bx	lr
 8007e84:	f803 1b01 	strb.w	r1, [r3], #1
 8007e88:	e7f9      	b.n	8007e7e <memset+0x4>
	...

08007e8c <__libc_init_array>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4d0d      	ldr	r5, [pc, #52]	; (8007ec4 <__libc_init_array+0x38>)
 8007e90:	4c0d      	ldr	r4, [pc, #52]	; (8007ec8 <__libc_init_array+0x3c>)
 8007e92:	1b64      	subs	r4, r4, r5
 8007e94:	10a4      	asrs	r4, r4, #2
 8007e96:	2600      	movs	r6, #0
 8007e98:	42a6      	cmp	r6, r4
 8007e9a:	d109      	bne.n	8007eb0 <__libc_init_array+0x24>
 8007e9c:	4d0b      	ldr	r5, [pc, #44]	; (8007ecc <__libc_init_array+0x40>)
 8007e9e:	4c0c      	ldr	r4, [pc, #48]	; (8007ed0 <__libc_init_array+0x44>)
 8007ea0:	f000 f818 	bl	8007ed4 <_init>
 8007ea4:	1b64      	subs	r4, r4, r5
 8007ea6:	10a4      	asrs	r4, r4, #2
 8007ea8:	2600      	movs	r6, #0
 8007eaa:	42a6      	cmp	r6, r4
 8007eac:	d105      	bne.n	8007eba <__libc_init_array+0x2e>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb4:	4798      	blx	r3
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7ee      	b.n	8007e98 <__libc_init_array+0xc>
 8007eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ebe:	4798      	blx	r3
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	e7f2      	b.n	8007eaa <__libc_init_array+0x1e>
 8007ec4:	08007f44 	.word	0x08007f44
 8007ec8:	08007f44 	.word	0x08007f44
 8007ecc:	08007f44 	.word	0x08007f44
 8007ed0:	08007f48 	.word	0x08007f48

08007ed4 <_init>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	bf00      	nop
 8007ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eda:	bc08      	pop	{r3}
 8007edc:	469e      	mov	lr, r3
 8007ede:	4770      	bx	lr

08007ee0 <_fini>:
 8007ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee2:	bf00      	nop
 8007ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ee6:	bc08      	pop	{r3}
 8007ee8:	469e      	mov	lr, r3
 8007eea:	4770      	bx	lr
