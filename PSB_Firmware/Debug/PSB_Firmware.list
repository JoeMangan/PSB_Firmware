
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d74  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007f00  08007f00  00017f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f50  08007f50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f58  08007f58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f58  08007f58  00017f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f5c  08007f5c  00017f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000010  08007f6c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08007f6c  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014684  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002501  00000000  00000000  00034703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00036c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f43  00000000  00000000  00037f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bf9  00000000  00000000  00038e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b74  00000000  00000000  0003ba94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d982b  00000000  00000000  00051608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005320  00000000  00000000  0012ae34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00130154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007ee8 	.word	0x08007ee8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08007ee8 	.word	0x08007ee8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b095      	sub	sp, #84	; 0x54
 80004cc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f002 fd09 	bl	8002ee4 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_MspInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f871 	bl	80005b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9ff 	bl	80008d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f9cd 	bl	8000878 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80004de:	f000 f93d 	bl	800075c <MX_I2C3_Init>
  MX_I2C2_Init();
 80004e2:	f000 f8fb 	bl	80006dc <MX_I2C2_Init>
  MX_I2C1_Init();
 80004e6:	f000 f8b9 	bl	800065c <MX_I2C1_Init>
  MX_TIM2_Init();
 80004ea:	f000 f977 	bl	80007dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the system
  i2c_slv_init(); // Initialize the I2C slave module
 80004ee:	f002 f9e1 	bl	80028b4 <i2c_slv_init>

  // A PROPER INITIALISATION MUST GO HERE!!!
  //while(1);


  bool ijc_init_status = ijc_detector_init();
 80004f2:	f000 fed3 	bl	800129c <ijc_detector_init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  bool cea_init_status = cea_detector_init();
 80004fa:	f000 ff23 	bl	8001344 <cea_detector_init>
 80004fe:	4603      	mov	r3, r0
 8000500:	71bb      	strb	r3, [r7, #6]


  if(ijc_init_status == EXIT_FAILURE)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d000      	beq.n	800050a <main+0x42>
  {
	  while(1);
 8000508:	e7fe      	b.n	8000508 <main+0x40>
  }

  if(cea_init_status == EXIT_FAILURE)
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d000      	beq.n	8000512 <main+0x4a>
  {
	  while(1);
 8000510:	e7fe      	b.n	8000510 <main+0x48>
  }

  // Start the timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000512:	4822      	ldr	r0, [pc, #136]	; (800059c <main+0xd4>)
 8000514:	f006 fc26 	bl	8006d64 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ijc_dssd_ramp_loop();
 8000518:	f000 fc26 	bl	8000d68 <ijc_dssd_ramp_loop>
	  cea_dssd_ramp_loop();
 800051c:	f000 fcbe 	bl	8000e9c <cea_dssd_ramp_loop>

	  if (Xfer_Complete ==1)                            // Check for the I2C read complete to have been executed
 8000520:	4b1f      	ldr	r3, [pc, #124]	; (80005a0 <main+0xd8>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d10f      	bne.n	8000548 <main+0x80>
	  {

		  i2c_slv_cmd_rx_tx_handle();
 8000528:	f001 faba 	bl	8001aa0 <i2c_slv_cmd_rx_tx_handle>

		  HAL_Delay(1); 								// Delay for 1 ms
 800052c:	2001      	movs	r0, #1
 800052e:	f002 fd55 	bl	8002fdc <HAL_Delay>
		  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) // Put I2C peripheral in listen mode process
 8000532:	481c      	ldr	r0, [pc, #112]	; (80005a4 <main+0xdc>)
 8000534:	f003 fca8 	bl	8003e88 <HAL_I2C_EnableListen_IT>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <main+0x7a>
		  {
			  Error_Handler();
 800053e:	f002 faab 	bl	8002a98 <Error_Handler>
		  }
		  Xfer_Complete =0;
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <main+0xd8>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
	  }

	  if(ijc_detector.making_safe_inprogress && general_loop_flg == true)
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <main+0xe0>)
 800054a:	7cdb      	ldrb	r3, [r3, #19]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d006      	beq.n	800055e <main+0x96>
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <main+0xe4>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <main+0x96>
	  {
		  // Make the IJC detector safe
		  make_ijc_dssd_safe();
 8000558:	f000 fd3a 	bl	8000fd0 <make_ijc_dssd_safe>
 800055c:	e009      	b.n	8000572 <main+0xaa>
	  }
	  else if (cea_detector.making_safe_inprogress && general_loop_flg == true)
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <main+0xe8>)
 8000560:	7cdb      	ldrb	r3, [r3, #19]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d005      	beq.n	8000572 <main+0xaa>
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <main+0xe4>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <main+0xaa>
	  {
		  make_cea_dssd_safe();
 800056e:	f000 fda5 	bl	80010bc <make_cea_dssd_safe>
	  }

	  if (general_loop_flg == true)
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0xe4>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0ce      	beq.n	8000518 <main+0x50>
	  {
		  run_complete_readout(measurement);
 800057a:	4c0e      	ldr	r4, [pc, #56]	; (80005b4 <main+0xec>)
 800057c:	4668      	mov	r0, sp
 800057e:	f104 0310 	add.w	r3, r4, #16
 8000582:	2248      	movs	r2, #72	; 0x48
 8000584:	4619      	mov	r1, r3
 8000586:	f007 fca1 	bl	8007ecc <memcpy>
 800058a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800058e:	f001 fa47 	bl	8001a20 <run_complete_readout>
		  general_loop_flg = false;
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <main+0xe4>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
	  ijc_dssd_ramp_loop();
 8000598:	e7be      	b.n	8000518 <main+0x50>
 800059a:	bf00      	nop
 800059c:	20000130 	.word	0x20000130
 80005a0:	20000030 	.word	0x20000030
 80005a4:	20000034 	.word	0x20000034
 80005a8:	2000021c 	.word	0x2000021c
 80005ac:	20000277 	.word	0x20000277
 80005b0:	20000230 	.word	0x20000230
 80005b4:	20000278 	.word	0x20000278

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	; 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 fc53 	bl	8007e72 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005de:	f005 f99f 	bl	8005920 <HAL_PWREx_ControlVoltageScaling>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e8:	f002 fa56 	bl	8002a98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f6:	2310      	movs	r3, #16
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fe:	2302      	movs	r3, #2
 8000600:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000606:	230a      	movs	r3, #10
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000612:	2302      	movs	r3, #2
 8000614:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4618      	mov	r0, r3
 800061c:	f005 f9d6 	bl	80059cc <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000626:	f002 fa37 	bl	8002a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2303      	movs	r3, #3
 8000630:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063e:	463b      	mov	r3, r7
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fdd6 	bl	80061f4 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064e:	f002 fa23 	bl	8002a98 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3758      	adds	r7, #88	; 0x58
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000660:	4b1b      	ldr	r3, [pc, #108]	; (80006d0 <MX_I2C1_Init+0x74>)
 8000662:	4a1c      	ldr	r2, [pc, #112]	; (80006d4 <MX_I2C1_Init+0x78>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <MX_I2C1_Init+0x74>)
 8000668:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <MX_I2C1_Init+0x7c>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 50;
 800066c:	4b18      	ldr	r3, [pc, #96]	; (80006d0 <MX_I2C1_Init+0x74>)
 800066e:	2232      	movs	r2, #50	; 0x32
 8000670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000672:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_I2C1_Init+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <MX_I2C1_Init+0x74>)
 8000698:	f002 ffe8 	bl	800366c <HAL_I2C_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006a2:	f002 f9f9 	bl	8002a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	4809      	ldr	r0, [pc, #36]	; (80006d0 <MX_I2C1_Init+0x74>)
 80006aa:	f005 f893 	bl	80057d4 <HAL_I2CEx_ConfigAnalogFilter>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b4:	f002 f9f0 	bl	8002a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_I2C1_Init+0x74>)
 80006bc:	f005 f8d5 	bl	800586a <HAL_I2CEx_ConfigDigitalFilter>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006c6:	f002 f9e7 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000034 	.word	0x20000034
 80006d4:	40005400 	.word	0x40005400
 80006d8:	10909cec 	.word	0x10909cec

080006dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_I2C2_Init+0x74>)
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <MX_I2C2_Init+0x78>)
 80006e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_I2C2_Init+0x74>)
 80006e8:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <MX_I2C2_Init+0x7c>)
 80006ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_I2C2_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f2:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_I2C2_Init+0x74>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_I2C2_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_I2C2_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000704:	4b12      	ldr	r3, [pc, #72]	; (8000750 <MX_I2C2_Init+0x74>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_I2C2_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_I2C2_Init+0x74>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000716:	480e      	ldr	r0, [pc, #56]	; (8000750 <MX_I2C2_Init+0x74>)
 8000718:	f002 ffa8 	bl	800366c <HAL_I2C_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000722:	f002 f9b9 	bl	8002a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	4809      	ldr	r0, [pc, #36]	; (8000750 <MX_I2C2_Init+0x74>)
 800072a:	f005 f853 	bl	80057d4 <HAL_I2CEx_ConfigAnalogFilter>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000734:	f002 f9b0 	bl	8002a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000738:	2100      	movs	r1, #0
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_I2C2_Init+0x74>)
 800073c:	f005 f895 	bl	800586a <HAL_I2CEx_ConfigDigitalFilter>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000746:	f002 f9a7 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000088 	.word	0x20000088
 8000754:	40005800 	.word	0x40005800
 8000758:	10909cec 	.word	0x10909cec

0800075c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000760:	4b1b      	ldr	r3, [pc, #108]	; (80007d0 <MX_I2C3_Init+0x74>)
 8000762:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <MX_I2C3_Init+0x78>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000766:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_I2C3_Init+0x74>)
 8000768:	4a1b      	ldr	r2, [pc, #108]	; (80007d8 <MX_I2C3_Init+0x7c>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800076c:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <MX_I2C3_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_I2C3_Init+0x74>)
 8000774:	2201      	movs	r2, #1
 8000776:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_I2C3_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_I2C3_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C3_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2C3_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C3_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000796:	480e      	ldr	r0, [pc, #56]	; (80007d0 <MX_I2C3_Init+0x74>)
 8000798:	f002 ff68 	bl	800366c <HAL_I2C_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007a2:	f002 f979 	bl	8002a98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007a6:	2100      	movs	r1, #0
 80007a8:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_I2C3_Init+0x74>)
 80007aa:	f005 f813 	bl	80057d4 <HAL_I2CEx_ConfigAnalogFilter>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007b4:	f002 f970 	bl	8002a98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007b8:	2100      	movs	r1, #0
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_I2C3_Init+0x74>)
 80007bc:	f005 f855 	bl	800586a <HAL_I2CEx_ConfigDigitalFilter>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007c6:	f002 f967 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000dc 	.word	0x200000dc
 80007d4:	40005c00 	.word	0x40005c00
 80007d8:	10909cec 	.word	0x10909cec

080007dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_TIM2_Init+0x98>)
 80007fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000800:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_TIM2_Init+0x98>)
 8000804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000808:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_TIM2_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_TIM2_Init+0x98>)
 8000812:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000816:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_TIM2_Init+0x98>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_TIM2_Init+0x98>)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000824:	4813      	ldr	r0, [pc, #76]	; (8000874 <MX_TIM2_Init+0x98>)
 8000826:	f006 fa45 	bl	8006cb4 <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000830:	f002 f932 	bl	8002a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000838:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4619      	mov	r1, r3
 8000840:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_TIM2_Init+0x98>)
 8000842:	f006 fbe5 	bl	8007010 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800084c:	f002 f924 	bl	8002a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_TIM2_Init+0x98>)
 800085e:	f006 fdc7 	bl	80073f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000868:	f002 f916 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000130 	.word	0x20000130

08000878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_USART2_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008bc:	f006 fe1c 	bl	80074f8 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008c6:	f002 f8e7 	bl	8002a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000017c 	.word	0x2000017c
 80008d4:	40004400 	.word	0x40004400

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b46      	ldr	r3, [pc, #280]	; (8000a08 <MX_GPIO_Init+0x130>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a45      	ldr	r2, [pc, #276]	; (8000a08 <MX_GPIO_Init+0x130>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <MX_GPIO_Init+0x130>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <MX_GPIO_Init+0x130>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a3f      	ldr	r2, [pc, #252]	; (8000a08 <MX_GPIO_Init+0x130>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b3d      	ldr	r3, [pc, #244]	; (8000a08 <MX_GPIO_Init+0x130>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <MX_GPIO_Init+0x130>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a39      	ldr	r2, [pc, #228]	; (8000a08 <MX_GPIO_Init+0x130>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <MX_GPIO_Init+0x130>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <MX_GPIO_Init+0x130>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a33      	ldr	r2, [pc, #204]	; (8000a08 <MX_GPIO_Init+0x130>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <MX_GPIO_Init+0x130>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	21b0      	movs	r1, #176	; 0xb0
 8000952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000956:	f002 fe57 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_HT_CEA_DSSD_Pin|LD4_Pin|ENABLE_HT_IJC_DSSD_Pin|ENABLE_2_IJC_Pin
 800095a:	2200      	movs	r2, #0
 800095c:	f243 31e0 	movw	r1, #13280	; 0x33e0
 8000960:	482a      	ldr	r0, [pc, #168]	; (8000a0c <MX_GPIO_Init+0x134>)
 8000962:	f002 fe51 	bl	8003608 <HAL_GPIO_WritePin>
                          |ENABLE_3_CEA_Pin|ENABLE_4_CAEN_Pin|ENABLE_5_UCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIMING_PIN_GPIO_Port, TIMING_PIN_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	4829      	ldr	r0, [pc, #164]	; (8000a10 <MX_GPIO_Init+0x138>)
 800096c:	f002 fe4c 	bl	8003608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000976:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4822      	ldr	r0, [pc, #136]	; (8000a10 <MX_GPIO_Init+0x138>)
 8000988:	f002 fcac 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800098c:	23b0      	movs	r3, #176	; 0xb0
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f002 fc9d 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80009aa:	2340      	movs	r3, #64	; 0x40
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f002 fc90 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_HT_CEA_DSSD_Pin LD4_Pin ENABLE_HT_IJC_DSSD_Pin ENABLE_2_IJC_Pin
                           ENABLE_3_CEA_Pin ENABLE_4_CAEN_Pin ENABLE_5_UCD_Pin */
  GPIO_InitStruct.Pin = ENABLE_HT_CEA_DSSD_Pin|LD4_Pin|ENABLE_HT_IJC_DSSD_Pin|ENABLE_2_IJC_Pin
 80009c4:	f243 33e0 	movw	r3, #13280	; 0x33e0
 80009c8:	617b      	str	r3, [r7, #20]
                          |ENABLE_3_CEA_Pin|ENABLE_4_CAEN_Pin|ENABLE_5_UCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0x134>)
 80009de:	f002 fc81 	bl	80032e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIMING_PIN_Pin */
  GPIO_InitStruct.Pin = TIMING_PIN_Pin;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIMING_PIN_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_GPIO_Init+0x138>)
 80009fa:	f002 fc73 	bl	80032e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000400 	.word	0x48000400
 8000a10:	48000800 	.word	0x48000800

08000a14 <i2c_read>:
}
*/
// ###############################################

HAL_StatusTypeDef i2c_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af02      	add	r7, sp, #8
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	461a      	mov	r2, r3
 8000a20:	460b      	mov	r3, r1
 8000a22:	72fb      	strb	r3, [r7, #11]
 8000a24:	4613      	mov	r3, r2
 8000a26:	813b      	strh	r3, [r7, #8]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(hi2c, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 8000a28:	7afb      	ldrb	r3, [r7, #11]
 8000a2a:	b299      	uxth	r1, r3
 8000a2c:	893b      	ldrh	r3, [r7, #8]
 8000a2e:	220a      	movs	r2, #10
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f002 ffcd 	bl	80039d4 <HAL_I2C_Master_Receive>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <i2c_write>:

HAL_StatusTypeDef i2c_write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	461a      	mov	r2, r3
 8000a54:	460b      	mov	r3, r1
 8000a56:	72fb      	strb	r3, [r7, #11]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	813b      	strh	r3, [r7, #8]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8000a5c:	7afb      	ldrb	r3, [r7, #11]
 8000a5e:	b299      	uxth	r1, r3
 8000a60:	893b      	ldrh	r3, [r7, #8]
 8000a62:	220a      	movs	r2, #10
 8000a64:	9200      	str	r2, [sp, #0]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f002 fe9b 	bl	80037a4 <HAL_I2C_Master_Transmit>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <i2c_write_read>:

HAL_StatusTypeDef i2c_write_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	461a      	mov	r2, r3
 8000a88:	460b      	mov	r3, r1
 8000a8a:	72fb      	strb	r3, [r7, #11]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	813b      	strh	r3, [r7, #8]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8000a94:	2305      	movs	r3, #5
 8000a96:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d802      	bhi.n	8000aa8 <i2c_write_read+0x2c>
 8000aa2:	2064      	movs	r0, #100	; 0x64
 8000aa4:	f002 fa9a 	bl	8002fdc <HAL_Delay>
		status = i2c_write(hi2c, dev_addr, out_ptr, countTX);						// Perform I2C operation
 8000aa8:	893b      	ldrh	r3, [r7, #8]
 8000aaa:	7af9      	ldrb	r1, [r7, #11]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff ffca 	bl	8000a48 <i2c_write>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8000abe:	7d7b      	ldrb	r3, [r7, #21]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d102      	bne.n	8000aca <i2c_write_read+0x4e>
 8000ac4:	7dfb      	ldrb	r3, [r7, #23]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1e8      	bne.n	8000a9c <i2c_write_read+0x20>

	if(status == HAL_ERROR){return(status);}
 8000aca:	7d7b      	ldrb	r3, [r7, #21]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d101      	bne.n	8000ad4 <i2c_write_read+0x58>
 8000ad0:	7d7b      	ldrb	r3, [r7, #21]
 8000ad2:	e01a      	b.n	8000b0a <i2c_write_read+0x8e>

	HAL_Delay(5);
 8000ad4:	2005      	movs	r0, #5
 8000ad6:	f002 fa81 	bl	8002fdc <HAL_Delay>

	do
	{
		// Read operation
		status =  i2c_read(hi2c, dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 8000ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000adc:	7af9      	ldrb	r1, [r7, #11]
 8000ade:	6a3a      	ldr	r2, [r7, #32]
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff ff97 	bl	8000a14 <i2c_read>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8000aea:	7dbb      	ldrb	r3, [r7, #22]
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d802      	bhi.n	8000af6 <i2c_write_read+0x7a>
 8000af0:	2064      	movs	r0, #100	; 0x64
 8000af2:	f002 fa73 	bl	8002fdc <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8000af6:	7dbb      	ldrb	r3, [r7, #22]
 8000af8:	3b01      	subs	r3, #1
 8000afa:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8000afc:	7d7b      	ldrb	r3, [r7, #21]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d102      	bne.n	8000b08 <i2c_write_read+0x8c>
 8000b02:	7dbb      	ldrb	r3, [r7, #22]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1e8      	bne.n	8000ada <i2c_write_read+0x5e>

	return(status);
 8000b08:	7d7b      	ldrb	r3, [r7, #21]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <dac7574_write>:
//        Chips and Devs
//************************************


bool dac7574_write(uint8_t channel, uint16_t data_bytes)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	460a      	mov	r2, r1
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t tx_data[3] = {0x00, 0x00, 0x00};
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <dac7574_write+0x5c>)
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	6812      	ldr	r2, [r2, #0]
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	8019      	strh	r1, [r3, #0]
 8000b30:	3302      	adds	r3, #2
 8000b32:	0c12      	lsrs	r2, r2, #16
 8000b34:	701a      	strb	r2, [r3, #0]

	// Split the data_bytes into two bytes and add the command to the TX data
	tx_data[0] = channel;
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data_bytes >> 8) & 0xFF;
 8000b3a:	88bb      	ldrh	r3, [r7, #4]
 8000b3c:	0a1b      	lsrs	r3, r3, #8
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data_bytes) & 0xFF;
 8000b44:	88bb      	ldrh	r3, [r7, #4]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	73bb      	strb	r3, [r7, #14]

	status = ucd_i2c_write(ADDR_UCD_DAC, &tx_data[0], 3);
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2203      	movs	r2, #3
 8000b50:	4619      	mov	r1, r3
 8000b52:	209e      	movs	r0, #158	; 0x9e
 8000b54:	f000 fb88 	bl	8001268 <ucd_i2c_write>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]

	return(status);
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	bf14      	ite	ne
 8000b62:	2301      	movne	r3, #1
 8000b64:	2300      	moveq	r3, #0
 8000b66:	b2db      	uxtb	r3, r3
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	08007f00 	.word	0x08007f00

08000b74 <max6911_read>:


uint16_t max6911_read(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t cmd_msb, uint8_t cmd_lsb)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	461a      	mov	r2, r3
 8000b82:	4603      	mov	r3, r0
 8000b84:	70fb      	strb	r3, [r7, #3]
 8000b86:	460b      	mov	r3, r1
 8000b88:	70bb      	strb	r3, [r7, #2]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	707b      	strb	r3, [r7, #1]
	uint16_t temp_data = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	81fb      	strh	r3, [r7, #14]
	uint8_t rx_data[2] = {0x00, 0x00};
 8000b92:	2300      	movs	r3, #0
 8000b94:	81bb      	strh	r3, [r7, #12]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000b96:	2300      	movs	r3, #0
 8000b98:	813b      	strh	r3, [r7, #8]

	// Init the device ctrl reg1
	max6911_set_ctrl1_register(INIT_WITH_CURRENT_GAIN_8);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 f864 	bl	8000c68 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000ba0:	230a      	movs	r3, #10
 8000ba2:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000ba4:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <max6911_read+0xec>)
 8000ba6:	7b1b      	ldrb	r3, [r3, #12]
 8000ba8:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000baa:	f107 0208 	add.w	r2, r7, #8
 8000bae:	78f9      	ldrb	r1, [r7, #3]
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ff48 	bl	8000a48 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <max6911_read+0xec>)
 8000bbe:	7b5b      	ldrb	r3, [r3, #13]
 8000bc0:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000bc2:	f107 0208 	add.w	r2, r7, #8
 8000bc6:	78f9      	ldrb	r1, [r7, #3]
 8000bc8:	2302      	movs	r3, #2
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff3c 	bl	8000a48 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the device for normal fast read operation
	max6911_set_ctrl1_register(FASTREAD_NORMAL_OPERATION);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 f849 	bl	8000c68 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000bd6:	230a      	movs	r3, #10
 8000bd8:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <max6911_read+0xec>)
 8000bdc:	7b1b      	ldrb	r3, [r3, #12]
 8000bde:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000be0:	f107 0208 	add.w	r2, r7, #8
 8000be4:	78f9      	ldrb	r1, [r7, #3]
 8000be6:	2302      	movs	r3, #2
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff2d 	bl	8000a48 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000bee:	230b      	movs	r3, #11
 8000bf0:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <max6911_read+0xec>)
 8000bf4:	7b5b      	ldrb	r3, [r3, #13]
 8000bf6:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000bf8:	f107 0208 	add.w	r2, r7, #8
 8000bfc:	78f9      	ldrb	r1, [r7, #3]
 8000bfe:	2302      	movs	r3, #2
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff21 	bl	8000a48 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the read for MSB and LSB
	status = i2c_write_read(hi2c, device_addr, &cmd_msb, 1, &rx_data[0], 1);
 8000c06:	1cba      	adds	r2, r7, #2
 8000c08:	78f9      	ldrb	r1, [r7, #3]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2301      	movs	r3, #1
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ff30 	bl	8000a7c <i2c_write_read>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <max6911_read+0xf0>)
 8000c22:	701a      	strb	r2, [r3, #0]
	status = i2c_write_read(hi2c, device_addr, &cmd_lsb, 1, &rx_data[1], 1);
 8000c24:	1c7a      	adds	r2, r7, #1
 8000c26:	78f9      	ldrb	r1, [r7, #3]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	3301      	adds	r3, #1
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ff20 	bl	8000a7c <i2c_write_read>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <max6911_read+0xf0>)
 8000c42:	701a      	strb	r2, [r3, #0]

	temp_data = (rx_data[0]<<8) | (rx_data[1]);
 8000c44:	7b3b      	ldrb	r3, [r7, #12]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	7b7b      	ldrb	r3, [r7, #13]
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	81fb      	strh	r3, [r7, #14]
	return(temp_data);
 8000c54:	89fb      	ldrh	r3, [r7, #14]

}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000258 	.word	0x20000258
 8000c64:	20000204 	.word	0x20000204

08000c68 <max6911_set_ctrl1_register>:


void max6911_set_ctrl1_register(_max6911_ctrl selector)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]

	switch(selector)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <max6911_set_ctrl1_register+0x16>
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d020      	beq.n	8000cbe <max6911_set_ctrl1_register+0x56>
			break;
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		default:
			break;
 8000c7c:	e03e      	b.n	8000cfc <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000c7e:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000c80:	7b13      	ldrb	r3, [r2, #12]
 8000c82:	f36f 03c3 	bfc	r3, #3, #1
 8000c86:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000c88:	4a1f      	ldr	r2, [pc, #124]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000c8a:	7b13      	ldrb	r3, [r2, #12]
 8000c8c:	f36f 1304 	bfc	r3, #4, #1
 8000c90:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000c92:	4a1d      	ldr	r2, [pc, #116]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000c94:	7b13      	ldrb	r3, [r2, #12]
 8000c96:	f36f 1347 	bfc	r3, #5, #3
 8000c9a:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_A_GAIN_8x_DEC;
 8000c9c:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000c9e:	7b13      	ldrb	r3, [r2, #12]
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	f361 0302 	bfi	r3, r1, #0, #3
 8000ca6:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000ca8:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000caa:	7b53      	ldrb	r3, [r2, #13]
 8000cac:	f36f 03c3 	bfc	r3, #3, #1
 8000cb0:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000cb4:	7b53      	ldrb	r3, [r2, #13]
 8000cb6:	f36f 0382 	bfc	r3, #2, #1
 8000cba:	7353      	strb	r3, [r2, #13]
			break;
 8000cbc:	e01e      	b.n	8000cfc <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000cc0:	7b13      	ldrb	r3, [r2, #12]
 8000cc2:	f36f 03c3 	bfc	r3, #3, #1
 8000cc6:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000cc8:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000cca:	7b13      	ldrb	r3, [r2, #12]
 8000ccc:	f36f 1304 	bfc	r3, #4, #1
 8000cd0:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000cd2:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000cd4:	7b13      	ldrb	r3, [r2, #12]
 8000cd6:	f36f 1347 	bfc	r3, #5, #3
 8000cda:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_FAST_READ_DEC;
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000cde:	7b13      	ldrb	r3, [r2, #12]
 8000ce0:	f043 0307 	orr.w	r3, r3, #7
 8000ce4:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000ce8:	7b53      	ldrb	r3, [r2, #13]
 8000cea:	f36f 03c3 	bfc	r3, #3, #1
 8000cee:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000cf0:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <max6911_set_ctrl1_register+0xa0>)
 8000cf2:	7b53      	ldrb	r3, [r2, #13]
 8000cf4:	f36f 0382 	bfc	r3, #2, #1
 8000cf8:	7353      	strb	r3, [r2, #13]
			break;
 8000cfa:	bf00      	nop
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	20000258 	.word	0x20000258

08000d0c <ht_cea_enable_set>:
//            HV
//************************************

// Board enable functions
void ht_cea_enable_set(bool gpio_state)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_CEA_DSSD_GPIO_Port, ENABLE_HT_CEA_DSSD_Pin, gpio_state);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <ht_cea_enable_set+0x28>)
 8000d20:	f002 fc72 	bl	8003608 <HAL_GPIO_WritePin>
	cea_detector.hv_enable_state  = gpio_state;
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <ht_cea_enable_set+0x2c>)
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	7493      	strb	r3, [r2, #18]

}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	48000400 	.word	0x48000400
 8000d38:	20000230 	.word	0x20000230

08000d3c <ht_ijc_enable_set>:
	cea_detector.hv_enable_state = HAL_GPIO_ReadPin(ENABLE_HT_CEA_DSSD_GPIO_Port, ENABLE_HT_CEA_DSSD_Pin);
	return(cea_detector.hv_enable_state);
}

void ht_ijc_enable_set(bool gpio_state)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_IJC_DSSD_GPIO_Port, ENABLE_HT_IJC_DSSD_Pin, gpio_state);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <ht_ijc_enable_set+0x24>)
 8000d4e:	f002 fc5b 	bl	8003608 <HAL_GPIO_WritePin>
	ijc_detector.hv_enable_state  = gpio_state;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <ht_ijc_enable_set+0x28>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	7493      	strb	r3, [r2, #18]

}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	48000400 	.word	0x48000400
 8000d64:	2000021c 	.word	0x2000021c

08000d68 <ijc_dssd_ramp_loop>:
	return(ijc_detector.hv_enable_state);
}


void ijc_dssd_ramp_loop(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the IJC voltage

	uint16_t max6911_measured_voltage = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000d72:	2300      	movs	r3, #0
 8000d74:	803b      	strh	r3, [r7, #0]

	if(ijc_detector.ramp_flag == true && ijc_detector.hv_loop_enable == true)
 8000d76:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8082 	beq.w	8000e84 <ijc_dssd_ramp_loop+0x11c>
 8000d80:	4b42      	ldr	r3, [pc, #264]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000d82:	785b      	ldrb	r3, [r3, #1]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d07d      	beq.n	8000e84 <ijc_dssd_ramp_loop+0x11c>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000d88:	2303      	movs	r3, #3
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	21e4      	movs	r1, #228	; 0xe4
 8000d8e:	4840      	ldr	r0, [pc, #256]	; (8000e90 <ijc_dssd_ramp_loop+0x128>)
 8000d90:	f7ff fef0 	bl	8000b74 <max6911_read>
 8000d94:	4603      	mov	r3, r0
 8000d96:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	80fb      	strh	r3, [r7, #6]

		// Get the current digipot value
		status = ijc_i2c_read(ADDR_IJC_DIGIPOT, &ijc_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000d9e:	2201      	movs	r2, #1
 8000da0:	493c      	ldr	r1, [pc, #240]	; (8000e94 <ijc_dssd_ramp_loop+0x12c>)
 8000da2:	2058      	movs	r0, #88	; 0x58
 8000da4:	f000 fbb2 	bl	800150c <ijc_i2c_read>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <ijc_dssd_ramp_loop+0x130>)
 8000dae:	701a      	strb	r2, [r3, #0]

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((ijc_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (ijc_detector.hv_targate_value - ijc_detector.hv_lower_deadband)))
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000db2:	891b      	ldrh	r3, [r3, #8]
 8000db4:	88fa      	ldrh	r2, [r7, #6]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d220      	bcs.n	8000dfc <ijc_dssd_ramp_loop+0x94>
 8000dba:	88fa      	ldrh	r2, [r7, #6]
 8000dbc:	4b33      	ldr	r3, [pc, #204]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000dbe:	891b      	ldrh	r3, [r3, #8]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000dc4:	795b      	ldrb	r3, [r3, #5]
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	da17      	bge.n	8000dfc <ijc_dssd_ramp_loop+0x94>
		{
			// If the target is greater than the current value, increment the digipot value
			if (ijc_detector.hv_digipot_value <= 149)
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000dce:	799b      	ldrb	r3, [r3, #6]
 8000dd0:	2b95      	cmp	r3, #149	; 0x95
 8000dd2:	d854      	bhi.n	8000e7e <ijc_dssd_ramp_loop+0x116>
			{
				ijc_detector.hv_digipot_value ++;
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000dd6:	799b      	ldrb	r3, [r3, #6]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000dde:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000de0:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000de2:	799b      	ldrb	r3, [r3, #6]
 8000de4:	707b      	strb	r3, [r7, #1]
				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000de6:	4639      	mov	r1, r7
 8000de8:	2301      	movs	r3, #1
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <ijc_dssd_ramp_loop+0x12c>)
 8000dee:	2202      	movs	r2, #2
 8000df0:	2058      	movs	r0, #88	; 0x58
 8000df2:	f000 fba5 	bl	8001540 <ijc_i2c_write_read>
 8000df6:	4603      	mov	r3, r0
 8000df8:	717b      	strb	r3, [r7, #5]
			if (ijc_detector.hv_digipot_value <= 149)
 8000dfa:	e040      	b.n	8000e7e <ijc_dssd_ramp_loop+0x116>
			}
		}
		else if ((ijc_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (ijc_detector.hv_targate_value + ijc_detector.hv_upper_deadband)))
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000dfe:	891b      	ldrh	r3, [r3, #8]
 8000e00:	88fa      	ldrh	r2, [r7, #6]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d920      	bls.n	8000e48 <ijc_dssd_ramp_loop+0xe0>
 8000e06:	88fa      	ldrh	r2, [r7, #6]
 8000e08:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e0a:	891b      	ldrh	r3, [r3, #8]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e10:	791b      	ldrb	r3, [r3, #4]
 8000e12:	440b      	add	r3, r1
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dd17      	ble.n	8000e48 <ijc_dssd_ramp_loop+0xe0>
		{
			if (ijc_detector.hv_digipot_value >= 1)
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e1a:	799b      	ldrb	r3, [r3, #6]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02e      	beq.n	8000e7e <ijc_dssd_ramp_loop+0x116>
			{
				// If the target is less than the current value
				ijc_detector.hv_digipot_value --;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e22:	799b      	ldrb	r3, [r3, #6]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e2a:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e2e:	799b      	ldrb	r3, [r3, #6]
 8000e30:	707b      	strb	r3, [r7, #1]

				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000e32:	4639      	mov	r1, r7
 8000e34:	2301      	movs	r3, #1
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <ijc_dssd_ramp_loop+0x12c>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	2058      	movs	r0, #88	; 0x58
 8000e3e:	f000 fb7f 	bl	8001540 <ijc_i2c_write_read>
 8000e42:	4603      	mov	r3, r0
 8000e44:	713b      	strb	r3, [r7, #4]
			if (ijc_detector.hv_digipot_value >= 1)
 8000e46:	e01a      	b.n	8000e7e <ijc_dssd_ramp_loop+0x116>
			}
		}
		else if((ijc_detector.hv_targate_value == 0) && (ijc_detector.hv_digipot_value > 0))
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e4a:	891b      	ldrh	r3, [r3, #8]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d116      	bne.n	8000e7e <ijc_dssd_ramp_loop+0x116>
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e52:	799b      	ldrb	r3, [r3, #6]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d012      	beq.n	8000e7e <ijc_dssd_ramp_loop+0x116>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			ijc_detector.hv_digipot_value --;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e5a:	799b      	ldrb	r3, [r3, #6]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e62:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = ijc_detector.hv_digipot_value;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e66:	799b      	ldrb	r3, [r3, #6]
 8000e68:	707b      	strb	r3, [r7, #1]

			HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000e6a:	4639      	mov	r1, r7
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <ijc_dssd_ramp_loop+0x12c>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	2058      	movs	r0, #88	; 0x58
 8000e76:	f000 fb63 	bl	8001540 <ijc_i2c_write_read>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	70fb      	strb	r3, [r7, #3]
		}
		ijc_detector.ramp_flag  = false;
 8000e7e:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <ijc_dssd_ramp_loop+0x124>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
	}
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2000021c 	.word	0x2000021c
 8000e90:	20000088 	.word	0x20000088
 8000e94:	20000222 	.word	0x20000222
 8000e98:	20000204 	.word	0x20000204

08000e9c <cea_dssd_ramp_loop>:




void cea_dssd_ramp_loop(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the CEA voltage

	uint16_t max6911_measured_voltage = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	803b      	strh	r3, [r7, #0]

	if(cea_detector.ramp_flag == true && cea_detector.hv_loop_enable == true)
 8000eaa:	4b45      	ldr	r3, [pc, #276]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 8082 	beq.w	8000fb8 <cea_dssd_ramp_loop+0x11c>
 8000eb4:	4b42      	ldr	r3, [pc, #264]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d07d      	beq.n	8000fb8 <cea_dssd_ramp_loop+0x11c>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	21ee      	movs	r1, #238	; 0xee
 8000ec2:	4840      	ldr	r0, [pc, #256]	; (8000fc4 <cea_dssd_ramp_loop+0x128>)
 8000ec4:	f7ff fe56 	bl	8000b74 <max6911_read>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	091b      	lsrs	r3, r3, #4
 8000ed0:	80fb      	strh	r3, [r7, #6]

		//HAL_Delay(100);

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	493c      	ldr	r1, [pc, #240]	; (8000fc8 <cea_dssd_ramp_loop+0x12c>)
 8000ed6:	2058      	movs	r0, #88	; 0x58
 8000ed8:	f000 fc0c 	bl	80016f4 <cea_i2c_read>
 8000edc:	4603      	mov	r3, r0
 8000ede:	461a      	mov	r2, r3
 8000ee0:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <cea_dssd_ramp_loop+0x130>)
 8000ee2:	701a      	strb	r2, [r3, #0]

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((cea_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (cea_detector.hv_targate_value - cea_detector.hv_lower_deadband)))
 8000ee4:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000ee6:	891b      	ldrh	r3, [r3, #8]
 8000ee8:	88fa      	ldrh	r2, [r7, #6]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d220      	bcs.n	8000f30 <cea_dssd_ramp_loop+0x94>
 8000eee:	88fa      	ldrh	r2, [r7, #6]
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000ef2:	891b      	ldrh	r3, [r3, #8]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000ef8:	795b      	ldrb	r3, [r3, #5]
 8000efa:	1acb      	subs	r3, r1, r3
 8000efc:	429a      	cmp	r2, r3
 8000efe:	da17      	bge.n	8000f30 <cea_dssd_ramp_loop+0x94>
		{
			// If the target is greater than the current value, increment the digipot value
			if (cea_detector.hv_digipot_value <= 149)
 8000f00:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f02:	799b      	ldrb	r3, [r3, #6]
 8000f04:	2b95      	cmp	r3, #149	; 0x95
 8000f06:	d854      	bhi.n	8000fb2 <cea_dssd_ramp_loop+0x116>
			{
				cea_detector.hv_digipot_value ++;
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f0a:	799b      	ldrb	r3, [r3, #6]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b2b      	ldr	r3, [pc, #172]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f12:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f16:	799b      	ldrb	r3, [r3, #6]
 8000f18:	707b      	strb	r3, [r7, #1]
				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <cea_dssd_ramp_loop+0x12c>)
 8000f22:	2202      	movs	r2, #2
 8000f24:	2058      	movs	r0, #88	; 0x58
 8000f26:	f000 fc15 	bl	8001754 <cea_i2c_write_read>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	717b      	strb	r3, [r7, #5]
			if (cea_detector.hv_digipot_value <= 149)
 8000f2e:	e040      	b.n	8000fb2 <cea_dssd_ramp_loop+0x116>
			}
		}
		else if ((cea_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (cea_detector.hv_targate_value + cea_detector.hv_upper_deadband)))
 8000f30:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f32:	891b      	ldrh	r3, [r3, #8]
 8000f34:	88fa      	ldrh	r2, [r7, #6]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d920      	bls.n	8000f7c <cea_dssd_ramp_loop+0xe0>
 8000f3a:	88fa      	ldrh	r2, [r7, #6]
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f3e:	891b      	ldrh	r3, [r3, #8]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f44:	791b      	ldrb	r3, [r3, #4]
 8000f46:	440b      	add	r3, r1
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	dd17      	ble.n	8000f7c <cea_dssd_ramp_loop+0xe0>
		{
			if (cea_detector.hv_digipot_value >= 1)
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f4e:	799b      	ldrb	r3, [r3, #6]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d02e      	beq.n	8000fb2 <cea_dssd_ramp_loop+0x116>
			{
				// If the target is less than the current value
				cea_detector.hv_digipot_value --;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f56:	799b      	ldrb	r3, [r3, #6]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f5e:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f62:	799b      	ldrb	r3, [r3, #6]
 8000f64:	707b      	strb	r3, [r7, #1]

				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000f66:	4639      	mov	r1, r7
 8000f68:	2301      	movs	r3, #1
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	4b16      	ldr	r3, [pc, #88]	; (8000fc8 <cea_dssd_ramp_loop+0x12c>)
 8000f6e:	2202      	movs	r2, #2
 8000f70:	2058      	movs	r0, #88	; 0x58
 8000f72:	f000 fbef 	bl	8001754 <cea_i2c_write_read>
 8000f76:	4603      	mov	r3, r0
 8000f78:	713b      	strb	r3, [r7, #4]
			if (cea_detector.hv_digipot_value >= 1)
 8000f7a:	e01a      	b.n	8000fb2 <cea_dssd_ramp_loop+0x116>
			}
		}
		else if((cea_detector.hv_targate_value == 0) && (cea_detector.hv_digipot_value > 0))
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f7e:	891b      	ldrh	r3, [r3, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d116      	bne.n	8000fb2 <cea_dssd_ramp_loop+0x116>
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f86:	799b      	ldrb	r3, [r3, #6]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d012      	beq.n	8000fb2 <cea_dssd_ramp_loop+0x116>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			cea_detector.hv_digipot_value --;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f8e:	799b      	ldrb	r3, [r3, #6]
 8000f90:	3b01      	subs	r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f96:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = cea_detector.hv_digipot_value;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	707b      	strb	r3, [r7, #1]

			HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <cea_dssd_ramp_loop+0x12c>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	2058      	movs	r0, #88	; 0x58
 8000faa:	f000 fbd3 	bl	8001754 <cea_i2c_write_read>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	70fb      	strb	r3, [r7, #3]
		}
		cea_detector.ramp_flag  = false;
 8000fb2:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <cea_dssd_ramp_loop+0x124>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
	}
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000230 	.word	0x20000230
 8000fc4:	200000dc 	.word	0x200000dc
 8000fc8:	20000236 	.word	0x20000236
 8000fcc:	20000204 	.word	0x20000204

08000fd0 <make_ijc_dssd_safe>:



bool make_ijc_dssd_safe(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	// To make the IJCLab DSSD detector safe

	bool status = EXIT_SUCCESS;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	bool board_state;

	// Get the state of the IJCLab detector board
	board_state = ijc_board_enable_get();
 8000fda:	f000 fa65 	bl	80014a8 <ijc_board_enable_get>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71bb      	strb	r3, [r7, #6]

	if(board_state == true)
 8000fe2:	79bb      	ldrb	r3, [r7, #6]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d04e      	beq.n	8001086 <make_ijc_dssd_safe+0xb6>
	{
		// If the detector board is enabled - Make it safe from here by ramping down if necessary

		// Get the current digipot value
		status = ijc_i2c_read(ADDR_IJC_DIGIPOT, &ijc_detector.hv_digipot_value, 1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4931      	ldr	r1, [pc, #196]	; (80010b0 <make_ijc_dssd_safe+0xe0>)
 8000fec:	2058      	movs	r0, #88	; 0x58
 8000fee:	f000 fa8d 	bl	800150c <ijc_i2c_read>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	bf14      	ite	ne
 8000ff8:	2301      	movne	r3, #1
 8000ffa:	2300      	moveq	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]

		if(status == EXIT_SUCCESS && ijc_detector.hv_digipot_value > 0)
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f083 0301 	eor.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d010      	beq.n	800102c <make_ijc_dssd_safe+0x5c>
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 800100c:	799b      	ldrb	r3, [r3, #6]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00c      	beq.n	800102c <make_ijc_dssd_safe+0x5c>
		{
			// Begin ramp down
			// ----------------------------------------------------------------------------
			// Must enable the ramp enable flag
			ijc_detector.hv_loop_enable = true;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 8001014:	2201      	movs	r2, #1
 8001016:	705a      	strb	r2, [r3, #1]

			// Must set the target value to 0
			ijc_detector.hv_targate_value = 0;
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 800101a:	2200      	movs	r2, #0
 800101c:	811a      	strh	r2, [r3, #8]

			// Set the flag to indicate that the IJCLab board is currently being made safe
			ijc_detector.making_safe_inprogress = true;
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 8001020:	2201      	movs	r2, #1
 8001022:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 8001024:	2301      	movs	r3, #1
 8001026:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	e03d      	b.n	80010a8 <make_ijc_dssd_safe+0xd8>
		}
		else if (status == EXIT_SUCCESS && ijc_detector.hv_digipot_value == 0)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f083 0301 	eor.w	r3, r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d015      	beq.n	8001064 <make_ijc_dssd_safe+0x94>
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 800103a:	799b      	ldrb	r3, [r3, #6]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d111      	bne.n	8001064 <make_ijc_dssd_safe+0x94>
		{
			// Board is enabled but the digipot is in the 0 position
			ijc_detector.making_safe_inprogress = false;
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 8001042:	2200      	movs	r2, #0
 8001044:	74da      	strb	r2, [r3, #19]
			// The digipot is in a 0 state - the make safe was successful

			// Disable HV and disable the board
			ht_ijc_enable_set(GPIO_PIN_RESET);          							     // Reset the IJC HV SUPPLY
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fe78 	bl	8000d3c <ht_ijc_enable_set>
			HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, GPIO_PIN_RESET); // Disable the IJC Board
 800104c:	2200      	movs	r2, #0
 800104e:	2140      	movs	r1, #64	; 0x40
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <make_ijc_dssd_safe+0xe8>)
 8001052:	f002 fad9 	bl	8003608 <HAL_GPIO_WritePin>
			ijc_detector.board_enable_state = 0;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 8001058:	2200      	movs	r2, #0
 800105a:	821a      	strh	r2, [r3, #16]

			status = EXIT_SUCCESS;
 800105c:	2300      	movs	r3, #0
 800105e:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	e021      	b.n	80010a8 <make_ijc_dssd_safe+0xd8>
		}
		else if (status == EXIT_FAILURE)
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d006      	beq.n	8001078 <make_ijc_dssd_safe+0xa8>
		{
			// Failed to make communication to the digipot device
			ijc_detector.making_safe_inprogress = false;
 800106a:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 800106c:	2200      	movs	r2, #0
 800106e:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 8001070:	2301      	movs	r3, #1
 8001072:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	e017      	b.n	80010a8 <make_ijc_dssd_safe+0xd8>
		}
		else
		{
			ijc_detector.making_safe_inprogress = false;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 800107a:	2200      	movs	r2, #0
 800107c:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 800107e:	2301      	movs	r3, #1
 8001080:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	e010      	b.n	80010a8 <make_ijc_dssd_safe+0xd8>
		}
	}
	else
	{
		ijc_detector.making_safe_inprogress = false;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 8001088:	2200      	movs	r2, #0
 800108a:	74da      	strb	r2, [r3, #19]
		ht_ijc_enable_set(GPIO_PIN_RESET);          							     // Reset the IJC HV SUPPLY
 800108c:	2000      	movs	r0, #0
 800108e:	f7ff fe55 	bl	8000d3c <ht_ijc_enable_set>
		HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, GPIO_PIN_RESET); // Disable the IJC Board
 8001092:	2200      	movs	r2, #0
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	4808      	ldr	r0, [pc, #32]	; (80010b8 <make_ijc_dssd_safe+0xe8>)
 8001098:	f002 fab6 	bl	8003608 <HAL_GPIO_WritePin>
		ijc_detector.board_enable_state = 0;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <make_ijc_dssd_safe+0xe4>)
 800109e:	2200      	movs	r2, #0
 80010a0:	821a      	strh	r2, [r3, #16]
		// If board is disabled the board is already in a safe state
		status = EXIT_SUCCESS;
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
		return(status);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
	}

}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000222 	.word	0x20000222
 80010b4:	2000021c 	.word	0x2000021c
 80010b8:	48000400 	.word	0x48000400

080010bc <make_cea_dssd_safe>:



bool make_cea_dssd_safe(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
	// To make the CEA DSSD detector safe

	bool status = EXIT_SUCCESS;
 80010c2:	2300      	movs	r3, #0
 80010c4:	71fb      	strb	r3, [r7, #7]
	bool board_state;

	// Get the state of the CEA detector board
	board_state = cea_board_enable_get();
 80010c6:	f000 fae3 	bl	8001690 <cea_board_enable_get>
 80010ca:	4603      	mov	r3, r0
 80010cc:	71bb      	strb	r3, [r7, #6]

	if(board_state == true)
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d04e      	beq.n	8001172 <make_cea_dssd_safe+0xb6>
	{
		// If the detector board is enabled - Make it safe from here by ramping down if necessary

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1);
 80010d4:	2201      	movs	r2, #1
 80010d6:	4931      	ldr	r1, [pc, #196]	; (800119c <make_cea_dssd_safe+0xe0>)
 80010d8:	2058      	movs	r0, #88	; 0x58
 80010da:	f000 fb0b 	bl	80016f4 <cea_i2c_read>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	bf14      	ite	ne
 80010e4:	2301      	movne	r3, #1
 80010e6:	2300      	moveq	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]

		if(status == EXIT_SUCCESS && cea_detector.hv_digipot_value > 0)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f083 0301 	eor.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d010      	beq.n	8001118 <make_cea_dssd_safe+0x5c>
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 80010f8:	799b      	ldrb	r3, [r3, #6]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00c      	beq.n	8001118 <make_cea_dssd_safe+0x5c>
		{
			// Begin ramp down
			// ----------------------------------------------------------------------------
			// Must enable the ramp enable flag
			cea_detector.hv_loop_enable = true;
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 8001100:	2201      	movs	r2, #1
 8001102:	705a      	strb	r2, [r3, #1]

			// Must set the target value to 0
			cea_detector.hv_targate_value = 0;
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 8001106:	2200      	movs	r2, #0
 8001108:	811a      	strh	r2, [r3, #8]

			// Set the flag to indicate that the CEA board is currently being made safe
			cea_detector.making_safe_inprogress = true;
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 800110c:	2201      	movs	r2, #1
 800110e:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 8001110:	2301      	movs	r3, #1
 8001112:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	e03d      	b.n	8001194 <make_cea_dssd_safe+0xd8>
		}
		else if (status == EXIT_SUCCESS && cea_detector.hv_digipot_value == 0)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f083 0301 	eor.w	r3, r3, #1
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d015      	beq.n	8001150 <make_cea_dssd_safe+0x94>
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 8001126:	799b      	ldrb	r3, [r3, #6]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d111      	bne.n	8001150 <make_cea_dssd_safe+0x94>
		{
			// Board is enabled but the digipot is in the 0 position
			cea_detector.making_safe_inprogress = false;
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 800112e:	2200      	movs	r2, #0
 8001130:	74da      	strb	r2, [r3, #19]
			// The digipot is in a 0 state - the make safe was successful

			// Disable HV and disable the board
			ht_cea_enable_set(GPIO_PIN_RESET);          							     // Reset the CEA HV SUPPLY
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff fdea 	bl	8000d0c <ht_cea_enable_set>
			HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, GPIO_PIN_RESET); // Disable the CEA Board
 8001138:	2200      	movs	r2, #0
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	4819      	ldr	r0, [pc, #100]	; (80011a4 <make_cea_dssd_safe+0xe8>)
 800113e:	f002 fa63 	bl	8003608 <HAL_GPIO_WritePin>
			cea_detector.board_enable_state = 0;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 8001144:	2200      	movs	r2, #0
 8001146:	821a      	strh	r2, [r3, #16]

			status = EXIT_SUCCESS;
 8001148:	2300      	movs	r3, #0
 800114a:	71fb      	strb	r3, [r7, #7]
			return(status);
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	e021      	b.n	8001194 <make_cea_dssd_safe+0xd8>
		}
		else if (status == EXIT_FAILURE)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <make_cea_dssd_safe+0xa8>
		{
			// Failed to make communication to the digipot device
			cea_detector.making_safe_inprogress = false;
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 8001158:	2200      	movs	r2, #0
 800115a:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 800115c:	2301      	movs	r3, #1
 800115e:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	e017      	b.n	8001194 <make_cea_dssd_safe+0xd8>
		}
		else
		{
			cea_detector.making_safe_inprogress = false;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 800116a:	2301      	movs	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
			return(status);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	e010      	b.n	8001194 <make_cea_dssd_safe+0xd8>
		}
	}
	else
	{
		cea_detector.making_safe_inprogress = false;
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 8001174:	2200      	movs	r2, #0
 8001176:	74da      	strb	r2, [r3, #19]
		// If board is disabled the board is already in a safe state
		ht_cea_enable_set(GPIO_PIN_RESET);          							     // Reset the CEA HV SUPPLY
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fdc7 	bl	8000d0c <ht_cea_enable_set>
		HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, GPIO_PIN_RESET); // Disable the CEA Board
 800117e:	2200      	movs	r2, #0
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	4808      	ldr	r0, [pc, #32]	; (80011a4 <make_cea_dssd_safe+0xe8>)
 8001184:	f002 fa40 	bl	8003608 <HAL_GPIO_WritePin>
		cea_detector.board_enable_state = 0;							 // Set the board state in the struct
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <make_cea_dssd_safe+0xe4>)
 800118a:	2200      	movs	r2, #0
 800118c:	821a      	strh	r2, [r3, #16]

		status = EXIT_SUCCESS;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
		return(status);
 8001192:	79fb      	ldrb	r3, [r7, #7]
	}

}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000236 	.word	0x20000236
 80011a0:	20000230 	.word	0x20000230
 80011a4:	48000400 	.word	0x48000400

080011a8 <caen_board_enable_set>:
//            CAEN PSB
//************************************

// Board enable functions
void caen_board_enable_set(bool gpio_state)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_4_CAEN_GPIO_Port, ENABLE_4_CAEN_Pin, gpio_state);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	461a      	mov	r2, r3
 80011b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <caen_board_enable_set+0x28>)
 80011bc:	f002 fa24 	bl	8003608 <HAL_GPIO_WritePin>
	caen_detector.board_enable_state = gpio_state;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <caen_board_enable_set+0x2c>)
 80011c6:	821a      	strh	r2, [r3, #16]

}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	48000400 	.word	0x48000400
 80011d4:	20000244 	.word	0x20000244

080011d8 <caen_board_enable_get>:

bool caen_board_enable_get(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	caen_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_4_CAEN_GPIO_Port, ENABLE_4_CAEN_Pin);
 80011dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <caen_board_enable_get+0x28>)
 80011e2:	f002 f9f9 	bl	80035d8 <HAL_GPIO_ReadPin>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <caen_board_enable_get+0x2c>)
 80011ec:	821a      	strh	r2, [r3, #16]
	return(caen_detector.board_enable_state);
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <caen_board_enable_get+0x2c>)
 80011f0:	8a1b      	ldrh	r3, [r3, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	48000400 	.word	0x48000400
 8001204:	20000244 	.word	0x20000244

08001208 <ucd_board_enable_set>:
//            UCD PSB
//************************************

// Board enable functions
void ucd_board_enable_set(bool gpio_state)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin, gpio_state);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	461a      	mov	r2, r3
 8001216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <ucd_board_enable_set+0x28>)
 800121c:	f002 f9f4 	bl	8003608 <HAL_GPIO_WritePin>
	ucd_detector.board_enable_state = gpio_state;
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <ucd_board_enable_set+0x2c>)
 8001226:	821a      	strh	r2, [r3, #16]

}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	48000400 	.word	0x48000400
 8001234:	20000208 	.word	0x20000208

08001238 <ucd_board_enable_get>:

bool ucd_board_enable_get(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	ucd_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin);
 800123c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <ucd_board_enable_get+0x28>)
 8001242:	f002 f9c9 	bl	80035d8 <HAL_GPIO_ReadPin>
 8001246:	4603      	mov	r3, r0
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <ucd_board_enable_get+0x2c>)
 800124c:	821a      	strh	r2, [r3, #16]
	return(ucd_detector.board_enable_state);
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <ucd_board_enable_get+0x2c>)
 8001250:	8a1b      	ldrh	r3, [r3, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
}
 800125c:	4618      	mov	r0, r3
 800125e:	bd80      	pop	{r7, pc}
 8001260:	48000400 	.word	0x48000400
 8001264:	20000208 	.word	0x20000208

08001268 <ucd_i2c_write>:

HAL_StatusTypeDef ucd_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af02      	add	r7, sp, #8
 800126e:	4603      	mov	r3, r0
 8001270:	6039      	str	r1, [r7, #0]
 8001272:	71fb      	strb	r3, [r7, #7]
 8001274:	4613      	mov	r3, r2
 8001276:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c3, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	b299      	uxth	r1, r3
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	220a      	movs	r2, #10
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <ucd_i2c_write+0x30>)
 8001286:	f002 fa8d 	bl	80037a4 <HAL_I2C_Master_Transmit>
 800128a:	4603      	mov	r3, r0
 800128c:	73fb      	strb	r3, [r7, #15]
	return(ret);
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000dc 	.word	0x200000dc

0800129c <ijc_detector_init>:
//            IJC PSB
//************************************

// Init function
bool ijc_detector_init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af02      	add	r7, sp, #8

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]

	// Init the IJC lab detector
	ijc_detector.ramp_flag            = 0;
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <ijc_detector_init+0xa0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
	ijc_detector.hv_max_digipot_value = IJC_MAX_DIGIPOT_VALUE - 1;
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <ijc_detector_init+0xa0>)
 80012ae:	2295      	movs	r2, #149	; 0x95
 80012b0:	709a      	strb	r2, [r3, #2]
	ijc_detector.hv_min_digipot_value = IJC_MIN_DIGIPOT_VALUE - 1;
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <ijc_detector_init+0xa0>)
 80012b4:	22ff      	movs	r2, #255	; 0xff
 80012b6:	70da      	strb	r2, [r3, #3]
	ijc_detector.hv_lower_deadband 	  = IJC_LOWER_DEADBAND;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <ijc_detector_init+0xa0>)
 80012ba:	222b      	movs	r2, #43	; 0x2b
 80012bc:	715a      	strb	r2, [r3, #5]
	ijc_detector.hv_upper_deadband 	  = IJC_UPPER_DEADBAND;
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <ijc_detector_init+0xa0>)
 80012c0:	222b      	movs	r2, #43	; 0x2b
 80012c2:	711a      	strb	r2, [r3, #4]
	ijc_detector.hv_digipot_value 	  = 0;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <ijc_detector_init+0xa0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	719a      	strb	r2, [r3, #6]
	ijc_detector.hv_targate_value 	  = 0;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <ijc_detector_init+0xa0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	811a      	strh	r2, [r3, #8]
	ijc_detector.board_enable_state   = 0;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <ijc_detector_init+0xa0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	821a      	strh	r2, [r3, #16]
	ijc_detector.hv_enable_state	  = 0;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <ijc_detector_init+0xa0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	749a      	strb	r2, [r3, #18]
	ijc_detector.hv_loop_enable 	  = 1;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <ijc_detector_init+0xa0>)
 80012de:	2201      	movs	r2, #1
 80012e0:	705a      	strb	r2, [r3, #1]
	ijc_detector.making_safe_inprogress = 0;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <ijc_detector_init+0xa0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	74da      	strb	r2, [r3, #19]

	// Configure the board enable state
	ht_ijc_enable_set(GPIO_PIN_RESET);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fd27 	bl	8000d3c <ht_ijc_enable_set>
	ijc_board_enable_set(GPIO_PIN_SET);
 80012ee:	2001      	movs	r0, #1
 80012f0:	f000 f87c 	bl	80013ec <ijc_board_enable_set>

	HAL_Delay(100);
 80012f4:	2064      	movs	r0, #100	; 0x64
 80012f6:	f001 fe71 	bl	8002fdc <HAL_Delay>

	// Reset the digipot value to 0
	uint8_t command[2] = {0x00, 0x00};
 80012fa:	2300      	movs	r3, #0
 80012fc:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef digipot_set_stataus = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &command[0], 2, &ijc_detector.hv_digipot_value, 1);
 80012fe:	1d39      	adds	r1, r7, #4
 8001300:	2301      	movs	r3, #1
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <ijc_detector_init+0xa4>)
 8001306:	2202      	movs	r2, #2
 8001308:	2058      	movs	r0, #88	; 0x58
 800130a:	f000 f919 	bl	8001540 <ijc_i2c_write_read>
 800130e:	4603      	mov	r3, r0
 8001310:	71bb      	strb	r3, [r7, #6]


	if (ijc_detector.hv_digipot_value != 0 || digipot_set_stataus == HAL_ERROR)
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <ijc_detector_init+0xa0>)
 8001314:	799b      	ldrb	r3, [r3, #6]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d102      	bne.n	8001320 <ijc_detector_init+0x84>
 800131a:	79bb      	ldrb	r3, [r7, #6]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d106      	bne.n	800132e <ijc_detector_init+0x92>
	{
		// Disable the loop enable flag
		ijc_detector.hv_loop_enable = false;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <ijc_detector_init+0xa0>)
 8001322:	2200      	movs	r2, #0
 8001324:	705a      	strb	r2, [r3, #1]
		status = EXIT_FAILURE;
 8001326:	2301      	movs	r3, #1
 8001328:	71fb      	strb	r3, [r7, #7]
		return(status);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	e002      	b.n	8001334 <ijc_detector_init+0x98>
	}
	else
	{
		status = EXIT_SUCCESS;
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]
		return(status);
 8001332:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000021c 	.word	0x2000021c
 8001340:	20000222 	.word	0x20000222

08001344 <cea_detector_init>:


bool cea_detector_init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 800134a:	2300      	movs	r3, #0
 800134c:	71fb      	strb	r3, [r7, #7]

	// Init the CEA lab detector
	cea_detector.ramp_flag            = 0;
 800134e:	4b25      	ldr	r3, [pc, #148]	; (80013e4 <cea_detector_init+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
	cea_detector.hv_max_digipot_value = CEA_MAX_DIGIPOT_VALUE - 1;
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <cea_detector_init+0xa0>)
 8001356:	22c7      	movs	r2, #199	; 0xc7
 8001358:	709a      	strb	r2, [r3, #2]
	cea_detector.hv_min_digipot_value = CEA_MIN_DIGIPOT_VALUE - 1;
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <cea_detector_init+0xa0>)
 800135c:	22ff      	movs	r2, #255	; 0xff
 800135e:	70da      	strb	r2, [r3, #3]
	cea_detector.hv_lower_deadband 	  = CEA_LOWER_DEADBAND;
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <cea_detector_init+0xa0>)
 8001362:	222b      	movs	r2, #43	; 0x2b
 8001364:	715a      	strb	r2, [r3, #5]
	cea_detector.hv_upper_deadband 	  = CEA_UPPER_DEADBAND;
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <cea_detector_init+0xa0>)
 8001368:	222b      	movs	r2, #43	; 0x2b
 800136a:	711a      	strb	r2, [r3, #4]
	cea_detector.hv_digipot_value 	  = 0;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <cea_detector_init+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	719a      	strb	r2, [r3, #6]
	cea_detector.hv_targate_value 	  = 0;
 8001372:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <cea_detector_init+0xa0>)
 8001374:	2200      	movs	r2, #0
 8001376:	811a      	strh	r2, [r3, #8]
	cea_detector.board_enable_state   = 0;
 8001378:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <cea_detector_init+0xa0>)
 800137a:	2200      	movs	r2, #0
 800137c:	821a      	strh	r2, [r3, #16]
	cea_detector.hv_enable_state	  = 0;
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <cea_detector_init+0xa0>)
 8001380:	2200      	movs	r2, #0
 8001382:	749a      	strb	r2, [r3, #18]
	cea_detector.hv_loop_enable 	  = 1;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <cea_detector_init+0xa0>)
 8001386:	2201      	movs	r2, #1
 8001388:	705a      	strb	r2, [r3, #1]
	cea_detector.making_safe_inprogress = 0;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <cea_detector_init+0xa0>)
 800138c:	2200      	movs	r2, #0
 800138e:	74da      	strb	r2, [r3, #19]

	// Configure the board enable state
	ht_cea_enable_set(GPIO_PIN_RESET);
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fcbb 	bl	8000d0c <ht_cea_enable_set>
	cea_board_enable_set(GPIO_PIN_SET);
 8001396:	2001      	movs	r0, #1
 8001398:	f000 f91c 	bl	80015d4 <cea_board_enable_set>

	HAL_Delay(100);
 800139c:	2064      	movs	r0, #100	; 0x64
 800139e:	f001 fe1d 	bl	8002fdc <HAL_Delay>

	// Reset the digipot value to 0
	uint8_t command[2] = {0x00, 0x00};
 80013a2:	2300      	movs	r3, #0
 80013a4:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef digipot_set_stataus = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &command[0], 2, &cea_detector.hv_digipot_value, 1);
 80013a6:	1d39      	adds	r1, r7, #4
 80013a8:	2301      	movs	r3, #1
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <cea_detector_init+0xa4>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	2058      	movs	r0, #88	; 0x58
 80013b2:	f000 f9cf 	bl	8001754 <cea_i2c_write_read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	71bb      	strb	r3, [r7, #6]


	if (cea_detector.hv_digipot_value != 0 || digipot_set_stataus == HAL_ERROR)
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <cea_detector_init+0xa0>)
 80013bc:	799b      	ldrb	r3, [r3, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <cea_detector_init+0x84>
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <cea_detector_init+0x92>
	{
		// Disable the loop enable flag
		cea_detector.hv_loop_enable = false;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <cea_detector_init+0xa0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	705a      	strb	r2, [r3, #1]
		status = EXIT_FAILURE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	71fb      	strb	r3, [r7, #7]
		return(status);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	e002      	b.n	80013dc <cea_detector_init+0x98>
	}
	else
	{
		status = EXIT_SUCCESS;
 80013d6:	2300      	movs	r3, #0
 80013d8:	71fb      	strb	r3, [r7, #7]
		return(status);
 80013da:	79fb      	ldrb	r3, [r7, #7]
	}
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000230 	.word	0x20000230
 80013e8:	20000236 	.word	0x20000236

080013ec <ijc_board_enable_set>:


// Board enable functions
bool ijc_board_enable_set(bool gpio_state)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_digipot_status;
	uint8_t tx_data[2] = {0x00, 0x00};
 80013f6:	2300      	movs	r3, #0
 80013f8:	81bb      	strh	r3, [r7, #12]

	bool ijc_board_state = ijc_board_enable_get();								 // Get the current state of the board
 80013fa:	f000 f855 	bl	80014a8 <ijc_board_enable_get>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
	if (gpio_state == ENABLE && ijc_board_state == DISABLED) 					 // If the board is disabled
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d036      	beq.n	8001476 <ijc_board_enable_set+0x8a>
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	f083 0301 	eor.w	r3, r3, #1
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b00      	cmp	r3, #0
 8001412:	d030      	beq.n	8001476 <ijc_board_enable_set+0x8a>
	{
		ht_ijc_enable_set(GPIO_PIN_RESET);          							 // Reset the ijc HV SUPPLY
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fc91 	bl	8000d3c <ht_ijc_enable_set>
		HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, gpio_state); // Enable the ijc Board
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	461a      	mov	r2, r3
 800141e:	2140      	movs	r1, #64	; 0x40
 8001420:	481e      	ldr	r0, [pc, #120]	; (800149c <ijc_board_enable_set+0xb0>)
 8001422:	f002 f8f1 	bl	8003608 <HAL_GPIO_WritePin>
		ijc_detector.board_enable_state = gpio_state;							 // Set the board state in the struct
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <ijc_board_enable_set+0xb4>)
 800142c:	821a      	strh	r2, [r3, #16]

		// Set the digipot to 0
		ijc_detector.hv_digipot_value = 0;
 800142e:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <ijc_board_enable_set+0xb4>)
 8001430:	2200      	movs	r2, #0
 8001432:	719a      	strb	r2, [r3, #6]
		i2c_digipot_status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8001434:	f107 010c 	add.w	r1, r7, #12
 8001438:	2301      	movs	r3, #1
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <ijc_board_enable_set+0xb8>)
 800143e:	2202      	movs	r2, #2
 8001440:	2058      	movs	r0, #88	; 0x58
 8001442:	f000 f87d 	bl	8001540 <ijc_i2c_write_read>
 8001446:	4603      	mov	r3, r0
 8001448:	73bb      	strb	r3, [r7, #14]

		if(i2c_digipot_status == HAL_OK && ijc_detector.hv_digipot_value == 0)
 800144a:	7bbb      	ldrb	r3, [r7, #14]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d108      	bne.n	8001462 <ijc_board_enable_set+0x76>
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <ijc_board_enable_set+0xb4>)
 8001452:	799b      	ldrb	r3, [r3, #6]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d104      	bne.n	8001462 <ijc_board_enable_set+0x76>
		{
			// Enable the HV Supply
			ht_ijc_enable_set(GPIO_PIN_SET);          							 // Reset the IJC HV SUPPLY
 8001458:	2001      	movs	r0, #1
 800145a:	f7ff fc6f 	bl	8000d3c <ht_ijc_enable_set>
			return(EXIT_SUCCESS);
 800145e:	2300      	movs	r3, #0
 8001460:	e018      	b.n	8001494 <ijc_board_enable_set+0xa8>
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, 0);  // Enable the ijc Board
 8001462:	2200      	movs	r2, #0
 8001464:	2140      	movs	r1, #64	; 0x40
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <ijc_board_enable_set+0xb0>)
 8001468:	f002 f8ce 	bl	8003608 <HAL_GPIO_WritePin>
			ijc_detector.board_enable_state = 0;							 // Set the board state in the struct
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <ijc_board_enable_set+0xb4>)
 800146e:	2200      	movs	r2, #0
 8001470:	821a      	strh	r2, [r3, #16]

			// Return fail
			return(EXIT_FAILURE);
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <ijc_board_enable_set+0xa8>
		}
	}
	else if (gpio_state == DISABLE && ijc_board_state == ENABLED) 				 // If the board is enabled
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f083 0301 	eor.w	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d007      	beq.n	8001492 <ijc_board_enable_set+0xa6>
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d004      	beq.n	8001492 <ijc_board_enable_set+0xa6>
	{
		// Enable the ijc loop and set the target value to 0
		// Have a flag in the main loop then disable the HV and disable the board once the digipot is at 0
		ijc_detector.making_safe_inprogress = true;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <ijc_board_enable_set+0xb4>)
 800148a:	2201      	movs	r2, #1
 800148c:	74da      	strb	r2, [r3, #19]
		return(EXIT_SUCCESS);
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <ijc_board_enable_set+0xa8>
	}
	else
	{
		return(EXIT_SUCCESS);
 8001492:	2300      	movs	r3, #0
	}
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	48000400 	.word	0x48000400
 80014a0:	2000021c 	.word	0x2000021c
 80014a4:	20000222 	.word	0x20000222

080014a8 <ijc_board_enable_get>:


bool ijc_board_enable_get(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	ijc_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin);
 80014ac:	2140      	movs	r1, #64	; 0x40
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <ijc_board_enable_get+0x28>)
 80014b0:	f002 f892 	bl	80035d8 <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <ijc_board_enable_get+0x2c>)
 80014ba:	821a      	strh	r2, [r3, #16]
	return(ijc_detector.board_enable_state);
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <ijc_board_enable_get+0x2c>)
 80014be:	8a1b      	ldrh	r3, [r3, #16]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	48000400 	.word	0x48000400
 80014d4:	2000021c 	.word	0x2000021c

080014d8 <ijc_i2c_write>:

HAL_StatusTypeDef ijc_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	4613      	mov	r3, r2
 80014e6:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c2, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	b299      	uxth	r1, r3
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	220a      	movs	r2, #10
 80014f0:	9200      	str	r2, [sp, #0]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <ijc_i2c_write+0x30>)
 80014f6:	f002 f955 	bl	80037a4 <HAL_I2C_Master_Transmit>
 80014fa:	4603      	mov	r3, r0
 80014fc:	73fb      	strb	r3, [r7, #15]
	return(ret);
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000088 	.word	0x20000088

0800150c <ijc_i2c_read>:

HAL_StatusTypeDef ijc_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af02      	add	r7, sp, #8
 8001512:	4603      	mov	r3, r0
 8001514:	6039      	str	r1, [r7, #0]
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c2, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	b299      	uxth	r1, r3
 8001520:	88bb      	ldrh	r3, [r7, #4]
 8001522:	220a      	movs	r2, #10
 8001524:	9200      	str	r2, [sp, #0]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <ijc_i2c_read+0x30>)
 800152a:	f002 fa53 	bl	80039d4 <HAL_I2C_Master_Receive>
 800152e:	4603      	mov	r3, r0
 8001530:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8001532:	7bfb      	ldrb	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000088 	.word	0x20000088

08001540 <ijc_i2c_write_read>:
}
*/
// ###############################################

HAL_StatusTypeDef ijc_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4603      	mov	r3, r0
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	4613      	mov	r3, r2
 8001550:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8001556:	2305      	movs	r3, #5
 8001558:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 800155a:	2305      	movs	r3, #5
 800155c:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	2b04      	cmp	r3, #4
 8001562:	d802      	bhi.n	800156a <ijc_i2c_write_read+0x2a>
 8001564:	2064      	movs	r0, #100	; 0x64
 8001566:	f001 fd39 	bl	8002fdc <HAL_Delay>
		status = ijc_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 800156a:	89ba      	ldrh	r2, [r7, #12]
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ffb1 	bl	80014d8 <ijc_i2c_write>
 8001576:	4603      	mov	r3, r0
 8001578:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	3b01      	subs	r3, #1
 800157e:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8001580:	7d7b      	ldrb	r3, [r7, #21]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d102      	bne.n	800158c <ijc_i2c_write_read+0x4c>
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1e8      	bne.n	800155e <ijc_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 800158c:	7d7b      	ldrb	r3, [r7, #21]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <ijc_i2c_write_read+0x56>
 8001592:	7d7b      	ldrb	r3, [r7, #21]
 8001594:	e01a      	b.n	80015cc <ijc_i2c_write_read+0x8c>

	HAL_Delay(5);
 8001596:	2005      	movs	r0, #5
 8001598:	f001 fd20 	bl	8002fdc <HAL_Delay>

	do
	{
		// Read operation
		status =  ijc_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 800159c:	8c3a      	ldrh	r2, [r7, #32]
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ffb2 	bl	800150c <ijc_i2c_read>
 80015a8:	4603      	mov	r3, r0
 80015aa:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 80015ac:	7dbb      	ldrb	r3, [r7, #22]
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d802      	bhi.n	80015b8 <ijc_i2c_write_read+0x78>
 80015b2:	2064      	movs	r0, #100	; 0x64
 80015b4:	f001 fd12 	bl	8002fdc <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 80015b8:	7dbb      	ldrb	r3, [r7, #22]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 80015be:	7d7b      	ldrb	r3, [r7, #21]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d102      	bne.n	80015ca <ijc_i2c_write_read+0x8a>
 80015c4:	7dbb      	ldrb	r3, [r7, #22]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1e8      	bne.n	800159c <ijc_i2c_write_read+0x5c>

	return(status);
 80015ca:	7d7b      	ldrb	r3, [r7, #21]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <cea_board_enable_set>:
//            CEA PSB
//************************************

// Board enable functions
bool cea_board_enable_set(bool gpio_state)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af02      	add	r7, sp, #8
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_digipot_status;
	uint8_t tx_data[2] = {0x00, 0x00};
 80015de:	2300      	movs	r3, #0
 80015e0:	81bb      	strh	r3, [r7, #12]

	bool cea_board_state = cea_board_enable_get();								 // Get the current state of the board
 80015e2:	f000 f855 	bl	8001690 <cea_board_enable_get>
 80015e6:	4603      	mov	r3, r0
 80015e8:	73fb      	strb	r3, [r7, #15]
	if (gpio_state == ENABLE && cea_board_state == DISABLED) 					 // If the board is disabled
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d036      	beq.n	800165e <cea_board_enable_set+0x8a>
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	f083 0301 	eor.w	r3, r3, #1
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d030      	beq.n	800165e <cea_board_enable_set+0x8a>
	{
		ht_cea_enable_set(GPIO_PIN_RESET);          							 // Reset the CEA HV SUPPLY
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fb85 	bl	8000d0c <ht_cea_enable_set>
		HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, gpio_state); // Enable the CEA Board
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	461a      	mov	r2, r3
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	481e      	ldr	r0, [pc, #120]	; (8001684 <cea_board_enable_set+0xb0>)
 800160a:	f001 fffd 	bl	8003608 <HAL_GPIO_WritePin>
		cea_detector.board_enable_state = gpio_state;							 // Set the board state in the struct
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <cea_board_enable_set+0xb4>)
 8001614:	821a      	strh	r2, [r3, #16]

		// Set the digipot to 0
		cea_detector.hv_digipot_value = 0;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <cea_board_enable_set+0xb4>)
 8001618:	2200      	movs	r2, #0
 800161a:	719a      	strb	r2, [r3, #6]
		i2c_digipot_status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 800161c:	f107 010c 	add.w	r1, r7, #12
 8001620:	2301      	movs	r3, #1
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <cea_board_enable_set+0xb8>)
 8001626:	2202      	movs	r2, #2
 8001628:	2058      	movs	r0, #88	; 0x58
 800162a:	f000 f893 	bl	8001754 <cea_i2c_write_read>
 800162e:	4603      	mov	r3, r0
 8001630:	73bb      	strb	r3, [r7, #14]

		if(i2c_digipot_status == HAL_OK && cea_detector.hv_digipot_value == 0)
 8001632:	7bbb      	ldrb	r3, [r7, #14]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d108      	bne.n	800164a <cea_board_enable_set+0x76>
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <cea_board_enable_set+0xb4>)
 800163a:	799b      	ldrb	r3, [r3, #6]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d104      	bne.n	800164a <cea_board_enable_set+0x76>
		{
			// Enable the HV Supply
			ht_cea_enable_set(GPIO_PIN_SET);          							 // Reset the CEA HV SUPPLY
 8001640:	2001      	movs	r0, #1
 8001642:	f7ff fb63 	bl	8000d0c <ht_cea_enable_set>
			return(EXIT_SUCCESS);
 8001646:	2300      	movs	r3, #0
 8001648:	e018      	b.n	800167c <cea_board_enable_set+0xa8>
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, 0); // Enable the CEA Board
 800164a:	2200      	movs	r2, #0
 800164c:	2180      	movs	r1, #128	; 0x80
 800164e:	480d      	ldr	r0, [pc, #52]	; (8001684 <cea_board_enable_set+0xb0>)
 8001650:	f001 ffda 	bl	8003608 <HAL_GPIO_WritePin>
			cea_detector.board_enable_state = 0;							 // Set the board state in the struct
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <cea_board_enable_set+0xb4>)
 8001656:	2200      	movs	r2, #0
 8001658:	821a      	strh	r2, [r3, #16]

			// Return fail
			return(EXIT_FAILURE);
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <cea_board_enable_set+0xa8>
		}
	}
	else if (gpio_state == DISABLE && cea_board_state == ENABLED) 				 // If the board is enabled
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f083 0301 	eor.w	r3, r3, #1
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <cea_board_enable_set+0xa6>
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <cea_board_enable_set+0xa6>
	{
		// Enable the CEA loop and set the target value to 0
		// Have a flag in the main loop then disable the HV and disable the board once the digipot is at 0
		cea_detector.making_safe_inprogress = true;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <cea_board_enable_set+0xb4>)
 8001672:	2201      	movs	r2, #1
 8001674:	74da      	strb	r2, [r3, #19]
		return(EXIT_SUCCESS);
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <cea_board_enable_set+0xa8>
	}
	else
	{
		return(EXIT_SUCCESS);
 800167a:	2300      	movs	r3, #0
	}
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	48000400 	.word	0x48000400
 8001688:	20000230 	.word	0x20000230
 800168c:	20000236 	.word	0x20000236

08001690 <cea_board_enable_get>:

bool cea_board_enable_get(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	cea_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin);
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	4808      	ldr	r0, [pc, #32]	; (80016b8 <cea_board_enable_get+0x28>)
 8001698:	f001 ff9e 	bl	80035d8 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <cea_board_enable_get+0x2c>)
 80016a2:	821a      	strh	r2, [r3, #16]
	return(cea_detector.board_enable_state);
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <cea_board_enable_get+0x2c>)
 80016a6:	8a1b      	ldrh	r3, [r3, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf14      	ite	ne
 80016ac:	2301      	movne	r3, #1
 80016ae:	2300      	moveq	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	48000400 	.word	0x48000400
 80016bc:	20000230 	.word	0x20000230

080016c0 <cea_i2c_write>:

HAL_StatusTypeDef cea_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c3, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	b299      	uxth	r1, r3
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	220a      	movs	r2, #10
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	4804      	ldr	r0, [pc, #16]	; (80016f0 <cea_i2c_write+0x30>)
 80016de:	f002 f861 	bl	80037a4 <HAL_I2C_Master_Transmit>
 80016e2:	4603      	mov	r3, r0
 80016e4:	73fb      	strb	r3, [r7, #15]
	return(ret);
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200000dc 	.word	0x200000dc

080016f4 <cea_i2c_read>:

HAL_StatusTypeDef cea_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	4613      	mov	r3, r2
 8001702:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73bb      	strb	r3, [r7, #14]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8001708:	2305      	movs	r3, #5
 800170a:	737b      	strb	r3, [r7, #13]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 800170c:	2305      	movs	r3, #5
 800170e:	73fb      	strb	r3, [r7, #15]

	//HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
	do
	{
		// Read operation
		ret =  HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION); // Delay if re-attempting I2C Operation
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	b299      	uxth	r1, r3
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	220a      	movs	r2, #10
 8001718:	9200      	str	r2, [sp, #0]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <cea_i2c_read+0x5c>)
 800171e:	f002 f959 	bl	80039d4 <HAL_I2C_Master_Receive>
 8001722:	4603      	mov	r3, r0
 8001724:	73bb      	strb	r3, [r7, #14]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d802      	bhi.n	8001732 <cea_i2c_read+0x3e>
 800172c:	2064      	movs	r0, #100	; 0x64
 800172e:	f001 fc55 	bl	8002fdc <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	3b01      	subs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
	}while((ret == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d102      	bne.n	8001744 <cea_i2c_read+0x50>
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e5      	bne.n	8001710 <cea_i2c_read+0x1c>

	return(ret);
 8001744:	7bbb      	ldrb	r3, [r7, #14]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200000dc 	.word	0x200000dc

08001754 <cea_i2c_write_read>:

HAL_StatusTypeDef cea_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4603      	mov	r3, r0
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	4613      	mov	r3, r2
 8001764:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 800176a:	2305      	movs	r3, #5
 800176c:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 800176e:	2305      	movs	r3, #5
 8001770:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8001772:	7dfb      	ldrb	r3, [r7, #23]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d802      	bhi.n	800177e <cea_i2c_write_read+0x2a>
 8001778:	2064      	movs	r0, #100	; 0x64
 800177a:	f001 fc2f 	bl	8002fdc <HAL_Delay>
		status = cea_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 800177e:	89ba      	ldrh	r2, [r7, #12]
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	68b9      	ldr	r1, [r7, #8]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff9b 	bl	80016c0 <cea_i2c_write>
 800178a:	4603      	mov	r3, r0
 800178c:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	3b01      	subs	r3, #1
 8001792:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8001794:	7d7b      	ldrb	r3, [r7, #21]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d102      	bne.n	80017a0 <cea_i2c_write_read+0x4c>
 800179a:	7dfb      	ldrb	r3, [r7, #23]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1e8      	bne.n	8001772 <cea_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 80017a0:	7d7b      	ldrb	r3, [r7, #21]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d101      	bne.n	80017aa <cea_i2c_write_read+0x56>
 80017a6:	7d7b      	ldrb	r3, [r7, #21]
 80017a8:	e01a      	b.n	80017e0 <cea_i2c_write_read+0x8c>

	HAL_Delay(5);
 80017aa:	2005      	movs	r0, #5
 80017ac:	f001 fc16 	bl	8002fdc <HAL_Delay>

	do
	{
		// Read operation
		status =  cea_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 80017b0:	8c3a      	ldrh	r2, [r7, #32]
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff9c 	bl	80016f4 <cea_i2c_read>
 80017bc:	4603      	mov	r3, r0
 80017be:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 80017c0:	7dbb      	ldrb	r3, [r7, #22]
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	d802      	bhi.n	80017cc <cea_i2c_write_read+0x78>
 80017c6:	2064      	movs	r0, #100	; 0x64
 80017c8:	f001 fc08 	bl	8002fdc <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 80017cc:	7dbb      	ldrb	r3, [r7, #22]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 80017d2:	7d7b      	ldrb	r3, [r7, #21]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d102      	bne.n	80017de <cea_i2c_write_read+0x8a>
 80017d8:	7dbb      	ldrb	r3, [r7, #22]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1e8      	bne.n	80017b0 <cea_i2c_write_read+0x5c>

	return(status);
 80017de:	7d7b      	ldrb	r3, [r7, #21]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <i2c_pt_reset>:




bool i2c_pt_reset(I2C_HandleTypeDef *hi2c)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
    // I2C command to reset the MS5611 module
    // A 3 ms delay should be placed after reset command is complete
    bool status = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = CMD_RESET;
 80017f4:	231e      	movs	r3, #30
 80017f6:	73bb      	strb	r3, [r7, #14]

    // Send the command
    status = i2c_write(hi2c, ADDR_PRESS_TEMP, &cmd, 1);
 80017f8:	f107 020e 	add.w	r2, r7, #14
 80017fc:	2301      	movs	r3, #1
 80017fe:	21ee      	movs	r1, #238	; 0xee
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff f921 	bl	8000a48 <i2c_write>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(3);
 8001812:	2003      	movs	r0, #3
 8001814:	f001 fbe2 	bl	8002fdc <HAL_Delay>

    return(status);
 8001818:	7bfb      	ldrb	r3, [r7, #15]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <i2c_pt_d1_pressure_conversion>:

    return(status);
}

bool i2c_pt_d1_pressure_conversion(I2C_HandleTypeDef *hi2c, uint8_t osr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]

    // Perform the I2C conversion for D1 - pressure sensor
    bool status = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
    uint8_t command;

    switch(osr)
 8001834:	78fb      	ldrb	r3, [r7, #3]
 8001836:	2b04      	cmp	r3, #4
 8001838:	d81b      	bhi.n	8001872 <i2c_pt_d1_pressure_conversion+0x4e>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <i2c_pt_d1_pressure_conversion+0x1c>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	08001855 	.word	0x08001855
 8001844:	0800185b 	.word	0x0800185b
 8001848:	08001861 	.word	0x08001861
 800184c:	08001867 	.word	0x08001867
 8001850:	0800186d 	.word	0x0800186d
    {
        case OSR_256:
        	command = CMD_CONVERT_D1_OSR_256;
 8001854:	2340      	movs	r3, #64	; 0x40
 8001856:	73bb      	strb	r3, [r7, #14]
            break;
 8001858:	e00c      	b.n	8001874 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_512:
        	command = CMD_CONVERT_D1_OSR_512;
 800185a:	2342      	movs	r3, #66	; 0x42
 800185c:	73bb      	strb	r3, [r7, #14]
            break;
 800185e:	e009      	b.n	8001874 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_1024:
        	command = CMD_CONVERT_D1_OSR_1024;
 8001860:	2344      	movs	r3, #68	; 0x44
 8001862:	73bb      	strb	r3, [r7, #14]
            break;
 8001864:	e006      	b.n	8001874 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_2048:
        	command = CMD_CONVERT_D1_OSR_2048;
 8001866:	2346      	movs	r3, #70	; 0x46
 8001868:	73bb      	strb	r3, [r7, #14]
            break;
 800186a:	e003      	b.n	8001874 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_4096:
        	command = CMD_CONVERT_D1_OSR_4096;
 800186c:	2348      	movs	r3, #72	; 0x48
 800186e:	73bb      	strb	r3, [r7, #14]
            break;
 8001870:	e000      	b.n	8001874 <i2c_pt_d1_pressure_conversion+0x50>
        default:
            break;
 8001872:	bf00      	nop
    }

    // Send the command
    status = i2c_write(hi2c, ADDR_PRESS_TEMP, &command, 1);
 8001874:	f107 020e 	add.w	r2, r7, #14
 8001878:	2301      	movs	r3, #1
 800187a:	21ee      	movs	r1, #238	; 0xee
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff f8e3 	bl	8000a48 <i2c_write>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	bf14      	ite	ne
 8001888:	2301      	movne	r3, #1
 800188a:	2300      	moveq	r3, #0
 800188c:	73fb      	strb	r3, [r7, #15]

    // Around 10ms for conversion
    HAL_Delay(10);
 800188e:	200a      	movs	r0, #10
 8001890:	f001 fba4 	bl	8002fdc <HAL_Delay>

    return(status);
 8001894:	7bfb      	ldrb	r3, [r7, #15]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop

080018a0 <i2c_pt_d2_temperature_conversion>:

bool i2c_pt_d2_temperature_conversion(I2C_HandleTypeDef *hi2c, uint8_t osr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]

    // Perform the I2C conversion for D2 - temperature sensor
    bool status = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
    uint8_t command;

    switch(osr)
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d81b      	bhi.n	80018ee <i2c_pt_d2_temperature_conversion+0x4e>
 80018b6:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <i2c_pt_d2_temperature_conversion+0x1c>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018d1 	.word	0x080018d1
 80018c0:	080018d7 	.word	0x080018d7
 80018c4:	080018dd 	.word	0x080018dd
 80018c8:	080018e3 	.word	0x080018e3
 80018cc:	080018e9 	.word	0x080018e9
    {
        case OSR_256:
            command = CMD_CONVERT_D2_OSR_256;
 80018d0:	2350      	movs	r3, #80	; 0x50
 80018d2:	73bb      	strb	r3, [r7, #14]
            break;
 80018d4:	e00c      	b.n	80018f0 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_512:
            command = CMD_CONVERT_D2_OSR_512;
 80018d6:	2352      	movs	r3, #82	; 0x52
 80018d8:	73bb      	strb	r3, [r7, #14]
            break;
 80018da:	e009      	b.n	80018f0 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_1024:
            command = CMD_CONVERT_D2_OSR_1024;
 80018dc:	2354      	movs	r3, #84	; 0x54
 80018de:	73bb      	strb	r3, [r7, #14]
            break;
 80018e0:	e006      	b.n	80018f0 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_2048:
            command = CMD_CONVERT_D2_OSR_2048;
 80018e2:	2356      	movs	r3, #86	; 0x56
 80018e4:	73bb      	strb	r3, [r7, #14]
            break;
 80018e6:	e003      	b.n	80018f0 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_4096:
            command = CMD_CONVERT_D2_OSR_4096;
 80018e8:	2358      	movs	r3, #88	; 0x58
 80018ea:	73bb      	strb	r3, [r7, #14]
            break;
 80018ec:	e000      	b.n	80018f0 <i2c_pt_d2_temperature_conversion+0x50>
        default:
            break;
 80018ee:	bf00      	nop
    }

    // Send the command
    status = i2c_write(hi2c, ADDR_PRESS_TEMP, &command, 1);
 80018f0:	f107 020e 	add.w	r2, r7, #14
 80018f4:	2301      	movs	r3, #1
 80018f6:	21ee      	movs	r1, #238	; 0xee
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff f8a5 	bl	8000a48 <i2c_write>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]

    HAL_Delay(10);
 800190a:	200a      	movs	r0, #10
 800190c:	f001 fb66 	bl	8002fdc <HAL_Delay>

    return(status);
 8001910:	7bfb      	ldrb	r3, [r7, #15]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop

0800191c <i2c_pt_measure_d2_temperature>:


bool i2c_pt_measure_d2_temperature(I2C_HandleTypeDef *hi2c, uint8_t osr, uint32_t *r_buffer)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	460b      	mov	r3, r1
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	72fb      	strb	r3, [r7, #11]

    // Should check that the ADC has actully measured something
    bool status = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]

    // Send the command to initiate the conversion
    if(status == 0) status = i2c_pt_d2_temperature_conversion(hi2c, osr);
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	f083 0301 	eor.w	r3, r3, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d006      	beq.n	8001948 <i2c_pt_measure_d2_temperature+0x2c>
 800193a:	7afb      	ldrb	r3, [r7, #11]
 800193c:	4619      	mov	r1, r3
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f7ff ffae 	bl	80018a0 <i2c_pt_d2_temperature_conversion>
 8001944:	4603      	mov	r3, r0
 8001946:	75fb      	strb	r3, [r7, #23]
    // Read the ADC
    if(status == 0) status = i2c_pt_adc_read_sequence(hi2c, r_buffer);
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	f083 0301 	eor.w	r3, r3, #1
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <i2c_pt_measure_d2_temperature+0x44>
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f82e 	bl	80019b8 <i2c_pt_adc_read_sequence>
 800195c:	4603      	mov	r3, r0
 800195e:	75fb      	strb	r3, [r7, #23]

    return(status);
 8001960:	7dfb      	ldrb	r3, [r7, #23]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <i2c_pt_measure_d1_pressure>:


bool i2c_pt_measure_d1_pressure(I2C_HandleTypeDef *hi2c, uint8_t osr, uint32_t *r_buffer)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	60f8      	str	r0, [r7, #12]
 8001972:	460b      	mov	r3, r1
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	72fb      	strb	r3, [r7, #11]

    // Should check that the ADC has actully measured something
    bool status = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	75fb      	strb	r3, [r7, #23]

    // Send the command to initiate the conversion
    if(status == 0) status = i2c_pt_d1_pressure_conversion(hi2c, osr);
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	f083 0301 	eor.w	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <i2c_pt_measure_d1_pressure+0x2c>
 8001988:	7afb      	ldrb	r3, [r7, #11]
 800198a:	4619      	mov	r1, r3
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f7ff ff49 	bl	8001824 <i2c_pt_d1_pressure_conversion>
 8001992:	4603      	mov	r3, r0
 8001994:	75fb      	strb	r3, [r7, #23]
    // Read the ADC
    if(status == 0) status = i2c_pt_adc_read_sequence(hi2c, r_buffer);
 8001996:	7dfb      	ldrb	r3, [r7, #23]
 8001998:	f083 0301 	eor.w	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <i2c_pt_measure_d1_pressure+0x44>
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 f807 	bl	80019b8 <i2c_pt_adc_read_sequence>
 80019aa:	4603      	mov	r3, r0
 80019ac:	75fb      	strb	r3, [r7, #23]

    return(status);
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <i2c_pt_adc_read_sequence>:


bool i2c_pt_adc_read_sequence(I2C_HandleTypeDef *hi2c, uint32_t *r_buffer)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af02      	add	r7, sp, #8
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
    // Need to check the number of returned bytes is correct
    bool status = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
    uint8_t command = CMD_ADC_READ;
 80019c6:	2300      	movs	r3, #0
 80019c8:	737b      	strb	r3, [r7, #13]
    uint8_t number_of_bytes = 3;
 80019ca:	2303      	movs	r3, #3
 80019cc:	73bb      	strb	r3, [r7, #14]
    uint8_t read_buffer[3] = {0};
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <i2c_pt_adc_read_sequence+0x64>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	813b      	strh	r3, [r7, #8]
 80019d4:	2300      	movs	r3, #0
 80019d6:	72bb      	strb	r3, [r7, #10]


    // Send the command

    status = i2c_write_read(hi2c, ADDR_PRESS_TEMP, &command, 1, &read_buffer[0], number_of_bytes);
 80019d8:	7bbb      	ldrb	r3, [r7, #14]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	f107 020d 	add.w	r2, r7, #13
 80019e0:	9301      	str	r3, [sp, #4]
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2301      	movs	r3, #1
 80019ea:	21ee      	movs	r1, #238	; 0xee
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff f845 	bl	8000a7c <i2c_write_read>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	bf14      	ite	ne
 80019f8:	2301      	movne	r3, #1
 80019fa:	2300      	moveq	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]

    //*r_buffer = *r_buffer | ((read_buffer[0]<<16 | read_buffer[1]<<8 | read_buffer[2]));
    *r_buffer = ((read_buffer[0]<<16 | read_buffer[1]<<8 | read_buffer[2]));
 80019fe:	7a3b      	ldrb	r3, [r7, #8]
 8001a00:	041a      	lsls	r2, r3, #16
 8001a02:	7a7b      	ldrb	r3, [r7, #9]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	4313      	orrs	r3, r2
 8001a08:	7aba      	ldrb	r2, [r7, #10]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	601a      	str	r2, [r3, #0]

    return(status);
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	08007f04 	.word	0x08007f04

08001a20 <run_complete_readout>:


bool run_complete_readout(struct meas measurement)
{
 8001a20:	b084      	sub	sp, #16
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	f107 0c10 	add.w	ip, r7, #16
 8001a2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    bool status = EXIT_SUCCESS;      // A status record of the operation
 8001a30:	2300      	movs	r3, #0
 8001a32:	71fb      	strb	r3, [r7, #7]

    // Attempt to reset the I2C device - add a delay at the end to allow the device to reset
    if(status == 0) status = i2c_pt_reset(&hi2c2);
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f083 0301 	eor.w	r3, r3, #1
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d004      	beq.n	8001a4a <run_complete_readout+0x2a>
 8001a40:	4816      	ldr	r0, [pc, #88]	; (8001a9c <run_complete_readout+0x7c>)
 8001a42:	f7ff fed1 	bl	80017e8 <i2c_pt_reset>
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]

    // Attempt to read into memory all the I2C prom calibration bytes
    //if(status == 0) status = i2c_pt_prom_read_all(&hi2c2, &measurement.prom_regs[0]);

    // Attempt conversion sequence for pressure at OSR 4096 with conversion duration <9.04ms
    if(status == 0) status = i2c_pt_measure_d1_pressure(&hi2c2, OSR_4096, &measurement.uncomp_press);
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f083 0301 	eor.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d008      	beq.n	8001a68 <run_complete_readout+0x48>
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	480f      	ldr	r0, [pc, #60]	; (8001a9c <run_complete_readout+0x7c>)
 8001a60:	f7ff ff83 	bl	800196a <i2c_pt_measure_d1_pressure>
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]

    HAL_Delay(10);
 8001a68:	200a      	movs	r0, #10
 8001a6a:	f001 fab7 	bl	8002fdc <HAL_Delay>

    // Attempt conversion sequence for temperature at OSR 4096 with conversion duration <9.04ms
    if(status == 0) status = i2c_pt_measure_d2_temperature(&hi2c2, OSR_4096, &measurement.uncomp_temp);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <run_complete_readout+0x6a>
 8001a7a:	f107 0210 	add.w	r2, r7, #16
 8001a7e:	2104      	movs	r1, #4
 8001a80:	4806      	ldr	r0, [pc, #24]	; (8001a9c <run_complete_readout+0x7c>)
 8001a82:	f7ff ff4b 	bl	800191c <i2c_pt_measure_d2_temperature>
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]

    return(status);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a96:	b004      	add	sp, #16
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000088 	.word	0x20000088

08001aa0 <i2c_slv_cmd_rx_tx_handle>:
//************************************
//            I2C Slave
//************************************

bool i2c_slv_cmd_rx_tx_handle(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08c      	sub	sp, #48	; 0x30
 8001aa4:	af00      	add	r7, sp, #0
	bool status = EXIT_SUCCESS;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	// SOME FUNCTION HERE TO HANDLE RX/TX
	switch(i2c_slv_rx.bytes.cmd)
 8001aac:	4bdc      	ldr	r3, [pc, #880]	; (8001e20 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001aae:	78db      	ldrb	r3, [r3, #3]
 8001ab0:	3b21      	subs	r3, #33	; 0x21
 8001ab2:	2b93      	cmp	r3, #147	; 0x93
 8001ab4:	f200 86a4 	bhi.w	8002800 <i2c_slv_cmd_rx_tx_handle+0xd60>
 8001ab8:	a201      	add	r2, pc, #4	; (adr r2, 8001ac0 <i2c_slv_cmd_rx_tx_handle+0x20>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001d11 	.word	0x08001d11
 8001ac4:	08001d5b 	.word	0x08001d5b
 8001ac8:	08002801 	.word	0x08002801
 8001acc:	08002801 	.word	0x08002801
 8001ad0:	08002801 	.word	0x08002801
 8001ad4:	08002801 	.word	0x08002801
 8001ad8:	08002801 	.word	0x08002801
 8001adc:	08002801 	.word	0x08002801
 8001ae0:	08002801 	.word	0x08002801
 8001ae4:	08002801 	.word	0x08002801
 8001ae8:	08002801 	.word	0x08002801
 8001aec:	08002801 	.word	0x08002801
 8001af0:	08002801 	.word	0x08002801
 8001af4:	08002801 	.word	0x08002801
 8001af8:	08002801 	.word	0x08002801
 8001afc:	08002801 	.word	0x08002801
 8001b00:	08002801 	.word	0x08002801
 8001b04:	08002801 	.word	0x08002801
 8001b08:	08002801 	.word	0x08002801
 8001b0c:	08002801 	.word	0x08002801
 8001b10:	08002801 	.word	0x08002801
 8001b14:	08002801 	.word	0x08002801
 8001b18:	08002801 	.word	0x08002801
 8001b1c:	08002801 	.word	0x08002801
 8001b20:	08002801 	.word	0x08002801
 8001b24:	08002801 	.word	0x08002801
 8001b28:	08002801 	.word	0x08002801
 8001b2c:	08002801 	.word	0x08002801
 8001b30:	08002801 	.word	0x08002801
 8001b34:	08002801 	.word	0x08002801
 8001b38:	08002801 	.word	0x08002801
 8001b3c:	08002177 	.word	0x08002177
 8001b40:	08002217 	.word	0x08002217
 8001b44:	08002281 	.word	0x08002281
 8001b48:	080022c7 	.word	0x080022c7
 8001b4c:	0800230d 	.word	0x0800230d
 8001b50:	08002801 	.word	0x08002801
 8001b54:	08002801 	.word	0x08002801
 8001b58:	08002801 	.word	0x08002801
 8001b5c:	08002801 	.word	0x08002801
 8001b60:	08002801 	.word	0x08002801
 8001b64:	08002801 	.word	0x08002801
 8001b68:	08002801 	.word	0x08002801
 8001b6c:	08002801 	.word	0x08002801
 8001b70:	08002801 	.word	0x08002801
 8001b74:	08002801 	.word	0x08002801
 8001b78:	08002801 	.word	0x08002801
 8001b7c:	08002801 	.word	0x08002801
 8001b80:	08002801 	.word	0x08002801
 8001b84:	08002801 	.word	0x08002801
 8001b88:	08002801 	.word	0x08002801
 8001b8c:	08002801 	.word	0x08002801
 8001b90:	08002801 	.word	0x08002801
 8001b94:	08002801 	.word	0x08002801
 8001b98:	08002801 	.word	0x08002801
 8001b9c:	08002801 	.word	0x08002801
 8001ba0:	08002801 	.word	0x08002801
 8001ba4:	08002801 	.word	0x08002801
 8001ba8:	08002801 	.word	0x08002801
 8001bac:	08002801 	.word	0x08002801
 8001bb0:	08002801 	.word	0x08002801
 8001bb4:	08002801 	.word	0x08002801
 8001bb8:	08002801 	.word	0x08002801
 8001bbc:	08002383 	.word	0x08002383
 8001bc0:	08002423 	.word	0x08002423
 8001bc4:	080025c9 	.word	0x080025c9
 8001bc8:	0800260f 	.word	0x0800260f
 8001bcc:	08002655 	.word	0x08002655
 8001bd0:	0800248d 	.word	0x0800248d
 8001bd4:	080024d3 	.word	0x080024d3
 8001bd8:	08002523 	.word	0x08002523
 8001bdc:	08002569 	.word	0x08002569
 8001be0:	08002801 	.word	0x08002801
 8001be4:	08002801 	.word	0x08002801
 8001be8:	08002801 	.word	0x08002801
 8001bec:	08002801 	.word	0x08002801
 8001bf0:	08002801 	.word	0x08002801
 8001bf4:	08002801 	.word	0x08002801
 8001bf8:	08002801 	.word	0x08002801
 8001bfc:	08002801 	.word	0x08002801
 8001c00:	08002801 	.word	0x08002801
 8001c04:	08002801 	.word	0x08002801
 8001c08:	08002801 	.word	0x08002801
 8001c0c:	08002801 	.word	0x08002801
 8001c10:	08002801 	.word	0x08002801
 8001c14:	08002801 	.word	0x08002801
 8001c18:	08002801 	.word	0x08002801
 8001c1c:	08002801 	.word	0x08002801
 8001c20:	08002801 	.word	0x08002801
 8001c24:	08002801 	.word	0x08002801
 8001c28:	08002801 	.word	0x08002801
 8001c2c:	08002801 	.word	0x08002801
 8001c30:	08002801 	.word	0x08002801
 8001c34:	08002801 	.word	0x08002801
 8001c38:	08002801 	.word	0x08002801
 8001c3c:	08001da5 	.word	0x08001da5
 8001c40:	08001f59 	.word	0x08001f59
 8001c44:	08001fa3 	.word	0x08001fa3
 8001c48:	08002037 	.word	0x08002037
 8001c4c:	08001fed 	.word	0x08001fed
 8001c50:	08002801 	.word	0x08002801
 8001c54:	08001e31 	.word	0x08001e31
 8001c58:	08001e7b 	.word	0x08001e7b
 8001c5c:	08001ec5 	.word	0x08001ec5
 8001c60:	08001f0f 	.word	0x08001f0f
 8001c64:	0800209f 	.word	0x0800209f
 8001c68:	08002113 	.word	0x08002113
 8001c6c:	08002801 	.word	0x08002801
 8001c70:	08002801 	.word	0x08002801
 8001c74:	08002801 	.word	0x08002801
 8001c78:	08002801 	.word	0x08002801
 8001c7c:	08002801 	.word	0x08002801
 8001c80:	08002801 	.word	0x08002801
 8001c84:	08002801 	.word	0x08002801
 8001c88:	08002801 	.word	0x08002801
 8001c8c:	08002801 	.word	0x08002801
 8001c90:	08002801 	.word	0x08002801
 8001c94:	08002801 	.word	0x08002801
 8001c98:	08002801 	.word	0x08002801
 8001c9c:	08002801 	.word	0x08002801
 8001ca0:	08002801 	.word	0x08002801
 8001ca4:	08002801 	.word	0x08002801
 8001ca8:	08002801 	.word	0x08002801
 8001cac:	08002801 	.word	0x08002801
 8001cb0:	08002801 	.word	0x08002801
 8001cb4:	08002801 	.word	0x08002801
 8001cb8:	08002801 	.word	0x08002801
 8001cbc:	080026b5 	.word	0x080026b5
 8001cc0:	08002801 	.word	0x08002801
 8001cc4:	08002801 	.word	0x08002801
 8001cc8:	08002801 	.word	0x08002801
 8001ccc:	08002801 	.word	0x08002801
 8001cd0:	08002801 	.word	0x08002801
 8001cd4:	08002801 	.word	0x08002801
 8001cd8:	08002801 	.word	0x08002801
 8001cdc:	08002801 	.word	0x08002801
 8001ce0:	08002801 	.word	0x08002801
 8001ce4:	08002801 	.word	0x08002801
 8001ce8:	08002801 	.word	0x08002801
 8001cec:	08002801 	.word	0x08002801
 8001cf0:	08002801 	.word	0x08002801
 8001cf4:	08002801 	.word	0x08002801
 8001cf8:	08002801 	.word	0x08002801
 8001cfc:	08002801 	.word	0x08002801
 8001d00:	08002729 	.word	0x08002729
 8001d04:	08002761 	.word	0x08002761
 8001d08:	08002797 	.word	0x08002797
 8001d0c:	080027cd 	.word	0x080027cd
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------

		case(CMD_FPGA_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001d10:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d12:	789b      	ldrb	r3, [r3, #2]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d110      	bne.n	8001d3a <i2c_slv_cmd_rx_tx_handle+0x29a>
			{
				uint16_t dataread = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	80bb      	strh	r3, [r7, #4]
				dataread = max6911_read(&hi2c3, ADDR_FPGA_MAX6911_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	2202      	movs	r2, #2
 8001d20:	21e0      	movs	r1, #224	; 0xe0
 8001d22:	4840      	ldr	r0, [pc, #256]	; (8001e24 <i2c_slv_cmd_rx_tx_handle+0x384>)
 8001d24:	f7fe ff26 	bl	8000b74 <max6911_read>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	80bb      	strh	r3, [r7, #4]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001d2c:	4a3e      	ldr	r2, [pc, #248]	; (8001e28 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d2e:	88bb      	ldrh	r3, [r7, #4]
 8001d30:	8013      	strh	r3, [r2, #0]

				return(status);
 8001d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d36:	f000 bdb9 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001d3a:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d3c:	789b      	ldrb	r3, [r3, #2]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f040 8564 	bne.w	800280c <i2c_slv_cmd_rx_tx_handle+0xd6c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001d44:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d4a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d56:	f000 bda9 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		case(CMD_FPGA_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001d5a:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d5c:	789b      	ldrb	r3, [r3, #2]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d110      	bne.n	8001d84 <i2c_slv_cmd_rx_tx_handle+0x2e4>
			{
				uint16_t dataread = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	80fb      	strh	r3, [r7, #6]
				dataread = max6911_read(&hi2c3, ADDR_FPGA_MAX6911_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001d66:	2301      	movs	r3, #1
 8001d68:	2200      	movs	r2, #0
 8001d6a:	21e2      	movs	r1, #226	; 0xe2
 8001d6c:	482d      	ldr	r0, [pc, #180]	; (8001e24 <i2c_slv_cmd_rx_tx_handle+0x384>)
 8001d6e:	f7fe ff01 	bl	8000b74 <max6911_read>
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001d76:	4a2c      	ldr	r2, [pc, #176]	; (8001e28 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	8013      	strh	r3, [r2, #0]

				return(status);
 8001d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d80:	f000 bd94 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d86:	789b      	ldrb	r3, [r3, #2]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f040 8541 	bne.w	8002810 <i2c_slv_cmd_rx_tx_handle+0xd70>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d94:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001d96:	2301      	movs	r3, #1
 8001d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001da0:	f000 bd84 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		//                     UCD Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001da6:	789b      	ldrb	r3, [r3, #2]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10d      	bne.n	8001dc8 <i2c_slv_cmd_rx_tx_handle+0x328>
			{
				ucd_detector.board_enable_state = (uint16_t)ucd_board_enable_get(); // Read the state enable pin
 8001dac:	f7ff fa44 	bl	8001238 <ucd_board_enable_get>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <i2c_slv_cmd_rx_tx_handle+0x38c>)
 8001db6:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = ucd_detector.board_enable_state; 					// Prepare the date into the transmit
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <i2c_slv_cmd_rx_tx_handle+0x38c>)
 8001dba:	8a1a      	ldrh	r2, [r3, #16]
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001dbe:	801a      	strh	r2, [r3, #0]
				return(status);
 8001dc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dc4:	f000 bd72 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001dca:	789b      	ldrb	r3, [r3, #2]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 8521 	bne.w	8002814 <i2c_slv_cmd_rx_tx_handle+0xd74>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d109      	bne.n	8001dee <i2c_slv_cmd_rx_tx_handle+0x34e>
				{
					ucd_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff fa14 	bl	8001208 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	801a      	strh	r2, [r3, #0]
					return(status);
 8001de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dea:	f000 bd5f 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <i2c_slv_cmd_rx_tx_handle+0x36a>
				{
					ucd_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff fa06 	bl	8001208 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	801a      	strh	r2, [r3, #0]
					return(status);
 8001e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e06:	f000 bd51 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e10:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001e12:	2301      	movs	r3, #1
 8001e14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e1c:	f000 bd46 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
 8001e20:	20000270 	.word	0x20000270
 8001e24:	200000dc 	.word	0x200000dc
 8001e28:	20000274 	.word	0x20000274
 8001e2c:	20000208 	.word	0x20000208
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001e30:	4ba0      	ldr	r3, [pc, #640]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001e32:	789b      	ldrb	r3, [r3, #2]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d110      	bne.n	8001e5a <i2c_slv_cmd_rx_tx_handle+0x3ba>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	84bb      	strh	r3, [r7, #36]	; 0x24
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	2202      	movs	r2, #2
 8001e40:	21e4      	movs	r1, #228	; 0xe4
 8001e42:	489d      	ldr	r0, [pc, #628]	; (80020b8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001e44:	f7fe fe96 	bl	8000b74 <max6911_read>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	84bb      	strh	r3, [r7, #36]	; 0x24

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001e4c:	4a9b      	ldr	r2, [pc, #620]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e50:	8013      	strh	r3, [r2, #0]

				return(status);
 8001e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e56:	f000 bd29 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001e5a:	4b96      	ldr	r3, [pc, #600]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001e5c:	789b      	ldrb	r3, [r3, #2]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 84da 	bne.w	8002818 <i2c_slv_cmd_rx_tx_handle+0xd78>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001e64:	4b95      	ldr	r3, [pc, #596]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e6a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001e72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e76:	f000 bd19 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001e7a:	4b8e      	ldr	r3, [pc, #568]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001e7c:	789b      	ldrb	r3, [r3, #2]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d110      	bne.n	8001ea4 <i2c_slv_cmd_rx_tx_handle+0x404>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	84fb      	strh	r3, [r7, #38]	; 0x26
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001e86:	2301      	movs	r3, #1
 8001e88:	2200      	movs	r2, #0
 8001e8a:	21e4      	movs	r1, #228	; 0xe4
 8001e8c:	488a      	ldr	r0, [pc, #552]	; (80020b8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001e8e:	f7fe fe71 	bl	8000b74 <max6911_read>
 8001e92:	4603      	mov	r3, r0
 8001e94:	84fb      	strh	r3, [r7, #38]	; 0x26

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001e96:	4a89      	ldr	r2, [pc, #548]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001e98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e9a:	8013      	strh	r3, [r2, #0]

				return(status);
 8001e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ea0:	f000 bd04 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001ea4:	4b83      	ldr	r3, [pc, #524]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001ea6:	789b      	ldrb	r3, [r3, #2]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f040 84b7 	bne.w	800281c <i2c_slv_cmd_rx_tx_handle+0xd7c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001eae:	4b83      	ldr	r3, [pc, #524]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ec0:	f000 bcf4 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_DVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001ec4:	4b7b      	ldr	r3, [pc, #492]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001ec6:	789b      	ldrb	r3, [r3, #2]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d110      	bne.n	8001eee <i2c_slv_cmd_rx_tx_handle+0x44e>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	853b      	strh	r3, [r7, #40]	; 0x28
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_DVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	21e2      	movs	r1, #226	; 0xe2
 8001ed6:	4878      	ldr	r0, [pc, #480]	; (80020b8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001ed8:	f7fe fe4c 	bl	8000b74 <max6911_read>
 8001edc:	4603      	mov	r3, r0
 8001ede:	853b      	strh	r3, [r7, #40]	; 0x28

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001ee0:	4a76      	ldr	r2, [pc, #472]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001ee2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ee4:	8013      	strh	r3, [r2, #0]

				return(status);
 8001ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eea:	f000 bcdf 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001eee:	4b71      	ldr	r3, [pc, #452]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001ef0:	789b      	ldrb	r3, [r3, #2]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 8494 	bne.w	8002820 <i2c_slv_cmd_rx_tx_handle+0xd80>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001ef8:	4b70      	ldr	r3, [pc, #448]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efe:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001f00:	2301      	movs	r3, #1
 8001f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f0a:	f000 bccf 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_DVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001f0e:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001f10:	789b      	ldrb	r3, [r3, #2]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d110      	bne.n	8001f38 <i2c_slv_cmd_rx_tx_handle+0x498>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	857b      	strh	r3, [r7, #42]	; 0x2a
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_DVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	21e2      	movs	r1, #226	; 0xe2
 8001f20:	4865      	ldr	r0, [pc, #404]	; (80020b8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001f22:	f7fe fe27 	bl	8000b74 <max6911_read>
 8001f26:	4603      	mov	r3, r0
 8001f28:	857b      	strh	r3, [r7, #42]	; 0x2a

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001f2a:	4a64      	ldr	r2, [pc, #400]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f2e:	8013      	strh	r3, [r2, #0]

				return(status);
 8001f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f34:	f000 bcba 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001f38:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001f3a:	789b      	ldrb	r3, [r3, #2]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 8471 	bne.w	8002824 <i2c_slv_cmd_rx_tx_handle+0xd84>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001f42:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f48:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f54:	f000 bcaa 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_POSITIVE_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001f58:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001f5a:	789b      	ldrb	r3, [r3, #2]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d110      	bne.n	8001f82 <i2c_slv_cmd_rx_tx_handle+0x4e2>
			{
				uint16_t dataread = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	83bb      	strh	r3, [r7, #28]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_POSI, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001f64:	2303      	movs	r3, #3
 8001f66:	2202      	movs	r2, #2
 8001f68:	21e8      	movs	r1, #232	; 0xe8
 8001f6a:	4853      	ldr	r0, [pc, #332]	; (80020b8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001f6c:	f7fe fe02 	bl	8000b74 <max6911_read>
 8001f70:	4603      	mov	r3, r0
 8001f72:	83bb      	strh	r3, [r7, #28]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001f74:	4a51      	ldr	r2, [pc, #324]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f76:	8bbb      	ldrh	r3, [r7, #28]
 8001f78:	8013      	strh	r3, [r2, #0]

				return(status);
 8001f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f7e:	f000 bc95 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001f82:	4b4c      	ldr	r3, [pc, #304]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001f84:	789b      	ldrb	r3, [r3, #2]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 844e 	bne.w	8002828 <i2c_slv_cmd_rx_tx_handle+0xd88>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f92:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f9e:	f000 bc85 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_NEGITIVE_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001fa2:	4b44      	ldr	r3, [pc, #272]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001fa4:	789b      	ldrb	r3, [r3, #2]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d110      	bne.n	8001fcc <i2c_slv_cmd_rx_tx_handle+0x52c>
			{
				uint16_t dataread = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	83fb      	strh	r3, [r7, #30]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_NEGI, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001fae:	2303      	movs	r3, #3
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	21e6      	movs	r1, #230	; 0xe6
 8001fb4:	4840      	ldr	r0, [pc, #256]	; (80020b8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001fb6:	f7fe fddd 	bl	8000b74 <max6911_read>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	83fb      	strh	r3, [r7, #30]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001fbe:	4a3f      	ldr	r2, [pc, #252]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001fc0:	8bfb      	ldrh	r3, [r7, #30]
 8001fc2:	8013      	strh	r3, [r2, #0]

				return(status);
 8001fc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc8:	f000 bc70 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001fce:	789b      	ldrb	r3, [r3, #2]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f040 842b 	bne.w	800282c <i2c_slv_cmd_rx_tx_handle+0xd8c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fdc:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001fe4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fe8:	f000 bc60 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8001fee:	789b      	ldrb	r3, [r3, #2]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d110      	bne.n	8002016 <i2c_slv_cmd_rx_tx_handle+0x576>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	847b      	strh	r3, [r7, #34]	; 0x22
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_BCUR, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	21ee      	movs	r1, #238	; 0xee
 8001ffe:	482e      	ldr	r0, [pc, #184]	; (80020b8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8002000:	f7fe fdb8 	bl	8000b74 <max6911_read>
 8002004:	4603      	mov	r3, r0
 8002006:	847b      	strh	r3, [r7, #34]	; 0x22

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8002008:	4a2c      	ldr	r2, [pc, #176]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 800200a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800200c:	8013      	strh	r3, [r2, #0]

				return(status);
 800200e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002012:	f000 bc4b 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002016:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8002018:	789b      	ldrb	r3, [r3, #2]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 8408 	bne.w	8002830 <i2c_slv_cmd_rx_tx_handle+0xd90>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8002022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002026:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800202e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002032:	f000 bc3b 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_CTL):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002036:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8002038:	789b      	ldrb	r3, [r3, #2]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d107      	bne.n	800204e <i2c_slv_cmd_rx_tx_handle+0x5ae>
			{
				i2c_slv_tx.data = ucd_detector.voltage_target; 						// Prepare the date into the transmit
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8002040:	895a      	ldrh	r2, [r3, #10]
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8002044:	801a      	strh	r2, [r3, #0]
				return(status);
 8002046:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800204a:	f000 bc2f 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8002050:	789b      	ldrb	r3, [r3, #2]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 83ee 	bne.w	8002834 <i2c_slv_cmd_rx_tx_handle+0xd94>
			{
				// Read the data from the buffer
				ucd_detector.voltage_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002058:	4b16      	ldr	r3, [pc, #88]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 800205a:	785b      	ldrb	r3, [r3, #1]
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	b21a      	sxth	r2, r3
												 i2c_slv_rx.bytes.data_byte_lsb;
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b21b      	sxth	r3, r3
				ucd_detector.voltage_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002066:	4313      	orrs	r3, r2
 8002068:	b21b      	sxth	r3, r3
 800206a:	b29a      	uxth	r2, r3
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <i2c_slv_cmd_rx_tx_handle+0x620>)
 800206e:	815a      	strh	r2, [r3, #10]

				HAL_StatusTypeDef status = dac7574_write(UCD_DAC_VBIAS_INDEX, ucd_detector.voltage_target);
 8002070:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8002072:	895b      	ldrh	r3, [r3, #10]
 8002074:	4619      	mov	r1, r3
 8002076:	2010      	movs	r0, #16
 8002078:	f7fe fd4c 	bl	8000b14 <dac7574_write>
 800207c:	4603      	mov	r3, r0
 800207e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

				i2c_slv_tx.data = status;
 8002082:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002086:	b29a      	uxth	r2, r3
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 800208a:	801a      	strh	r2, [r3, #0]
				return(status);
 800208c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f000 bc07 	b.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_MBIAS_1_CTRL):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <i2c_slv_cmd_rx_tx_handle+0x614>)
 80020a0:	789b      	ldrb	r3, [r3, #2]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10e      	bne.n	80020c4 <i2c_slv_cmd_rx_tx_handle+0x624>
			{
				i2c_slv_tx.data = ucd_detector.mbias_1_target; 						// Prepare the date into the transmit
 80020a6:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <i2c_slv_cmd_rx_tx_handle+0x620>)
 80020a8:	899a      	ldrh	r2, [r3, #12]
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 80020ac:	801a      	strh	r2, [r3, #0]
				return(status);
 80020ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020b2:	e3fb      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
 80020b4:	20000270 	.word	0x20000270
 80020b8:	200000dc 	.word	0x200000dc
 80020bc:	20000274 	.word	0x20000274
 80020c0:	20000208 	.word	0x20000208
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80020c4:	4b97      	ldr	r3, [pc, #604]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80020c6:	789b      	ldrb	r3, [r3, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 83b5 	bne.w	8002838 <i2c_slv_cmd_rx_tx_handle+0xd98>
			{
				// Read the data from the buffer
				ucd_detector.mbias_1_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80020ce:	4b95      	ldr	r3, [pc, #596]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80020d0:	785b      	ldrb	r3, [r3, #1]
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	b21a      	sxth	r2, r3
												 i2c_slv_rx.bytes.data_byte_lsb;
 80020d6:	4b93      	ldr	r3, [pc, #588]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	b21b      	sxth	r3, r3
				ucd_detector.mbias_1_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80020dc:	4313      	orrs	r3, r2
 80020de:	b21b      	sxth	r3, r3
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	4b91      	ldr	r3, [pc, #580]	; (8002328 <i2c_slv_cmd_rx_tx_handle+0x888>)
 80020e4:	819a      	strh	r2, [r3, #12]

				HAL_StatusTypeDef status = dac7574_write(UCD_DAC_MBIAS_1_INDEX, ucd_detector.mbias_1_target);
 80020e6:	4b90      	ldr	r3, [pc, #576]	; (8002328 <i2c_slv_cmd_rx_tx_handle+0x888>)
 80020e8:	899b      	ldrh	r3, [r3, #12]
 80020ea:	4619      	mov	r1, r3
 80020ec:	2012      	movs	r0, #18
 80020ee:	f7fe fd11 	bl	8000b14 <dac7574_write>
 80020f2:	4603      	mov	r3, r0
 80020f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				i2c_slv_tx.data = status;
 80020f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b8b      	ldr	r3, [pc, #556]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002100:	801a      	strh	r2, [r3, #0]
				return(status);
 8002102:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf14      	ite	ne
 800210a:	2301      	movne	r3, #1
 800210c:	2300      	moveq	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	e3cc      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_MBIAS_2_CTRL):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002112:	4b84      	ldr	r3, [pc, #528]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002114:	789b      	ldrb	r3, [r3, #2]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d106      	bne.n	8002128 <i2c_slv_cmd_rx_tx_handle+0x688>
			{
				i2c_slv_tx.data = ucd_detector.mbias_2_target; 						// Prepare the date into the transmit
 800211a:	4b83      	ldr	r3, [pc, #524]	; (8002328 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800211c:	89da      	ldrh	r2, [r3, #14]
 800211e:	4b83      	ldr	r3, [pc, #524]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002120:	801a      	strh	r2, [r3, #0]
				return(status);
 8002122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002126:	e3c1      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002128:	4b7e      	ldr	r3, [pc, #504]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800212a:	789b      	ldrb	r3, [r3, #2]
 800212c:	2b00      	cmp	r3, #0
 800212e:	f040 8385 	bne.w	800283c <i2c_slv_cmd_rx_tx_handle+0xd9c>
			{
				// Read the data from the buffer
				ucd_detector.mbias_2_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002132:	4b7c      	ldr	r3, [pc, #496]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002134:	785b      	ldrb	r3, [r3, #1]
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	b21a      	sxth	r2, r3
												 i2c_slv_rx.bytes.data_byte_lsb;
 800213a:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b21b      	sxth	r3, r3
				ucd_detector.mbias_2_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002140:	4313      	orrs	r3, r2
 8002142:	b21b      	sxth	r3, r3
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b78      	ldr	r3, [pc, #480]	; (8002328 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002148:	81da      	strh	r2, [r3, #14]

				HAL_StatusTypeDef status = dac7574_write(UCD_DAC_MBIAS_2_INDEX, ucd_detector.mbias_2_target);
 800214a:	4b77      	ldr	r3, [pc, #476]	; (8002328 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800214c:	89db      	ldrh	r3, [r3, #14]
 800214e:	4619      	mov	r1, r3
 8002150:	2014      	movs	r0, #20
 8002152:	f7fe fcdf 	bl	8000b14 <dac7574_write>
 8002156:	4603      	mov	r3, r0
 8002158:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

				i2c_slv_tx.data = status;
 800215c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002160:	b29a      	uxth	r2, r3
 8002162:	4b72      	ldr	r3, [pc, #456]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002164:	801a      	strh	r2, [r3, #0]
				return(status);
 8002166:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e39a      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
    	//                     CEA Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002176:	4b6b      	ldr	r3, [pc, #428]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002178:	789b      	ldrb	r3, [r3, #2]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10c      	bne.n	8002198 <i2c_slv_cmd_rx_tx_handle+0x6f8>
			{
				cea_detector.board_enable_state = (uint16_t)cea_board_enable_get(); // Read the state enable pin
 800217e:	f7ff fa87 	bl	8001690 <cea_board_enable_get>
 8002182:	4603      	mov	r3, r0
 8002184:	b29a      	uxth	r2, r3
 8002186:	4b6a      	ldr	r3, [pc, #424]	; (8002330 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002188:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = cea_detector.board_enable_state; 					// Prepare the date into the transmit
 800218a:	4b69      	ldr	r3, [pc, #420]	; (8002330 <i2c_slv_cmd_rx_tx_handle+0x890>)
 800218c:	8a1a      	ldrh	r2, [r3, #16]
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002190:	801a      	strh	r2, [r3, #0]
				return(status);
 8002192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002196:	e389      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002198:	4b62      	ldr	r3, [pc, #392]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800219a:	789b      	ldrb	r3, [r3, #2]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 834f 	bne.w	8002840 <i2c_slv_cmd_rx_tx_handle+0xda0>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 80021a2:	4b60      	ldr	r3, [pc, #384]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d11e      	bne.n	80021e8 <i2c_slv_cmd_rx_tx_handle+0x748>
				{
					bool enable_status = cea_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff fa12 	bl	80015d4 <cea_board_enable_set>
 80021b0:	4603      	mov	r3, r0
 80021b2:	727b      	strb	r3, [r7, #9]
					if(enable_status == EXIT_SUCCESS)
 80021b4:	7a7b      	ldrb	r3, [r7, #9]
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d006      	beq.n	80021ce <i2c_slv_cmd_rx_tx_handle+0x72e>
					{
						i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80021c0:	4b5a      	ldr	r3, [pc, #360]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	801a      	strh	r2, [r3, #0]
						status =  EXIT_SUCCESS;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80021cc:	e009      	b.n	80021e2 <i2c_slv_cmd_rx_tx_handle+0x742>
					}
					else if (enable_status == EXIT_FAILURE)
 80021ce:	7a7b      	ldrb	r3, [r7, #9]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <i2c_slv_cmd_rx_tx_handle+0x742>
					{
						status =  EXIT_FAILURE;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80021da:	4b54      	ldr	r3, [pc, #336]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80021dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e0:	801a      	strh	r2, [r3, #0]
					}
					return(status);
 80021e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021e6:	e361      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 80021e8:	4b4e      	ldr	r3, [pc, #312]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d108      	bne.n	8002202 <i2c_slv_cmd_rx_tx_handle+0x762>
				{
					cea_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 80021f0:	2000      	movs	r0, #0
 80021f2:	f7ff f9ef 	bl	80015d4 <cea_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80021f6:	4b4d      	ldr	r3, [pc, #308]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	801a      	strh	r2, [r3, #0]
					return(status);
 80021fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002200:	e354      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002202:	4b4a      	ldr	r3, [pc, #296]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002208:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002214:	e34a      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002218:	789b      	ldrb	r3, [r3, #2]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d107      	bne.n	800222e <i2c_slv_cmd_rx_tx_handle+0x78e>
			{
				i2c_slv_tx.data = cea_detector.hv_loop_enable; 						// Prepare the date into the transmit
 800221e:	4b44      	ldr	r3, [pc, #272]	; (8002330 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002220:	785b      	ldrb	r3, [r3, #1]
 8002222:	b29a      	uxth	r2, r3
 8002224:	4b41      	ldr	r3, [pc, #260]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002226:	801a      	strh	r2, [r3, #0]
				return(status);
 8002228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800222c:	e33e      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800222e:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002230:	789b      	ldrb	r3, [r3, #2]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 8306 	bne.w	8002844 <i2c_slv_cmd_rx_tx_handle+0xda4>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 8002238:	4b3a      	ldr	r3, [pc, #232]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d108      	bne.n	8002252 <i2c_slv_cmd_rx_tx_handle+0x7b2>
				{
					cea_detector.hv_loop_enable = true;								// Set the state of the flag
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002242:	2201      	movs	r2, #1
 8002244:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002246:	4b39      	ldr	r3, [pc, #228]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002248:	2201      	movs	r2, #1
 800224a:	801a      	strh	r2, [r3, #0]
					return(status);
 800224c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002250:	e32c      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 8002252:	4b34      	ldr	r3, [pc, #208]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d108      	bne.n	800226c <i2c_slv_cmd_rx_tx_handle+0x7cc>
				{
					cea_detector.hv_loop_enable = false;						    // Set the state of the flag
 800225a:	4b35      	ldr	r3, [pc, #212]	; (8002330 <i2c_slv_cmd_rx_tx_handle+0x890>)
 800225c:	2200      	movs	r2, #0
 800225e:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002260:	4b32      	ldr	r3, [pc, #200]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002262:	2201      	movs	r2, #1
 8002264:	801a      	strh	r2, [r3, #0]
					return(status);
 8002266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800226a:	e31f      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800226c:	4b2f      	ldr	r3, [pc, #188]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 800226e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002272:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800227a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800227e:	e315      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 8002282:	789b      	ldrb	r3, [r3, #2]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d10f      	bne.n	80022a8 <i2c_slv_cmd_rx_tx_handle+0x808>
			{
				uint16_t dataread = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	817b      	strh	r3, [r7, #10]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 800228c:	2303      	movs	r3, #3
 800228e:	2202      	movs	r2, #2
 8002290:	21ee      	movs	r1, #238	; 0xee
 8002292:	4828      	ldr	r0, [pc, #160]	; (8002334 <i2c_slv_cmd_rx_tx_handle+0x894>)
 8002294:	f7fe fc6e 	bl	8000b74 <max6911_read>
 8002298:	4603      	mov	r3, r0
 800229a:	817b      	strh	r3, [r7, #10]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800229c:	4a23      	ldr	r2, [pc, #140]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 800229e:	897b      	ldrh	r3, [r7, #10]
 80022a0:	8013      	strh	r3, [r2, #0]

				return(status);
 80022a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022a6:	e301      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80022aa:	789b      	ldrb	r3, [r3, #2]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f040 82cb 	bne.w	8002848 <i2c_slv_cmd_rx_tx_handle+0xda8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80022b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b8:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80022c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022c4:	e2f2      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80022c8:	789b      	ldrb	r3, [r3, #2]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d10f      	bne.n	80022ee <i2c_slv_cmd_rx_tx_handle+0x84e>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	81bb      	strh	r3, [r7, #12]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 80022d2:	2301      	movs	r3, #1
 80022d4:	2200      	movs	r2, #0
 80022d6:	21f0      	movs	r1, #240	; 0xf0
 80022d8:	4816      	ldr	r0, [pc, #88]	; (8002334 <i2c_slv_cmd_rx_tx_handle+0x894>)
 80022da:	f7fe fc4b 	bl	8000b74 <max6911_read>
 80022de:	4603      	mov	r3, r0
 80022e0:	81bb      	strh	r3, [r7, #12]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80022e4:	89bb      	ldrh	r3, [r7, #12]
 80022e6:	8013      	strh	r3, [r2, #0]

				return(status);
 80022e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022ec:	e2de      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 80022f0:	789b      	ldrb	r3, [r3, #2]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 82aa 	bne.w	800284c <i2c_slv_cmd_rx_tx_handle+0xdac>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 80022fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fe:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800230a:	e2cf      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <i2c_slv_cmd_rx_tx_handle+0x884>)
 800230e:	789b      	ldrb	r3, [r3, #2]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d111      	bne.n	8002338 <i2c_slv_cmd_rx_tx_handle+0x898>
			{
				i2c_slv_tx.data = cea_detector.hv_targate_value;        // Prepare the date into the transmit
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002316:	891a      	ldrh	r2, [r3, #8]
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 800231a:	801a      	strh	r2, [r3, #0]
				return(status);
 800231c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002320:	e2c4      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
 8002322:	bf00      	nop
 8002324:	20000270 	.word	0x20000270
 8002328:	20000208 	.word	0x20000208
 800232c:	20000274 	.word	0x20000274
 8002330:	20000230 	.word	0x20000230
 8002334:	200000dc 	.word	0x200000dc
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002338:	4b9d      	ldr	r3, [pc, #628]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800233a:	789b      	ldrb	r3, [r3, #2]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 8293 	bne.w	8002868 <i2c_slv_cmd_rx_tx_handle+0xdc8>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 8002342:	4b9b      	ldr	r3, [pc, #620]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	d811      	bhi.n	800236e <i2c_slv_cmd_rx_tx_handle+0x8ce>
				{
					// Read the data from the buffer
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 800234a:	4b99      	ldr	r3, [pc, #612]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800234c:	785b      	ldrb	r3, [r3, #1]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 8002352:	4b97      	ldr	r3, [pc, #604]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b21b      	sxth	r3, r3
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002358:	4313      	orrs	r3, r2
 800235a:	b21b      	sxth	r3, r3
 800235c:	b29a      	uxth	r2, r3
 800235e:	4b95      	ldr	r3, [pc, #596]	; (80025b4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002360:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002362:	4b95      	ldr	r3, [pc, #596]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002364:	2201      	movs	r2, #1
 8002366:	801a      	strh	r2, [r3, #0]
					return(status);
 8002368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800236c:	e29e      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800236e:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002374:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					return(status);
 800237c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002380:	e294      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
    	//                     IJC Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002382:	4b8b      	ldr	r3, [pc, #556]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002384:	789b      	ldrb	r3, [r3, #2]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10c      	bne.n	80023a4 <i2c_slv_cmd_rx_tx_handle+0x904>
			{
				ijc_detector.board_enable_state = (uint16_t)ijc_board_enable_get(); // Read the state enable pin
 800238a:	f7ff f88d 	bl	80014a8 <ijc_board_enable_get>
 800238e:	4603      	mov	r3, r0
 8002390:	b29a      	uxth	r2, r3
 8002392:	4b8a      	ldr	r3, [pc, #552]	; (80025bc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002394:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = ijc_detector.board_enable_state; 					// Prepare the date into the transmit
 8002396:	4b89      	ldr	r3, [pc, #548]	; (80025bc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002398:	8a1a      	ldrh	r2, [r3, #16]
 800239a:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 800239c:	801a      	strh	r2, [r3, #0]
				return(status);
 800239e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023a2:	e283      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80023a4:	4b82      	ldr	r3, [pc, #520]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80023a6:	789b      	ldrb	r3, [r3, #2]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 825f 	bne.w	800286c <i2c_slv_cmd_rx_tx_handle+0xdcc>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 80023ae:	4b80      	ldr	r3, [pc, #512]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d11e      	bne.n	80023f4 <i2c_slv_cmd_rx_tx_handle+0x954>
				{
					bool enable_status = ijc_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 80023b6:	2001      	movs	r0, #1
 80023b8:	f7ff f818 	bl	80013ec <ijc_board_enable_set>
 80023bc:	4603      	mov	r3, r0
 80023be:	73fb      	strb	r3, [r7, #15]
					if(enable_status == EXIT_SUCCESS)
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
 80023c2:	f083 0301 	eor.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d006      	beq.n	80023da <i2c_slv_cmd_rx_tx_handle+0x93a>
					{
						i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80023cc:	4b7a      	ldr	r3, [pc, #488]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	801a      	strh	r2, [r3, #0]
						status =  EXIT_SUCCESS;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80023d8:	e009      	b.n	80023ee <i2c_slv_cmd_rx_tx_handle+0x94e>
					}
					else if (enable_status == EXIT_FAILURE)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <i2c_slv_cmd_rx_tx_handle+0x94e>
					{
						status =  EXIT_FAILURE;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80023e6:	4b74      	ldr	r3, [pc, #464]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80023e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ec:	801a      	strh	r2, [r3, #0]
					}
					return(status);
 80023ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023f2:	e25b      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 80023f4:	4b6e      	ldr	r3, [pc, #440]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d108      	bne.n	800240e <i2c_slv_cmd_rx_tx_handle+0x96e>
				{
					ijc_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe fff5 	bl	80013ec <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002404:	2201      	movs	r2, #1
 8002406:	801a      	strh	r2, [r3, #0]
					return(status);
 8002408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800240c:	e24e      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800240e:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002414:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002416:	2301      	movs	r3, #1
 8002418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800241c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002420:	e244      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002422:	4b63      	ldr	r3, [pc, #396]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002424:	789b      	ldrb	r3, [r3, #2]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <i2c_slv_cmd_rx_tx_handle+0x99a>
			{
				i2c_slv_tx.data = ijc_detector.hv_loop_enable; 						// Prepare the date into the transmit
 800242a:	4b64      	ldr	r3, [pc, #400]	; (80025bc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 800242c:	785b      	ldrb	r3, [r3, #1]
 800242e:	b29a      	uxth	r2, r3
 8002430:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002432:	801a      	strh	r2, [r3, #0]
				return(status);
 8002434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002438:	e238      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800243a:	4b5d      	ldr	r3, [pc, #372]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800243c:	789b      	ldrb	r3, [r3, #2]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 8216 	bne.w	8002870 <i2c_slv_cmd_rx_tx_handle+0xdd0>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 8002444:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d108      	bne.n	800245e <i2c_slv_cmd_rx_tx_handle+0x9be>
				{
					ijc_detector.hv_loop_enable = true;								// Set the state of the flag
 800244c:	4b5b      	ldr	r3, [pc, #364]	; (80025bc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 800244e:	2201      	movs	r2, #1
 8002450:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002452:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002454:	2201      	movs	r2, #1
 8002456:	801a      	strh	r2, [r3, #0]
					return(status);
 8002458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800245c:	e226      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 800245e:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d108      	bne.n	8002478 <i2c_slv_cmd_rx_tx_handle+0x9d8>
				{
					ijc_detector.hv_loop_enable = false;						    // Set the state of the flag
 8002466:	4b55      	ldr	r3, [pc, #340]	; (80025bc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002468:	2200      	movs	r2, #0
 800246a:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800246c:	4b52      	ldr	r3, [pc, #328]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 800246e:	2201      	movs	r2, #1
 8002470:	801a      	strh	r2, [r3, #0]
					return(status);
 8002472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002476:	e219      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002478:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 800247a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800247e:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002480:	2301      	movs	r3, #1
 8002482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800248a:	e20f      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800248c:	4b48      	ldr	r3, [pc, #288]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800248e:	789b      	ldrb	r3, [r3, #2]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10f      	bne.n	80024b4 <i2c_slv_cmd_rx_tx_handle+0xa14>
			{
				uint16_t dataread = 0;
 8002494:	2300      	movs	r3, #0
 8002496:	82bb      	strh	r3, [r7, #20]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8002498:	2303      	movs	r3, #3
 800249a:	2202      	movs	r2, #2
 800249c:	21e0      	movs	r1, #224	; 0xe0
 800249e:	4848      	ldr	r0, [pc, #288]	; (80025c0 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 80024a0:	f7fe fb68 	bl	8000b74 <max6911_read>
 80024a4:	4603      	mov	r3, r0
 80024a6:	82bb      	strh	r3, [r7, #20]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80024a8:	4a43      	ldr	r2, [pc, #268]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80024aa:	8abb      	ldrh	r3, [r7, #20]
 80024ac:	8013      	strh	r3, [r2, #0]

				return(status);
 80024ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024b2:	e1fb      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80024b4:	4b3e      	ldr	r3, [pc, #248]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80024b6:	789b      	ldrb	r3, [r3, #2]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 81db 	bne.w	8002874 <i2c_slv_cmd_rx_tx_handle+0xdd4>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80024be:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80024c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80024cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024d0:	e1ec      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80024d2:	4b37      	ldr	r3, [pc, #220]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80024d4:	789b      	ldrb	r3, [r3, #2]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d10f      	bne.n	80024fa <i2c_slv_cmd_rx_tx_handle+0xa5a>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	82fb      	strh	r3, [r7, #22]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 80024de:	2301      	movs	r3, #1
 80024e0:	2200      	movs	r2, #0
 80024e2:	21e0      	movs	r1, #224	; 0xe0
 80024e4:	4836      	ldr	r0, [pc, #216]	; (80025c0 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 80024e6:	f7fe fb45 	bl	8000b74 <max6911_read>
 80024ea:	4603      	mov	r3, r0
 80024ec:	82fb      	strh	r3, [r7, #22]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80024ee:	4a32      	ldr	r2, [pc, #200]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80024f0:	8afb      	ldrh	r3, [r7, #22]
 80024f2:	8013      	strh	r3, [r2, #0]

				return(status);
 80024f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024f8:	e1d8      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 80024fc:	789b      	ldrb	r3, [r3, #2]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 81ba 	bne.w	8002878 <i2c_slv_cmd_rx_tx_handle+0xdd8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002504:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002506:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800250a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800250c:	2301      	movs	r3, #1
 800250e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				{
				    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002516:	482b      	ldr	r0, [pc, #172]	; (80025c4 <i2c_slv_cmd_rx_tx_handle+0xb24>)
 8002518:	f001 f88e 	bl	8003638 <HAL_GPIO_TogglePin>
				}
				return(status);
 800251c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002520:	e1c4      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002522:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002524:	789b      	ldrb	r3, [r3, #2]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d10f      	bne.n	800254a <i2c_slv_cmd_rx_tx_handle+0xaaa>
			{
				uint16_t dataread = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	833b      	strh	r3, [r7, #24]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 800252e:	2303      	movs	r3, #3
 8002530:	2202      	movs	r2, #2
 8002532:	21e2      	movs	r1, #226	; 0xe2
 8002534:	4822      	ldr	r0, [pc, #136]	; (80025c0 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 8002536:	f7fe fb1d 	bl	8000b74 <max6911_read>
 800253a:	4603      	mov	r3, r0
 800253c:	833b      	strh	r3, [r7, #24]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800253e:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002540:	8b3b      	ldrh	r3, [r7, #24]
 8002542:	8013      	strh	r3, [r2, #0]

				return(status);
 8002544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002548:	e1b0      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 8194 	bne.w	800287c <i2c_slv_cmd_rx_tx_handle+0xddc>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800255c:	2301      	movs	r3, #1
 800255e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002566:	e1a1      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 800256a:	789b      	ldrb	r3, [r3, #2]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10f      	bne.n	8002590 <i2c_slv_cmd_rx_tx_handle+0xaf0>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	837b      	strh	r3, [r7, #26]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8002574:	2301      	movs	r3, #1
 8002576:	2200      	movs	r2, #0
 8002578:	21e2      	movs	r1, #226	; 0xe2
 800257a:	4811      	ldr	r0, [pc, #68]	; (80025c0 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 800257c:	f7fe fafa 	bl	8000b74 <max6911_read>
 8002580:	4603      	mov	r3, r0
 8002582:	837b      	strh	r3, [r7, #26]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8002584:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 8002586:	8b7b      	ldrh	r3, [r7, #26]
 8002588:	8013      	strh	r3, [r2, #0]

				return(status);
 800258a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800258e:	e18d      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002590:	4b07      	ldr	r3, [pc, #28]	; (80025b0 <i2c_slv_cmd_rx_tx_handle+0xb10>)
 8002592:	789b      	ldrb	r3, [r3, #2]
 8002594:	2b00      	cmp	r3, #0
 8002596:	f040 8173 	bne.w	8002880 <i2c_slv_cmd_rx_tx_handle+0xde0>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 800259c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a0:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80025a2:	2301      	movs	r3, #1
 80025a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80025a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ac:	e17e      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
 80025ae:	bf00      	nop
 80025b0:	20000270 	.word	0x20000270
 80025b4:	20000230 	.word	0x20000230
 80025b8:	20000274 	.word	0x20000274
 80025bc:	2000021c 	.word	0x2000021c
 80025c0:	20000088 	.word	0x20000088
 80025c4:	48000400 	.word	0x48000400
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80025c8:	4ba1      	ldr	r3, [pc, #644]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80025ca:	789b      	ldrb	r3, [r3, #2]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d10f      	bne.n	80025f0 <i2c_slv_cmd_rx_tx_handle+0xb50>
			{
				uint16_t dataread = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	823b      	strh	r3, [r7, #16]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80025d4:	2303      	movs	r3, #3
 80025d6:	2202      	movs	r2, #2
 80025d8:	21e4      	movs	r1, #228	; 0xe4
 80025da:	489e      	ldr	r0, [pc, #632]	; (8002854 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80025dc:	f7fe faca 	bl	8000b74 <max6911_read>
 80025e0:	4603      	mov	r3, r0
 80025e2:	823b      	strh	r3, [r7, #16]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80025e4:	4a9c      	ldr	r2, [pc, #624]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80025e6:	8a3b      	ldrh	r3, [r7, #16]
 80025e8:	8013      	strh	r3, [r2, #0]

				return(status);
 80025ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025ee:	e15d      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80025f0:	4b97      	ldr	r3, [pc, #604]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80025f2:	789b      	ldrb	r3, [r3, #2]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 8145 	bne.w	8002884 <i2c_slv_cmd_rx_tx_handle+0xde4>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80025fa:	4b97      	ldr	r3, [pc, #604]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80025fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002600:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800260c:	e14e      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800260e:	4b90      	ldr	r3, [pc, #576]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002610:	789b      	ldrb	r3, [r3, #2]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10f      	bne.n	8002636 <i2c_slv_cmd_rx_tx_handle+0xb96>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	827b      	strh	r3, [r7, #18]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 800261a:	2301      	movs	r3, #1
 800261c:	2200      	movs	r2, #0
 800261e:	21e6      	movs	r1, #230	; 0xe6
 8002620:	488c      	ldr	r0, [pc, #560]	; (8002854 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002622:	f7fe faa7 	bl	8000b74 <max6911_read>
 8002626:	4603      	mov	r3, r0
 8002628:	827b      	strh	r3, [r7, #18]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800262a:	4a8b      	ldr	r2, [pc, #556]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 800262c:	8a7b      	ldrh	r3, [r7, #18]
 800262e:	8013      	strh	r3, [r2, #0]

				return(status);
 8002630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002634:	e13a      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002636:	4b86      	ldr	r3, [pc, #536]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002638:	789b      	ldrb	r3, [r3, #2]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f040 8124 	bne.w	8002888 <i2c_slv_cmd_rx_tx_handle+0xde8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002640:	4b85      	ldr	r3, [pc, #532]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002646:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800264e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002652:	e12b      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002654:	4b7e      	ldr	r3, [pc, #504]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002656:	789b      	ldrb	r3, [r3, #2]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d106      	bne.n	800266a <i2c_slv_cmd_rx_tx_handle+0xbca>
			{
				i2c_slv_tx.data = ijc_detector.hv_targate_value;        // Prepare the date into the transmit
 800265c:	4b7f      	ldr	r3, [pc, #508]	; (800285c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 800265e:	891a      	ldrh	r2, [r3, #8]
 8002660:	4b7d      	ldr	r3, [pc, #500]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002662:	801a      	strh	r2, [r3, #0]
				return(status);
 8002664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002668:	e120      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800266a:	4b79      	ldr	r3, [pc, #484]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 800266c:	789b      	ldrb	r3, [r3, #2]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 810c 	bne.w	800288c <i2c_slv_cmd_rx_tx_handle+0xdec>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 8002674:	4b76      	ldr	r3, [pc, #472]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002676:	785b      	ldrb	r3, [r3, #1]
 8002678:	2b0f      	cmp	r3, #15
 800267a:	d811      	bhi.n	80026a0 <i2c_slv_cmd_rx_tx_handle+0xc00>
				{
					// Read the data from the buffer
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 800267c:	4b74      	ldr	r3, [pc, #464]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 800267e:	785b      	ldrb	r3, [r3, #1]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 8002684:	4b72      	ldr	r3, [pc, #456]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b21b      	sxth	r3, r3
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 800268a:	4313      	orrs	r3, r2
 800268c:	b21b      	sxth	r3, r3
 800268e:	b29a      	uxth	r2, r3
 8002690:	4b72      	ldr	r3, [pc, #456]	; (800285c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002692:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002694:	4b70      	ldr	r3, [pc, #448]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002696:	2201      	movs	r2, #1
 8002698:	801a      	strh	r2, [r3, #0]
					return(status);
 800269a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800269e:	e105      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80026a0:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80026a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026a6:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					return(status);
 80026ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026b2:	e0fb      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
    	//                            CAEN MODULE BOARD
		// ---------------------------------------------------------------------
       	// ---------------------------------------------------------------------
    	case(CMD_CAEN_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80026b6:	789b      	ldrb	r3, [r3, #2]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10c      	bne.n	80026d6 <i2c_slv_cmd_rx_tx_handle+0xc36>
			{
				caen_detector.board_enable_state = (uint16_t)caen_board_enable_get(); // Read the state enable pin
 80026bc:	f7fe fd8c 	bl	80011d8 <caen_board_enable_get>
 80026c0:	4603      	mov	r3, r0
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	4b66      	ldr	r3, [pc, #408]	; (8002860 <i2c_slv_cmd_rx_tx_handle+0xdc0>)
 80026c6:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = caen_detector.board_enable_state; 					// Prepare the date into the transmit
 80026c8:	4b65      	ldr	r3, [pc, #404]	; (8002860 <i2c_slv_cmd_rx_tx_handle+0xdc0>)
 80026ca:	8a1a      	ldrh	r2, [r3, #16]
 80026cc:	4b62      	ldr	r3, [pc, #392]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80026ce:	801a      	strh	r2, [r3, #0]
				return(status);
 80026d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026d4:	e0ea      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80026d6:	4b5e      	ldr	r3, [pc, #376]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80026d8:	789b      	ldrb	r3, [r3, #2]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 80d8 	bne.w	8002890 <i2c_slv_cmd_rx_tx_handle+0xdf0>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 80026e0:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d108      	bne.n	80026fa <i2c_slv_cmd_rx_tx_handle+0xc5a>
				{
					caen_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 80026e8:	2001      	movs	r0, #1
 80026ea:	f7fe fd5d 	bl	80011a8 <caen_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80026ee:	4b5a      	ldr	r3, [pc, #360]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	801a      	strh	r2, [r3, #0]
					return(status);
 80026f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026f8:	e0d8      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 80026fa:	4b55      	ldr	r3, [pc, #340]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d108      	bne.n	8002714 <i2c_slv_cmd_rx_tx_handle+0xc74>
				{
					caen_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fd50 	bl	80011a8 <caen_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002708:	4b53      	ldr	r3, [pc, #332]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 800270a:	2201      	movs	r2, #1
 800270c:	801a      	strh	r2, [r3, #0]
					return(status);
 800270e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002712:	e0cb      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002714:	4b50      	ldr	r3, [pc, #320]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002726:	e0c1      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
    	//                            TEMP PRESSURE
		// ---------------------------------------------------------------------
       	// ---------------------------------------------------------------------
    	case(CMD_TEMP_MSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002728:	4b49      	ldr	r3, [pc, #292]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 800272a:	789b      	ldrb	r3, [r3, #2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d108      	bne.n	8002742 <i2c_slv_cmd_rx_tx_handle+0xca2>
			{
				i2c_slv_tx.data = (measurement.uncomp_temp >> 16) & 0xFFFF;  	// Prepare the date into the transmit
 8002730:	4b4c      	ldr	r3, [pc, #304]	; (8002864 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b47      	ldr	r3, [pc, #284]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 800273a:	801a      	strh	r2, [r3, #0]
				return(status);
 800273c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002740:	e0b4      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002742:	4b43      	ldr	r3, [pc, #268]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002744:	789b      	ldrb	r3, [r3, #2]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 80a4 	bne.w	8002894 <i2c_slv_cmd_rx_tx_handle+0xdf4>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800274c:	4b42      	ldr	r3, [pc, #264]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 800274e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002752:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800275a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800275e:	e0a5      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_TEMP_LSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002760:	4b3b      	ldr	r3, [pc, #236]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002762:	789b      	ldrb	r3, [r3, #2]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <i2c_slv_cmd_rx_tx_handle+0xcd8>
			{
				i2c_slv_tx.data = (measurement.uncomp_temp) & 0xFFFF;  	// Prepare the date into the transmit
 8002768:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b29a      	uxth	r2, r3
 800276e:	4b3a      	ldr	r3, [pc, #232]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002770:	801a      	strh	r2, [r3, #0]
				return(status);
 8002772:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002776:	e099      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002778:	4b35      	ldr	r3, [pc, #212]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 800277a:	789b      	ldrb	r3, [r3, #2]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f040 808b 	bne.w	8002898 <i2c_slv_cmd_rx_tx_handle+0xdf8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002782:	4b35      	ldr	r3, [pc, #212]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002788:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002790:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002794:	e08a      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>

    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_PRES_MSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 8002798:	789b      	ldrb	r3, [r3, #2]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d108      	bne.n	80027b0 <i2c_slv_cmd_rx_tx_handle+0xd10>
			{
				i2c_slv_tx.data = (measurement.uncomp_press >> 16) & 0xFFFF;  	// Prepare the date into the transmit
 800279e:	4b31      	ldr	r3, [pc, #196]	; (8002864 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80027a8:	801a      	strh	r2, [r3, #0]
				return(status);
 80027aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027ae:	e07d      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80027b2:	789b      	ldrb	r3, [r3, #2]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d171      	bne.n	800289c <i2c_slv_cmd_rx_tx_handle+0xdfc>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80027ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027be:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80027c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027ca:	e06f      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_PRES_LSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80027ce:	789b      	ldrb	r3, [r3, #2]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <i2c_slv_cmd_rx_tx_handle+0xd44>
			{
				i2c_slv_tx.data = (measurement.uncomp_press) & 0xFFFF;  	// Prepare the date into the transmit
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80027dc:	801a      	strh	r2, [r3, #0]
				return(status);
 80027de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027e2:	e063      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <i2c_slv_cmd_rx_tx_handle+0xdb0>)
 80027e6:	789b      	ldrb	r3, [r3, #2]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d159      	bne.n	80028a0 <i2c_slv_cmd_rx_tx_handle+0xe00>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 80027ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f2:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80027fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027fe:	e055      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			break;
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	default:
			status =  EXIT_FAILURE;
 8002800:	2301      	movs	r3, #1
 8002802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return(status);
 8002806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800280a:	e04f      	b.n	80028ac <i2c_slv_cmd_rx_tx_handle+0xe0c>
			break;
 800280c:	bf00      	nop
 800280e:	e048      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002810:	bf00      	nop
 8002812:	e046      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002814:	bf00      	nop
 8002816:	e044      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002818:	bf00      	nop
 800281a:	e042      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800281c:	bf00      	nop
 800281e:	e040      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002820:	bf00      	nop
 8002822:	e03e      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002824:	bf00      	nop
 8002826:	e03c      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002828:	bf00      	nop
 800282a:	e03a      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800282c:	bf00      	nop
 800282e:	e038      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002830:	bf00      	nop
 8002832:	e036      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002834:	bf00      	nop
 8002836:	e034      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002838:	bf00      	nop
 800283a:	e032      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800283c:	bf00      	nop
 800283e:	e030      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002840:	bf00      	nop
 8002842:	e02e      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002844:	bf00      	nop
 8002846:	e02c      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002848:	bf00      	nop
 800284a:	e02a      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800284c:	bf00      	nop
 800284e:	e028      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
 8002850:	20000270 	.word	0x20000270
 8002854:	20000088 	.word	0x20000088
 8002858:	20000274 	.word	0x20000274
 800285c:	2000021c 	.word	0x2000021c
 8002860:	20000244 	.word	0x20000244
 8002864:	20000278 	.word	0x20000278
			break;
 8002868:	bf00      	nop
 800286a:	e01a      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800286c:	bf00      	nop
 800286e:	e018      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002870:	bf00      	nop
 8002872:	e016      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002874:	bf00      	nop
 8002876:	e014      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002878:	bf00      	nop
 800287a:	e012      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800287c:	bf00      	nop
 800287e:	e010      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002880:	bf00      	nop
 8002882:	e00e      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002884:	bf00      	nop
 8002886:	e00c      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002888:	bf00      	nop
 800288a:	e00a      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800288c:	bf00      	nop
 800288e:	e008      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002890:	bf00      	nop
 8002892:	e006      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002894:	bf00      	nop
 8002896:	e004      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 8002898:	bf00      	nop
 800289a:	e002      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 800289c:	bf00      	nop
 800289e:	e000      	b.n	80028a2 <i2c_slv_cmd_rx_tx_handle+0xe02>
			break;
 80028a0:	bf00      	nop
	}

    // If no command is matched - return failure
	status =  EXIT_FAILURE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return(status);
 80028a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3730      	adds	r7, #48	; 0x30
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <i2c_slv_init>:



void i2c_slv_init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	// Clear the Tx and Rx buffers before use
	i2c_slv_clear_buffer(&i2c_tx_buffer[0], TXBUFFERSIZE);
 80028b8:	2102      	movs	r1, #2
 80028ba:	4808      	ldr	r0, [pc, #32]	; (80028dc <i2c_slv_init+0x28>)
 80028bc:	f000 f814 	bl	80028e8 <i2c_slv_clear_buffer>
	i2c_slv_clear_buffer(&i2c_rx_buffer[0], RXBUFFERSIZE);
 80028c0:	2104      	movs	r1, #4
 80028c2:	4807      	ldr	r0, [pc, #28]	; (80028e0 <i2c_slv_init+0x2c>)
 80028c4:	f000 f810 	bl	80028e8 <i2c_slv_clear_buffer>

	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80028c8:	4806      	ldr	r0, [pc, #24]	; (80028e4 <i2c_slv_init+0x30>)
 80028ca:	f001 fadd 	bl	8003e88 <HAL_I2C_EnableListen_IT>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <i2c_slv_init+0x24>
	{
		/* Transfer error in reception process */
		Error_Handler();
 80028d4:	f000 f8e0 	bl	8002a98 <Error_Handler>
	}
}
 80028d8:	bf00      	nop
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000268 	.word	0x20000268
 80028e0:	2000026c 	.word	0x2000026c
 80028e4:	20000034 	.word	0x20000034

080028e8 <i2c_slv_clear_buffer>:


void i2c_slv_clear_buffer(uint8_t* buffer, uint8_t size)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	70fb      	strb	r3, [r7, #3]

	uint8_t idx = 0; // An index
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]

	for(idx = 0; idx < size; idx++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	e008      	b.n	8002910 <i2c_slv_clear_buffer+0x28>
	{
		// Cycle through and clear the buffer array
		*buffer = 0x00;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
		buffer++;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3301      	adds	r3, #1
 8002908:	607b      	str	r3, [r7, #4]
	for(idx = 0; idx < size; idx++)
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	3301      	adds	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	429a      	cmp	r2, r3
 8002916:	d3f2      	bcc.n	80028fe <i2c_slv_clear_buffer+0x16>
	}

}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	Xfer_Complete = 1;        // Set flag for RX completion
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000030 	.word	0x20000030

08002948 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	// Handle the I2C receive callback complete
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	061a      	lsls	r2, r3, #24
					| (i2c_rx_buffer[1] << 16)
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	431a      	orrs	r2, r3
					| (i2c_rx_buffer[2] << 8)
 800295e:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8002960:	789b      	ldrb	r3, [r3, #2]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	4313      	orrs	r3, r2
					| (i2c_rx_buffer[3]);
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8002968:	78d2      	ldrb	r2, [r2, #3]
 800296a:	4313      	orrs	r3, r2
 800296c:	461a      	mov	r2, r3
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 800296e:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8002970:	601a      	str	r2, [r3, #0]

	// Load the init/fail value into the tx buffer
	i2c_slv_tx.data = CMD_FAIL_OP_INPROG_RESP;
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8002974:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002978:	801a      	strh	r2, [r3, #0]

	Xfer_Complete = 1;                           // Set flag for RX completion
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	2000026c 	.word	0x2000026c
 8002990:	20000270 	.word	0x20000270
 8002994:	20000274 	.word	0x20000274
 8002998:	20000030 	.word	0x20000030

0800299c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	70fb      	strb	r3, [r7, #3]
 80029a8:	4613      	mov	r3, r2
 80029aa:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <HAL_I2C_AddrCallback+0x68>)
 80029b0:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_I2C_AddrCallback+0x68>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d014      	beq.n	80029e4 <HAL_I2C_AddrCallback+0x48>
	/*##- Start the transmission process #####################################*/
	/* While the I2C in reception process, user can transmit data through
	"i2c_tx_buffer" buffer */

	// Update the TX buffer
	i2c_tx_buffer[0] = i2c_slv_tx.bytes.byte_1;
 80029ba:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <HAL_I2C_AddrCallback+0x6c>)
 80029bc:	785a      	ldrb	r2, [r3, #1]
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_I2C_AddrCallback+0x70>)
 80029c0:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_slv_tx.bytes.byte_2;
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_I2C_AddrCallback+0x6c>)
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_I2C_AddrCallback+0x70>)
 80029c8:	705a      	strb	r2, [r3, #1]
	//copy_array(&i2c_slv_tx.bytes.byte_1, i2c_tx_buffer[0], TXBUFFERSIZE);

	if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)i2c_tx_buffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80029ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ce:	2202      	movs	r2, #2
 80029d0:	490e      	ldr	r1, [pc, #56]	; (8002a0c <HAL_I2C_AddrCallback+0x70>)
 80029d2:	480f      	ldr	r0, [pc, #60]	; (8002a10 <HAL_I2C_AddrCallback+0x74>)
 80029d4:	f001 f8f4 	bl	8003bc0 <HAL_I2C_Slave_Seq_Transmit_IT>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00e      	beq.n	80029fc <HAL_I2C_AddrCallback+0x60>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 80029de:	f000 f85b 	bl	8002a98 <Error_Handler>
		Error_Handler();
	}

  }

}
 80029e2:	e00b      	b.n	80029fc <HAL_I2C_AddrCallback+0x60>
	if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)i2c_rx_buffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80029e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e8:	2204      	movs	r2, #4
 80029ea:	490a      	ldr	r1, [pc, #40]	; (8002a14 <HAL_I2C_AddrCallback+0x78>)
 80029ec:	4808      	ldr	r0, [pc, #32]	; (8002a10 <HAL_I2C_AddrCallback+0x74>)
 80029ee:	f001 f999 	bl	8003d24 <HAL_I2C_Slave_Seq_Receive_IT>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_AddrCallback+0x60>
		Error_Handler();
 80029f8:	f000 f84e 	bl	8002a98 <Error_Handler>
}
 80029fc:	bf00      	nop
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	2000002c 	.word	0x2000002c
 8002a08:	20000274 	.word	0x20000274
 8002a0c:	20000268 	.word	0x20000268
 8002a10:	20000034 	.word	0x20000034
 8002a14:	2000026c 	.word	0x2000026c

08002a18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
	//HAL_I2C_EnableListen_IT(&hi2c1);
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f001 faee 	bl	8004016 <HAL_I2C_GetError>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8002a40:	f000 f82a 	bl	8002a98 <Error_Handler>
  }
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	counter ++;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002a5e:	701a      	strb	r2, [r3, #0]

	// Set the flags responsable for running through the DSSD loop
	ijc_detector.ramp_flag = true;
 8002a60:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
	cea_detector.ramp_flag = true;
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
	general_loop_flg = true;
 8002a6c:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002a72:	2140      	movs	r1, #64	; 0x40
 8002a74:	4807      	ldr	r0, [pc, #28]	; (8002a94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a76:	f000 fddf 	bl	8003638 <HAL_GPIO_TogglePin>
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000276 	.word	0x20000276
 8002a88:	2000021c 	.word	0x2000021c
 8002a8c:	20000230 	.word	0x20000230
 8002a90:	20000277 	.word	0x20000277
 8002a94:	48000800 	.word	0x48000800

08002a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a9c:	b672      	cpsid	i
}
 8002a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <Error_Handler+0x8>
	...

08002aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aaa:	4b0f      	ldr	r3, [pc, #60]	; (8002ae8 <HAL_MspInit+0x44>)
 8002aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aae:	4a0e      	ldr	r2, [pc, #56]	; (8002ae8 <HAL_MspInit+0x44>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <HAL_MspInit+0x44>)
 8002ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac2:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_MspInit+0x44>)
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac6:	4a08      	ldr	r2, [pc, #32]	; (8002ae8 <HAL_MspInit+0x44>)
 8002ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002acc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <HAL_MspInit+0x44>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000

08002aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b0a6      	sub	sp, #152	; 0x98
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
 8002b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b08:	2260      	movs	r2, #96	; 0x60
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f005 f9b0 	bl	8007e72 <memset>
  if(hi2c->Instance==I2C1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a6c      	ldr	r2, [pc, #432]	; (8002cc8 <HAL_I2C_MspInit+0x1dc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d14d      	bne.n	8002bb8 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b1c:	2340      	movs	r3, #64	; 0x40
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b20:	2300      	movs	r3, #0
 8002b22:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f003 fd87 	bl	800663c <HAL_RCCEx_PeriphCLKConfig>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002b34:	f7ff ffb0 	bl	8002a98 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b38:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3c:	4a63      	ldr	r2, [pc, #396]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	623b      	str	r3, [r7, #32]
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b58:	2312      	movs	r3, #18
 8002b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b64:	2303      	movs	r3, #3
 8002b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b74:	4619      	mov	r1, r3
 8002b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7a:	f000 fbb3 	bl	80032e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b7e:	4b53      	ldr	r3, [pc, #332]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b88:	6593      	str	r3, [r2, #88]	; 0x58
 8002b8a:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	201f      	movs	r0, #31
 8002b9c:	f000 fb1d 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002ba0:	201f      	movs	r0, #31
 8002ba2:	f000 fb36 	bl	8003212 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2020      	movs	r0, #32
 8002bac:	f000 fb15 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002bb0:	2020      	movs	r0, #32
 8002bb2:	f000 fb2e 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002bb6:	e082      	b.n	8002cbe <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a44      	ldr	r2, [pc, #272]	; (8002cd0 <HAL_I2C_MspInit+0x1e4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d13c      	bne.n	8002c3c <HAL_I2C_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bc2:	2380      	movs	r3, #128	; 0x80
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 fd34 	bl	800663c <HAL_RCCEx_PeriphCLKConfig>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8002bda:	f7ff ff5d 	bl	8002a98 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	4a3a      	ldr	r2, [pc, #232]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bea:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	61bb      	str	r3, [r7, #24]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bf6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bfe:	2312      	movs	r3, #18
 8002c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c10:	2304      	movs	r3, #4
 8002c12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	482d      	ldr	r0, [pc, #180]	; (8002cd4 <HAL_I2C_MspInit+0x1e8>)
 8002c1e:	f000 fb61 	bl	80032e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c22:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002c28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]
}
 8002c3a:	e040      	b.n	8002cbe <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C3)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a25      	ldr	r2, [pc, #148]	; (8002cd8 <HAL_I2C_MspInit+0x1ec>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d13b      	bne.n	8002cbe <HAL_I2C_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002c46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fcf1 	bl	800663c <HAL_RCCEx_PeriphCLKConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_MspInit+0x178>
      Error_Handler();
 8002c60:	f7ff ff1a 	bl	8002a98 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c82:	2312      	movs	r3, #18
 8002c84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c94:	2304      	movs	r3, #4
 8002c96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c9a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	480e      	ldr	r0, [pc, #56]	; (8002cdc <HAL_I2C_MspInit+0x1f0>)
 8002ca2:	f000 fb1f 	bl	80032e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	4a08      	ldr	r2, [pc, #32]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002cac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb2:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <HAL_I2C_MspInit+0x1e0>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
}
 8002cbe:	bf00      	nop
 8002cc0:	3798      	adds	r7, #152	; 0x98
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40005400 	.word	0x40005400
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40005800 	.word	0x40005800
 8002cd4:	48000400 	.word	0x48000400
 8002cd8:	40005c00 	.word	0x40005c00
 8002cdc:	48000800 	.word	0x48000800

08002ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf0:	d113      	bne.n	8002d1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HAL_TIM_Base_MspInit+0x44>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	4a0b      	ldr	r2, [pc, #44]	; (8002d24 <HAL_TIM_Base_MspInit+0x44>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_TIM_Base_MspInit+0x44>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	201c      	movs	r0, #28
 8002d10:	f000 fa63 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d14:	201c      	movs	r0, #28
 8002d16:	f000 fa7c 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b0a2      	sub	sp, #136	; 0x88
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2260      	movs	r2, #96	; 0x60
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f005 f892 	bl	8007e72 <memset>
  if(huart->Instance==USART2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <HAL_UART_MspInit+0xac>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d138      	bne.n	8002dca <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d58:	2302      	movs	r3, #2
 8002d5a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d60:	f107 0314 	add.w	r3, r7, #20
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 fc69 	bl	800663c <HAL_RCCEx_PeriphCLKConfig>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d70:	f7ff fe92 	bl	8002a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_UART_MspInit+0xb0>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	4a17      	ldr	r2, [pc, #92]	; (8002dd8 <HAL_UART_MspInit+0xb0>)
 8002d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d80:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_UART_MspInit+0xb0>)
 8002d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_UART_MspInit+0xb0>)
 8002d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d90:	4a11      	ldr	r2, [pc, #68]	; (8002dd8 <HAL_UART_MspInit+0xb0>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d98:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HAL_UART_MspInit+0xb0>)
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002da4:	230c      	movs	r3, #12
 8002da6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db0:	2303      	movs	r3, #3
 8002db2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002db6:	2307      	movs	r3, #7
 8002db8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dc6:	f000 fa8d 	bl	80032e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dca:	bf00      	nop
 8002dcc:	3788      	adds	r7, #136	; 0x88
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	40021000 	.word	0x40021000

08002ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <NMI_Handler+0x4>

08002de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <HardFault_Handler+0x4>

08002de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <MemManage_Handler+0x4>

08002dee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df2:	e7fe      	b.n	8002df2 <BusFault_Handler+0x4>

08002df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df8:	e7fe      	b.n	8002df8 <UsageFault_Handler+0x4>

08002dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e28:	f000 f8b8 	bl	8002f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <TIM2_IRQHandler+0x10>)
 8002e36:	f003 ffe9 	bl	8006e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000130 	.word	0x20000130

08002e44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002e48:	4802      	ldr	r0, [pc, #8]	; (8002e54 <I2C1_EV_IRQHandler+0x10>)
 8002e4a:	f001 f83d 	bl	8003ec8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000034 	.word	0x20000034

08002e58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002e5c:	4802      	ldr	r0, [pc, #8]	; (8002e68 <I2C1_ER_IRQHandler+0x10>)
 8002e5e:	f001 f84d 	bl	8003efc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002e62:	bf00      	nop
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000034 	.word	0x20000034

08002e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <SystemInit+0x20>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	4a05      	ldr	r2, [pc, #20]	; (8002e8c <SystemInit+0x20>)
 8002e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e94:	f7ff ffea 	bl	8002e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8002e9a:	490d      	ldr	r1, [pc, #52]	; (8002ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <LoopForever+0xe>)
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea0:	e002      	b.n	8002ea8 <LoopCopyDataInit>

08002ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea6:	3304      	adds	r3, #4

08002ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eac:	d3f9      	bcc.n	8002ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eb0:	4c0a      	ldr	r4, [pc, #40]	; (8002edc <LoopForever+0x16>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb4:	e001      	b.n	8002eba <LoopFillZerobss>

08002eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb8:	3204      	adds	r2, #4

08002eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ebc:	d3fb      	bcc.n	8002eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ebe:	f004 ffe1 	bl	8007e84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ec2:	f7fd fb01 	bl	80004c8 <main>

08002ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ec6:	e7fe      	b.n	8002ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ec8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002ed4:	08007f60 	.word	0x08007f60
  ldr r2, =_sbss
 8002ed8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002edc:	200002d4 	.word	0x200002d4

08002ee0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ee0:	e7fe      	b.n	8002ee0 <ADC1_IRQHandler>
	...

08002ee4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <HAL_Init+0x3c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <HAL_Init+0x3c>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efa:	2003      	movs	r0, #3
 8002efc:	f000 f962 	bl	80031c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f00:	2000      	movs	r0, #0
 8002f02:	f000 f80f 	bl	8002f24 <HAL_InitTick>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	71fb      	strb	r3, [r7, #7]
 8002f10:	e001      	b.n	8002f16 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f12:	f7ff fdc7 	bl	8002aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f16:	79fb      	ldrb	r3, [r7, #7]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40022000 	.word	0x40022000

08002f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f30:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_InitTick+0x6c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d023      	beq.n	8002f80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_InitTick+0x70>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <HAL_InitTick+0x6c>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f96d 	bl	800322e <HAL_SYSTICK_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10f      	bne.n	8002f7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b0f      	cmp	r3, #15
 8002f5e:	d809      	bhi.n	8002f74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f60:	2200      	movs	r2, #0
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f68:	f000 f937 	bl	80031da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f6c:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <HAL_InitTick+0x74>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	e007      	b.n	8002f84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
 8002f78:	e004      	b.n	8002f84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	e001      	b.n	8002f84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000008 	.word	0x20000008
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_IncTick+0x20>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4413      	add	r3, r2
 8002fac:	4a04      	ldr	r2, [pc, #16]	; (8002fc0 <HAL_IncTick+0x24>)
 8002fae:	6013      	str	r3, [r2, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000008 	.word	0x20000008
 8002fc0:	200002d0 	.word	0x200002d0

08002fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_GetTick+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	200002d0 	.word	0x200002d0

08002fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe4:	f7ff ffee 	bl	8002fc4 <HAL_GetTick>
 8002fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ff4:	d005      	beq.n	8003002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <HAL_Delay+0x44>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003002:	bf00      	nop
 8003004:	f7ff ffde 	bl	8002fc4 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	429a      	cmp	r2, r3
 8003012:	d8f7      	bhi.n	8003004 <HAL_Delay+0x28>
  {
  }
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000008 	.word	0x20000008

08003024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003040:	4013      	ands	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800304c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003056:	4a04      	ldr	r2, [pc, #16]	; (8003068 <__NVIC_SetPriorityGrouping+0x44>)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	60d3      	str	r3, [r2, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <__NVIC_GetPriorityGrouping+0x18>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	f003 0307 	and.w	r3, r3, #7
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	2b00      	cmp	r3, #0
 8003098:	db0b      	blt.n	80030b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	4907      	ldr	r1, [pc, #28]	; (80030c0 <__NVIC_EnableIRQ+0x38>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	2001      	movs	r0, #1
 80030aa:	fa00 f202 	lsl.w	r2, r0, r2
 80030ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000e100 	.word	0xe000e100

080030c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	6039      	str	r1, [r7, #0]
 80030ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	db0a      	blt.n	80030ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	490c      	ldr	r1, [pc, #48]	; (8003110 <__NVIC_SetPriority+0x4c>)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	0112      	lsls	r2, r2, #4
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	440b      	add	r3, r1
 80030e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ec:	e00a      	b.n	8003104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4908      	ldr	r1, [pc, #32]	; (8003114 <__NVIC_SetPriority+0x50>)
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	3b04      	subs	r3, #4
 80030fc:	0112      	lsls	r2, r2, #4
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	440b      	add	r3, r1
 8003102:	761a      	strb	r2, [r3, #24]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000e100 	.word	0xe000e100
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003118:	b480      	push	{r7}
 800311a:	b089      	sub	sp, #36	; 0x24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f1c3 0307 	rsb	r3, r3, #7
 8003132:	2b04      	cmp	r3, #4
 8003134:	bf28      	it	cs
 8003136:	2304      	movcs	r3, #4
 8003138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	3304      	adds	r3, #4
 800313e:	2b06      	cmp	r3, #6
 8003140:	d902      	bls.n	8003148 <NVIC_EncodePriority+0x30>
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3b03      	subs	r3, #3
 8003146:	e000      	b.n	800314a <NVIC_EncodePriority+0x32>
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43da      	mvns	r2, r3
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	401a      	ands	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	fa01 f303 	lsl.w	r3, r1, r3
 800316a:	43d9      	mvns	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	4313      	orrs	r3, r2
         );
}
 8003172:	4618      	mov	r0, r3
 8003174:	3724      	adds	r7, #36	; 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003190:	d301      	bcc.n	8003196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003192:	2301      	movs	r3, #1
 8003194:	e00f      	b.n	80031b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <SysTick_Config+0x40>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319e:	210f      	movs	r1, #15
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031a4:	f7ff ff8e 	bl	80030c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <SysTick_Config+0x40>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <SysTick_Config+0x40>)
 80031b0:	2207      	movs	r2, #7
 80031b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000e010 	.word	0xe000e010

080031c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff29 	bl	8003024 <__NVIC_SetPriorityGrouping>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031ec:	f7ff ff3e 	bl	800306c <__NVIC_GetPriorityGrouping>
 80031f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff ff8e 	bl	8003118 <NVIC_EncodePriority>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff5d 	bl	80030c4 <__NVIC_SetPriority>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff31 	bl	8003088 <__NVIC_EnableIRQ>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffa2 	bl	8003180 <SysTick_Config>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d005      	beq.n	800326a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2204      	movs	r2, #4
 8003262:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
 8003268:	e029      	b.n	80032be <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 020e 	bic.w	r2, r2, #14
 8003278:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f003 021c 	and.w	r2, r3, #28
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	2101      	movs	r1, #1
 8003298:	fa01 f202 	lsl.w	r2, r1, r2
 800329c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4798      	blx	r3
    }
  }
  return status;
 80032be:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032d6:	b2db      	uxtb	r3, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032f2:	e154      	b.n	800359e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 8146 	beq.w	8003598 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 0303 	and.w	r3, r3, #3
 8003314:	2b01      	cmp	r3, #1
 8003316:	d005      	beq.n	8003324 <HAL_GPIO_Init+0x40>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d130      	bne.n	8003386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800335a:	2201      	movs	r2, #1
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0201 	and.w	r2, r3, #1
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b03      	cmp	r3, #3
 8003390:	d017      	beq.n	80033c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d123      	bne.n	8003416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	08da      	lsrs	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3208      	adds	r2, #8
 80033d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	220f      	movs	r2, #15
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	08da      	lsrs	r2, r3, #3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3208      	adds	r2, #8
 8003410:	6939      	ldr	r1, [r7, #16]
 8003412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0203 	and.w	r2, r3, #3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 80a0 	beq.w	8003598 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003458:	4b58      	ldr	r3, [pc, #352]	; (80035bc <HAL_GPIO_Init+0x2d8>)
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	4a57      	ldr	r2, [pc, #348]	; (80035bc <HAL_GPIO_Init+0x2d8>)
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	6613      	str	r3, [r2, #96]	; 0x60
 8003464:	4b55      	ldr	r3, [pc, #340]	; (80035bc <HAL_GPIO_Init+0x2d8>)
 8003466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003470:	4a53      	ldr	r2, [pc, #332]	; (80035c0 <HAL_GPIO_Init+0x2dc>)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	089b      	lsrs	r3, r3, #2
 8003476:	3302      	adds	r3, #2
 8003478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 0303 	and.w	r3, r3, #3
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	220f      	movs	r2, #15
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4013      	ands	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800349a:	d019      	beq.n	80034d0 <HAL_GPIO_Init+0x1ec>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a49      	ldr	r2, [pc, #292]	; (80035c4 <HAL_GPIO_Init+0x2e0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d013      	beq.n	80034cc <HAL_GPIO_Init+0x1e8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a48      	ldr	r2, [pc, #288]	; (80035c8 <HAL_GPIO_Init+0x2e4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00d      	beq.n	80034c8 <HAL_GPIO_Init+0x1e4>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a47      	ldr	r2, [pc, #284]	; (80035cc <HAL_GPIO_Init+0x2e8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d007      	beq.n	80034c4 <HAL_GPIO_Init+0x1e0>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <HAL_GPIO_Init+0x2ec>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d101      	bne.n	80034c0 <HAL_GPIO_Init+0x1dc>
 80034bc:	2304      	movs	r3, #4
 80034be:	e008      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034c0:	2307      	movs	r3, #7
 80034c2:	e006      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034c4:	2303      	movs	r3, #3
 80034c6:	e004      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e002      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_GPIO_Init+0x1ee>
 80034d0:	2300      	movs	r3, #0
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	f002 0203 	and.w	r2, r2, #3
 80034d8:	0092      	lsls	r2, r2, #2
 80034da:	4093      	lsls	r3, r2
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034e2:	4937      	ldr	r1, [pc, #220]	; (80035c0 <HAL_GPIO_Init+0x2dc>)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3302      	adds	r3, #2
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034f0:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <HAL_GPIO_Init+0x2f0>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003514:	4a2f      	ldr	r2, [pc, #188]	; (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800351a:	4b2e      	ldr	r3, [pc, #184]	; (80035d4 <HAL_GPIO_Init+0x2f0>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800353e:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003544:	4b23      	ldr	r3, [pc, #140]	; (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	43db      	mvns	r3, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003568:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_GPIO_Init+0x2f0>)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800356e:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003592:	4a10      	ldr	r2, [pc, #64]	; (80035d4 <HAL_GPIO_Init+0x2f0>)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3301      	adds	r3, #1
 800359c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f aea3 	bne.w	80032f4 <HAL_GPIO_Init+0x10>
  }
}
 80035ae:	bf00      	nop
 80035b0:	bf00      	nop
 80035b2:	371c      	adds	r7, #28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40010000 	.word	0x40010000
 80035c4:	48000400 	.word	0x48000400
 80035c8:	48000800 	.word	0x48000800
 80035cc:	48000c00 	.word	0x48000c00
 80035d0:	48001000 	.word	0x48001000
 80035d4:	40010400 	.word	0x40010400

080035d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	887b      	ldrh	r3, [r7, #2]
 80035ea:	4013      	ands	r3, r2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e001      	b.n	80035fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
 8003614:	4613      	mov	r3, r2
 8003616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003618:	787b      	ldrb	r3, [r7, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003624:	e002      	b.n	800362c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	460b      	mov	r3, r1
 8003642:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4013      	ands	r3, r2
 8003650:	041a      	lsls	r2, r3, #16
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	43d9      	mvns	r1, r3
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	400b      	ands	r3, r1
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	619a      	str	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	3714      	adds	r7, #20
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e08d      	b.n	800379a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7ff fa2a 	bl	8002aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2224      	movs	r2, #36	; 0x24
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	e006      	b.n	80036f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d108      	bne.n	800370e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	e007      	b.n	800371e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800371c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800372c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0201 	orr.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	607a      	str	r2, [r7, #4]
 80037ae:	461a      	mov	r2, r3
 80037b0:	460b      	mov	r3, r1
 80037b2:	817b      	strh	r3, [r7, #10]
 80037b4:	4613      	mov	r3, r2
 80037b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	f040 80fd 	bne.w	80039c0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_I2C_Master_Transmit+0x30>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e0f6      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x21e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037dc:	f7ff fbf2 	bl	8002fc4 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	2319      	movs	r3, #25
 80037e8:	2201      	movs	r2, #1
 80037ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f001 fca1 	bl	8005136 <I2C_WaitOnFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0e1      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2221      	movs	r2, #33	; 0x21
 8003802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2210      	movs	r2, #16
 800380a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	893a      	ldrh	r2, [r7, #8]
 800381e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	2bff      	cmp	r3, #255	; 0xff
 800382e:	d906      	bls.n	800383e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	22ff      	movs	r2, #255	; 0xff
 8003834:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003836:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e007      	b.n	800384e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800384c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	2b00      	cmp	r3, #0
 8003854:	d024      	beq.n	80038a0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	781a      	ldrb	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388a:	b2db      	uxtb	r3, r3
 800388c:	3301      	adds	r3, #1
 800388e:	b2da      	uxtb	r2, r3
 8003890:	8979      	ldrh	r1, [r7, #10]
 8003892:	4b4e      	ldr	r3, [pc, #312]	; (80039cc <HAL_I2C_Master_Transmit+0x228>)
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f001 fe87 	bl	80055ac <I2C_TransferConfig>
 800389e:	e066      	b.n	800396e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	8979      	ldrh	r1, [r7, #10]
 80038a8:	4b48      	ldr	r3, [pc, #288]	; (80039cc <HAL_I2C_Master_Transmit+0x228>)
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f001 fe7c 	bl	80055ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038b4:	e05b      	b.n	800396e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	6a39      	ldr	r1, [r7, #32]
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f001 fc8a 	bl	80051d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e07b      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	781a      	ldrb	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d034      	beq.n	800396e <HAL_I2C_Master_Transmit+0x1ca>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d130      	bne.n	800396e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	2200      	movs	r2, #0
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f001 fc0d 	bl	8005136 <I2C_WaitOnFlagUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e04d      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	2bff      	cmp	r3, #255	; 0xff
 800392e:	d90e      	bls.n	800394e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	b2da      	uxtb	r2, r3
 800393c:	8979      	ldrh	r1, [r7, #10]
 800393e:	2300      	movs	r3, #0
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f001 fe30 	bl	80055ac <I2C_TransferConfig>
 800394c:	e00f      	b.n	800396e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395c:	b2da      	uxtb	r2, r3
 800395e:	8979      	ldrh	r1, [r7, #10]
 8003960:	2300      	movs	r3, #0
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f001 fe1f 	bl	80055ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d19e      	bne.n	80038b6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	6a39      	ldr	r1, [r7, #32]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f001 fc70 	bl	8005262 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e01a      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2220      	movs	r2, #32
 8003992:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6859      	ldr	r1, [r3, #4]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <HAL_I2C_Master_Transmit+0x22c>)
 80039a0:	400b      	ands	r3, r1
 80039a2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	80002000 	.word	0x80002000
 80039d0:	fe00e800 	.word	0xfe00e800

080039d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	461a      	mov	r2, r3
 80039e0:	460b      	mov	r3, r1
 80039e2:	817b      	strh	r3, [r7, #10]
 80039e4:	4613      	mov	r3, r2
 80039e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b20      	cmp	r3, #32
 80039f2:	f040 80db 	bne.w	8003bac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_I2C_Master_Receive+0x30>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e0d4      	b.n	8003bae <HAL_I2C_Master_Receive+0x1da>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a0c:	f7ff fada 	bl	8002fc4 <HAL_GetTick>
 8003a10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	2319      	movs	r3, #25
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f001 fb89 	bl	8005136 <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e0bf      	b.n	8003bae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2222      	movs	r2, #34	; 0x22
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2210      	movs	r2, #16
 8003a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	893a      	ldrh	r2, [r7, #8]
 8003a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2bff      	cmp	r3, #255	; 0xff
 8003a5e:	d90e      	bls.n	8003a7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	22ff      	movs	r2, #255	; 0xff
 8003a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	8979      	ldrh	r1, [r7, #10]
 8003a6e:	4b52      	ldr	r3, [pc, #328]	; (8003bb8 <HAL_I2C_Master_Receive+0x1e4>)
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f001 fd98 	bl	80055ac <I2C_TransferConfig>
 8003a7c:	e06d      	b.n	8003b5a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	8979      	ldrh	r1, [r7, #10]
 8003a90:	4b49      	ldr	r3, [pc, #292]	; (8003bb8 <HAL_I2C_Master_Receive+0x1e4>)
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f001 fd87 	bl	80055ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a9e:	e05c      	b.n	8003b5a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	6a39      	ldr	r1, [r7, #32]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f001 fc1f 	bl	80052e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e07c      	b.n	8003bae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	b2d2      	uxtb	r2, r2
 8003ac0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d034      	beq.n	8003b5a <HAL_I2C_Master_Receive+0x186>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d130      	bne.n	8003b5a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	2200      	movs	r2, #0
 8003b00:	2180      	movs	r1, #128	; 0x80
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f001 fb17 	bl	8005136 <I2C_WaitOnFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e04d      	b.n	8003bae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2bff      	cmp	r3, #255	; 0xff
 8003b1a:	d90e      	bls.n	8003b3a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	22ff      	movs	r2, #255	; 0xff
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	8979      	ldrh	r1, [r7, #10]
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f001 fd3a 	bl	80055ac <I2C_TransferConfig>
 8003b38:	e00f      	b.n	8003b5a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	8979      	ldrh	r1, [r7, #10]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f001 fd29 	bl	80055ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d19d      	bne.n	8003aa0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	6a39      	ldr	r1, [r7, #32]
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f001 fb7a 	bl	8005262 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e01a      	b.n	8003bae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HAL_I2C_Master_Receive+0x1e8>)
 8003b8c:	400b      	ands	r3, r1
 8003b8e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e000      	b.n	8003bae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
  }
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	80002400 	.word	0x80002400
 8003bbc:	fe00e800 	.word	0xfe00e800

08003bc0 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bdc:	2b28      	cmp	r3, #40	; 0x28
 8003bde:	f040 8098 	bne.w	8003d12 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8003be8:	88fb      	ldrh	r3, [r7, #6]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d105      	bne.n	8003bfa <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e08c      	b.n	8003d14 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003bfa:	f248 0101 	movw	r1, #32769	; 0x8001
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f001 fd8a 	bl	8005718 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d101      	bne.n	8003c12 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e080      	b.n	8003d14 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b2a      	cmp	r3, #42	; 0x2a
 8003c24:	d12a      	bne.n	8003c7c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c26:	2102      	movs	r1, #2
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f001 fd75 	bl	8005718 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3c:	d11e      	bne.n	8003c7c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c4c:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	4a30      	ldr	r2, [pc, #192]	; (8003d1c <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8003c5c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff faef 	bl	8003246 <HAL_DMA_Abort_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d006      	beq.n	8003c7c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2229      	movs	r2, #41	; 0x29
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ca0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a17      	ldr	r2, [pc, #92]	; (8003d20 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8003cc2:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	bf0c      	ite	eq
 8003cd2:	2301      	moveq	r3, #1
 8003cd4:	2300      	movne	r3, #0
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d106      	bne.n	8003cfc <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8003cee:	7dfb      	ldrb	r3, [r7, #23]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003d04:	f248 0101 	movw	r1, #32769	; 0x8001
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f001 fc81 	bl	8005610 <I2C_Enable_IRQ>

    return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
  }
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	080050fb 	.word	0x080050fb
 8003d20:	0800402f 	.word	0x0800402f

08003d24 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	4613      	mov	r3, r2
 8003d32:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d40:	2b28      	cmp	r3, #40	; 0x28
 8003d42:	f040 8098 	bne.w	8003e76 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003d4c:	88fb      	ldrh	r3, [r7, #6]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e08c      	b.n	8003e78 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003d5e:	f248 0102 	movw	r1, #32770	; 0x8002
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f001 fcd8 	bl	8005718 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d101      	bne.n	8003d76 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8003d72:	2302      	movs	r3, #2
 8003d74:	e080      	b.n	8003e78 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b29      	cmp	r3, #41	; 0x29
 8003d88:	d12a      	bne.n	8003de0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f001 fcc3 	bl	8005718 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da0:	d11e      	bne.n	8003de0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003db0:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d012      	beq.n	8003de0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	4a30      	ldr	r2, [pc, #192]	; (8003e80 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fa3d 	bl	8003246 <HAL_DMA_Abort_IT>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	222a      	movs	r2, #42	; 0x2a
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e04:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	4a17      	ldr	r2, [pc, #92]	; (8003e84 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8003e26:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2208      	movs	r2, #8
 8003e5e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003e68:	f248 0102 	movw	r1, #32770	; 0x8002
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f001 fbcf 	bl	8005610 <I2C_Enable_IRQ>

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	080050fb 	.word	0x080050fb
 8003e84:	0800402f 	.word	0x0800402f

08003e88 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2228      	movs	r2, #40	; 0x28
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a07      	ldr	r2, [pc, #28]	; (8003ec4 <HAL_I2C_EnableListen_IT+0x3c>)
 8003ea8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003eaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f001 fbae 	bl	8005610 <I2C_Enable_IRQ>

    return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e000      	b.n	8003eba <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003eb8:	2302      	movs	r3, #2
  }
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	0800402f 	.word	0x0800402f

08003ec8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	68f9      	ldr	r1, [r7, #12]
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00f      	beq.n	8003f3e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f3c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00f      	beq.n	8003f68 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f043 0208 	orr.w	r2, r3, #8
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f66:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00f      	beq.n	8003f92 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f043 0202 	orr.w	r2, r3, #2
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f90:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 030b 	and.w	r3, r3, #11
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003fa2:	68f9      	ldr	r1, [r7, #12]
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 ff6d 	bl	8004e84 <I2C_ITError>
  }
}
 8003faa:	bf00      	nop
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	b083      	sub	sp, #12
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b086      	sub	sp, #24
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <I2C_Slave_ISR_IT+0x24>
 800404e:	2302      	movs	r3, #2
 8004050:	e0e1      	b.n	8004216 <I2C_Slave_ISR_IT+0x1e8>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0320 	and.w	r3, r3, #32
 8004060:	2b00      	cmp	r3, #0
 8004062:	d008      	beq.n	8004076 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fda1 	bl	8004bb8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d04b      	beq.n	8004118 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004086:	2b00      	cmp	r3, #0
 8004088:	d046      	beq.n	8004118 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	d128      	bne.n	80040e6 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b28      	cmp	r3, #40	; 0x28
 800409e:	d108      	bne.n	80040b2 <I2C_Slave_ISR_IT+0x84>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040a6:	d104      	bne.n	80040b2 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80040a8:	6939      	ldr	r1, [r7, #16]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 fe96 	bl	8004ddc <I2C_ITListenCplt>
 80040b0:	e031      	b.n	8004116 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b29      	cmp	r3, #41	; 0x29
 80040bc:	d10e      	bne.n	80040dc <I2C_Slave_ISR_IT+0xae>
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040c4:	d00a      	beq.n	80040dc <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2210      	movs	r2, #16
 80040cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 ffef 	bl	80050b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fc4a 	bl	800496e <I2C_ITSlaveSeqCplt>
 80040da:	e01c      	b.n	8004116 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80040e4:	e08f      	b.n	8004206 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2210      	movs	r2, #16
 80040ec:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	f043 0204 	orr.w	r2, r3, #4
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <I2C_Slave_ISR_IT+0xda>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004106:	d17e      	bne.n	8004206 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410c:	4619      	mov	r1, r3
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 feb8 	bl	8004e84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004114:	e077      	b.n	8004206 <I2C_Slave_ISR_IT+0x1d8>
 8004116:	e076      	b.n	8004206 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d02f      	beq.n	8004182 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004128:	2b00      	cmp	r3, #0
 800412a:	d02a      	beq.n	8004182 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d018      	beq.n	8004168 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415e:	b29b      	uxth	r3, r3
 8004160:	3b01      	subs	r3, #1
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d14b      	bne.n	800420a <I2C_Slave_ISR_IT+0x1dc>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004178:	d047      	beq.n	800420a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fbf7 	bl	800496e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004180:	e043      	b.n	800420a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004192:	2b00      	cmp	r3, #0
 8004194:	d004      	beq.n	80041a0 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fb27 	bl	80047ec <I2C_ITAddrCplt>
 800419e:	e035      	b.n	800420c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d030      	beq.n	800420c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d02b      	beq.n	800420c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d018      	beq.n	80041f0 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	781a      	ldrb	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	851a      	strh	r2, [r3, #40]	; 0x28
 80041ee:	e00d      	b.n	800420c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f6:	d002      	beq.n	80041fe <I2C_Slave_ISR_IT+0x1d0>
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fbb5 	bl	800496e <I2C_ITSlaveSeqCplt>
 8004204:	e002      	b.n	800420c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800420a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b088      	sub	sp, #32
 8004222:	af02      	add	r7, sp, #8
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <I2C_Master_ISR_DMA+0x1a>
 8004234:	2302      	movs	r3, #2
 8004236:	e0d9      	b.n	80043ec <I2C_Master_ISR_DMA+0x1ce>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	2b00      	cmp	r3, #0
 8004248:	d016      	beq.n	8004278 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004250:	2b00      	cmp	r3, #0
 8004252:	d011      	beq.n	8004278 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2210      	movs	r2, #16
 800425a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004268:	2120      	movs	r1, #32
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f001 f9d0 	bl	8005610 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 ff1e 	bl	80050b2 <I2C_Flush_TXDR>
 8004276:	e0b4      	b.n	80043e2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427e:	2b00      	cmp	r3, #0
 8004280:	d071      	beq.n	8004366 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004288:	2b00      	cmp	r3, #0
 800428a:	d06c      	beq.n	8004366 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800429a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d04e      	beq.n	8004344 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2bff      	cmp	r3, #255	; 0xff
 80042bc:	d906      	bls.n	80042cc <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	22ff      	movs	r2, #255	; 0xff
 80042c2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80042c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	e010      	b.n	80042ee <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042de:	d003      	beq.n	80042e8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e002      	b.n	80042ee <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80042e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042ec:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	8a79      	ldrh	r1, [r7, #18]
 80042f6:	2300      	movs	r3, #0
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f001 f955 	bl	80055ac <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	b29a      	uxth	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b22      	cmp	r3, #34	; 0x22
 800431e:	d108      	bne.n	8004332 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800432e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004330:	e057      	b.n	80043e2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004340:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004342:	e04e      	b.n	80043e2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004352:	d003      	beq.n	800435c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 facd 	bl	80048f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800435a:	e042      	b.n	80043e2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fd90 	bl	8004e84 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004364:	e03d      	b.n	80043e2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d028      	beq.n	80043c2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004376:	2b00      	cmp	r3, #0
 8004378:	d023      	beq.n	80043c2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d119      	bne.n	80043b8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004392:	d025      	beq.n	80043e0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800439c:	d108      	bne.n	80043b0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ac:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80043ae:	e017      	b.n	80043e0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 fa9f 	bl	80048f4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80043b6:	e013      	b.n	80043e0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043b8:	2140      	movs	r1, #64	; 0x40
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f000 fd62 	bl	8004e84 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80043c0:	e00e      	b.n	80043e0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fb25 	bl	8004a28 <I2C_ITMasterCplt>
 80043de:	e000      	b.n	80043e2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80043e0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004400:	4b8d      	ldr	r3, [pc, #564]	; (8004638 <I2C_Mem_ISR_DMA+0x244>)
 8004402:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <I2C_Mem_ISR_DMA+0x1e>
 800440e:	2302      	movs	r3, #2
 8004410:	e10e      	b.n	8004630 <I2C_Mem_ISR_DMA+0x23c>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f003 0310 	and.w	r3, r3, #16
 8004420:	2b00      	cmp	r3, #0
 8004422:	d016      	beq.n	8004452 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800442a:	2b00      	cmp	r3, #0
 800442c:	d011      	beq.n	8004452 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2210      	movs	r2, #16
 8004434:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004442:	2120      	movs	r1, #32
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f001 f8e3 	bl	8005610 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fe31 	bl	80050b2 <I2C_Flush_TXDR>
 8004450:	e0e9      	b.n	8004626 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00e      	beq.n	800447a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800446e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004476:	651a      	str	r2, [r3, #80]	; 0x50
 8004478:	e0d5      	b.n	8004626 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05f      	beq.n	8004544 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800448a:	2b00      	cmp	r3, #0
 800448c:	d05a      	beq.n	8004544 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800448e:	2101      	movs	r1, #1
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f001 f941 	bl	8005718 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004496:	2110      	movs	r1, #16
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f001 f8b9 	bl	8005610 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d048      	beq.n	800453a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2bff      	cmp	r3, #255	; 0xff
 80044b0:	d910      	bls.n	80044d4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	22ff      	movs	r2, #255	; 0xff
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044bc:	b299      	uxth	r1, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	2300      	movs	r3, #0
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f001 f86d 	bl	80055ac <I2C_TransferConfig>
 80044d2:	e011      	b.n	80044f8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	b299      	uxth	r1, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	2300      	movs	r3, #0
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f001 f85a 	bl	80055ac <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b22      	cmp	r3, #34	; 0x22
 8004514:	d108      	bne.n	8004528 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004524:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004526:	e07e      	b.n	8004626 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004536:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004538:	e075      	b.n	8004626 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800453a:	2140      	movs	r1, #64	; 0x40
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 fca1 	bl	8004e84 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004542:	e070      	b.n	8004626 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d05d      	beq.n	800460a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004554:	2b00      	cmp	r3, #0
 8004556:	d058      	beq.n	800460a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004558:	2101      	movs	r1, #1
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f001 f8dc 	bl	8005718 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004560:	2110      	movs	r1, #16
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f001 f854 	bl	8005610 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b22      	cmp	r3, #34	; 0x22
 8004572:	d101      	bne.n	8004578 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004574:	4b31      	ldr	r3, [pc, #196]	; (800463c <I2C_Mem_ISR_DMA+0x248>)
 8004576:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457c:	b29b      	uxth	r3, r3
 800457e:	2bff      	cmp	r3, #255	; 0xff
 8004580:	d910      	bls.n	80045a4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	22ff      	movs	r2, #255	; 0xff
 8004586:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458c:	b299      	uxth	r1, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	b2da      	uxtb	r2, r3
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f001 f805 	bl	80055ac <I2C_TransferConfig>
 80045a2:	e011      	b.n	80045c8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b2:	b299      	uxth	r1, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fff2 	bl	80055ac <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b29a      	uxth	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b22      	cmp	r3, #34	; 0x22
 80045e4:	d108      	bne.n	80045f8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045f4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045f6:	e016      	b.n	8004626 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004606:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004608:	e00d      	b.n	8004626 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fa01 	bl	8004a28 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	80002000 	.word	0x80002000
 800463c:	80002400 	.word	0x80002400

08004640 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <I2C_Slave_ISR_DMA+0x24>
 8004660:	2302      	movs	r3, #2
 8004662:	e0bf      	b.n	80047e4 <I2C_Slave_ISR_DMA+0x1a4>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fa98 	bl	8004bb8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 8095 	beq.w	80047be <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 808f 	beq.w	80047be <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d07d      	beq.n	80047b0 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00c      	beq.n	80046d6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80046d2:	2301      	movs	r3, #1
 80046d4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80046f4:	2301      	movs	r3, #1
 80046f6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d128      	bne.n	8004750 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b28      	cmp	r3, #40	; 0x28
 8004708:	d108      	bne.n	800471c <I2C_Slave_ISR_DMA+0xdc>
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004710:	d104      	bne.n	800471c <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fb61 	bl	8004ddc <I2C_ITListenCplt>
 800471a:	e048      	b.n	80047ae <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b29      	cmp	r3, #41	; 0x29
 8004726:	d10e      	bne.n	8004746 <I2C_Slave_ISR_DMA+0x106>
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800472e:	d00a      	beq.n	8004746 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2210      	movs	r2, #16
 8004736:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fcba 	bl	80050b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 f915 	bl	800496e <I2C_ITSlaveSeqCplt>
 8004744:	e033      	b.n	80047ae <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2210      	movs	r2, #16
 800474c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800474e:	e034      	b.n	80047ba <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2210      	movs	r2, #16
 8004756:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	f043 0204 	orr.w	r2, r3, #4
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <I2C_Slave_ISR_DMA+0x13a>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004778:	d11f      	bne.n	80047ba <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b21      	cmp	r3, #33	; 0x21
 800477e:	d002      	beq.n	8004786 <I2C_Slave_ISR_DMA+0x146>
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b29      	cmp	r3, #41	; 0x29
 8004784:	d103      	bne.n	800478e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2221      	movs	r2, #33	; 0x21
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
 800478c:	e008      	b.n	80047a0 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800478e:	7dfb      	ldrb	r3, [r7, #23]
 8004790:	2b22      	cmp	r3, #34	; 0x22
 8004792:	d002      	beq.n	800479a <I2C_Slave_ISR_DMA+0x15a>
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	2b2a      	cmp	r3, #42	; 0x2a
 8004798:	d102      	bne.n	80047a0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2222      	movs	r2, #34	; 0x22
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a4:	4619      	mov	r1, r3
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 fb6c 	bl	8004e84 <I2C_ITError>
      if (treatdmanack == 1U)
 80047ac:	e005      	b.n	80047ba <I2C_Slave_ISR_DMA+0x17a>
 80047ae:	e004      	b.n	80047ba <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2210      	movs	r2, #16
 80047b6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80047b8:	e00f      	b.n	80047da <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80047ba:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80047bc:	e00d      	b.n	80047da <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 0308 	and.w	r3, r3, #8
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d008      	beq.n	80047da <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f809 	bl	80047ec <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3720      	adds	r7, #32
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004802:	2b28      	cmp	r3, #40	; 0x28
 8004804:	d16a      	bne.n	80048dc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	b29b      	uxth	r3, r3
 8004820:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004824:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004832:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004840:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d138      	bne.n	80048bc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800484a:	897b      	ldrh	r3, [r7, #10]
 800484c:	09db      	lsrs	r3, r3, #7
 800484e:	b29a      	uxth	r2, r3
 8004850:	89bb      	ldrh	r3, [r7, #12]
 8004852:	4053      	eors	r3, r2
 8004854:	b29b      	uxth	r3, r3
 8004856:	f003 0306 	and.w	r3, r3, #6
 800485a:	2b00      	cmp	r3, #0
 800485c:	d11c      	bne.n	8004898 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800485e:	897b      	ldrh	r3, [r7, #10]
 8004860:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004870:	2b02      	cmp	r3, #2
 8004872:	d13b      	bne.n	80048ec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2208      	movs	r2, #8
 8004880:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800488a:	89ba      	ldrh	r2, [r7, #12]
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fe f883 	bl	800299c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004896:	e029      	b.n	80048ec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004898:	893b      	ldrh	r3, [r7, #8]
 800489a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800489c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 ff39 	bl	8005718 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048ae:	89ba      	ldrh	r2, [r7, #12]
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fe f871 	bl	800299c <HAL_I2C_AddrCallback>
}
 80048ba:	e017      	b.n	80048ec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 ff29 	bl	8005718 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048ce:	89ba      	ldrh	r2, [r7, #12]
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fe f861 	bl	800299c <HAL_I2C_AddrCallback>
}
 80048da:	e007      	b.n	80048ec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2208      	movs	r2, #8
 80048e2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b21      	cmp	r3, #33	; 0x21
 800490e:	d115      	bne.n	800493c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2211      	movs	r2, #17
 800491c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004924:	2101      	movs	r1, #1
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fef6 	bl	8005718 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff fb3c 	bl	8003fb2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800493a:	e014      	b.n	8004966 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2212      	movs	r2, #18
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004950:	2102      	movs	r1, #2
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fee0 	bl	8005718 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fb30 	bl	8003fc6 <HAL_I2C_MasterRxCpltCallback>
}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e00c      	b.n	80049bc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ba:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b29      	cmp	r3, #41	; 0x29
 80049c6:	d112      	bne.n	80049ee <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2228      	movs	r2, #40	; 0x28
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2221      	movs	r2, #33	; 0x21
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049d6:	2101      	movs	r1, #1
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fe9d 	bl	8005718 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fd ff9e 	bl	8002928 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80049ec:	e017      	b.n	8004a1e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b2a      	cmp	r3, #42	; 0x2a
 80049f8:	d111      	bne.n	8004a1e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2228      	movs	r2, #40	; 0x28
 80049fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2222      	movs	r2, #34	; 0x22
 8004a06:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a08:	2102      	movs	r1, #2
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fe84 	bl	8005718 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7fd ff95 	bl	8002948 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b21      	cmp	r3, #33	; 0x21
 8004a48:	d107      	bne.n	8004a5a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 fe63 	bl	8005718 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2211      	movs	r2, #17
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
 8004a58:	e00c      	b.n	8004a74 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b22      	cmp	r3, #34	; 0x22
 8004a64:	d106      	bne.n	8004a74 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a66:	2102      	movs	r1, #2
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fe55 	bl	8005718 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2212      	movs	r2, #18
 8004a72:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <I2C_ITMasterCplt+0x188>)
 8004a80:	400b      	ands	r3, r1
 8004a82:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a49      	ldr	r2, [pc, #292]	; (8004bb4 <I2C_ITMasterCplt+0x18c>)
 8004a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	f043 0204 	orr.w	r2, r3, #4
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b60      	cmp	r3, #96	; 0x60
 8004ab8:	d10a      	bne.n	8004ad0 <I2C_ITMasterCplt+0xa8>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d005      	beq.n	8004ad0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004ace:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 faee 	bl	80050b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b60      	cmp	r3, #96	; 0x60
 8004ae6:	d002      	beq.n	8004aee <I2C_ITMasterCplt+0xc6>
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d006      	beq.n	8004afc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f9c5 	bl	8004e84 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004afa:	e054      	b.n	8004ba6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b21      	cmp	r3, #33	; 0x21
 8004b06:	d124      	bne.n	8004b52 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	d10b      	bne.n	8004b3a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff fa51 	bl	8003fda <HAL_I2C_MemTxCpltCallback>
}
 8004b38:	e035      	b.n	8004ba6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7ff fa31 	bl	8003fb2 <HAL_I2C_MasterTxCpltCallback>
}
 8004b50:	e029      	b.n	8004ba6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b22      	cmp	r3, #34	; 0x22
 8004b5c:	d123      	bne.n	8004ba6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b40      	cmp	r3, #64	; 0x40
 8004b76:	d10b      	bne.n	8004b90 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff fa30 	bl	8003fee <HAL_I2C_MemRxCpltCallback>
}
 8004b8e:	e00a      	b.n	8004ba6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fa10 	bl	8003fc6 <HAL_I2C_MasterRxCpltCallback>
}
 8004ba6:	bf00      	nop
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	fe00e800 	.word	0xfe00e800
 8004bb4:	ffff0000 	.word	0xffff0000

08004bb8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b21      	cmp	r3, #33	; 0x21
 8004be2:	d002      	beq.n	8004bea <I2C_ITSlaveCplt+0x32>
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b29      	cmp	r3, #41	; 0x29
 8004be8:	d108      	bne.n	8004bfc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004bea:	f248 0101 	movw	r1, #32769	; 0x8001
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fd92 	bl	8005718 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2221      	movs	r2, #33	; 0x21
 8004bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8004bfa:	e019      	b.n	8004c30 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b22      	cmp	r3, #34	; 0x22
 8004c00:	d002      	beq.n	8004c08 <I2C_ITSlaveCplt+0x50>
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	2b2a      	cmp	r3, #42	; 0x2a
 8004c06:	d108      	bne.n	8004c1a <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c08:	f248 0102 	movw	r1, #32770	; 0x8002
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fd83 	bl	8005718 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2222      	movs	r2, #34	; 0x22
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
 8004c18:	e00a      	b.n	8004c30 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	2b28      	cmp	r3, #40	; 0x28
 8004c1e:	d107      	bne.n	8004c30 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004c20:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fd77 	bl	8005718 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4b62      	ldr	r3, [pc, #392]	; (8004dd4 <I2C_ITSlaveCplt+0x21c>)
 8004c4c:	400b      	ands	r3, r1
 8004c4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa2e 	bl	80050b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d013      	beq.n	8004c88 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c6e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01f      	beq.n	8004cb8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c86:	e017      	b.n	8004cb8 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d012      	beq.n	8004cb8 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ca0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d006      	beq.n	8004cb8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d020      	beq.n	8004d04 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0304 	bic.w	r3, r3, #4
 8004cc8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00c      	beq.n	8004d04 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	f043 0204 	orr.w	r2, r3, #4
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d010      	beq.n	8004d52 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	4619      	mov	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f8a4 	bl	8004e84 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b28      	cmp	r3, #40	; 0x28
 8004d46:	d141      	bne.n	8004dcc <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004d48:	6979      	ldr	r1, [r7, #20]
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f846 	bl	8004ddc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d50:	e03c      	b.n	8004dcc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d5a:	d014      	beq.n	8004d86 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff fe06 	bl	800496e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a1c      	ldr	r2, [pc, #112]	; (8004dd8 <I2C_ITSlaveCplt+0x220>)
 8004d66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fd fe4a 	bl	8002a18 <HAL_I2C_ListenCpltCallback>
}
 8004d84:	e022      	b.n	8004dcc <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b22      	cmp	r3, #34	; 0x22
 8004d90:	d10e      	bne.n	8004db0 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fd fdcd 	bl	8002948 <HAL_I2C_SlaveRxCpltCallback>
}
 8004dae:	e00d      	b.n	8004dcc <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fd fdae 	bl	8002928 <HAL_I2C_SlaveTxCpltCallback>
}
 8004dcc:	bf00      	nop
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	fe00e800 	.word	0xfe00e800
 8004dd8:	ffff0000 	.word	0xffff0000

08004ddc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a25      	ldr	r2, [pc, #148]	; (8004e80 <I2C_ITListenCplt+0xa4>)
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d022      	beq.n	8004e58 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d012      	beq.n	8004e58 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e50:	f043 0204 	orr.w	r2, r3, #4
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e58:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fc5b 	bl	8005718 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2210      	movs	r2, #16
 8004e68:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fd fdd0 	bl	8002a18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	ffff0000 	.word	0xffff0000

08004e84 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e94:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a6d      	ldr	r2, [pc, #436]	; (8005058 <I2C_ITError+0x1d4>)
 8004ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b28      	cmp	r3, #40	; 0x28
 8004eba:	d005      	beq.n	8004ec8 <I2C_ITError+0x44>
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	2b29      	cmp	r3, #41	; 0x29
 8004ec0:	d002      	beq.n	8004ec8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec6:	d10b      	bne.n	8004ee0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ec8:	2103      	movs	r1, #3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fc24 	bl	8005718 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2228      	movs	r2, #40	; 0x28
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a60      	ldr	r2, [pc, #384]	; (800505c <I2C_ITError+0x1d8>)
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ede:	e030      	b.n	8004f42 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ee0:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fc17 	bl	8005718 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8e1 	bl	80050b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b60      	cmp	r3, #96	; 0x60
 8004efa:	d01f      	beq.n	8004f3c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d114      	bne.n	8004f3c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d109      	bne.n	8004f34 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2210      	movs	r2, #16
 8004f26:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	f043 0204 	orr.w	r2, r3, #4
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d039      	beq.n	8004fc4 <I2C_ITError+0x140>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b11      	cmp	r3, #17
 8004f54:	d002      	beq.n	8004f5c <I2C_ITError+0xd8>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b21      	cmp	r3, #33	; 0x21
 8004f5a:	d133      	bne.n	8004fc4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f6a:	d107      	bne.n	8004f7c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe f9a1 	bl	80032c8 <HAL_DMA_GetState>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d017      	beq.n	8004fbc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	4a33      	ldr	r2, [pc, #204]	; (8005060 <I2C_ITError+0x1dc>)
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe f950 	bl	8003246 <HAL_DMA_Abort_IT>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d04d      	beq.n	8005048 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fba:	e045      	b.n	8005048 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f851 	bl	8005064 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fc2:	e041      	b.n	8005048 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d039      	beq.n	8005040 <I2C_ITError+0x1bc>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2b12      	cmp	r3, #18
 8004fd0:	d002      	beq.n	8004fd8 <I2C_ITError+0x154>
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b22      	cmp	r3, #34	; 0x22
 8004fd6:	d133      	bne.n	8005040 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe6:	d107      	bne.n	8004ff8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ff6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fe f963 	bl	80032c8 <HAL_DMA_GetState>
 8005002:	4603      	mov	r3, r0
 8005004:	2b01      	cmp	r3, #1
 8005006:	d017      	beq.n	8005038 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500c:	4a14      	ldr	r2, [pc, #80]	; (8005060 <I2C_ITError+0x1dc>)
 800500e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe f912 	bl	8003246 <HAL_DMA_Abort_IT>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d011      	beq.n	800504c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005032:	4610      	mov	r0, r2
 8005034:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005036:	e009      	b.n	800504c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f813 	bl	8005064 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800503e:	e005      	b.n	800504c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f80f 	bl	8005064 <I2C_TreatErrorCallback>
  }
}
 8005046:	e002      	b.n	800504e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005048:	bf00      	nop
 800504a:	e000      	b.n	800504e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800504c:	bf00      	nop
}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	ffff0000 	.word	0xffff0000
 800505c:	0800402f 	.word	0x0800402f
 8005060:	080050fb 	.word	0x080050fb

08005064 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b60      	cmp	r3, #96	; 0x60
 8005076:	d10e      	bne.n	8005096 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fe ffb7 	bl	8004002 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005094:	e009      	b.n	80050aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fd fcc1 	bl	8002a2c <HAL_I2C_ErrorCallback>
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d103      	bne.n	80050d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2200      	movs	r2, #0
 80050ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d007      	beq.n	80050ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0201 	orr.w	r2, r2, #1
 80050ec:	619a      	str	r2, [r3, #24]
  }
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	2200      	movs	r2, #0
 8005116:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	2200      	movs	r2, #0
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff ff9b 	bl	8005064 <I2C_TreatErrorCallback>
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	603b      	str	r3, [r7, #0]
 8005142:	4613      	mov	r3, r2
 8005144:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005146:	e031      	b.n	80051ac <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800514e:	d02d      	beq.n	80051ac <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005150:	f7fd ff38 	bl	8002fc4 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d122      	bne.n	80051ac <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4013      	ands	r3, r2
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	429a      	cmp	r2, r3
 8005174:	bf0c      	ite	eq
 8005176:	2301      	moveq	r3, #1
 8005178:	2300      	movne	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	461a      	mov	r2, r3
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	429a      	cmp	r2, r3
 8005182:	d113      	bne.n	80051ac <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005188:	f043 0220 	orr.w	r2, r3, #32
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e00f      	b.n	80051cc <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4013      	ands	r3, r2
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	bf0c      	ite	eq
 80051bc:	2301      	moveq	r3, #1
 80051be:	2300      	movne	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d0be      	beq.n	8005148 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051e0:	e033      	b.n	800524a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 f900 	bl	80053ec <I2C_IsErrorOccurred>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e031      	b.n	800525a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051fc:	d025      	beq.n	800524a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fd fee1 	bl	8002fc4 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d11a      	bne.n	800524a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b02      	cmp	r3, #2
 8005220:	d013      	beq.n	800524a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	f043 0220 	orr.w	r2, r3, #32
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e007      	b.n	800525a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b02      	cmp	r3, #2
 8005256:	d1c4      	bne.n	80051e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800526e:	e02f      	b.n	80052d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 f8b9 	bl	80053ec <I2C_IsErrorOccurred>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e02d      	b.n	80052e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005284:	f7fd fe9e 	bl	8002fc4 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d302      	bcc.n	800529a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d11a      	bne.n	80052d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b20      	cmp	r3, #32
 80052a6:	d013      	beq.n	80052d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e007      	b.n	80052e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d1c8      	bne.n	8005270 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052f4:	e06b      	b.n	80053ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f876 	bl	80053ec <I2C_IsErrorOccurred>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e069      	b.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b20      	cmp	r3, #32
 8005316:	d138      	bne.n	800538a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b04      	cmp	r3, #4
 8005324:	d105      	bne.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e055      	b.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b10      	cmp	r3, #16
 800533e:	d107      	bne.n	8005350 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2210      	movs	r2, #16
 8005346:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2204      	movs	r2, #4
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
 800534e:	e002      	b.n	8005356 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2220      	movs	r2, #32
 800535c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6859      	ldr	r1, [r3, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800536a:	400b      	ands	r3, r1
 800536c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e029      	b.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538a:	f7fd fe1b 	bl	8002fc4 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	429a      	cmp	r2, r3
 8005398:	d302      	bcc.n	80053a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d116      	bne.n	80053ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d00f      	beq.n	80053ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	f043 0220 	orr.w	r2, r3, #32
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e007      	b.n	80053de <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d18c      	bne.n	80052f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	fe00e800 	.word	0xfe00e800

080053ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005406:	2300      	movs	r3, #0
 8005408:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d068      	beq.n	80054ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2210      	movs	r2, #16
 800541e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005420:	e049      	b.n	80054b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005428:	d045      	beq.n	80054b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800542a:	f7fd fdcb 	bl	8002fc4 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <I2C_IsErrorOccurred+0x54>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d13a      	bne.n	80054b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800544a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005452:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800545e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005462:	d121      	bne.n	80054a8 <I2C_IsErrorOccurred+0xbc>
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546a:	d01d      	beq.n	80054a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800546c:	7cfb      	ldrb	r3, [r7, #19]
 800546e:	2b20      	cmp	r3, #32
 8005470:	d01a      	beq.n	80054a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005480:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005482:	f7fd fd9f 	bl	8002fc4 <HAL_GetTick>
 8005486:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005488:	e00e      	b.n	80054a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800548a:	f7fd fd9b 	bl	8002fc4 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b19      	cmp	r3, #25
 8005496:	d907      	bls.n	80054a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	f043 0320 	orr.w	r3, r3, #32
 800549e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80054a6:	e006      	b.n	80054b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f003 0320 	and.w	r3, r3, #32
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d1e9      	bne.n	800548a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d003      	beq.n	80054cc <I2C_IsErrorOccurred+0xe0>
 80054c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d0aa      	beq.n	8005422 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d103      	bne.n	80054dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2220      	movs	r2, #32
 80054da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	f043 0304 	orr.w	r3, r3, #4
 80054e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	f043 0301 	orr.w	r3, r3, #1
 8005502:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	f043 0308 	orr.w	r3, r3, #8
 8005524:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800552e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005540:	6a3b      	ldr	r3, [r7, #32]
 8005542:	f043 0302 	orr.w	r3, r3, #2
 8005546:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01c      	beq.n	800559a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff fda6 	bl	80050b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6859      	ldr	r1, [r3, #4]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <I2C_IsErrorOccurred+0x1bc>)
 8005572:	400b      	ands	r3, r1
 8005574:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800559a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3728      	adds	r7, #40	; 0x28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	fe00e800 	.word	0xfe00e800

080055ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	607b      	str	r3, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	817b      	strh	r3, [r7, #10]
 80055ba:	4613      	mov	r3, r2
 80055bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055be:	897b      	ldrh	r3, [r7, #10]
 80055c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055c4:	7a7b      	ldrb	r3, [r7, #9]
 80055c6:	041b      	lsls	r3, r3, #16
 80055c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	0d5b      	lsrs	r3, r3, #21
 80055e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055ea:	4b08      	ldr	r3, [pc, #32]	; (800560c <I2C_TransferConfig+0x60>)
 80055ec:	430b      	orrs	r3, r1
 80055ee:	43db      	mvns	r3, r3
 80055f0:	ea02 0103 	and.w	r1, r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	03ff63ff 	.word	0x03ff63ff

08005610 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005624:	4a39      	ldr	r2, [pc, #228]	; (800570c <I2C_Enable_IRQ+0xfc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d032      	beq.n	8005690 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800562e:	4a38      	ldr	r2, [pc, #224]	; (8005710 <I2C_Enable_IRQ+0x100>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d02d      	beq.n	8005690 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005638:	4a36      	ldr	r2, [pc, #216]	; (8005714 <I2C_Enable_IRQ+0x104>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d028      	beq.n	8005690 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800563e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005642:	2b00      	cmp	r3, #0
 8005644:	da03      	bge.n	800564e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800564c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800564e:	887b      	ldrh	r3, [r7, #2]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d003      	beq.n	8005660 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800565e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005660:	887b      	ldrh	r3, [r7, #2]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005670:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005672:	887b      	ldrh	r3, [r7, #2]
 8005674:	2b10      	cmp	r3, #16
 8005676:	d103      	bne.n	8005680 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800567e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005680:	887b      	ldrh	r3, [r7, #2]
 8005682:	2b20      	cmp	r3, #32
 8005684:	d133      	bne.n	80056ee <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f043 0320 	orr.w	r3, r3, #32
 800568c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800568e:	e02e      	b.n	80056ee <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005690:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005694:	2b00      	cmp	r3, #0
 8005696:	da03      	bge.n	80056a0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800569e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056a0:	887b      	ldrh	r3, [r7, #2]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80056b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056b2:	887b      	ldrh	r3, [r7, #2]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80056c2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d103      	bne.n	80056d2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80056d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056d2:	887b      	ldrh	r3, [r7, #2]
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d103      	bne.n	80056e0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80056de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056e0:	887b      	ldrh	r3, [r7, #2]
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d103      	bne.n	80056ee <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6819      	ldr	r1, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	601a      	str	r2, [r3, #0]
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	0800421f 	.word	0x0800421f
 8005710:	08004641 	.word	0x08004641
 8005714:	080043f5 	.word	0x080043f5

08005718 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005728:	887b      	ldrh	r3, [r7, #2]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00f      	beq.n	8005752 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005738:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005746:	2b28      	cmp	r3, #40	; 0x28
 8005748:	d003      	beq.n	8005752 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005750:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00f      	beq.n	800577c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8005762:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800576a:	b2db      	uxtb	r3, r3
 800576c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005770:	2b28      	cmp	r3, #40	; 0x28
 8005772:	d003      	beq.n	800577c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800577a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800577c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005780:	2b00      	cmp	r3, #0
 8005782:	da03      	bge.n	800578c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800578a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800578c:	887b      	ldrh	r3, [r7, #2]
 800578e:	2b10      	cmp	r3, #16
 8005790:	d103      	bne.n	800579a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005798:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800579a:	887b      	ldrh	r3, [r7, #2]
 800579c:	2b20      	cmp	r3, #32
 800579e:	d103      	bne.n	80057a8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f043 0320 	orr.w	r3, r3, #32
 80057a6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80057a8:	887b      	ldrh	r3, [r7, #2]
 80057aa:	2b40      	cmp	r3, #64	; 0x40
 80057ac:	d103      	bne.n	80057b6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6819      	ldr	r1, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	43da      	mvns	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	400a      	ands	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
}
 80057c8:	bf00      	nop
 80057ca:	3714      	adds	r7, #20
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d138      	bne.n	800585c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e032      	b.n	800585e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2224      	movs	r2, #36	; 0x24
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 0201 	bic.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005826:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0201 	orr.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800586a:	b480      	push	{r7}
 800586c:	b085      	sub	sp, #20
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b20      	cmp	r3, #32
 800587e:	d139      	bne.n	80058f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005886:	2b01      	cmp	r3, #1
 8005888:	d101      	bne.n	800588e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800588a:	2302      	movs	r3, #2
 800588c:	e033      	b.n	80058f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2224      	movs	r2, #36	; 0x24
 800589a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80058bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	e000      	b.n	80058f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058f4:	2302      	movs	r3, #2
  }
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3714      	adds	r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
	...

08005904 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <HAL_PWREx_GetVoltageRange+0x18>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005910:	4618      	mov	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	40007000 	.word	0x40007000

08005920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592e:	d130      	bne.n	8005992 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005930:	4b23      	ldr	r3, [pc, #140]	; (80059c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800593c:	d038      	beq.n	80059b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800593e:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005946:	4a1e      	ldr	r2, [pc, #120]	; (80059c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800594c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2232      	movs	r2, #50	; 0x32
 8005954:	fb02 f303 	mul.w	r3, r2, r3
 8005958:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800595a:	fba2 2303 	umull	r2, r3, r2, r3
 800595e:	0c9b      	lsrs	r3, r3, #18
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005964:	e002      	b.n	800596c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	3b01      	subs	r3, #1
 800596a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800596c:	4b14      	ldr	r3, [pc, #80]	; (80059c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005978:	d102      	bne.n	8005980 <HAL_PWREx_ControlVoltageScaling+0x60>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f2      	bne.n	8005966 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598c:	d110      	bne.n	80059b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e00f      	b.n	80059b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005992:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800599a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599e:	d007      	beq.n	80059b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059a0:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059a8:	4a05      	ldr	r2, [pc, #20]	; (80059c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40007000 	.word	0x40007000
 80059c4:	20000000 	.word	0x20000000
 80059c8:	431bde83 	.word	0x431bde83

080059cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f000 bc02 	b.w	80061e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059e0:	4b96      	ldr	r3, [pc, #600]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 030c 	and.w	r3, r3, #12
 80059e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059ea:	4b94      	ldr	r3, [pc, #592]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80e4 	beq.w	8005bca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <HAL_RCC_OscConfig+0x4c>
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2b0c      	cmp	r3, #12
 8005a0c:	f040 808b 	bne.w	8005b26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	f040 8087 	bne.w	8005b26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a18:	4b88      	ldr	r3, [pc, #544]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_RCC_OscConfig+0x64>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e3d9      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	4b81      	ldr	r3, [pc, #516]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <HAL_RCC_OscConfig+0x7e>
 8005a40:	4b7e      	ldr	r3, [pc, #504]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a48:	e005      	b.n	8005a56 <HAL_RCC_OscConfig+0x8a>
 8005a4a:	4b7c      	ldr	r3, [pc, #496]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d223      	bcs.n	8005aa2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fd8c 	bl	800657c <RCC_SetFlashLatencyFromMSIRange>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e3ba      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a6e:	4b73      	ldr	r3, [pc, #460]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a72      	ldr	r2, [pc, #456]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a74:	f043 0308 	orr.w	r3, r3, #8
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	4b70      	ldr	r3, [pc, #448]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	496d      	ldr	r1, [pc, #436]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a8c:	4b6b      	ldr	r3, [pc, #428]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	4968      	ldr	r1, [pc, #416]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	604b      	str	r3, [r1, #4]
 8005aa0:	e025      	b.n	8005aee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005aa2:	4b66      	ldr	r3, [pc, #408]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a65      	ldr	r2, [pc, #404]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005aa8:	f043 0308 	orr.w	r3, r3, #8
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	4b63      	ldr	r3, [pc, #396]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	4960      	ldr	r1, [pc, #384]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ac0:	4b5e      	ldr	r3, [pc, #376]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	495b      	ldr	r1, [pc, #364]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fd4c 	bl	800657c <RCC_SetFlashLatencyFromMSIRange>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d001      	beq.n	8005aee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e37a      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aee:	f000 fc81 	bl	80063f4 <HAL_RCC_GetSysClockFreq>
 8005af2:	4602      	mov	r2, r0
 8005af4:	4b51      	ldr	r3, [pc, #324]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	4950      	ldr	r1, [pc, #320]	; (8005c40 <HAL_RCC_OscConfig+0x274>)
 8005b00:	5ccb      	ldrb	r3, [r1, r3]
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	fa22 f303 	lsr.w	r3, r2, r3
 8005b0a:	4a4e      	ldr	r2, [pc, #312]	; (8005c44 <HAL_RCC_OscConfig+0x278>)
 8005b0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b0e:	4b4e      	ldr	r3, [pc, #312]	; (8005c48 <HAL_RCC_OscConfig+0x27c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fd fa06 	bl	8002f24 <HAL_InitTick>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d052      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	e35e      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d032      	beq.n	8005b94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b2e:	4b43      	ldr	r3, [pc, #268]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a42      	ldr	r2, [pc, #264]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b3a:	f7fd fa43 	bl	8002fc4 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b42:	f7fd fa3f 	bl	8002fc4 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e347      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b54:	4b39      	ldr	r3, [pc, #228]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b60:	4b36      	ldr	r3, [pc, #216]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a35      	ldr	r2, [pc, #212]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b66:	f043 0308 	orr.w	r3, r3, #8
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	4930      	ldr	r1, [pc, #192]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b7e:	4b2f      	ldr	r3, [pc, #188]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	492b      	ldr	r1, [pc, #172]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	604b      	str	r3, [r1, #4]
 8005b92:	e01a      	b.n	8005bca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b94:	4b29      	ldr	r3, [pc, #164]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a28      	ldr	r2, [pc, #160]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005b9a:	f023 0301 	bic.w	r3, r3, #1
 8005b9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ba0:	f7fd fa10 	bl	8002fc4 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ba8:	f7fd fa0c 	bl	8002fc4 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e314      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bba:	4b20      	ldr	r3, [pc, #128]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f0      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x1dc>
 8005bc6:	e000      	b.n	8005bca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d073      	beq.n	8005cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d005      	beq.n	8005be8 <HAL_RCC_OscConfig+0x21c>
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	2b0c      	cmp	r3, #12
 8005be0:	d10e      	bne.n	8005c00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d10b      	bne.n	8005c00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005be8:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d063      	beq.n	8005cbc <HAL_RCC_OscConfig+0x2f0>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d15f      	bne.n	8005cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e2f1      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c08:	d106      	bne.n	8005c18 <HAL_RCC_OscConfig+0x24c>
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a0b      	ldr	r2, [pc, #44]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	e025      	b.n	8005c64 <HAL_RCC_OscConfig+0x298>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c20:	d114      	bne.n	8005c4c <HAL_RCC_OscConfig+0x280>
 8005c22:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005c28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a02      	ldr	r2, [pc, #8]	; (8005c3c <HAL_RCC_OscConfig+0x270>)
 8005c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	e013      	b.n	8005c64 <HAL_RCC_OscConfig+0x298>
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	08007f08 	.word	0x08007f08
 8005c44:	20000000 	.word	0x20000000
 8005c48:	20000004 	.word	0x20000004
 8005c4c:	4ba0      	ldr	r3, [pc, #640]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a9f      	ldr	r2, [pc, #636]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	4b9d      	ldr	r3, [pc, #628]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a9c      	ldr	r2, [pc, #624]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d013      	beq.n	8005c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c6c:	f7fd f9aa 	bl	8002fc4 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c74:	f7fd f9a6 	bl	8002fc4 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b64      	cmp	r3, #100	; 0x64
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e2ae      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c86:	4b92      	ldr	r3, [pc, #584]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0f0      	beq.n	8005c74 <HAL_RCC_OscConfig+0x2a8>
 8005c92:	e014      	b.n	8005cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c94:	f7fd f996 	bl	8002fc4 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c9c:	f7fd f992 	bl	8002fc4 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b64      	cmp	r3, #100	; 0x64
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e29a      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cae:	4b88      	ldr	r3, [pc, #544]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1f0      	bne.n	8005c9c <HAL_RCC_OscConfig+0x2d0>
 8005cba:	e000      	b.n	8005cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d060      	beq.n	8005d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b04      	cmp	r3, #4
 8005cce:	d005      	beq.n	8005cdc <HAL_RCC_OscConfig+0x310>
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b0c      	cmp	r3, #12
 8005cd4:	d119      	bne.n	8005d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d116      	bne.n	8005d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cdc:	4b7c      	ldr	r3, [pc, #496]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x328>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e277      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cf4:	4b76      	ldr	r3, [pc, #472]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	4973      	ldr	r1, [pc, #460]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d08:	e040      	b.n	8005d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d023      	beq.n	8005d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d12:	4b6f      	ldr	r3, [pc, #444]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6e      	ldr	r2, [pc, #440]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1e:	f7fd f951 	bl	8002fc4 <HAL_GetTick>
 8005d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d26:	f7fd f94d 	bl	8002fc4 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e255      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d38:	4b65      	ldr	r3, [pc, #404]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0f0      	beq.n	8005d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d44:	4b62      	ldr	r3, [pc, #392]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	061b      	lsls	r3, r3, #24
 8005d52:	495f      	ldr	r1, [pc, #380]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]
 8005d58:	e018      	b.n	8005d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d5a:	4b5d      	ldr	r3, [pc, #372]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a5c      	ldr	r2, [pc, #368]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d66:	f7fd f92d 	bl	8002fc4 <HAL_GetTick>
 8005d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d6e:	f7fd f929 	bl	8002fc4 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e231      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d80:	4b53      	ldr	r3, [pc, #332]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f0      	bne.n	8005d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d03c      	beq.n	8005e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01c      	beq.n	8005dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005da0:	4b4b      	ldr	r3, [pc, #300]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005da6:	4a4a      	ldr	r2, [pc, #296]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db0:	f7fd f908 	bl	8002fc4 <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005db8:	f7fd f904 	bl	8002fc4 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e20c      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dca:	4b41      	ldr	r3, [pc, #260]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0ef      	beq.n	8005db8 <HAL_RCC_OscConfig+0x3ec>
 8005dd8:	e01b      	b.n	8005e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dda:	4b3d      	ldr	r3, [pc, #244]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de0:	4a3b      	ldr	r2, [pc, #236]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dea:	f7fd f8eb 	bl	8002fc4 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df2:	f7fd f8e7 	bl	8002fc4 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e1ef      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e04:	4b32      	ldr	r3, [pc, #200]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1ef      	bne.n	8005df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 80a6 	beq.w	8005f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e20:	2300      	movs	r3, #0
 8005e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e24:	4b2a      	ldr	r3, [pc, #168]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10d      	bne.n	8005e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e30:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	4a26      	ldr	r2, [pc, #152]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e3c:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e44:	60bb      	str	r3, [r7, #8]
 8005e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e4c:	4b21      	ldr	r3, [pc, #132]	; (8005ed4 <HAL_RCC_OscConfig+0x508>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d118      	bne.n	8005e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e58:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <HAL_RCC_OscConfig+0x508>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <HAL_RCC_OscConfig+0x508>)
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e64:	f7fd f8ae 	bl	8002fc4 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e6c:	f7fd f8aa 	bl	8002fc4 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e1b2      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e7e:	4b15      	ldr	r3, [pc, #84]	; (8005ed4 <HAL_RCC_OscConfig+0x508>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f0      	beq.n	8005e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d108      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x4d8>
 8005e92:	4b0f      	ldr	r3, [pc, #60]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e98:	4a0d      	ldr	r2, [pc, #52]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005e9a:	f043 0301 	orr.w	r3, r3, #1
 8005e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ea2:	e029      	b.n	8005ef8 <HAL_RCC_OscConfig+0x52c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d115      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x50c>
 8005eac:	4b08      	ldr	r3, [pc, #32]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb2:	4a07      	ldr	r2, [pc, #28]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005eb4:	f043 0304 	orr.w	r3, r3, #4
 8005eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ebc:	4b04      	ldr	r3, [pc, #16]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec2:	4a03      	ldr	r2, [pc, #12]	; (8005ed0 <HAL_RCC_OscConfig+0x504>)
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ecc:	e014      	b.n	8005ef8 <HAL_RCC_OscConfig+0x52c>
 8005ece:	bf00      	nop
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	40007000 	.word	0x40007000
 8005ed8:	4b9a      	ldr	r3, [pc, #616]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ede:	4a99      	ldr	r2, [pc, #612]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ee8:	4b96      	ldr	r3, [pc, #600]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	4a95      	ldr	r2, [pc, #596]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005ef0:	f023 0304 	bic.w	r3, r3, #4
 8005ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d016      	beq.n	8005f2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7fd f860 	bl	8002fc4 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f06:	e00a      	b.n	8005f1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f08:	f7fd f85c 	bl	8002fc4 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e162      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f1e:	4b89      	ldr	r3, [pc, #548]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0ed      	beq.n	8005f08 <HAL_RCC_OscConfig+0x53c>
 8005f2c:	e015      	b.n	8005f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f2e:	f7fd f849 	bl	8002fc4 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f34:	e00a      	b.n	8005f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f36:	f7fd f845 	bl	8002fc4 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e14b      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f4c:	4b7d      	ldr	r3, [pc, #500]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1ed      	bne.n	8005f36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f5a:	7ffb      	ldrb	r3, [r7, #31]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d105      	bne.n	8005f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f60:	4b78      	ldr	r3, [pc, #480]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f64:	4a77      	ldr	r2, [pc, #476]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d03c      	beq.n	8005ff2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01c      	beq.n	8005fba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f80:	4b70      	ldr	r3, [pc, #448]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f86:	4a6f      	ldr	r2, [pc, #444]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005f88:	f043 0301 	orr.w	r3, r3, #1
 8005f8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fd f818 	bl	8002fc4 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f98:	f7fd f814 	bl	8002fc4 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e11c      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005faa:	4b66      	ldr	r3, [pc, #408]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0ef      	beq.n	8005f98 <HAL_RCC_OscConfig+0x5cc>
 8005fb8:	e01b      	b.n	8005ff2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fba:	4b62      	ldr	r3, [pc, #392]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fc0:	4a60      	ldr	r2, [pc, #384]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fca:	f7fc fffb 	bl	8002fc4 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fd2:	f7fc fff7 	bl	8002fc4 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e0ff      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fe4:	4b57      	ldr	r3, [pc, #348]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8005fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1ef      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80f3 	beq.w	80061e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	2b02      	cmp	r3, #2
 8006002:	f040 80c9 	bne.w	8006198 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006006:	4b4f      	ldr	r3, [pc, #316]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f003 0203 	and.w	r2, r3, #3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006016:	429a      	cmp	r2, r3
 8006018:	d12c      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	3b01      	subs	r3, #1
 8006026:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d123      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006038:	429a      	cmp	r2, r3
 800603a:	d11b      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006048:	429a      	cmp	r2, r3
 800604a:	d113      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	085b      	lsrs	r3, r3, #1
 8006058:	3b01      	subs	r3, #1
 800605a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d109      	bne.n	8006074 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	085b      	lsrs	r3, r3, #1
 800606c:	3b01      	subs	r3, #1
 800606e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d06b      	beq.n	800614c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	2b0c      	cmp	r3, #12
 8006078:	d062      	beq.n	8006140 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800607a:	4b32      	ldr	r3, [pc, #200]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e0ac      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800608a:	4b2e      	ldr	r3, [pc, #184]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2d      	ldr	r2, [pc, #180]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8006090:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006094:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006096:	f7fc ff95 	bl	8002fc4 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800609e:	f7fc ff91 	bl	8002fc4 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e099      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060b0:	4b24      	ldr	r3, [pc, #144]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1f0      	bne.n	800609e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060bc:	4b21      	ldr	r3, [pc, #132]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	4b21      	ldr	r3, [pc, #132]	; (8006148 <HAL_RCC_OscConfig+0x77c>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80060cc:	3a01      	subs	r2, #1
 80060ce:	0112      	lsls	r2, r2, #4
 80060d0:	4311      	orrs	r1, r2
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060d6:	0212      	lsls	r2, r2, #8
 80060d8:	4311      	orrs	r1, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060de:	0852      	lsrs	r2, r2, #1
 80060e0:	3a01      	subs	r2, #1
 80060e2:	0552      	lsls	r2, r2, #21
 80060e4:	4311      	orrs	r1, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060ea:	0852      	lsrs	r2, r2, #1
 80060ec:	3a01      	subs	r2, #1
 80060ee:	0652      	lsls	r2, r2, #25
 80060f0:	4311      	orrs	r1, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060f6:	06d2      	lsls	r2, r2, #27
 80060f8:	430a      	orrs	r2, r1
 80060fa:	4912      	ldr	r1, [pc, #72]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006100:	4b10      	ldr	r3, [pc, #64]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a0f      	ldr	r2, [pc, #60]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8006106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800610a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800610c:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4a0c      	ldr	r2, [pc, #48]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8006112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006116:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006118:	f7fc ff54 	bl	8002fc4 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006120:	f7fc ff50 	bl	8002fc4 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e058      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006132:	4b04      	ldr	r3, [pc, #16]	; (8006144 <HAL_RCC_OscConfig+0x778>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f0      	beq.n	8006120 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800613e:	e050      	b.n	80061e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e04f      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
 8006144:	40021000 	.word	0x40021000
 8006148:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800614c:	4b27      	ldr	r3, [pc, #156]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d144      	bne.n	80061e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006158:	4b24      	ldr	r3, [pc, #144]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a23      	ldr	r2, [pc, #140]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 800615e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006162:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006164:	4b21      	ldr	r3, [pc, #132]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	4a20      	ldr	r2, [pc, #128]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 800616a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800616e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006170:	f7fc ff28 	bl	8002fc4 <HAL_GetTick>
 8006174:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006178:	f7fc ff24 	bl	8002fc4 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e02c      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800618a:	4b18      	ldr	r3, [pc, #96]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0f0      	beq.n	8006178 <HAL_RCC_OscConfig+0x7ac>
 8006196:	e024      	b.n	80061e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d01f      	beq.n	80061de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a12      	ldr	r2, [pc, #72]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 80061a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061aa:	f7fc ff0b 	bl	8002fc4 <HAL_GetTick>
 80061ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b2:	f7fc ff07 	bl	8002fc4 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e00f      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c4:	4b09      	ldr	r3, [pc, #36]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f0      	bne.n	80061b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80061d0:	4b06      	ldr	r3, [pc, #24]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	4905      	ldr	r1, [pc, #20]	; (80061ec <HAL_RCC_OscConfig+0x820>)
 80061d6:	4b06      	ldr	r3, [pc, #24]	; (80061f0 <HAL_RCC_OscConfig+0x824>)
 80061d8:	4013      	ands	r3, r2
 80061da:	60cb      	str	r3, [r1, #12]
 80061dc:	e001      	b.n	80061e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40021000 	.word	0x40021000
 80061f0:	feeefffc 	.word	0xfeeefffc

080061f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0e7      	b.n	80063d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006208:	4b75      	ldr	r3, [pc, #468]	; (80063e0 <HAL_RCC_ClockConfig+0x1ec>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d910      	bls.n	8006238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006216:	4b72      	ldr	r3, [pc, #456]	; (80063e0 <HAL_RCC_ClockConfig+0x1ec>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 0207 	bic.w	r2, r3, #7
 800621e:	4970      	ldr	r1, [pc, #448]	; (80063e0 <HAL_RCC_ClockConfig+0x1ec>)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	4313      	orrs	r3, r2
 8006224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006226:	4b6e      	ldr	r3, [pc, #440]	; (80063e0 <HAL_RCC_ClockConfig+0x1ec>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d001      	beq.n	8006238 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0cf      	b.n	80063d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d010      	beq.n	8006266 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	689a      	ldr	r2, [r3, #8]
 8006248:	4b66      	ldr	r3, [pc, #408]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006250:	429a      	cmp	r2, r3
 8006252:	d908      	bls.n	8006266 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006254:	4b63      	ldr	r3, [pc, #396]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	4960      	ldr	r1, [pc, #384]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 8006262:	4313      	orrs	r3, r2
 8006264:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d04c      	beq.n	800630c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d107      	bne.n	800628a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800627a:	4b5a      	ldr	r3, [pc, #360]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d121      	bne.n	80062ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e0a6      	b.n	80063d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d107      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006292:	4b54      	ldr	r3, [pc, #336]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d115      	bne.n	80062ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e09a      	b.n	80063d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062aa:	4b4e      	ldr	r3, [pc, #312]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e08e      	b.n	80063d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062ba:	4b4a      	ldr	r3, [pc, #296]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e086      	b.n	80063d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062ca:	4b46      	ldr	r3, [pc, #280]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f023 0203 	bic.w	r2, r3, #3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	4943      	ldr	r1, [pc, #268]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062dc:	f7fc fe72 	bl	8002fc4 <HAL_GetTick>
 80062e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	e00a      	b.n	80062fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e4:	f7fc fe6e 	bl	8002fc4 <HAL_GetTick>
 80062e8:	4602      	mov	r2, r0
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e06e      	b.n	80063d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fa:	4b3a      	ldr	r3, [pc, #232]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 020c 	and.w	r2, r3, #12
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	429a      	cmp	r2, r3
 800630a:	d1eb      	bne.n	80062e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d010      	beq.n	800633a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	4b31      	ldr	r3, [pc, #196]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006324:	429a      	cmp	r2, r3
 8006326:	d208      	bcs.n	800633a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006328:	4b2e      	ldr	r3, [pc, #184]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	492b      	ldr	r1, [pc, #172]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 8006336:	4313      	orrs	r3, r2
 8006338:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800633a:	4b29      	ldr	r3, [pc, #164]	; (80063e0 <HAL_RCC_ClockConfig+0x1ec>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0307 	and.w	r3, r3, #7
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	429a      	cmp	r2, r3
 8006346:	d210      	bcs.n	800636a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006348:	4b25      	ldr	r3, [pc, #148]	; (80063e0 <HAL_RCC_ClockConfig+0x1ec>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f023 0207 	bic.w	r2, r3, #7
 8006350:	4923      	ldr	r1, [pc, #140]	; (80063e0 <HAL_RCC_ClockConfig+0x1ec>)
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006358:	4b21      	ldr	r3, [pc, #132]	; (80063e0 <HAL_RCC_ClockConfig+0x1ec>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d001      	beq.n	800636a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e036      	b.n	80063d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006376:	4b1b      	ldr	r3, [pc, #108]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4918      	ldr	r1, [pc, #96]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 8006384:	4313      	orrs	r3, r2
 8006386:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d009      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006394:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4910      	ldr	r1, [pc, #64]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063a8:	f000 f824 	bl	80063f4 <HAL_RCC_GetSysClockFreq>
 80063ac:	4602      	mov	r2, r0
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <HAL_RCC_ClockConfig+0x1f0>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	490b      	ldr	r1, [pc, #44]	; (80063e8 <HAL_RCC_ClockConfig+0x1f4>)
 80063ba:	5ccb      	ldrb	r3, [r1, r3]
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
 80063c4:	4a09      	ldr	r2, [pc, #36]	; (80063ec <HAL_RCC_ClockConfig+0x1f8>)
 80063c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063c8:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <HAL_RCC_ClockConfig+0x1fc>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7fc fda9 	bl	8002f24 <HAL_InitTick>
 80063d2:	4603      	mov	r3, r0
 80063d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80063d6:	7afb      	ldrb	r3, [r7, #11]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	40022000 	.word	0x40022000
 80063e4:	40021000 	.word	0x40021000
 80063e8:	08007f08 	.word	0x08007f08
 80063ec:	20000000 	.word	0x20000000
 80063f0:	20000004 	.word	0x20000004

080063f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b089      	sub	sp, #36	; 0x24
 80063f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
 80063fe:	2300      	movs	r3, #0
 8006400:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006402:	4b3e      	ldr	r3, [pc, #248]	; (80064fc <HAL_RCC_GetSysClockFreq+0x108>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
 800640a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800640c:	4b3b      	ldr	r3, [pc, #236]	; (80064fc <HAL_RCC_GetSysClockFreq+0x108>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0303 	and.w	r3, r3, #3
 8006414:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_RCC_GetSysClockFreq+0x34>
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b0c      	cmp	r3, #12
 8006420:	d121      	bne.n	8006466 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d11e      	bne.n	8006466 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006428:	4b34      	ldr	r3, [pc, #208]	; (80064fc <HAL_RCC_GetSysClockFreq+0x108>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d107      	bne.n	8006444 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006434:	4b31      	ldr	r3, [pc, #196]	; (80064fc <HAL_RCC_GetSysClockFreq+0x108>)
 8006436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800643a:	0a1b      	lsrs	r3, r3, #8
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	e005      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006444:	4b2d      	ldr	r3, [pc, #180]	; (80064fc <HAL_RCC_GetSysClockFreq+0x108>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	091b      	lsrs	r3, r3, #4
 800644a:	f003 030f 	and.w	r3, r3, #15
 800644e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006450:	4a2b      	ldr	r2, [pc, #172]	; (8006500 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006458:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10d      	bne.n	800647c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006464:	e00a      	b.n	800647c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2b04      	cmp	r3, #4
 800646a:	d102      	bne.n	8006472 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800646c:	4b25      	ldr	r3, [pc, #148]	; (8006504 <HAL_RCC_GetSysClockFreq+0x110>)
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	e004      	b.n	800647c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	2b08      	cmp	r3, #8
 8006476:	d101      	bne.n	800647c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006478:	4b23      	ldr	r3, [pc, #140]	; (8006508 <HAL_RCC_GetSysClockFreq+0x114>)
 800647a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b0c      	cmp	r3, #12
 8006480:	d134      	bne.n	80064ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006482:	4b1e      	ldr	r3, [pc, #120]	; (80064fc <HAL_RCC_GetSysClockFreq+0x108>)
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f003 0303 	and.w	r3, r3, #3
 800648a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d003      	beq.n	800649a <HAL_RCC_GetSysClockFreq+0xa6>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	2b03      	cmp	r3, #3
 8006496:	d003      	beq.n	80064a0 <HAL_RCC_GetSysClockFreq+0xac>
 8006498:	e005      	b.n	80064a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800649a:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <HAL_RCC_GetSysClockFreq+0x110>)
 800649c:	617b      	str	r3, [r7, #20]
      break;
 800649e:	e005      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064a0:	4b19      	ldr	r3, [pc, #100]	; (8006508 <HAL_RCC_GetSysClockFreq+0x114>)
 80064a2:	617b      	str	r3, [r7, #20]
      break;
 80064a4:	e002      	b.n	80064ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	617b      	str	r3, [r7, #20]
      break;
 80064aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064ac:	4b13      	ldr	r3, [pc, #76]	; (80064fc <HAL_RCC_GetSysClockFreq+0x108>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	3301      	adds	r3, #1
 80064b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <HAL_RCC_GetSysClockFreq+0x108>)
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	0a1b      	lsrs	r3, r3, #8
 80064c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	fb03 f202 	mul.w	r2, r3, r2
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <HAL_RCC_GetSysClockFreq+0x108>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	0e5b      	lsrs	r3, r3, #25
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	3301      	adds	r3, #1
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80064ec:	69bb      	ldr	r3, [r7, #24]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3724      	adds	r7, #36	; 0x24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	40021000 	.word	0x40021000
 8006500:	08007f20 	.word	0x08007f20
 8006504:	00f42400 	.word	0x00f42400
 8006508:	007a1200 	.word	0x007a1200

0800650c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006510:	4b03      	ldr	r3, [pc, #12]	; (8006520 <HAL_RCC_GetHCLKFreq+0x14>)
 8006512:	681b      	ldr	r3, [r3, #0]
}
 8006514:	4618      	mov	r0, r3
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	20000000 	.word	0x20000000

08006524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006528:	f7ff fff0 	bl	800650c <HAL_RCC_GetHCLKFreq>
 800652c:	4602      	mov	r2, r0
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	4904      	ldr	r1, [pc, #16]	; (800654c <HAL_RCC_GetPCLK1Freq+0x28>)
 800653a:	5ccb      	ldrb	r3, [r1, r3]
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	bd80      	pop	{r7, pc}
 8006548:	40021000 	.word	0x40021000
 800654c:	08007f18 	.word	0x08007f18

08006550 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006554:	f7ff ffda 	bl	800650c <HAL_RCC_GetHCLKFreq>
 8006558:	4602      	mov	r2, r0
 800655a:	4b06      	ldr	r3, [pc, #24]	; (8006574 <HAL_RCC_GetPCLK2Freq+0x24>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	0adb      	lsrs	r3, r3, #11
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	4904      	ldr	r1, [pc, #16]	; (8006578 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006566:	5ccb      	ldrb	r3, [r1, r3]
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006570:	4618      	mov	r0, r3
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40021000 	.word	0x40021000
 8006578:	08007f18 	.word	0x08007f18

0800657c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006584:	2300      	movs	r3, #0
 8006586:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006588:	4b2a      	ldr	r3, [pc, #168]	; (8006634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800658a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006594:	f7ff f9b6 	bl	8005904 <HAL_PWREx_GetVoltageRange>
 8006598:	6178      	str	r0, [r7, #20]
 800659a:	e014      	b.n	80065c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800659c:	4b25      	ldr	r3, [pc, #148]	; (8006634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800659e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a0:	4a24      	ldr	r2, [pc, #144]	; (8006634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a6:	6593      	str	r3, [r2, #88]	; 0x58
 80065a8:	4b22      	ldr	r3, [pc, #136]	; (8006634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065b4:	f7ff f9a6 	bl	8005904 <HAL_PWREx_GetVoltageRange>
 80065b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80065ba:	4b1e      	ldr	r3, [pc, #120]	; (8006634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065be:	4a1d      	ldr	r2, [pc, #116]	; (8006634 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065cc:	d10b      	bne.n	80065e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b80      	cmp	r3, #128	; 0x80
 80065d2:	d919      	bls.n	8006608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2ba0      	cmp	r3, #160	; 0xa0
 80065d8:	d902      	bls.n	80065e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065da:	2302      	movs	r3, #2
 80065dc:	613b      	str	r3, [r7, #16]
 80065de:	e013      	b.n	8006608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065e0:	2301      	movs	r3, #1
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	e010      	b.n	8006608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b80      	cmp	r3, #128	; 0x80
 80065ea:	d902      	bls.n	80065f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80065ec:	2303      	movs	r3, #3
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	e00a      	b.n	8006608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b80      	cmp	r3, #128	; 0x80
 80065f6:	d102      	bne.n	80065fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065f8:	2302      	movs	r3, #2
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	e004      	b.n	8006608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b70      	cmp	r3, #112	; 0x70
 8006602:	d101      	bne.n	8006608 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006604:	2301      	movs	r3, #1
 8006606:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006608:	4b0b      	ldr	r3, [pc, #44]	; (8006638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f023 0207 	bic.w	r2, r3, #7
 8006610:	4909      	ldr	r1, [pc, #36]	; (8006638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	429a      	cmp	r2, r3
 8006624:	d001      	beq.n	800662a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40021000 	.word	0x40021000
 8006638:	40022000 	.word	0x40022000

0800663c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006644:	2300      	movs	r3, #0
 8006646:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006648:	2300      	movs	r3, #0
 800664a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006654:	2b00      	cmp	r3, #0
 8006656:	d031      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006660:	d01a      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006662:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006666:	d814      	bhi.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800666c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006670:	d10f      	bne.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006672:	4b5d      	ldr	r3, [pc, #372]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	4a5c      	ldr	r2, [pc, #368]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800667c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800667e:	e00c      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	3304      	adds	r3, #4
 8006684:	2100      	movs	r1, #0
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fa22 	bl	8006ad0 <RCCEx_PLLSAI1_Config>
 800668c:	4603      	mov	r3, r0
 800668e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006690:	e003      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	74fb      	strb	r3, [r7, #19]
      break;
 8006696:	e000      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800669a:	7cfb      	ldrb	r3, [r7, #19]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10b      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066a0:	4b51      	ldr	r3, [pc, #324]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ae:	494e      	ldr	r1, [pc, #312]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80066b6:	e001      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b8:	7cfb      	ldrb	r3, [r7, #19]
 80066ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 809e 	beq.w	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ca:	2300      	movs	r3, #0
 80066cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066ce:	4b46      	ldr	r3, [pc, #280]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80066da:	2301      	movs	r3, #1
 80066dc:	e000      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00d      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e4:	4b40      	ldr	r3, [pc, #256]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e8:	4a3f      	ldr	r2, [pc, #252]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ee:	6593      	str	r3, [r2, #88]	; 0x58
 80066f0:	4b3d      	ldr	r3, [pc, #244]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066fc:	2301      	movs	r3, #1
 80066fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006700:	4b3a      	ldr	r3, [pc, #232]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a39      	ldr	r2, [pc, #228]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800670c:	f7fc fc5a 	bl	8002fc4 <HAL_GetTick>
 8006710:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006712:	e009      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006714:	f7fc fc56 	bl	8002fc4 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d902      	bls.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	74fb      	strb	r3, [r7, #19]
        break;
 8006726:	e005      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006728:	4b30      	ldr	r3, [pc, #192]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0ef      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006734:	7cfb      	ldrb	r3, [r7, #19]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d15a      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800673a:	4b2b      	ldr	r3, [pc, #172]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800673c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006744:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01e      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	429a      	cmp	r2, r3
 8006754:	d019      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006756:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006760:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006762:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006768:	4a1f      	ldr	r2, [pc, #124]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800676a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006778:	4a1b      	ldr	r2, [pc, #108]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800677a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006782:	4a19      	ldr	r2, [pc, #100]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d016      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006794:	f7fc fc16 	bl	8002fc4 <HAL_GetTick>
 8006798:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800679a:	e00b      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679c:	f7fc fc12 	bl	8002fc4 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d902      	bls.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	74fb      	strb	r3, [r7, #19]
            break;
 80067b2:	e006      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067b4:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ec      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80067c2:	7cfb      	ldrb	r3, [r7, #19]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10b      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d6:	4904      	ldr	r1, [pc, #16]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067de:	e009      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067e0:	7cfb      	ldrb	r3, [r7, #19]
 80067e2:	74bb      	strb	r3, [r7, #18]
 80067e4:	e006      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	7cfb      	ldrb	r3, [r7, #19]
 80067f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067f4:	7c7b      	ldrb	r3, [r7, #17]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d105      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067fa:	4b8d      	ldr	r3, [pc, #564]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80067fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fe:	4a8c      	ldr	r2, [pc, #560]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006804:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006812:	4b87      	ldr	r3, [pc, #540]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006818:	f023 0203 	bic.w	r2, r3, #3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	4983      	ldr	r1, [pc, #524]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006834:	4b7e      	ldr	r3, [pc, #504]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f023 020c 	bic.w	r2, r3, #12
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	497b      	ldr	r1, [pc, #492]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006856:	4b76      	ldr	r3, [pc, #472]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006864:	4972      	ldr	r1, [pc, #456]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006878:	4b6d      	ldr	r3, [pc, #436]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800687a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	496a      	ldr	r1, [pc, #424]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006888:	4313      	orrs	r3, r2
 800688a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800689a:	4b65      	ldr	r3, [pc, #404]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a8:	4961      	ldr	r1, [pc, #388]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068bc:	4b5c      	ldr	r3, [pc, #368]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ca:	4959      	ldr	r1, [pc, #356]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068de:	4b54      	ldr	r3, [pc, #336]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	4950      	ldr	r1, [pc, #320]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006900:	4b4b      	ldr	r3, [pc, #300]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006906:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	4948      	ldr	r1, [pc, #288]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006922:	4b43      	ldr	r3, [pc, #268]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	493f      	ldr	r1, [pc, #252]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d028      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006944:	4b3a      	ldr	r3, [pc, #232]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006952:	4937      	ldr	r1, [pc, #220]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006962:	d106      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006964:	4b32      	ldr	r3, [pc, #200]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	4a31      	ldr	r2, [pc, #196]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800696a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800696e:	60d3      	str	r3, [r2, #12]
 8006970:	e011      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006976:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800697a:	d10c      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3304      	adds	r3, #4
 8006980:	2101      	movs	r1, #1
 8006982:	4618      	mov	r0, r3
 8006984:	f000 f8a4 	bl	8006ad0 <RCCEx_PLLSAI1_Config>
 8006988:	4603      	mov	r3, r0
 800698a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800698c:	7cfb      	ldrb	r3, [r7, #19]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8006992:	7cfb      	ldrb	r3, [r7, #19]
 8006994:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d028      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069a2:	4b23      	ldr	r3, [pc, #140]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b0:	491f      	ldr	r1, [pc, #124]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c0:	d106      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c2:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	4a1a      	ldr	r2, [pc, #104]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069cc:	60d3      	str	r3, [r2, #12]
 80069ce:	e011      	b.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069d8:	d10c      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3304      	adds	r3, #4
 80069de:	2101      	movs	r1, #1
 80069e0:	4618      	mov	r0, r3
 80069e2:	f000 f875 	bl	8006ad0 <RCCEx_PLLSAI1_Config>
 80069e6:	4603      	mov	r3, r0
 80069e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069ea:	7cfb      	ldrb	r3, [r7, #19]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80069f0:	7cfb      	ldrb	r3, [r7, #19]
 80069f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d02b      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0e:	4908      	ldr	r1, [pc, #32]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a1e:	d109      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a20:	4b03      	ldr	r3, [pc, #12]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a02      	ldr	r2, [pc, #8]	; (8006a30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a2a:	60d3      	str	r3, [r2, #12]
 8006a2c:	e014      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006a2e:	bf00      	nop
 8006a30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a3c:	d10c      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3304      	adds	r3, #4
 8006a42:	2101      	movs	r1, #1
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 f843 	bl	8006ad0 <RCCEx_PLLSAI1_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a4e:	7cfb      	ldrb	r3, [r7, #19]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8006a54:	7cfb      	ldrb	r3, [r7, #19]
 8006a56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01c      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a64:	4b19      	ldr	r3, [pc, #100]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a72:	4916      	ldr	r1, [pc, #88]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a82:	d10c      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3304      	adds	r3, #4
 8006a88:	2102      	movs	r1, #2
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f820 	bl	8006ad0 <RCCEx_PLLSAI1_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a94:	7cfb      	ldrb	r3, [r7, #19]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8006a9a:	7cfb      	ldrb	r3, [r7, #19]
 8006a9c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006aaa:	4b08      	ldr	r3, [pc, #32]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ab8:	4904      	ldr	r1, [pc, #16]	; (8006acc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006ac0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40021000 	.word	0x40021000

08006ad0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ade:	4b74      	ldr	r3, [pc, #464]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d018      	beq.n	8006b1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006aea:	4b71      	ldr	r3, [pc, #452]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0203 	and.w	r2, r3, #3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d10d      	bne.n	8006b16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
       ||
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d009      	beq.n	8006b16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b02:	4b6b      	ldr	r3, [pc, #428]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	091b      	lsrs	r3, r3, #4
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
       ||
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d047      	beq.n	8006ba6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
 8006b1a:	e044      	b.n	8006ba6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d018      	beq.n	8006b56 <RCCEx_PLLSAI1_Config+0x86>
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d825      	bhi.n	8006b74 <RCCEx_PLLSAI1_Config+0xa4>
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d002      	beq.n	8006b32 <RCCEx_PLLSAI1_Config+0x62>
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d009      	beq.n	8006b44 <RCCEx_PLLSAI1_Config+0x74>
 8006b30:	e020      	b.n	8006b74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b32:	4b5f      	ldr	r3, [pc, #380]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11d      	bne.n	8006b7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b42:	e01a      	b.n	8006b7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b44:	4b5a      	ldr	r3, [pc, #360]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d116      	bne.n	8006b7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b54:	e013      	b.n	8006b7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b56:	4b56      	ldr	r3, [pc, #344]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10f      	bne.n	8006b82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b62:	4b53      	ldr	r3, [pc, #332]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b72:	e006      	b.n	8006b82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
      break;
 8006b78:	e004      	b.n	8006b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e002      	b.n	8006b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e000      	b.n	8006b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10d      	bne.n	8006ba6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b8a:	4b49      	ldr	r3, [pc, #292]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6819      	ldr	r1, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	4943      	ldr	r1, [pc, #268]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d17c      	bne.n	8006ca6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006bac:	4b40      	ldr	r3, [pc, #256]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a3f      	ldr	r2, [pc, #252]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb8:	f7fc fa04 	bl	8002fc4 <HAL_GetTick>
 8006bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bbe:	e009      	b.n	8006bd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bc0:	f7fc fa00 	bl	8002fc4 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d902      	bls.n	8006bd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8006bd2:	e005      	b.n	8006be0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006bd4:	4b36      	ldr	r3, [pc, #216]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1ef      	bne.n	8006bc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d15f      	bne.n	8006ca6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d110      	bne.n	8006c0e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006bec:	4b30      	ldr	r3, [pc, #192]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006bf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6892      	ldr	r2, [r2, #8]
 8006bfc:	0211      	lsls	r1, r2, #8
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	68d2      	ldr	r2, [r2, #12]
 8006c02:	06d2      	lsls	r2, r2, #27
 8006c04:	430a      	orrs	r2, r1
 8006c06:	492a      	ldr	r1, [pc, #168]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	610b      	str	r3, [r1, #16]
 8006c0c:	e027      	b.n	8006c5e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d112      	bne.n	8006c3a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c14:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006c1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6892      	ldr	r2, [r2, #8]
 8006c24:	0211      	lsls	r1, r2, #8
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6912      	ldr	r2, [r2, #16]
 8006c2a:	0852      	lsrs	r2, r2, #1
 8006c2c:	3a01      	subs	r2, #1
 8006c2e:	0552      	lsls	r2, r2, #21
 8006c30:	430a      	orrs	r2, r1
 8006c32:	491f      	ldr	r1, [pc, #124]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	610b      	str	r3, [r1, #16]
 8006c38:	e011      	b.n	8006c5e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c3a:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006c42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6892      	ldr	r2, [r2, #8]
 8006c4a:	0211      	lsls	r1, r2, #8
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6952      	ldr	r2, [r2, #20]
 8006c50:	0852      	lsrs	r2, r2, #1
 8006c52:	3a01      	subs	r2, #1
 8006c54:	0652      	lsls	r2, r2, #25
 8006c56:	430a      	orrs	r2, r1
 8006c58:	4915      	ldr	r1, [pc, #84]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006c5e:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a13      	ldr	r2, [pc, #76]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6a:	f7fc f9ab 	bl	8002fc4 <HAL_GetTick>
 8006c6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c70:	e009      	b.n	8006c86 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c72:	f7fc f9a7 	bl	8002fc4 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d902      	bls.n	8006c86 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	73fb      	strb	r3, [r7, #15]
          break;
 8006c84:	e005      	b.n	8006c92 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0ef      	beq.n	8006c72 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c98:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c9a:	691a      	ldr	r2, [r3, #16]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	4903      	ldr	r1, [pc, #12]	; (8006cb0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	40021000 	.word	0x40021000

08006cb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e049      	b.n	8006d5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7fc f800 	bl	8002ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f000 fa7e 	bl	80071f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d001      	beq.n	8006d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e03b      	b.n	8006df4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f042 0201 	orr.w	r2, r2, #1
 8006d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <HAL_TIM_Base_Start_IT+0x9c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d009      	beq.n	8006db2 <HAL_TIM_Base_Start_IT+0x4e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da6:	d004      	beq.n	8006db2 <HAL_TIM_Base_Start_IT+0x4e>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a15      	ldr	r2, [pc, #84]	; (8006e04 <HAL_TIM_Base_Start_IT+0xa0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d115      	bne.n	8006dde <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <HAL_TIM_Base_Start_IT+0xa4>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2b06      	cmp	r3, #6
 8006dc2:	d015      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x8c>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dca:	d011      	beq.n	8006df0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f042 0201 	orr.w	r2, r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ddc:	e008      	b.n	8006df0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0201 	orr.w	r2, r2, #1
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	e000      	b.n	8006df2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40014000 	.word	0x40014000
 8006e08:	00010007 	.word	0x00010007

08006e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d020      	beq.n	8006e70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d01b      	beq.n	8006e70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f06f 0202 	mvn.w	r2, #2
 8006e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9ad 	bl	80071b6 <HAL_TIM_IC_CaptureCallback>
 8006e5c:	e005      	b.n	8006e6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f99f 	bl	80071a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f9b0 	bl	80071ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f003 0304 	and.w	r3, r3, #4
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d020      	beq.n	8006ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f003 0304 	and.w	r3, r3, #4
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d01b      	beq.n	8006ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0204 	mvn.w	r2, #4
 8006e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f987 	bl	80071b6 <HAL_TIM_IC_CaptureCallback>
 8006ea8:	e005      	b.n	8006eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 f979 	bl	80071a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 f98a 	bl	80071ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f003 0308 	and.w	r3, r3, #8
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d020      	beq.n	8006f08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01b      	beq.n	8006f08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f06f 0208 	mvn.w	r2, #8
 8006ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2204      	movs	r2, #4
 8006ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f961 	bl	80071b6 <HAL_TIM_IC_CaptureCallback>
 8006ef4:	e005      	b.n	8006f02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f953 	bl	80071a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f964 	bl	80071ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f003 0310 	and.w	r3, r3, #16
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d020      	beq.n	8006f54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01b      	beq.n	8006f54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0210 	mvn.w	r2, #16
 8006f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f93b 	bl	80071b6 <HAL_TIM_IC_CaptureCallback>
 8006f40:	e005      	b.n	8006f4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f92d 	bl	80071a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f93e 	bl	80071ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00c      	beq.n	8006f78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0201 	mvn.w	r2, #1
 8006f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fb fd6a 	bl	8002a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa9a 	bl	80074d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00c      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fa92 	bl	80074e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00c      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f8fd 	bl	80071de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 0320 	and.w	r3, r3, #32
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00c      	beq.n	8007008 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0220 	mvn.w	r2, #32
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa5a 	bl	80074bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_TIM_ConfigClockSource+0x1c>
 8007028:	2302      	movs	r3, #2
 800702a:	e0b6      	b.n	800719a <HAL_TIM_ConfigClockSource+0x18a>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800704e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007068:	d03e      	beq.n	80070e8 <HAL_TIM_ConfigClockSource+0xd8>
 800706a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800706e:	f200 8087 	bhi.w	8007180 <HAL_TIM_ConfigClockSource+0x170>
 8007072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007076:	f000 8086 	beq.w	8007186 <HAL_TIM_ConfigClockSource+0x176>
 800707a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707e:	d87f      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x170>
 8007080:	2b70      	cmp	r3, #112	; 0x70
 8007082:	d01a      	beq.n	80070ba <HAL_TIM_ConfigClockSource+0xaa>
 8007084:	2b70      	cmp	r3, #112	; 0x70
 8007086:	d87b      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x170>
 8007088:	2b60      	cmp	r3, #96	; 0x60
 800708a:	d050      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x11e>
 800708c:	2b60      	cmp	r3, #96	; 0x60
 800708e:	d877      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x170>
 8007090:	2b50      	cmp	r3, #80	; 0x50
 8007092:	d03c      	beq.n	800710e <HAL_TIM_ConfigClockSource+0xfe>
 8007094:	2b50      	cmp	r3, #80	; 0x50
 8007096:	d873      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x170>
 8007098:	2b40      	cmp	r3, #64	; 0x40
 800709a:	d058      	beq.n	800714e <HAL_TIM_ConfigClockSource+0x13e>
 800709c:	2b40      	cmp	r3, #64	; 0x40
 800709e:	d86f      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x170>
 80070a0:	2b30      	cmp	r3, #48	; 0x30
 80070a2:	d064      	beq.n	800716e <HAL_TIM_ConfigClockSource+0x15e>
 80070a4:	2b30      	cmp	r3, #48	; 0x30
 80070a6:	d86b      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x170>
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d060      	beq.n	800716e <HAL_TIM_ConfigClockSource+0x15e>
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d867      	bhi.n	8007180 <HAL_TIM_ConfigClockSource+0x170>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d05c      	beq.n	800716e <HAL_TIM_ConfigClockSource+0x15e>
 80070b4:	2b10      	cmp	r3, #16
 80070b6:	d05a      	beq.n	800716e <HAL_TIM_ConfigClockSource+0x15e>
 80070b8:	e062      	b.n	8007180 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070ca:	f000 f971 	bl	80073b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	609a      	str	r2, [r3, #8]
      break;
 80070e6:	e04f      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070f8:	f000 f95a 	bl	80073b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800710a:	609a      	str	r2, [r3, #8]
      break;
 800710c:	e03c      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800711a:	461a      	mov	r2, r3
 800711c:	f000 f8ce 	bl	80072bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2150      	movs	r1, #80	; 0x50
 8007126:	4618      	mov	r0, r3
 8007128:	f000 f927 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 800712c:	e02c      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800713a:	461a      	mov	r2, r3
 800713c:	f000 f8ed 	bl	800731a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2160      	movs	r1, #96	; 0x60
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f917 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 800714c:	e01c      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800715a:	461a      	mov	r2, r3
 800715c:	f000 f8ae 	bl	80072bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2140      	movs	r1, #64	; 0x40
 8007166:	4618      	mov	r0, r3
 8007168:	f000 f907 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 800716c:	e00c      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	4610      	mov	r0, r2
 800717a:	f000 f8fe 	bl	800737a <TIM_ITRx_SetConfig>
      break;
 800717e:	e003      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	73fb      	strb	r3, [r7, #15]
      break;
 8007184:	e000      	b.n	8007188 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007198:	7bfb      	ldrb	r3, [r7, #15]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071aa:	bf00      	nop
 80071ac:	370c      	adds	r7, #12
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071be:	bf00      	nop
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b083      	sub	sp, #12
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071d2:	bf00      	nop
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
	...

080071f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a2a      	ldr	r2, [pc, #168]	; (80072b0 <TIM_Base_SetConfig+0xbc>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d003      	beq.n	8007214 <TIM_Base_SetConfig+0x20>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007212:	d108      	bne.n	8007226 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a21      	ldr	r2, [pc, #132]	; (80072b0 <TIM_Base_SetConfig+0xbc>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d00b      	beq.n	8007246 <TIM_Base_SetConfig+0x52>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007234:	d007      	beq.n	8007246 <TIM_Base_SetConfig+0x52>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a1e      	ldr	r2, [pc, #120]	; (80072b4 <TIM_Base_SetConfig+0xc0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d003      	beq.n	8007246 <TIM_Base_SetConfig+0x52>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <TIM_Base_SetConfig+0xc4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d108      	bne.n	8007258 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800724c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4313      	orrs	r3, r2
 8007256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	689a      	ldr	r2, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a0c      	ldr	r2, [pc, #48]	; (80072b0 <TIM_Base_SetConfig+0xbc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d007      	beq.n	8007294 <TIM_Base_SetConfig+0xa0>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a0b      	ldr	r2, [pc, #44]	; (80072b4 <TIM_Base_SetConfig+0xc0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d003      	beq.n	8007294 <TIM_Base_SetConfig+0xa0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <TIM_Base_SetConfig+0xc4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d103      	bne.n	800729c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	615a      	str	r2, [r3, #20]
}
 80072a2:	bf00      	nop
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	40012c00 	.word	0x40012c00
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40014400 	.word	0x40014400

080072bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	f023 0201 	bic.w	r2, r3, #1
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f023 030a 	bic.w	r3, r3, #10
 80072f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4313      	orrs	r3, r2
 8007300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800731a:	b480      	push	{r7}
 800731c:	b087      	sub	sp, #28
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	f023 0210 	bic.w	r2, r3, #16
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007344:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	031b      	lsls	r3, r3, #12
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	4313      	orrs	r3, r2
 800734e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007356:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	011b      	lsls	r3, r3, #4
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4313      	orrs	r3, r2
 8007398:	f043 0307 	orr.w	r3, r3, #7
 800739c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	609a      	str	r2, [r3, #8]
}
 80073a4:	bf00      	nop
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	021a      	lsls	r2, r3, #8
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	697a      	ldr	r2, [r7, #20]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	609a      	str	r2, [r3, #8]
}
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007404:	2302      	movs	r3, #2
 8007406:	e04f      	b.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2202      	movs	r2, #2
 8007414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a21      	ldr	r2, [pc, #132]	; (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007438:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a14      	ldr	r2, [pc, #80]	; (80074b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d009      	beq.n	800747c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007470:	d004      	beq.n	800747c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a10      	ldr	r2, [pc, #64]	; (80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d10c      	bne.n	8007496 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007482:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	4313      	orrs	r3, r2
 800748c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	40012c00 	.word	0x40012c00
 80074b8:	40014000 	.word	0x40014000

080074bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e040      	b.n	800758c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d106      	bne.n	8007520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fb fc04 	bl	8002d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2224      	movs	r2, #36	; 0x24
 8007524:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0201 	bic.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fa82 	bl	8007a48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f825 	bl	8007594 <UART_SetConfig>
 800754a:	4603      	mov	r3, r0
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e01b      	b.n	800758c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fb01 	bl	8007b8c <UART_CheckIdleState>
 800758a:	4603      	mov	r3, r0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007598:	b08a      	sub	sp, #40	; 0x28
 800759a:	af00      	add	r7, sp, #0
 800759c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	689a      	ldr	r2, [r3, #8]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4b9e      	ldr	r3, [pc, #632]	; (800783c <UART_SetConfig+0x2a8>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075cc:	430b      	orrs	r3, r1
 80075ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68da      	ldr	r2, [r3, #12]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a93      	ldr	r2, [pc, #588]	; (8007840 <UART_SetConfig+0x2ac>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fc:	4313      	orrs	r3, r2
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007610:	430a      	orrs	r2, r1
 8007612:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a8a      	ldr	r2, [pc, #552]	; (8007844 <UART_SetConfig+0x2b0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d126      	bne.n	800766c <UART_SetConfig+0xd8>
 800761e:	4b8a      	ldr	r3, [pc, #552]	; (8007848 <UART_SetConfig+0x2b4>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007624:	f003 0303 	and.w	r3, r3, #3
 8007628:	2b03      	cmp	r3, #3
 800762a:	d81b      	bhi.n	8007664 <UART_SetConfig+0xd0>
 800762c:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <UART_SetConfig+0xa0>)
 800762e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007632:	bf00      	nop
 8007634:	08007645 	.word	0x08007645
 8007638:	08007655 	.word	0x08007655
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765d 	.word	0x0800765d
 8007644:	2301      	movs	r3, #1
 8007646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764a:	e0ab      	b.n	80077a4 <UART_SetConfig+0x210>
 800764c:	2302      	movs	r3, #2
 800764e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007652:	e0a7      	b.n	80077a4 <UART_SetConfig+0x210>
 8007654:	2304      	movs	r3, #4
 8007656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800765a:	e0a3      	b.n	80077a4 <UART_SetConfig+0x210>
 800765c:	2308      	movs	r3, #8
 800765e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007662:	e09f      	b.n	80077a4 <UART_SetConfig+0x210>
 8007664:	2310      	movs	r3, #16
 8007666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800766a:	e09b      	b.n	80077a4 <UART_SetConfig+0x210>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a76      	ldr	r2, [pc, #472]	; (800784c <UART_SetConfig+0x2b8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d138      	bne.n	80076e8 <UART_SetConfig+0x154>
 8007676:	4b74      	ldr	r3, [pc, #464]	; (8007848 <UART_SetConfig+0x2b4>)
 8007678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767c:	f003 030c 	and.w	r3, r3, #12
 8007680:	2b0c      	cmp	r3, #12
 8007682:	d82d      	bhi.n	80076e0 <UART_SetConfig+0x14c>
 8007684:	a201      	add	r2, pc, #4	; (adr r2, 800768c <UART_SetConfig+0xf8>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	080076c1 	.word	0x080076c1
 8007690:	080076e1 	.word	0x080076e1
 8007694:	080076e1 	.word	0x080076e1
 8007698:	080076e1 	.word	0x080076e1
 800769c:	080076d1 	.word	0x080076d1
 80076a0:	080076e1 	.word	0x080076e1
 80076a4:	080076e1 	.word	0x080076e1
 80076a8:	080076e1 	.word	0x080076e1
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076e1 	.word	0x080076e1
 80076b4:	080076e1 	.word	0x080076e1
 80076b8:	080076e1 	.word	0x080076e1
 80076bc:	080076d9 	.word	0x080076d9
 80076c0:	2300      	movs	r3, #0
 80076c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076c6:	e06d      	b.n	80077a4 <UART_SetConfig+0x210>
 80076c8:	2302      	movs	r3, #2
 80076ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ce:	e069      	b.n	80077a4 <UART_SetConfig+0x210>
 80076d0:	2304      	movs	r3, #4
 80076d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076d6:	e065      	b.n	80077a4 <UART_SetConfig+0x210>
 80076d8:	2308      	movs	r3, #8
 80076da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076de:	e061      	b.n	80077a4 <UART_SetConfig+0x210>
 80076e0:	2310      	movs	r3, #16
 80076e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e6:	e05d      	b.n	80077a4 <UART_SetConfig+0x210>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a58      	ldr	r2, [pc, #352]	; (8007850 <UART_SetConfig+0x2bc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d125      	bne.n	800773e <UART_SetConfig+0x1aa>
 80076f2:	4b55      	ldr	r3, [pc, #340]	; (8007848 <UART_SetConfig+0x2b4>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076fc:	2b30      	cmp	r3, #48	; 0x30
 80076fe:	d016      	beq.n	800772e <UART_SetConfig+0x19a>
 8007700:	2b30      	cmp	r3, #48	; 0x30
 8007702:	d818      	bhi.n	8007736 <UART_SetConfig+0x1a2>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d00a      	beq.n	800771e <UART_SetConfig+0x18a>
 8007708:	2b20      	cmp	r3, #32
 800770a:	d814      	bhi.n	8007736 <UART_SetConfig+0x1a2>
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <UART_SetConfig+0x182>
 8007710:	2b10      	cmp	r3, #16
 8007712:	d008      	beq.n	8007726 <UART_SetConfig+0x192>
 8007714:	e00f      	b.n	8007736 <UART_SetConfig+0x1a2>
 8007716:	2300      	movs	r3, #0
 8007718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771c:	e042      	b.n	80077a4 <UART_SetConfig+0x210>
 800771e:	2302      	movs	r3, #2
 8007720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007724:	e03e      	b.n	80077a4 <UART_SetConfig+0x210>
 8007726:	2304      	movs	r3, #4
 8007728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800772c:	e03a      	b.n	80077a4 <UART_SetConfig+0x210>
 800772e:	2308      	movs	r3, #8
 8007730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007734:	e036      	b.n	80077a4 <UART_SetConfig+0x210>
 8007736:	2310      	movs	r3, #16
 8007738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800773c:	e032      	b.n	80077a4 <UART_SetConfig+0x210>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a3f      	ldr	r2, [pc, #252]	; (8007840 <UART_SetConfig+0x2ac>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d12a      	bne.n	800779e <UART_SetConfig+0x20a>
 8007748:	4b3f      	ldr	r3, [pc, #252]	; (8007848 <UART_SetConfig+0x2b4>)
 800774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007752:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007756:	d01a      	beq.n	800778e <UART_SetConfig+0x1fa>
 8007758:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800775c:	d81b      	bhi.n	8007796 <UART_SetConfig+0x202>
 800775e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007762:	d00c      	beq.n	800777e <UART_SetConfig+0x1ea>
 8007764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007768:	d815      	bhi.n	8007796 <UART_SetConfig+0x202>
 800776a:	2b00      	cmp	r3, #0
 800776c:	d003      	beq.n	8007776 <UART_SetConfig+0x1e2>
 800776e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007772:	d008      	beq.n	8007786 <UART_SetConfig+0x1f2>
 8007774:	e00f      	b.n	8007796 <UART_SetConfig+0x202>
 8007776:	2300      	movs	r3, #0
 8007778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800777c:	e012      	b.n	80077a4 <UART_SetConfig+0x210>
 800777e:	2302      	movs	r3, #2
 8007780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007784:	e00e      	b.n	80077a4 <UART_SetConfig+0x210>
 8007786:	2304      	movs	r3, #4
 8007788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800778c:	e00a      	b.n	80077a4 <UART_SetConfig+0x210>
 800778e:	2308      	movs	r3, #8
 8007790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007794:	e006      	b.n	80077a4 <UART_SetConfig+0x210>
 8007796:	2310      	movs	r3, #16
 8007798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800779c:	e002      	b.n	80077a4 <UART_SetConfig+0x210>
 800779e:	2310      	movs	r3, #16
 80077a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a25      	ldr	r2, [pc, #148]	; (8007840 <UART_SetConfig+0x2ac>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	f040 808a 	bne.w	80078c4 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d824      	bhi.n	8007802 <UART_SetConfig+0x26e>
 80077b8:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <UART_SetConfig+0x22c>)
 80077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077be:	bf00      	nop
 80077c0:	080077e5 	.word	0x080077e5
 80077c4:	08007803 	.word	0x08007803
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	08007803 	.word	0x08007803
 80077d0:	080077f3 	.word	0x080077f3
 80077d4:	08007803 	.word	0x08007803
 80077d8:	08007803 	.word	0x08007803
 80077dc:	08007803 	.word	0x08007803
 80077e0:	080077fb 	.word	0x080077fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077e4:	f7fe fe9e 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 80077e8:	61f8      	str	r0, [r7, #28]
        break;
 80077ea:	e010      	b.n	800780e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ec:	4b19      	ldr	r3, [pc, #100]	; (8007854 <UART_SetConfig+0x2c0>)
 80077ee:	61fb      	str	r3, [r7, #28]
        break;
 80077f0:	e00d      	b.n	800780e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f2:	f7fe fdff 	bl	80063f4 <HAL_RCC_GetSysClockFreq>
 80077f6:	61f8      	str	r0, [r7, #28]
        break;
 80077f8:	e009      	b.n	800780e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077fe:	61fb      	str	r3, [r7, #28]
        break;
 8007800:	e005      	b.n	800780e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007802:	2300      	movs	r3, #0
 8007804:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800780c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8109 	beq.w	8007a28 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	4613      	mov	r3, r2
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	4413      	add	r3, r2
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	429a      	cmp	r2, r3
 8007824:	d305      	bcc.n	8007832 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800782c:	69fa      	ldr	r2, [r7, #28]
 800782e:	429a      	cmp	r2, r3
 8007830:	d912      	bls.n	8007858 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007838:	e0f6      	b.n	8007a28 <UART_SetConfig+0x494>
 800783a:	bf00      	nop
 800783c:	efff69f3 	.word	0xefff69f3
 8007840:	40008000 	.word	0x40008000
 8007844:	40013800 	.word	0x40013800
 8007848:	40021000 	.word	0x40021000
 800784c:	40004400 	.word	0x40004400
 8007850:	40004800 	.word	0x40004800
 8007854:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	2200      	movs	r2, #0
 800785c:	461c      	mov	r4, r3
 800785e:	4615      	mov	r5, r2
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	f04f 0300 	mov.w	r3, #0
 8007868:	022b      	lsls	r3, r5, #8
 800786a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800786e:	0222      	lsls	r2, r4, #8
 8007870:	68f9      	ldr	r1, [r7, #12]
 8007872:	6849      	ldr	r1, [r1, #4]
 8007874:	0849      	lsrs	r1, r1, #1
 8007876:	2000      	movs	r0, #0
 8007878:	4688      	mov	r8, r1
 800787a:	4681      	mov	r9, r0
 800787c:	eb12 0a08 	adds.w	sl, r2, r8
 8007880:	eb43 0b09 	adc.w	fp, r3, r9
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	607a      	str	r2, [r7, #4]
 800788e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007892:	4650      	mov	r0, sl
 8007894:	4659      	mov	r1, fp
 8007896:	f7f8 fc99 	bl	80001cc <__aeabi_uldivmod>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	4613      	mov	r3, r2
 80078a0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078a8:	d308      	bcc.n	80078bc <UART_SetConfig+0x328>
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078b0:	d204      	bcs.n	80078bc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	60da      	str	r2, [r3, #12]
 80078ba:	e0b5      	b.n	8007a28 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078c2:	e0b1      	b.n	8007a28 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078cc:	d15d      	bne.n	800798a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80078ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d827      	bhi.n	8007926 <UART_SetConfig+0x392>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <UART_SetConfig+0x348>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	08007901 	.word	0x08007901
 80078e0:	08007909 	.word	0x08007909
 80078e4:	08007911 	.word	0x08007911
 80078e8:	08007927 	.word	0x08007927
 80078ec:	08007917 	.word	0x08007917
 80078f0:	08007927 	.word	0x08007927
 80078f4:	08007927 	.word	0x08007927
 80078f8:	08007927 	.word	0x08007927
 80078fc:	0800791f 	.word	0x0800791f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007900:	f7fe fe10 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 8007904:	61f8      	str	r0, [r7, #28]
        break;
 8007906:	e014      	b.n	8007932 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007908:	f7fe fe22 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 800790c:	61f8      	str	r0, [r7, #28]
        break;
 800790e:	e010      	b.n	8007932 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007910:	4b4c      	ldr	r3, [pc, #304]	; (8007a44 <UART_SetConfig+0x4b0>)
 8007912:	61fb      	str	r3, [r7, #28]
        break;
 8007914:	e00d      	b.n	8007932 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007916:	f7fe fd6d 	bl	80063f4 <HAL_RCC_GetSysClockFreq>
 800791a:	61f8      	str	r0, [r7, #28]
        break;
 800791c:	e009      	b.n	8007932 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800791e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007922:	61fb      	str	r3, [r7, #28]
        break;
 8007924:	e005      	b.n	8007932 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d077      	beq.n	8007a28 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	005a      	lsls	r2, r3, #1
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	085b      	lsrs	r3, r3, #1
 8007942:	441a      	add	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	fbb2 f3f3 	udiv	r3, r2, r3
 800794c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	2b0f      	cmp	r3, #15
 8007952:	d916      	bls.n	8007982 <UART_SetConfig+0x3ee>
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800795a:	d212      	bcs.n	8007982 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	b29b      	uxth	r3, r3
 8007960:	f023 030f 	bic.w	r3, r3, #15
 8007964:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	085b      	lsrs	r3, r3, #1
 800796a:	b29b      	uxth	r3, r3
 800796c:	f003 0307 	and.w	r3, r3, #7
 8007970:	b29a      	uxth	r2, r3
 8007972:	8afb      	ldrh	r3, [r7, #22]
 8007974:	4313      	orrs	r3, r2
 8007976:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	8afa      	ldrh	r2, [r7, #22]
 800797e:	60da      	str	r2, [r3, #12]
 8007980:	e052      	b.n	8007a28 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007988:	e04e      	b.n	8007a28 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800798a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800798e:	2b08      	cmp	r3, #8
 8007990:	d827      	bhi.n	80079e2 <UART_SetConfig+0x44e>
 8007992:	a201      	add	r2, pc, #4	; (adr r2, 8007998 <UART_SetConfig+0x404>)
 8007994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007998:	080079bd 	.word	0x080079bd
 800799c:	080079c5 	.word	0x080079c5
 80079a0:	080079cd 	.word	0x080079cd
 80079a4:	080079e3 	.word	0x080079e3
 80079a8:	080079d3 	.word	0x080079d3
 80079ac:	080079e3 	.word	0x080079e3
 80079b0:	080079e3 	.word	0x080079e3
 80079b4:	080079e3 	.word	0x080079e3
 80079b8:	080079db 	.word	0x080079db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079bc:	f7fe fdb2 	bl	8006524 <HAL_RCC_GetPCLK1Freq>
 80079c0:	61f8      	str	r0, [r7, #28]
        break;
 80079c2:	e014      	b.n	80079ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079c4:	f7fe fdc4 	bl	8006550 <HAL_RCC_GetPCLK2Freq>
 80079c8:	61f8      	str	r0, [r7, #28]
        break;
 80079ca:	e010      	b.n	80079ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079cc:	4b1d      	ldr	r3, [pc, #116]	; (8007a44 <UART_SetConfig+0x4b0>)
 80079ce:	61fb      	str	r3, [r7, #28]
        break;
 80079d0:	e00d      	b.n	80079ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079d2:	f7fe fd0f 	bl	80063f4 <HAL_RCC_GetSysClockFreq>
 80079d6:	61f8      	str	r0, [r7, #28]
        break;
 80079d8:	e009      	b.n	80079ee <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079de:	61fb      	str	r3, [r7, #28]
        break;
 80079e0:	e005      	b.n	80079ee <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079ec:	bf00      	nop
    }

    if (pclk != 0U)
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d019      	beq.n	8007a28 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	085a      	lsrs	r2, r3, #1
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	441a      	add	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	2b0f      	cmp	r3, #15
 8007a0c:	d909      	bls.n	8007a22 <UART_SetConfig+0x48e>
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a14:	d205      	bcs.n	8007a22 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	60da      	str	r2, [r3, #12]
 8007a20:	e002      	b.n	8007a28 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3728      	adds	r7, #40	; 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a42:	bf00      	nop
 8007a44:	00f42400 	.word	0x00f42400

08007a48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a76:	f003 0301 	and.w	r3, r3, #1
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	f003 0302 	and.w	r3, r3, #2
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00a      	beq.n	8007ab6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00a      	beq.n	8007ad8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007adc:	f003 0310 	and.w	r3, r3, #16
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	430a      	orrs	r2, r1
 8007af8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	f003 0320 	and.w	r3, r3, #32
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	430a      	orrs	r2, r1
 8007b1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01a      	beq.n	8007b5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b46:	d10a      	bne.n	8007b5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]
  }
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b098      	sub	sp, #96	; 0x60
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b9c:	f7fb fa12 	bl	8002fc4 <HAL_GetTick>
 8007ba0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d12e      	bne.n	8007c0e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f88c 	bl	8007cdc <UART_WaitOnFlagUntilTimeout>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d021      	beq.n	8007c0e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bde:	653b      	str	r3, [r7, #80]	; 0x50
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	461a      	mov	r2, r3
 8007be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bf0:	e841 2300 	strex	r3, r2, [r1]
 8007bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1e6      	bne.n	8007bca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e062      	b.n	8007cd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d149      	bne.n	8007cb0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c24:	2200      	movs	r2, #0
 8007c26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f856 	bl	8007cdc <UART_WaitOnFlagUntilTimeout>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d03c      	beq.n	8007cb0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	623b      	str	r3, [r7, #32]
   return(result);
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c54:	633b      	str	r3, [r7, #48]	; 0x30
 8007c56:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e6      	bne.n	8007c36 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
 8007c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c88:	61fa      	str	r2, [r7, #28]
 8007c8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	69b9      	ldr	r1, [r7, #24]
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	617b      	str	r3, [r7, #20]
   return(result);
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e5      	bne.n	8007c68 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e011      	b.n	8007cd4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3758      	adds	r7, #88	; 0x58
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	603b      	str	r3, [r7, #0]
 8007ce8:	4613      	mov	r3, r2
 8007cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cec:	e049      	b.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cf4:	d045      	beq.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf6:	f7fb f965 	bl	8002fc4 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d302      	bcc.n	8007d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e048      	b.n	8007da2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 0304 	and.w	r3, r3, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d031      	beq.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	69db      	ldr	r3, [r3, #28]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	d110      	bne.n	8007d4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2208      	movs	r2, #8
 8007d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 f838 	bl	8007daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e029      	b.n	8007da2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d5c:	d111      	bne.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 f81e 	bl	8007daa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e00f      	b.n	8007da2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69da      	ldr	r2, [r3, #28]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	bf0c      	ite	eq
 8007d92:	2301      	moveq	r3, #1
 8007d94:	2300      	movne	r3, #0
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	461a      	mov	r2, r3
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d0a6      	beq.n	8007cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007daa:	b480      	push	{r7}
 8007dac:	b095      	sub	sp, #84	; 0x54
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e6      	bne.n	8007db2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f023 0301 	bic.w	r3, r3, #1
 8007dfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e5      	bne.n	8007de4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d118      	bne.n	8007e52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f023 0310 	bic.w	r3, r3, #16
 8007e34:	647b      	str	r3, [r7, #68]	; 0x44
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3e:	61bb      	str	r3, [r7, #24]
 8007e40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e42:	6979      	ldr	r1, [r7, #20]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	e841 2300 	strex	r3, r2, [r1]
 8007e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1e6      	bne.n	8007e20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e66:	bf00      	nop
 8007e68:	3754      	adds	r7, #84	; 0x54
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <memset>:
 8007e72:	4402      	add	r2, r0
 8007e74:	4603      	mov	r3, r0
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d100      	bne.n	8007e7c <memset+0xa>
 8007e7a:	4770      	bx	lr
 8007e7c:	f803 1b01 	strb.w	r1, [r3], #1
 8007e80:	e7f9      	b.n	8007e76 <memset+0x4>
	...

08007e84 <__libc_init_array>:
 8007e84:	b570      	push	{r4, r5, r6, lr}
 8007e86:	4d0d      	ldr	r5, [pc, #52]	; (8007ebc <__libc_init_array+0x38>)
 8007e88:	4c0d      	ldr	r4, [pc, #52]	; (8007ec0 <__libc_init_array+0x3c>)
 8007e8a:	1b64      	subs	r4, r4, r5
 8007e8c:	10a4      	asrs	r4, r4, #2
 8007e8e:	2600      	movs	r6, #0
 8007e90:	42a6      	cmp	r6, r4
 8007e92:	d109      	bne.n	8007ea8 <__libc_init_array+0x24>
 8007e94:	4d0b      	ldr	r5, [pc, #44]	; (8007ec4 <__libc_init_array+0x40>)
 8007e96:	4c0c      	ldr	r4, [pc, #48]	; (8007ec8 <__libc_init_array+0x44>)
 8007e98:	f000 f826 	bl	8007ee8 <_init>
 8007e9c:	1b64      	subs	r4, r4, r5
 8007e9e:	10a4      	asrs	r4, r4, #2
 8007ea0:	2600      	movs	r6, #0
 8007ea2:	42a6      	cmp	r6, r4
 8007ea4:	d105      	bne.n	8007eb2 <__libc_init_array+0x2e>
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eac:	4798      	blx	r3
 8007eae:	3601      	adds	r6, #1
 8007eb0:	e7ee      	b.n	8007e90 <__libc_init_array+0xc>
 8007eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb6:	4798      	blx	r3
 8007eb8:	3601      	adds	r6, #1
 8007eba:	e7f2      	b.n	8007ea2 <__libc_init_array+0x1e>
 8007ebc:	08007f58 	.word	0x08007f58
 8007ec0:	08007f58 	.word	0x08007f58
 8007ec4:	08007f58 	.word	0x08007f58
 8007ec8:	08007f5c 	.word	0x08007f5c

08007ecc <memcpy>:
 8007ecc:	440a      	add	r2, r1
 8007ece:	4291      	cmp	r1, r2
 8007ed0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ed4:	d100      	bne.n	8007ed8 <memcpy+0xc>
 8007ed6:	4770      	bx	lr
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ee2:	4291      	cmp	r1, r2
 8007ee4:	d1f9      	bne.n	8007eda <memcpy+0xe>
 8007ee6:	bd10      	pop	{r4, pc}

08007ee8 <_init>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	bf00      	nop
 8007eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eee:	bc08      	pop	{r3}
 8007ef0:	469e      	mov	lr, r3
 8007ef2:	4770      	bx	lr

08007ef4 <_fini>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	bf00      	nop
 8007ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007efa:	bc08      	pop	{r3}
 8007efc:	469e      	mov	lr, r3
 8007efe:	4770      	bx	lr
