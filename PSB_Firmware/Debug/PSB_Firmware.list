
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c34  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e08  08005e08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e08  08005e08  00015e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e10  08005e10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e10  08005e10  00015e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000000c  08005e24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08005e24  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eff4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd1  00000000  00000000  0002f073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00031048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a59  00000000  00000000  00031d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000267d  00000000  00000000  000327e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f693  00000000  00000000  00034e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce6a6  00000000  00000000  000444f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003718  00000000  00000000  00112ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001162b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005da8 	.word	0x08005da8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08005da8 	.word	0x08005da8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f001 f8b4 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_MspInit();
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f82e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f96e 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f93c 	bl	8000754 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80004dc:	f000 f8fa 	bl	80006d4 <MX_I2C3_Init>
  MX_I2C2_Init();
 80004e0:	f000 f8b8 	bl	8000654 <MX_I2C2_Init>
  MX_I2C1_Init();
 80004e4:	f000 f876 	bl	80005d4 <MX_I2C1_Init>



  /* USER CODE BEGIN 2 */
  i2c_slv_init(); // Initialize the I2C slave module
 80004e8:	f000 fde2 	bl	80010b0 <i2c_slv_init>

  // Configure the MAX9611 device - Might need to review this
  // Configure the CTRL_REG general settings (Assumed general settings)


  ucd_board_enable_set(GPIO_PIN_SET);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f000 fb6f 	bl	8000bd0 <ucd_board_enable_set>

  HAL_Delay(500);
 80004f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004f6:	f001 f91b 	bl	8001730 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ijc_dssd_ramp_loop();
 80004fa:	f000 fbaf 	bl	8000c5c <ijc_dssd_ramp_loop>

	  if (Xfer_Complete ==1)                            // Check for the I2C read complete to have been executed
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <main+0x60>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d1f9      	bne.n	80004fa <main+0x32>
	  {

		  i2c_slv_cmd_rx_tx_handle();
 8000506:	f000 fbb1 	bl	8000c6c <i2c_slv_cmd_rx_tx_handle>

		  HAL_Delay(1); 								  // Delay for 1 ms
 800050a:	2001      	movs	r0, #1
 800050c:	f001 f910 	bl	8001730 <HAL_Delay>
		  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) // Put I2C peripheral in listen mode process
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <main+0x64>)
 8000512:	f002 f849 	bl	80025a8 <HAL_I2C_EnableListen_IT>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <main+0x58>
		  {
			  Error_Handler();
 800051c:	f000 fe94 	bl	8001248 <Error_Handler>
		  }
		  Xfer_Complete =0;
 8000520:	4b01      	ldr	r3, [pc, #4]	; (8000528 <main+0x60>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
  {
 8000526:	e7e8      	b.n	80004fa <main+0x32>
 8000528:	2000002c 	.word	0x2000002c
 800052c:	20000030 	.word	0x20000030

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f005 fc05 	bl	8005d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f003 fd73 	bl	8004040 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 fe72 	bl	8001248 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800057e:	230a      	movs	r3, #10
 8000580:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000582:	2307      	movs	r3, #7
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000586:	2302      	movs	r3, #2
 8000588:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0314 	add.w	r3, r7, #20
 8000592:	4618      	mov	r0, r3
 8000594:	f003 fdaa 	bl	80040ec <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800059e:	f000 fe53 	bl	8001248 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b6:	463b      	mov	r3, r7
 80005b8:	2104      	movs	r1, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 f9aa 	bl	8004914 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c6:	f000 fe3f 	bl	8001248 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	; 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <MX_I2C1_Init+0x74>)
 80005da:	4a1c      	ldr	r2, [pc, #112]	; (800064c <MX_I2C1_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005de:	4b1a      	ldr	r3, [pc, #104]	; (8000648 <MX_I2C1_Init+0x74>)
 80005e0:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <MX_I2C1_Init+0x7c>)
 80005e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 50;
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_I2C1_Init+0x74>)
 80005e6:	2232      	movs	r2, #50	; 0x32
 80005e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_I2C1_Init+0x74>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_I2C1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_I2C1_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_I2C1_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <MX_I2C1_Init+0x74>)
 8000610:	f001 fbbc 	bl	8001d8c <HAL_I2C_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800061a:	f000 fe15 	bl	8001248 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800061e:	2100      	movs	r1, #0
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <MX_I2C1_Init+0x74>)
 8000622:	f003 fc67 	bl	8003ef4 <HAL_I2CEx_ConfigAnalogFilter>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800062c:	f000 fe0c 	bl	8001248 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000630:	2100      	movs	r1, #0
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_I2C1_Init+0x74>)
 8000634:	f003 fca9 	bl	8003f8a <HAL_I2CEx_ConfigDigitalFilter>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800063e:	f000 fe03 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000030 	.word	0x20000030
 800064c:	40005400 	.word	0x40005400
 8000650:	10909cec 	.word	0x10909cec

08000654 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_I2C2_Init+0x74>)
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_I2C2_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_I2C2_Init+0x74>)
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <MX_I2C2_Init+0x7c>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_I2C2_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_I2C2_Init+0x74>)
 800066c:	2201      	movs	r2, #1
 800066e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_I2C2_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_I2C2_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C2_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_I2C2_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C2_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800068e:	480e      	ldr	r0, [pc, #56]	; (80006c8 <MX_I2C2_Init+0x74>)
 8000690:	f001 fb7c 	bl	8001d8c <HAL_I2C_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800069a:	f000 fdd5 	bl	8001248 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <MX_I2C2_Init+0x74>)
 80006a2:	f003 fc27 	bl	8003ef4 <HAL_I2CEx_ConfigAnalogFilter>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006ac:	f000 fdcc 	bl	8001248 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006b0:	2100      	movs	r1, #0
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_I2C2_Init+0x74>)
 80006b4:	f003 fc69 	bl	8003f8a <HAL_I2CEx_ConfigDigitalFilter>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006be:	f000 fdc3 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000084 	.word	0x20000084
 80006cc:	40005800 	.word	0x40005800
 80006d0:	10909cec 	.word	0x10909cec

080006d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C3_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C3_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C3_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <MX_I2C3_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C3_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_I2C3_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C3_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_I2C3_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C3_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C3_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C3_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_I2C3_Init+0x74>)
 8000710:	f001 fb3c 	bl	8001d8c <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 fd95 	bl	8001248 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C3_Init+0x74>)
 8000722:	f003 fbe7 	bl	8003ef4 <HAL_I2CEx_ConfigAnalogFilter>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 fd8c 	bl	8001248 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_I2C3_Init+0x74>)
 8000734:	f003 fc29 	bl	8003f8a <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 fd83 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000d8 	.word	0x200000d8
 800074c:	40005c00 	.word	0x40005c00
 8000750:	10909cec 	.word	0x10909cec

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_USART2_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000798:	f004 fe1c 	bl	80053d4 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 fd51 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000012c 	.word	0x2000012c
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b3c      	ldr	r3, [pc, #240]	; (80008bc <MX_GPIO_Init+0x108>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a3b      	ldr	r2, [pc, #236]	; (80008bc <MX_GPIO_Init+0x108>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MX_GPIO_Init+0x108>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	4b36      	ldr	r3, [pc, #216]	; (80008bc <MX_GPIO_Init+0x108>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a35      	ldr	r2, [pc, #212]	; (80008bc <MX_GPIO_Init+0x108>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b33      	ldr	r3, [pc, #204]	; (80008bc <MX_GPIO_Init+0x108>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b30      	ldr	r3, [pc, #192]	; (80008bc <MX_GPIO_Init+0x108>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a2f      	ldr	r2, [pc, #188]	; (80008bc <MX_GPIO_Init+0x108>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <MX_GPIO_Init+0x108>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <MX_GPIO_Init+0x108>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a29      	ldr	r2, [pc, #164]	; (80008bc <MX_GPIO_Init+0x108>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <MX_GPIO_Init+0x108>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	21b0      	movs	r1, #176	; 0xb0
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f001 fa93 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 8000836:	2200      	movs	r2, #0
 8000838:	f243 31e0 	movw	r1, #13280	; 0x33e0
 800083c:	4820      	ldr	r0, [pc, #128]	; (80008c0 <MX_GPIO_Init+0x10c>)
 800083e:	f001 fa8d 	bl	8001d5c <HAL_GPIO_WritePin>
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000848:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	481a      	ldr	r0, [pc, #104]	; (80008c4 <MX_GPIO_Init+0x110>)
 800085a:	f001 f8ed 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800085e:	23b0      	movs	r3, #176	; 0xb0
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f001 f8de 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000884:	2301      	movs	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000892:	f001 f8d1 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_HT_Pin LD4_Pin ENABLE_1_FPGA_Pin ENABLE_2_IJC_Pin
                           ENABLE_3_CEA_Pin ENABLE_4_Pin ENABLE_5_UCD_Pin */
  GPIO_InitStruct.Pin = ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 8000896:	f243 33e0 	movw	r3, #13280	; 0x33e0
 800089a:	617b      	str	r3, [r7, #20]
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_GPIO_Init+0x10c>)
 80008b0:	f001 f8c2 	bl	8001a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80008b4:	bf00      	nop
 80008b6:	3728      	adds	r7, #40	; 0x28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000400 	.word	0x48000400
 80008c4:	48000800 	.word	0x48000800

080008c8 <copy_array>:

//************************************
//            General
//************************************
void copy_array(volatile uint8_t *source, volatile uint8_t *dest, uint16_t count)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	4613      	mov	r3, r2
 80008d4:	80fb      	strh	r3, [r7, #6]
    uint16_t copyIndex = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	82fb      	strh	r3, [r7, #22]
    for (copyIndex = 0; copyIndex < count; copyIndex++)
 80008da:	2300      	movs	r3, #0
 80008dc:	82fb      	strh	r3, [r7, #22]
 80008de:	e00b      	b.n	80008f8 <copy_array+0x30>
    {
        dest[copyIndex] = source[copyIndex];
 80008e0:	8afb      	ldrh	r3, [r7, #22]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	441a      	add	r2, r3
 80008e6:	8afb      	ldrh	r3, [r7, #22]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	440b      	add	r3, r1
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	701a      	strb	r2, [r3, #0]
    for (copyIndex = 0; copyIndex < count; copyIndex++)
 80008f2:	8afb      	ldrh	r3, [r7, #22]
 80008f4:	3301      	adds	r3, #1
 80008f6:	82fb      	strh	r3, [r7, #22]
 80008f8:	8afa      	ldrh	r2, [r7, #22]
 80008fa:	88fb      	ldrh	r3, [r7, #6]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d3ef      	bcc.n	80008e0 <copy_array+0x18>
    }
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	371c      	adds	r7, #28
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <i2c_write_cmd_data>:

HAL_StatusTypeDef i2c_write_cmd_data(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t cmd, uint8_t *data, uint16_t countTX)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b08a      	sub	sp, #40	; 0x28
 8000912:	af02      	add	r7, sp, #8
 8000914:	60f8      	str	r0, [r7, #12]
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	72fb      	strb	r3, [r7, #11]
 800091c:	4613      	mov	r3, r2
 800091e:	72bb      	strb	r3, [r7, #10]
	uint8_t out_ptr[10] = {0x00};
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	f107 0318 	add.w	r3, r7, #24
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	809a      	strh	r2, [r3, #4]
	out_ptr[0] = cmd;
 800092e:	7abb      	ldrb	r3, [r7, #10]
 8000930:	753b      	strb	r3, [r7, #20]
	copy_array(data, &out_ptr[1], countTX);
 8000932:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	3301      	adds	r3, #1
 800093a:	4619      	mov	r1, r3
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ffc3 	bl	80008c8 <copy_array>

	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, dev_addr, out_ptr, countTX + 1, I2C_TIMEOUT_DURATION);
 8000942:	7afb      	ldrb	r3, [r7, #11]
 8000944:	b299      	uxth	r1, r3
 8000946:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000948:	3301      	adds	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	f107 0214 	add.w	r2, r7, #20
 8000950:	200a      	movs	r0, #10
 8000952:	9000      	str	r0, [sp, #0]
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f001 fab5 	bl	8001ec4 <HAL_I2C_Master_Transmit>
 800095a:	4603      	mov	r3, r0
 800095c:	77fb      	strb	r3, [r7, #31]
	return(ret);
 800095e:	7ffb      	ldrb	r3, [r7, #31]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3720      	adds	r7, #32
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <i2c_read>:

HAL_StatusTypeDef i2c_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b088      	sub	sp, #32
 800096c:	af02      	add	r7, sp, #8
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	461a      	mov	r2, r3
 8000974:	460b      	mov	r3, r1
 8000976:	72fb      	strb	r3, [r7, #11]
 8000978:	4613      	mov	r3, r2
 800097a:	813b      	strh	r3, [r7, #8]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(hi2c, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 800097c:	7afb      	ldrb	r3, [r7, #11]
 800097e:	b299      	uxth	r1, r3
 8000980:	893b      	ldrh	r3, [r7, #8]
 8000982:	220a      	movs	r2, #10
 8000984:	9200      	str	r2, [sp, #0]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f001 fbb3 	bl	80020f4 <HAL_I2C_Master_Receive>
 800098e:	4603      	mov	r3, r0
 8000990:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000992:	7dfb      	ldrb	r3, [r7, #23]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <i2c_write>:

HAL_StatusTypeDef i2c_write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af02      	add	r7, sp, #8
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	461a      	mov	r2, r3
 80009a8:	460b      	mov	r3, r1
 80009aa:	72fb      	strb	r3, [r7, #11]
 80009ac:	4613      	mov	r3, r2
 80009ae:	813b      	strh	r3, [r7, #8]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 80009b0:	7afb      	ldrb	r3, [r7, #11]
 80009b2:	b299      	uxth	r1, r3
 80009b4:	893b      	ldrh	r3, [r7, #8]
 80009b6:	220a      	movs	r2, #10
 80009b8:	9200      	str	r2, [sp, #0]
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f001 fa81 	bl	8001ec4 <HAL_I2C_Master_Transmit>
 80009c2:	4603      	mov	r3, r0
 80009c4:	75fb      	strb	r3, [r7, #23]
	return(ret);
 80009c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <i2c_write_read>:

HAL_StatusTypeDef i2c_write_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	461a      	mov	r2, r3
 80009dc:	460b      	mov	r3, r1
 80009de:	72fb      	strb	r3, [r7, #11]
 80009e0:	4613      	mov	r3, r2
 80009e2:	813b      	strh	r3, [r7, #8]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 80009e8:	2305      	movs	r3, #5
 80009ea:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 80009ec:	2305      	movs	r3, #5
 80009ee:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 80009f0:	7dfb      	ldrb	r3, [r7, #23]
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d802      	bhi.n	80009fc <i2c_write_read+0x2c>
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f000 fe9a 	bl	8001730 <HAL_Delay>
		status = i2c_write(hi2c, dev_addr, out_ptr, countTX);						// Perform I2C operation
 80009fc:	893b      	ldrh	r3, [r7, #8]
 80009fe:	7af9      	ldrb	r1, [r7, #11]
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f7ff ffca 	bl	800099c <i2c_write>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8000a12:	7d7b      	ldrb	r3, [r7, #21]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d102      	bne.n	8000a1e <i2c_write_read+0x4e>
 8000a18:	7dfb      	ldrb	r3, [r7, #23]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1e8      	bne.n	80009f0 <i2c_write_read+0x20>

	if(status == HAL_ERROR){return(status);}
 8000a1e:	7d7b      	ldrb	r3, [r7, #21]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d101      	bne.n	8000a28 <i2c_write_read+0x58>
 8000a24:	7d7b      	ldrb	r3, [r7, #21]
 8000a26:	e01a      	b.n	8000a5e <i2c_write_read+0x8e>

	HAL_Delay(5);
 8000a28:	2005      	movs	r0, #5
 8000a2a:	f000 fe81 	bl	8001730 <HAL_Delay>

	do
	{
		// Read operation
		status =  i2c_read(hi2c, dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 8000a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a30:	7af9      	ldrb	r1, [r7, #11]
 8000a32:	6a3a      	ldr	r2, [r7, #32]
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f7ff ff97 	bl	8000968 <i2c_read>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8000a3e:	7dbb      	ldrb	r3, [r7, #22]
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d802      	bhi.n	8000a4a <i2c_write_read+0x7a>
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f000 fe73 	bl	8001730 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8000a4a:	7dbb      	ldrb	r3, [r7, #22]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8000a50:	7d7b      	ldrb	r3, [r7, #21]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d102      	bne.n	8000a5c <i2c_write_read+0x8c>
 8000a56:	7dbb      	ldrb	r3, [r7, #22]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1e8      	bne.n	8000a2e <i2c_write_read+0x5e>

	return(status);
 8000a5c:	7d7b      	ldrb	r3, [r7, #21]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <max6911_read>:
//************************************
//        Chips and Devs
//************************************

uint16_t max6911_read(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t cmd_msb, uint8_t cmd_lsb)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4603      	mov	r3, r0
 8000a78:	70fb      	strb	r3, [r7, #3]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	70bb      	strb	r3, [r7, #2]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	707b      	strb	r3, [r7, #1]
	uint16_t temp_data = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	81fb      	strh	r3, [r7, #14]
	uint8_t rx_data[2] = {0x00, 0x00};
 8000a86:	2300      	movs	r3, #0
 8000a88:	81bb      	strh	r3, [r7, #12]

	// Init the device ctrl reg1
	max6911_set_ctrl1_register(INIT_WITH_CURRENT_GAIN_8);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f84e 	bl	8000b2c <max6911_set_ctrl1_register>
	// Write to the control register 1 and 2
	status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 2);
 8000a90:	78f9      	ldrb	r1, [r7, #3]
 8000a92:	2302      	movs	r3, #2
 8000a94:	9300      	str	r3, [sp, #0]
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <max6911_read+0xb8>)
 8000a98:	220a      	movs	r2, #10
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ff37 	bl	800090e <i2c_write_cmd_data>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <max6911_read+0xbc>)
 8000aa6:	701a      	strb	r2, [r3, #0]
	status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 2);
 8000aa8:	78f9      	ldrb	r1, [r7, #3]
 8000aaa:	2302      	movs	r3, #2
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <max6911_read+0xc0>)
 8000ab0:	220b      	movs	r2, #11
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ff2b 	bl	800090e <i2c_write_cmd_data>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <max6911_read+0xbc>)
 8000abe:	701a      	strb	r2, [r3, #0]


	// Set up the device for normal fast read operation
	max6911_set_ctrl1_register(FASTREAD_NORMAL_OPERATION);
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	f000 f833 	bl	8000b2c <max6911_set_ctrl1_register>
	// Set up the read for MSB and LSB

	status = i2c_write_read(hi2c, device_addr, &cmd_msb, 1, &rx_data[0], 1);
 8000ac6:	1cba      	adds	r2, r7, #2
 8000ac8:	78f9      	ldrb	r1, [r7, #3]
 8000aca:	2301      	movs	r3, #1
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	f107 030c 	add.w	r3, r7, #12
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff7a 	bl	80009d0 <i2c_write_read>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <max6911_read+0xbc>)
 8000ae2:	701a      	strb	r2, [r3, #0]
	status = i2c_write_read(hi2c, device_addr, &cmd_lsb, 1, &rx_data[1], 1);
 8000ae4:	1c7a      	adds	r2, r7, #1
 8000ae6:	78f9      	ldrb	r1, [r7, #3]
 8000ae8:	2301      	movs	r3, #1
 8000aea:	9301      	str	r3, [sp, #4]
 8000aec:	f107 030c 	add.w	r3, r7, #12
 8000af0:	3301      	adds	r3, #1
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2301      	movs	r3, #1
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ff6a 	bl	80009d0 <i2c_write_read>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <max6911_read+0xbc>)
 8000b02:	701a      	strb	r2, [r3, #0]

	temp_data = (rx_data[0]<<8) | (rx_data[1]);
 8000b04:	7b3b      	ldrb	r3, [r7, #12]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	7b7b      	ldrb	r3, [r7, #13]
 8000b0c:	b21b      	sxth	r3, r3
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	b21b      	sxth	r3, r3
 8000b12:	81fb      	strh	r3, [r7, #14]
	return(temp_data);
 8000b14:	89fb      	ldrh	r3, [r7, #14]

}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200001cc 	.word	0x200001cc
 8000b24:	200001b4 	.word	0x200001b4
 8000b28:	200001cd 	.word	0x200001cd

08000b2c <max6911_set_ctrl1_register>:


void max6911_set_ctrl1_register(_max6911_ctrl selector)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]

	switch(selector)
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <max6911_set_ctrl1_register+0x16>
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d01f      	beq.n	8000b80 <max6911_set_ctrl1_register+0x54>
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		default:
			break;
 8000b40:	e03c      	b.n	8000bbc <max6911_set_ctrl1_register+0x90>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000b42:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000b44:	7b13      	ldrb	r3, [r2, #12]
 8000b46:	f36f 03c3 	bfc	r3, #3, #1
 8000b4a:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000b4c:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000b4e:	7b13      	ldrb	r3, [r2, #12]
 8000b50:	f36f 1304 	bfc	r3, #4, #1
 8000b54:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000b56:	4a1d      	ldr	r2, [pc, #116]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000b58:	7b13      	ldrb	r3, [r2, #12]
 8000b5a:	f36f 1347 	bfc	r3, #5, #3
 8000b5e:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_A_GAIN_8x_DEC;
 8000b60:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000b62:	7b13      	ldrb	r3, [r2, #12]
 8000b64:	2102      	movs	r1, #2
 8000b66:	f361 0302 	bfi	r3, r1, #0, #3
 8000b6a:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000b6e:	7b53      	ldrb	r3, [r2, #13]
 8000b70:	f36f 03c3 	bfc	r3, #3, #1
 8000b74:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000b78:	7b53      	ldrb	r3, [r2, #13]
 8000b7a:	f36f 0382 	bfc	r3, #2, #1
 8000b7e:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000b80:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000b82:	7b13      	ldrb	r3, [r2, #12]
 8000b84:	f36f 03c3 	bfc	r3, #3, #1
 8000b88:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000b8c:	7b13      	ldrb	r3, [r2, #12]
 8000b8e:	f36f 1304 	bfc	r3, #4, #1
 8000b92:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000b96:	7b13      	ldrb	r3, [r2, #12]
 8000b98:	f36f 1347 	bfc	r3, #5, #3
 8000b9c:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_FAST_READ_DEC;
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000ba0:	7b13      	ldrb	r3, [r2, #12]
 8000ba2:	f043 0307 	orr.w	r3, r3, #7
 8000ba6:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000ba8:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000baa:	7b53      	ldrb	r3, [r2, #13]
 8000bac:	f36f 03c3 	bfc	r3, #3, #1
 8000bb0:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000bb2:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <max6911_set_ctrl1_register+0xa0>)
 8000bb4:	7b53      	ldrb	r3, [r2, #13]
 8000bb6:	f36f 0382 	bfc	r3, #2, #1
 8000bba:	7353      	strb	r3, [r2, #13]
			break;
 8000bbc:	bf00      	nop
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	200001c0 	.word	0x200001c0

08000bd0 <ucd_board_enable_set>:
//            UCD PSB
//************************************

// Board enable functions
void ucd_board_enable_set(bool gpio_state)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin, gpio_state);
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <ucd_board_enable_set+0x20>)
 8000be4:	f001 f8ba 	bl	8001d5c <HAL_GPIO_WritePin>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	48000400 	.word	0x48000400

08000bf4 <ucd_board_enable_get>:

bool ucd_board_enable_get(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	return(HAL_GPIO_ReadPin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin));
 8000bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <ucd_board_enable_get+0x20>)
 8000bfe:	f001 f895 	bl	8001d2c <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	bf14      	ite	ne
 8000c08:	2301      	movne	r3, #1
 8000c0a:	2300      	moveq	r3, #0
 8000c0c:	b2db      	uxtb	r3, r3
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	48000400 	.word	0x48000400

08000c18 <ijc_board_enable_set>:
//            IJC PSB
//************************************

// Board enable functions
void ijc_board_enable_set(bool gpio_state)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, gpio_state);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	461a      	mov	r2, r3
 8000c26:	2140      	movs	r1, #64	; 0x40
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <ijc_board_enable_set+0x20>)
 8000c2a:	f001 f897 	bl	8001d5c <HAL_GPIO_WritePin>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	48000400 	.word	0x48000400

08000c3c <ijc_board_enable_get>:

bool ijc_board_enable_get(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	return(HAL_GPIO_ReadPin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin));
 8000c40:	2140      	movs	r1, #64	; 0x40
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <ijc_board_enable_get+0x1c>)
 8000c44:	f001 f872 	bl	8001d2c <HAL_GPIO_ReadPin>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf14      	ite	ne
 8000c4e:	2301      	movne	r3, #1
 8000c50:	2300      	moveq	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	48000400 	.word	0x48000400

08000c5c <ijc_dssd_ramp_loop>:


void ijc_dssd_ramp_loop(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	//

}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <i2c_slv_cmd_rx_tx_handle>:
//************************************
//            I2C Slave
//************************************

bool i2c_slv_cmd_rx_tx_handle(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
	bool status = EXIT_SUCCESS;
 8000c72:	2300      	movs	r3, #0
 8000c74:	75fb      	strb	r3, [r7, #23]


	// SOME FUNCTION HERE TO HANDLE RX/TX
    switch(i2c_slv_rx.bytes.cmd)
 8000c76:	4bab      	ldr	r3, [pc, #684]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000c78:	78db      	ldrb	r3, [r3, #3]
 8000c7a:	3b60      	subs	r3, #96	; 0x60
 8000c7c:	2b27      	cmp	r3, #39	; 0x27
 8000c7e:	f200 81f3 	bhi.w	8001068 <i2c_slv_cmd_rx_tx_handle+0x3fc>
 8000c82:	a201      	add	r2, pc, #4	; (adr r2, 8000c88 <i2c_slv_cmd_rx_tx_handle+0x1c>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000e13 	.word	0x08000e13
 8000c8c:	08001069 	.word	0x08001069
 8000c90:	08000f97 	.word	0x08000f97
 8000c94:	08000fd5 	.word	0x08000fd5
 8000c98:	08001013 	.word	0x08001013
 8000c9c:	08000e7d 	.word	0x08000e7d
 8000ca0:	08000ebd 	.word	0x08000ebd
 8000ca4:	08000efd 	.word	0x08000efd
 8000ca8:	08000f57 	.word	0x08000f57
 8000cac:	08001069 	.word	0x08001069
 8000cb0:	08001069 	.word	0x08001069
 8000cb4:	08001069 	.word	0x08001069
 8000cb8:	08001069 	.word	0x08001069
 8000cbc:	08001069 	.word	0x08001069
 8000cc0:	08001069 	.word	0x08001069
 8000cc4:	08001069 	.word	0x08001069
 8000cc8:	08001069 	.word	0x08001069
 8000ccc:	08001069 	.word	0x08001069
 8000cd0:	08001069 	.word	0x08001069
 8000cd4:	08001069 	.word	0x08001069
 8000cd8:	08001069 	.word	0x08001069
 8000cdc:	08001069 	.word	0x08001069
 8000ce0:	08001069 	.word	0x08001069
 8000ce4:	08001069 	.word	0x08001069
 8000ce8:	08001069 	.word	0x08001069
 8000cec:	08001069 	.word	0x08001069
 8000cf0:	08001069 	.word	0x08001069
 8000cf4:	08001069 	.word	0x08001069
 8000cf8:	08001069 	.word	0x08001069
 8000cfc:	08001069 	.word	0x08001069
 8000d00:	08001069 	.word	0x08001069
 8000d04:	08001069 	.word	0x08001069
 8000d08:	08000d29 	.word	0x08000d29
 8000d0c:	08001069 	.word	0x08001069
 8000d10:	08001069 	.word	0x08001069
 8000d14:	08001069 	.word	0x08001069
 8000d18:	08001069 	.word	0x08001069
 8000d1c:	08001069 	.word	0x08001069
 8000d20:	08000d93 	.word	0x08000d93
 8000d24:	08000dd3 	.word	0x08000dd3
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------

    	case(CMD_UCD_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000d28:	4b7e      	ldr	r3, [pc, #504]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000d2a:	789b      	ldrb	r3, [r3, #2]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d10b      	bne.n	8000d48 <i2c_slv_cmd_rx_tx_handle+0xdc>
			{
				ucd_detector.board_enable_state = (uint16_t)ucd_board_enable_get(); // Read the state enable pin
 8000d30:	f7ff ff60 	bl	8000bf4 <ucd_board_enable_get>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	4b7b      	ldr	r3, [pc, #492]	; (8000f28 <i2c_slv_cmd_rx_tx_handle+0x2bc>)
 8000d3a:	805a      	strh	r2, [r3, #2]
				i2c_slv_tx.data = ucd_detector.board_enable_state; 					// Prepare the date into the transmit
 8000d3c:	4b7a      	ldr	r3, [pc, #488]	; (8000f28 <i2c_slv_cmd_rx_tx_handle+0x2bc>)
 8000d3e:	885a      	ldrh	r2, [r3, #2]
 8000d40:	4b7a      	ldr	r3, [pc, #488]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000d42:	801a      	strh	r2, [r3, #0]
				return(status);
 8000d44:	7dfb      	ldrb	r3, [r7, #23]
 8000d46:	e1a6      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000d48:	4b76      	ldr	r3, [pc, #472]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000d4a:	789b      	ldrb	r3, [r3, #2]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f040 818d 	bne.w	800106c <i2c_slv_cmd_rx_tx_handle+0x400>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8000d52:	4b74      	ldr	r3, [pc, #464]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d107      	bne.n	8000d6a <i2c_slv_cmd_rx_tx_handle+0xfe>
				{
					ucd_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff ff38 	bl	8000bd0 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8000d60:	4b72      	ldr	r3, [pc, #456]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	801a      	strh	r2, [r3, #0]
					return(status);
 8000d66:	7dfb      	ldrb	r3, [r7, #23]
 8000d68:	e195      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8000d6a:	4b6e      	ldr	r3, [pc, #440]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d107      	bne.n	8000d82 <i2c_slv_cmd_rx_tx_handle+0x116>
				{
					ucd_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff ff2c 	bl	8000bd0 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8000d78:	4b6c      	ldr	r3, [pc, #432]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	801a      	strh	r2, [r3, #0]
					return(status);
 8000d7e:	7dfb      	ldrb	r3, [r7, #23]
 8000d80:	e189      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8000d82:	4b6a      	ldr	r3, [pc, #424]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d88:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	75fb      	strb	r3, [r7, #23]
				return(status);
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	e181      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000d92:	4b64      	ldr	r3, [pc, #400]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000d94:	789b      	ldrb	r3, [r3, #2]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d10e      	bne.n	8000db8 <i2c_slv_cmd_rx_tx_handle+0x14c>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	827b      	strh	r3, [r7, #18]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000d9e:	2303      	movs	r3, #3
 8000da0:	2202      	movs	r2, #2
 8000da2:	21e4      	movs	r1, #228	; 0xe4
 8000da4:	4862      	ldr	r0, [pc, #392]	; (8000f30 <i2c_slv_cmd_rx_tx_handle+0x2c4>)
 8000da6:	f7ff fe5f 	bl	8000a68 <max6911_read>
 8000daa:	4603      	mov	r3, r0
 8000dac:	827b      	strh	r3, [r7, #18]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8000dae:	4a5f      	ldr	r2, [pc, #380]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000db0:	8a7b      	ldrh	r3, [r7, #18]
 8000db2:	8013      	strh	r3, [r2, #0]

				return(status);
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	e16e      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000db8:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000dba:	789b      	ldrb	r3, [r3, #2]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f040 8157 	bne.w	8001070 <i2c_slv_cmd_rx_tx_handle+0x404>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8000dc2:	4b5a      	ldr	r3, [pc, #360]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc8:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	75fb      	strb	r3, [r7, #23]
				return(status);
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	e161      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000dd2:	4b54      	ldr	r3, [pc, #336]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000dd4:	789b      	ldrb	r3, [r3, #2]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10e      	bne.n	8000df8 <i2c_slv_cmd_rx_tx_handle+0x18c>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	82bb      	strh	r3, [r7, #20]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8000dde:	2301      	movs	r3, #1
 8000de0:	2200      	movs	r2, #0
 8000de2:	21e4      	movs	r1, #228	; 0xe4
 8000de4:	4852      	ldr	r0, [pc, #328]	; (8000f30 <i2c_slv_cmd_rx_tx_handle+0x2c4>)
 8000de6:	f7ff fe3f 	bl	8000a68 <max6911_read>
 8000dea:	4603      	mov	r3, r0
 8000dec:	82bb      	strh	r3, [r7, #20]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8000dee:	4a4f      	ldr	r2, [pc, #316]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000df0:	8abb      	ldrh	r3, [r7, #20]
 8000df2:	8013      	strh	r3, [r2, #0]

				return(status);
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	e14e      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000df8:	4b4a      	ldr	r3, [pc, #296]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f040 8139 	bne.w	8001074 <i2c_slv_cmd_rx_tx_handle+0x408>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8000e02:	4b4a      	ldr	r3, [pc, #296]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e08:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	75fb      	strb	r3, [r7, #23]
				return(status);
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	e141      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
    	//                     IJC Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000e12:	4b44      	ldr	r3, [pc, #272]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000e14:	789b      	ldrb	r3, [r3, #2]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d10b      	bne.n	8000e32 <i2c_slv_cmd_rx_tx_handle+0x1c6>
			{
				ijc_detector.board_enable_state = (uint16_t)ijc_board_enable_get(); // Read the state enable pin
 8000e1a:	f7ff ff0f 	bl	8000c3c <ijc_board_enable_get>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b44      	ldr	r3, [pc, #272]	; (8000f34 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8000e24:	805a      	strh	r2, [r3, #2]
				i2c_slv_tx.data = ijc_detector.board_enable_state; 					// Prepare the date into the transmit
 8000e26:	4b43      	ldr	r3, [pc, #268]	; (8000f34 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8000e28:	885a      	ldrh	r2, [r3, #2]
 8000e2a:	4b40      	ldr	r3, [pc, #256]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000e2c:	801a      	strh	r2, [r3, #0]
				return(status);
 8000e2e:	7dfb      	ldrb	r3, [r7, #23]
 8000e30:	e131      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000e32:	4b3c      	ldr	r3, [pc, #240]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000e34:	789b      	ldrb	r3, [r3, #2]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f040 811e 	bne.w	8001078 <i2c_slv_cmd_rx_tx_handle+0x40c>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8000e3c:	4b39      	ldr	r3, [pc, #228]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d107      	bne.n	8000e54 <i2c_slv_cmd_rx_tx_handle+0x1e8>
				{
					ijc_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8000e44:	2001      	movs	r0, #1
 8000e46:	f7ff fee7 	bl	8000c18 <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8000e4a:	4b38      	ldr	r3, [pc, #224]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	801a      	strh	r2, [r3, #0]
					return(status);
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	e120      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8000e54:	4b33      	ldr	r3, [pc, #204]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d107      	bne.n	8000e6c <i2c_slv_cmd_rx_tx_handle+0x200>
				{
					ijc_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fedb 	bl	8000c18 <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8000e62:	4b32      	ldr	r3, [pc, #200]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	801a      	strh	r2, [r3, #0]
					return(status);
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	e114      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8000e6c:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e72:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8000e74:	2301      	movs	r3, #1
 8000e76:	75fb      	strb	r3, [r7, #23]
				return(status);
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	e10c      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000e7e:	789b      	ldrb	r3, [r3, #2]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10e      	bne.n	8000ea2 <i2c_slv_cmd_rx_tx_handle+0x236>
			{
				uint16_t dataread = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	817b      	strh	r3, [r7, #10]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000e88:	2303      	movs	r3, #3
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	21e0      	movs	r1, #224	; 0xe0
 8000e8e:	482a      	ldr	r0, [pc, #168]	; (8000f38 <i2c_slv_cmd_rx_tx_handle+0x2cc>)
 8000e90:	f7ff fdea 	bl	8000a68 <max6911_read>
 8000e94:	4603      	mov	r3, r0
 8000e96:	817b      	strh	r3, [r7, #10]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8000e98:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000e9a:	897b      	ldrh	r3, [r7, #10]
 8000e9c:	8013      	strh	r3, [r2, #0]

				return(status);
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ea0:	e0f9      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000ea2:	4b20      	ldr	r3, [pc, #128]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f040 80e8 	bne.w	800107c <i2c_slv_cmd_rx_tx_handle+0x410>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb2:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	75fb      	strb	r3, [r7, #23]
				return(status);
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	e0ec      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000ebe:	789b      	ldrb	r3, [r3, #2]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d10e      	bne.n	8000ee2 <i2c_slv_cmd_rx_tx_handle+0x276>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	81bb      	strh	r3, [r7, #12]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8000ec8:	2301      	movs	r3, #1
 8000eca:	2200      	movs	r2, #0
 8000ecc:	21e0      	movs	r1, #224	; 0xe0
 8000ece:	481a      	ldr	r0, [pc, #104]	; (8000f38 <i2c_slv_cmd_rx_tx_handle+0x2cc>)
 8000ed0:	f7ff fdca 	bl	8000a68 <max6911_read>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	81bb      	strh	r3, [r7, #12]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000eda:	89bb      	ldrh	r3, [r7, #12]
 8000edc:	8013      	strh	r3, [r2, #0]

				return(status);
 8000ede:	7dfb      	ldrb	r3, [r7, #23]
 8000ee0:	e0d9      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000ee4:	789b      	ldrb	r3, [r3, #2]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	f040 80ca 	bne.w	8001080 <i2c_slv_cmd_rx_tx_handle+0x414>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef2:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	75fb      	strb	r3, [r7, #23]
				return(status);
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	e0cc      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <i2c_slv_cmd_rx_tx_handle+0x2b8>)
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d11b      	bne.n	8000f3c <i2c_slv_cmd_rx_tx_handle+0x2d0>
			{
				uint16_t dataread = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	81fb      	strh	r3, [r7, #14]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000f08:	2303      	movs	r3, #3
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	21e2      	movs	r1, #226	; 0xe2
 8000f0e:	480a      	ldr	r0, [pc, #40]	; (8000f38 <i2c_slv_cmd_rx_tx_handle+0x2cc>)
 8000f10:	f7ff fdaa 	bl	8000a68 <max6911_read>
 8000f14:	4603      	mov	r3, r0
 8000f16:	81fb      	strh	r3, [r7, #14]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <i2c_slv_cmd_rx_tx_handle+0x2c0>)
 8000f1a:	89fb      	ldrh	r3, [r7, #14]
 8000f1c:	8013      	strh	r3, [r2, #0]

				return(status);
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]
 8000f20:	e0b9      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
 8000f22:	bf00      	nop
 8000f24:	200001d8 	.word	0x200001d8
 8000f28:	200001b8 	.word	0x200001b8
 8000f2c:	200001dc 	.word	0x200001dc
 8000f30:	200000d8 	.word	0x200000d8
 8000f34:	200001bc 	.word	0x200001bc
 8000f38:	20000084 	.word	0x20000084
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000f3c:	4b58      	ldr	r3, [pc, #352]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8000f3e:	789b      	ldrb	r3, [r3, #2]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f040 809f 	bne.w	8001084 <i2c_slv_cmd_rx_tx_handle+0x418>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8000f46:	4b57      	ldr	r3, [pc, #348]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 8000f48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f4c:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	75fb      	strb	r3, [r7, #23]
				return(status);
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	e09f      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000f56:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8000f58:	789b      	ldrb	r3, [r3, #2]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d10e      	bne.n	8000f7c <i2c_slv_cmd_rx_tx_handle+0x310>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	823b      	strh	r3, [r7, #16]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8000f62:	2301      	movs	r3, #1
 8000f64:	2200      	movs	r2, #0
 8000f66:	21e2      	movs	r1, #226	; 0xe2
 8000f68:	484f      	ldr	r0, [pc, #316]	; (80010a8 <i2c_slv_cmd_rx_tx_handle+0x43c>)
 8000f6a:	f7ff fd7d 	bl	8000a68 <max6911_read>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	823b      	strh	r3, [r7, #16]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8000f72:	4a4c      	ldr	r2, [pc, #304]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 8000f74:	8a3b      	ldrh	r3, [r7, #16]
 8000f76:	8013      	strh	r3, [r2, #0]

				return(status);
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	e08c      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000f7c:	4b48      	ldr	r3, [pc, #288]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8000f7e:	789b      	ldrb	r3, [r3, #2]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f040 8081 	bne.w	8001088 <i2c_slv_cmd_rx_tx_handle+0x41c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8000f86:	4b47      	ldr	r3, [pc, #284]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 8000f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8c:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	75fb      	strb	r3, [r7, #23]
				return(status);
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	e07f      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000f96:	4b42      	ldr	r3, [pc, #264]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8000f98:	789b      	ldrb	r3, [r3, #2]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d10e      	bne.n	8000fbc <i2c_slv_cmd_rx_tx_handle+0x350>
			{
				uint16_t dataread = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	80fb      	strh	r3, [r7, #6]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	21e4      	movs	r1, #228	; 0xe4
 8000fa8:	483f      	ldr	r0, [pc, #252]	; (80010a8 <i2c_slv_cmd_rx_tx_handle+0x43c>)
 8000faa:	f7ff fd5d 	bl	8000a68 <max6911_read>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8000fb2:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	8013      	strh	r3, [r2, #0]

				return(status);
 8000fb8:	7dfb      	ldrb	r3, [r7, #23]
 8000fba:	e06c      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000fbc:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8000fbe:	789b      	ldrb	r3, [r3, #2]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d163      	bne.n	800108c <i2c_slv_cmd_rx_tx_handle+0x420>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8000fc4:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 8000fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fca:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	75fb      	strb	r3, [r7, #23]
				return(status);
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	e060      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8000fd4:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d10e      	bne.n	8000ffa <i2c_slv_cmd_rx_tx_handle+0x38e>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	813b      	strh	r3, [r7, #8]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	21e6      	movs	r1, #230	; 0xe6
 8000fe6:	4830      	ldr	r0, [pc, #192]	; (80010a8 <i2c_slv_cmd_rx_tx_handle+0x43c>)
 8000fe8:	f7ff fd3e 	bl	8000a68 <max6911_read>
 8000fec:	4603      	mov	r3, r0
 8000fee:	813b      	strh	r3, [r7, #8]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8000ff0:	4a2c      	ldr	r2, [pc, #176]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 8000ff2:	893b      	ldrh	r3, [r7, #8]
 8000ff4:	8013      	strh	r3, [r2, #0]

				return(status);
 8000ff6:	7dfb      	ldrb	r3, [r7, #23]
 8000ff8:	e04d      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d146      	bne.n	8001090 <i2c_slv_cmd_rx_tx_handle+0x424>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 8001004:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001008:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
				return(status);
 800100e:	7dfb      	ldrb	r3, [r7, #23]
 8001010:	e041      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8001014:	789b      	ldrb	r3, [r3, #2]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d105      	bne.n	8001026 <i2c_slv_cmd_rx_tx_handle+0x3ba>
			{
				i2c_slv_tx.data = ijc_detector.hv_voltage_value;        // Prepare the date into the transmit
 800101a:	4b24      	ldr	r3, [pc, #144]	; (80010ac <i2c_slv_cmd_rx_tx_handle+0x440>)
 800101c:	881a      	ldrh	r2, [r3, #0]
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 8001020:	801a      	strh	r2, [r3, #0]
				return(status);
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	e037      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001026:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8001028:	789b      	ldrb	r3, [r3, #2]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d132      	bne.n	8001094 <i2c_slv_cmd_rx_tx_handle+0x428>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8001030:	785b      	ldrb	r3, [r3, #1]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	d810      	bhi.n	8001058 <i2c_slv_cmd_rx_tx_handle+0x3ec>
				{
					// Read the data from the buffer
					ijc_detector.hv_voltage_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <i2c_slv_cmd_rx_tx_handle+0x434>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b21b      	sxth	r3, r3
					ijc_detector.hv_voltage_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8001044:	4313      	orrs	r3, r2
 8001046:	b21b      	sxth	r3, r3
 8001048:	b29a      	uxth	r2, r3
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <i2c_slv_cmd_rx_tx_handle+0x440>)
 800104c:	801a      	strh	r2, [r3, #0]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 8001050:	2201      	movs	r2, #1
 8001052:	801a      	strh	r2, [r3, #0]
					return(status);
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	e01e      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <i2c_slv_cmd_rx_tx_handle+0x438>)
 800105a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105e:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 8001060:	2301      	movs	r3, #1
 8001062:	75fb      	strb	r3, [r7, #23]
					return(status);
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	e016      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	default:
			break;
 8001068:	bf00      	nop
 800106a:	e014      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 800106c:	bf00      	nop
 800106e:	e012      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 8001070:	bf00      	nop
 8001072:	e010      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 8001074:	bf00      	nop
 8001076:	e00e      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 8001078:	bf00      	nop
 800107a:	e00c      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 800107c:	bf00      	nop
 800107e:	e00a      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 8001080:	bf00      	nop
 8001082:	e008      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 8001084:	bf00      	nop
 8001086:	e006      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 8001088:	bf00      	nop
 800108a:	e004      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 800108c:	bf00      	nop
 800108e:	e002      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 8001090:	bf00      	nop
 8001092:	e000      	b.n	8001096 <i2c_slv_cmd_rx_tx_handle+0x42a>
			break;
 8001094:	bf00      	nop
	}
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200001d8 	.word	0x200001d8
 80010a4:	200001dc 	.word	0x200001dc
 80010a8:	20000084 	.word	0x20000084
 80010ac:	200001bc 	.word	0x200001bc

080010b0 <i2c_slv_init>:



void i2c_slv_init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	// Clear the Tx and Rx buffers before use
	i2c_slv_clear_buffer(&i2c_tx_buffer[0], TXBUFFERSIZE);
 80010b4:	2102      	movs	r1, #2
 80010b6:	4808      	ldr	r0, [pc, #32]	; (80010d8 <i2c_slv_init+0x28>)
 80010b8:	f000 f814 	bl	80010e4 <i2c_slv_clear_buffer>
	i2c_slv_clear_buffer(&i2c_rx_buffer[0], RXBUFFERSIZE);
 80010bc:	2104      	movs	r1, #4
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <i2c_slv_init+0x2c>)
 80010c0:	f000 f810 	bl	80010e4 <i2c_slv_clear_buffer>

	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <i2c_slv_init+0x30>)
 80010c6:	f001 fa6f 	bl	80025a8 <HAL_I2C_EnableListen_IT>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <i2c_slv_init+0x24>
	{
		/* Transfer error in reception process */
		Error_Handler();
 80010d0:	f000 f8ba 	bl	8001248 <Error_Handler>
	}
}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001d0 	.word	0x200001d0
 80010dc:	200001d4 	.word	0x200001d4
 80010e0:	20000030 	.word	0x20000030

080010e4 <i2c_slv_clear_buffer>:


void i2c_slv_clear_buffer(uint8_t* buffer, uint8_t size)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]

	uint8_t idx = 0; // An index
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

	for(idx = 0; idx < size; idx++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e008      	b.n	800110c <i2c_slv_clear_buffer+0x28>
	{
		// Cycle through and clear the buffer array
		*buffer = 0x00;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
		buffer++;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
	for(idx = 0; idx < size; idx++)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	3301      	adds	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	7bfa      	ldrb	r2, [r7, #15]
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	429a      	cmp	r2, r3
 8001112:	d3f2      	bcc.n	80010fa <i2c_slv_clear_buffer+0x16>
	}

}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	Xfer_Complete = 1;        // Set flag for RX completion
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000002c 	.word	0x2000002c

08001144 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	// Handle the I2C receive callback complete
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	061a      	lsls	r2, r3, #24
					| (i2c_rx_buffer[1] << 16)
 8001152:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	041b      	lsls	r3, r3, #16
 8001158:	431a      	orrs	r2, r3
					| (i2c_rx_buffer[2] << 8)
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 800115c:	789b      	ldrb	r3, [r3, #2]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	4313      	orrs	r3, r2
					| (i2c_rx_buffer[3]);
 8001162:	4a09      	ldr	r2, [pc, #36]	; (8001188 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8001164:	78d2      	ldrb	r2, [r2, #3]
 8001166:	4313      	orrs	r3, r2
 8001168:	461a      	mov	r2, r3
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800116c:	601a      	str	r2, [r3, #0]

	// Load the init/fail value into the tx buffer
	i2c_slv_tx.data = CMD_FAIL_OP_INPROG_RESP;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8001170:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001174:	801a      	strh	r2, [r3, #0]

	Xfer_Complete = 1;                           // Set flag for RX completion
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	200001d4 	.word	0x200001d4
 800118c:	200001d8 	.word	0x200001d8
 8001190:	200001dc 	.word	0x200001dc
 8001194:	2000002c 	.word	0x2000002c

08001198 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
 80011a4:	4613      	mov	r3, r2
 80011a6:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	4a15      	ldr	r2, [pc, #84]	; (8001200 <HAL_I2C_AddrCallback+0x68>)
 80011ac:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_I2C_AddrCallback+0x68>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d014      	beq.n	80011e0 <HAL_I2C_AddrCallback+0x48>
	/*##- Start the transmission process #####################################*/
	/* While the I2C in reception process, user can transmit data through
	"i2c_tx_buffer" buffer */

	// Update the TX buffer
	i2c_tx_buffer[0] = i2c_slv_tx.bytes.byte_1;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_I2C_AddrCallback+0x6c>)
 80011b8:	785a      	ldrb	r2, [r3, #1]
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_I2C_AddrCallback+0x70>)
 80011bc:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_slv_tx.bytes.byte_2;
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_I2C_AddrCallback+0x6c>)
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_I2C_AddrCallback+0x70>)
 80011c4:	705a      	strb	r2, [r3, #1]
	//copy_array(&i2c_slv_tx.bytes.byte_1, i2c_tx_buffer[0], TXBUFFERSIZE);

	if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)i2c_tx_buffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80011c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ca:	2202      	movs	r2, #2
 80011cc:	490e      	ldr	r1, [pc, #56]	; (8001208 <HAL_I2C_AddrCallback+0x70>)
 80011ce:	480f      	ldr	r0, [pc, #60]	; (800120c <HAL_I2C_AddrCallback+0x74>)
 80011d0:	f001 f886 	bl	80022e0 <HAL_I2C_Slave_Seq_Transmit_IT>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00e      	beq.n	80011f8 <HAL_I2C_AddrCallback+0x60>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 80011da:	f000 f835 	bl	8001248 <Error_Handler>
		Error_Handler();
	}

  }

}
 80011de:	e00b      	b.n	80011f8 <HAL_I2C_AddrCallback+0x60>
	if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)i2c_rx_buffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80011e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e4:	2204      	movs	r2, #4
 80011e6:	490a      	ldr	r1, [pc, #40]	; (8001210 <HAL_I2C_AddrCallback+0x78>)
 80011e8:	4808      	ldr	r0, [pc, #32]	; (800120c <HAL_I2C_AddrCallback+0x74>)
 80011ea:	f001 f92b 	bl	8002444 <HAL_I2C_Slave_Seq_Receive_IT>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_I2C_AddrCallback+0x60>
		Error_Handler();
 80011f4:	f000 f828 	bl	8001248 <Error_Handler>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000028 	.word	0x20000028
 8001204:	200001dc 	.word	0x200001dc
 8001208:	200001d0 	.word	0x200001d0
 800120c:	20000030 	.word	0x20000030
 8001210:	200001d4 	.word	0x200001d4

08001214 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	//HAL_I2C_EnableListen_IT(&hi2c1);
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f001 fa80 	bl	8002736 <HAL_I2C_GetError>
 8001236:	4603      	mov	r3, r0
 8001238:	2b04      	cmp	r3, #4
 800123a:	d001      	beq.n	8001240 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 800123c:	f000 f804 	bl	8001248 <Error_Handler>
  }
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>
	...

08001254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <HAL_MspInit+0x44>)
 800125c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800125e:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_MspInit+0x44>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6613      	str	r3, [r2, #96]	; 0x60
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <HAL_MspInit+0x44>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_MspInit+0x44>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a08      	ldr	r2, [pc, #32]	; (8001298 <HAL_MspInit+0x44>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_MspInit+0x44>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800128a:	bf00      	nop
 800128c:	370c      	adds	r7, #12
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0a6      	sub	sp, #152	; 0x98
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	2260      	movs	r2, #96	; 0x60
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 fd46 	bl	8005d4e <memset>
  if(hi2c->Instance==I2C1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_I2C_MspInit+0x1dc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d14d      	bne.n	8001368 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012cc:	2340      	movs	r3, #64	; 0x40
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fd3f 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012e4:	f7ff ffb0 	bl	8001248 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e8:	4b64      	ldr	r3, [pc, #400]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ec:	4a63      	ldr	r2, [pc, #396]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f4:	4b61      	ldr	r3, [pc, #388]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	623b      	str	r3, [r7, #32]
 80012fe:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001300:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001308:	2312      	movs	r3, #18
 800130a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800130e:	2301      	movs	r3, #1
 8001310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800131a:	2304      	movs	r3, #4
 800131c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f000 fb85 	bl	8001a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800132e:	4b53      	ldr	r3, [pc, #332]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001332:	4a52      	ldr	r2, [pc, #328]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 8001334:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001338:	6593      	str	r3, [r2, #88]	; 0x58
 800133a:	4b50      	ldr	r3, [pc, #320]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	201f      	movs	r0, #31
 800134c:	f000 faef 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001350:	201f      	movs	r0, #31
 8001352:	f000 fb08 	bl	8001966 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2020      	movs	r0, #32
 800135c:	f000 fae7 	bl	800192e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001360:	2020      	movs	r0, #32
 8001362:	f000 fb00 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001366:	e082      	b.n	800146e <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a44      	ldr	r2, [pc, #272]	; (8001480 <HAL_I2C_MspInit+0x1e4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d13c      	bne.n	80013ec <HAL_I2C_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001376:	2300      	movs	r3, #0
 8001378:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fcec 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 800138a:	f7ff ff5d 	bl	8001248 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a3a      	ldr	r2, [pc, #232]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b38      	ldr	r3, [pc, #224]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ae:	2312      	movs	r3, #18
 80013b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013c0:	2304      	movs	r3, #4
 80013c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013ca:	4619      	mov	r1, r3
 80013cc:	482d      	ldr	r0, [pc, #180]	; (8001484 <HAL_I2C_MspInit+0x1e8>)
 80013ce:	f000 fb33 	bl	8001a38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013d2:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	4a29      	ldr	r2, [pc, #164]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 80013d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013dc:	6593      	str	r3, [r2, #88]	; 0x58
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
}
 80013ea:	e040      	b.n	800146e <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C3)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a25      	ldr	r2, [pc, #148]	; (8001488 <HAL_I2C_MspInit+0x1ec>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d13b      	bne.n	800146e <HAL_I2C_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fca9 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_MspInit+0x178>
      Error_Handler();
 8001410:	f7ff ff1a 	bl	8001248 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a18      	ldr	r2, [pc, #96]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800142c:	2303      	movs	r3, #3
 800142e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001432:	2312      	movs	r3, #18
 8001434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001444:	2304      	movs	r3, #4
 8001446:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800144e:	4619      	mov	r1, r3
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <HAL_I2C_MspInit+0x1f0>)
 8001452:	f000 faf1 	bl	8001a38 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 8001458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 800145c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001460:	6593      	str	r3, [r2, #88]	; 0x58
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_I2C_MspInit+0x1e0>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	bf00      	nop
 8001470:	3798      	adds	r7, #152	; 0x98
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40005400 	.word	0x40005400
 800147c:	40021000 	.word	0x40021000
 8001480:	40005800 	.word	0x40005800
 8001484:	48000400 	.word	0x48000400
 8001488:	40005c00 	.word	0x40005c00
 800148c:	48000800 	.word	0x48000800

08001490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0a2      	sub	sp, #136	; 0x88
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2260      	movs	r2, #96	; 0x60
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f004 fc4c 	bl	8005d4e <memset>
  if(huart->Instance==USART2)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a20      	ldr	r2, [pc, #128]	; (800153c <HAL_UART_MspInit+0xac>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d138      	bne.n	8001532 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014c0:	2302      	movs	r3, #2
 80014c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014c4:	2300      	movs	r3, #0
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4618      	mov	r0, r3
 80014ce:	f003 fc45 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d8:	f7ff feb6 	bl	8001248 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_UART_MspInit+0xb0>)
 80014de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_UART_MspInit+0xb0>)
 80014e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e6:	6593      	str	r3, [r2, #88]	; 0x58
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_UART_MspInit+0xb0>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_UART_MspInit+0xb0>)
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	4a11      	ldr	r2, [pc, #68]	; (8001540 <HAL_UART_MspInit+0xb0>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_UART_MspInit+0xb0>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800150c:	230c      	movs	r3, #12
 800150e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800151e:	2307      	movs	r3, #7
 8001520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001528:	4619      	mov	r1, r3
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f000 fa83 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001532:	bf00      	nop
 8001534:	3788      	adds	r7, #136	; 0x88
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40004400 	.word	0x40004400
 8001540:	40021000 	.word	0x40021000

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f8ae 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <I2C1_EV_IRQHandler+0x10>)
 800159e:	f001 f823 	bl	80025e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000030 	.word	0x20000030

080015ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <I2C1_ER_IRQHandler+0x10>)
 80015b2:	f001 f833 	bl	800261c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000030 	.word	0x20000030

080015c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e8:	f7ff ffea 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <LoopForever+0xe>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	; (8001630 <LoopForever+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f004 fba5 	bl	8005d60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001616:	f7fe ff57 	bl	80004c8 <main>

0800161a <LoopForever>:

LoopForever:
    b LoopForever
 800161a:	e7fe      	b.n	800161a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800161c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001628:	08005e18 	.word	0x08005e18
  ldr r2, =_sbss
 800162c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001630:	200001e4 	.word	0x200001e4

08001634 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_IRQHandler>
	...

08001638 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_Init+0x3c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_Init+0x3c>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f000 f962 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001654:	2000      	movs	r0, #0
 8001656:	f000 f80f 	bl	8001678 <HAL_InitTick>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	e001      	b.n	800166a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001666:	f7ff fdf5 	bl	8001254 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800166a:	79fb      	ldrb	r3, [r7, #7]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40022000 	.word	0x40022000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_InitTick+0x6c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d023      	beq.n	80016d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <HAL_InitTick+0x70>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_InitTick+0x6c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	4619      	mov	r1, r3
 8001696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169a:	fbb3 f3f1 	udiv	r3, r3, r1
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 f96d 	bl	8001982 <HAL_SYSTICK_Config>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10f      	bne.n	80016ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d809      	bhi.n	80016c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016bc:	f000 f937 	bl	800192e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_InitTick+0x74>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e007      	b.n	80016d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	e004      	b.n	80016d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
 80016d2:	e001      	b.n	80016d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000000 	.word	0x20000000
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x20>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x24>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_IncTick+0x24>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000008 	.word	0x20000008
 8001714:	200001e0 	.word	0x200001e0

08001718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_GetTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200001e0 	.word	0x200001e0

08001730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff ffee 	bl	8001718 <HAL_GetTick>
 800173c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001748:	d005      	beq.n	8001756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_Delay+0x44>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	bf00      	nop
 8001758:	f7ff ffde 	bl	8001718 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	429a      	cmp	r2, r3
 8001766:	d8f7      	bhi.n	8001758 <HAL_Delay+0x28>
  {
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d005      	beq.n	80019be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2204      	movs	r2, #4
 80019b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
 80019bc:	e029      	b.n	8001a12 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 020e 	bic.w	r2, r2, #14
 80019cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f003 021c 	and.w	r2, r3, #28
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	2101      	movs	r1, #1
 80019ec:	fa01 f202 	lsl.w	r2, r1, r2
 80019f0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
    }
  }
  return status;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a2a:	b2db      	uxtb	r3, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a46:	e154      	b.n	8001cf2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8146 	beq.w	8001cec <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d005      	beq.n	8001a78 <HAL_GPIO_Init+0x40>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d130      	bne.n	8001ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aae:	2201      	movs	r2, #1
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 0201 	and.w	r2, r3, #1
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d017      	beq.n	8001b16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d123      	bne.n	8001b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	08da      	lsrs	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3208      	adds	r2, #8
 8001b64:	6939      	ldr	r1, [r7, #16]
 8001b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 0203 	and.w	r2, r3, #3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80a0 	beq.w	8001cec <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bac:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <HAL_GPIO_Init+0x2d8>)
 8001bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb0:	4a57      	ldr	r2, [pc, #348]	; (8001d10 <HAL_GPIO_Init+0x2d8>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bb8:	4b55      	ldr	r3, [pc, #340]	; (8001d10 <HAL_GPIO_Init+0x2d8>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc4:	4a53      	ldr	r2, [pc, #332]	; (8001d14 <HAL_GPIO_Init+0x2dc>)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bee:	d019      	beq.n	8001c24 <HAL_GPIO_Init+0x1ec>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a49      	ldr	r2, [pc, #292]	; (8001d18 <HAL_GPIO_Init+0x2e0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_GPIO_Init+0x1e8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_GPIO_Init+0x2e4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00d      	beq.n	8001c1c <HAL_GPIO_Init+0x1e4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a47      	ldr	r2, [pc, #284]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_Init+0x1e0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a46      	ldr	r2, [pc, #280]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_GPIO_Init+0x1dc>
 8001c10:	2304      	movs	r3, #4
 8001c12:	e008      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c14:	2307      	movs	r3, #7
 8001c16:	e006      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e004      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_GPIO_Init+0x1ee>
 8001c24:	2300      	movs	r3, #0
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c36:	4937      	ldr	r1, [pc, #220]	; (8001d14 <HAL_GPIO_Init+0x2dc>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c44:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c68:	4a2f      	ldr	r2, [pc, #188]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c6e:	4b2e      	ldr	r3, [pc, #184]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c92:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c98:	4b23      	ldr	r3, [pc, #140]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cc2:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f47f aea3 	bne.w	8001a48 <HAL_GPIO_Init+0x10>
  }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	48000800 	.word	0x48000800
 8001d20:	48000c00 	.word	0x48000c00
 8001d24:	48001000 	.word	0x48001000
 8001d28:	40010400 	.word	0x40010400

08001d2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	887b      	ldrh	r3, [r7, #2]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d44:	2301      	movs	r3, #1
 8001d46:	73fb      	strb	r3, [r7, #15]
 8001d48:	e001      	b.n	8001d4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e08d      	b.n	8001eba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d106      	bne.n	8001db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff fa72 	bl	800129c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2224      	movs	r2, #36	; 0x24
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ddc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001dec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	e006      	b.n	8001e14 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e12:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d108      	bne.n	8001e2e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	e007      	b.n	8001e3e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691a      	ldr	r2, [r3, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69d9      	ldr	r1, [r3, #28]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1a      	ldr	r2, [r3, #32]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	817b      	strh	r3, [r7, #10]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	f040 80fd 	bne.w	80020e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_I2C_Master_Transmit+0x30>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e0f6      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x21e>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001efc:	f7ff fc0c 	bl	8001718 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2319      	movs	r3, #25
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f001 fca1 	bl	8003856 <I2C_WaitOnFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e0e1      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2221      	movs	r2, #33	; 0x21
 8001f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	893a      	ldrh	r2, [r7, #8]
 8001f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	2bff      	cmp	r3, #255	; 0xff
 8001f4e:	d906      	bls.n	8001f5e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	22ff      	movs	r2, #255	; 0xff
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001f56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e007      	b.n	8001f6e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d024      	beq.n	8001fc0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	8979      	ldrh	r1, [r7, #10]
 8001fb2:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <HAL_I2C_Master_Transmit+0x228>)
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f001 fe87 	bl	8003ccc <I2C_TransferConfig>
 8001fbe:	e066      	b.n	800208e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	8979      	ldrh	r1, [r7, #10]
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_I2C_Master_Transmit+0x228>)
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f001 fe7c 	bl	8003ccc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001fd4:	e05b      	b.n	800208e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f001 fc8a 	bl	80038f4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e07b      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d034      	beq.n	800208e <HAL_I2C_Master_Transmit+0x1ca>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	2b00      	cmp	r3, #0
 800202a:	d130      	bne.n	800208e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	2200      	movs	r2, #0
 8002034:	2180      	movs	r1, #128	; 0x80
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f001 fc0d 	bl	8003856 <I2C_WaitOnFlagUntilTimeout>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e04d      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204a:	b29b      	uxth	r3, r3
 800204c:	2bff      	cmp	r3, #255	; 0xff
 800204e:	d90e      	bls.n	800206e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	22ff      	movs	r2, #255	; 0xff
 8002054:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800205a:	b2da      	uxtb	r2, r3
 800205c:	8979      	ldrh	r1, [r7, #10]
 800205e:	2300      	movs	r3, #0
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f001 fe30 	bl	8003ccc <I2C_TransferConfig>
 800206c:	e00f      	b.n	800208e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207c:	b2da      	uxtb	r2, r3
 800207e:	8979      	ldrh	r1, [r7, #10]
 8002080:	2300      	movs	r3, #0
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f001 fe1f 	bl	8003ccc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d19e      	bne.n	8001fd6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	6a39      	ldr	r1, [r7, #32]
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f001 fc70 	bl	8003982 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e01a      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2220      	movs	r2, #32
 80020b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_I2C_Master_Transmit+0x22c>)
 80020c0:	400b      	ands	r3, r1
 80020c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	e000      	b.n	80020e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80020e0:	2302      	movs	r3, #2
  }
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	80002000 	.word	0x80002000
 80020f0:	fe00e800 	.word	0xfe00e800

080020f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	461a      	mov	r2, r3
 8002100:	460b      	mov	r3, r1
 8002102:	817b      	strh	r3, [r7, #10]
 8002104:	4613      	mov	r3, r2
 8002106:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b20      	cmp	r3, #32
 8002112:	f040 80db 	bne.w	80022cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_I2C_Master_Receive+0x30>
 8002120:	2302      	movs	r3, #2
 8002122:	e0d4      	b.n	80022ce <HAL_I2C_Master_Receive+0x1da>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800212c:	f7ff faf4 	bl	8001718 <HAL_GetTick>
 8002130:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2319      	movs	r3, #25
 8002138:	2201      	movs	r2, #1
 800213a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f001 fb89 	bl	8003856 <I2C_WaitOnFlagUntilTimeout>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0bf      	b.n	80022ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2222      	movs	r2, #34	; 0x22
 8002152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2210      	movs	r2, #16
 800215a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	2bff      	cmp	r3, #255	; 0xff
 800217e:	d90e      	bls.n	800219e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	22ff      	movs	r2, #255	; 0xff
 8002184:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218a:	b2da      	uxtb	r2, r3
 800218c:	8979      	ldrh	r1, [r7, #10]
 800218e:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <HAL_I2C_Master_Receive+0x1e4>)
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f001 fd98 	bl	8003ccc <I2C_TransferConfig>
 800219c:	e06d      	b.n	800227a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	8979      	ldrh	r1, [r7, #10]
 80021b0:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_I2C_Master_Receive+0x1e4>)
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f001 fd87 	bl	8003ccc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80021be:	e05c      	b.n	800227a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	6a39      	ldr	r1, [r7, #32]
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f001 fc1f 	bl	8003a08 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e07c      	b.n	80022ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d034      	beq.n	800227a <HAL_I2C_Master_Receive+0x186>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d130      	bne.n	800227a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	2200      	movs	r2, #0
 8002220:	2180      	movs	r1, #128	; 0x80
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f001 fb17 	bl	8003856 <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e04d      	b.n	80022ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	2bff      	cmp	r3, #255	; 0xff
 800223a:	d90e      	bls.n	800225a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	22ff      	movs	r2, #255	; 0xff
 8002240:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	b2da      	uxtb	r2, r3
 8002248:	8979      	ldrh	r1, [r7, #10]
 800224a:	2300      	movs	r3, #0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f001 fd3a 	bl	8003ccc <I2C_TransferConfig>
 8002258:	e00f      	b.n	800227a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	b2da      	uxtb	r2, r3
 800226a:	8979      	ldrh	r1, [r7, #10]
 800226c:	2300      	movs	r3, #0
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f001 fd29 	bl	8003ccc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d19d      	bne.n	80021c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	6a39      	ldr	r1, [r7, #32]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f001 fb7a 	bl	8003982 <I2C_WaitOnSTOPFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e01a      	b.n	80022ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2220      	movs	r2, #32
 800229e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <HAL_I2C_Master_Receive+0x1e8>)
 80022ac:	400b      	ands	r3, r1
 80022ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	80002400 	.word	0x80002400
 80022dc:	fe00e800 	.word	0xfe00e800

080022e0 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	4613      	mov	r3, r2
 80022ee:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022fc:	2b28      	cmp	r3, #40	; 0x28
 80022fe:	f040 8098 	bne.w	8002432 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e08c      	b.n	8002434 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800231a:	f248 0101 	movw	r1, #32769	; 0x8001
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f001 fd8a 	bl	8003e38 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800232e:	2302      	movs	r3, #2
 8002330:	e080      	b.n	8002434 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b2a      	cmp	r3, #42	; 0x2a
 8002344:	d12a      	bne.n	800239c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002346:	2102      	movs	r1, #2
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f001 fd75 	bl	8003e38 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235c:	d11e      	bne.n	800239c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236c:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237a:	4a30      	ldr	r2, [pc, #192]	; (800243c <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 800237c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fb09 	bl	800199a <HAL_DMA_Abort_IT>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002398:	4610      	mov	r0, r2
 800239a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2229      	movs	r2, #41	; 0x29
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	88fa      	ldrh	r2, [r7, #6]
 80023cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a17      	ldr	r2, [pc, #92]	; (8002440 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800240e:	7dfb      	ldrb	r3, [r7, #23]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2208      	movs	r2, #8
 800241a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002424:	f248 0101 	movw	r1, #32769	; 0x8001
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f001 fc81 	bl	8003d30 <I2C_Enable_IRQ>

    return HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	e000      	b.n	8002434 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
  }
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	0800381b 	.word	0x0800381b
 8002440:	0800274f 	.word	0x0800274f

08002444 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	603b      	str	r3, [r7, #0]
 8002450:	4613      	mov	r3, r2
 8002452:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002460:	2b28      	cmp	r3, #40	; 0x28
 8002462:	f040 8098 	bne.w	8002596 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e08c      	b.n	8002598 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800247e:	f248 0102 	movw	r1, #32770	; 0x8002
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f001 fcd8 	bl	8003e38 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8002492:	2302      	movs	r3, #2
 8002494:	e080      	b.n	8002598 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b29      	cmp	r3, #41	; 0x29
 80024a8:	d12a      	bne.n	8002500 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024aa:	2101      	movs	r1, #1
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f001 fcc3 	bl	8003e38 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024c0:	d11e      	bne.n	8002500 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024d0:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d012      	beq.n	8002500 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024de:	4a30      	ldr	r2, [pc, #192]	; (80025a0 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fa57 	bl	800199a <HAL_DMA_Abort_IT>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024fc:	4610      	mov	r0, r2
 80024fe:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	222a      	movs	r2, #42	; 0x2a
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002524:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	88fa      	ldrh	r2, [r7, #6]
 8002530:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a17      	ldr	r2, [pc, #92]	; (80025a4 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8002546:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b08      	cmp	r3, #8
 8002554:	bf0c      	ite	eq
 8002556:	2301      	moveq	r3, #1
 8002558:	2300      	movne	r3, #0
 800255a:	b2db      	uxtb	r3, r3
 800255c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d106      	bne.n	8002580 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2208      	movs	r2, #8
 800257e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002588:	f248 0102 	movw	r1, #32770	; 0x8002
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f001 fbcf 	bl	8003d30 <I2C_Enable_IRQ>

    return HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	e000      	b.n	8002598 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	0800381b 	.word	0x0800381b
 80025a4:	0800274f 	.word	0x0800274f

080025a8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d10d      	bne.n	80025d8 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2228      	movs	r2, #40	; 0x28
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a07      	ldr	r2, [pc, #28]	; (80025e4 <HAL_I2C_EnableListen_IT+0x3c>)
 80025c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80025ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f001 fbae 	bl	8003d30 <I2C_Enable_IRQ>

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	0800274f 	.word	0x0800274f

080025e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	68f9      	ldr	r1, [r7, #12]
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	4798      	blx	r3
  }
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00f      	beq.n	800265e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800265c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00f      	beq.n	8002688 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	f043 0208 	orr.w	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002686:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00f      	beq.n	80026b2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a0:	f043 0202 	orr.w	r2, r3, #2
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026b0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 030b 	and.w	r3, r3, #11
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 ff6d 	bl	80035a4 <I2C_ITError>
  }
}
 80026ca:	bf00      	nop
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr

080026e6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b086      	sub	sp, #24
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <I2C_Slave_ISR_IT+0x24>
 800276e:	2302      	movs	r3, #2
 8002770:	e0e1      	b.n	8002936 <I2C_Slave_ISR_IT+0x1e8>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800278e:	6939      	ldr	r1, [r7, #16]
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fda1 	bl	80032d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d04b      	beq.n	8002838 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d046      	beq.n	8002838 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d128      	bne.n	8002806 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b28      	cmp	r3, #40	; 0x28
 80027be:	d108      	bne.n	80027d2 <I2C_Slave_ISR_IT+0x84>
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027c6:	d104      	bne.n	80027d2 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80027c8:	6939      	ldr	r1, [r7, #16]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fe96 	bl	80034fc <I2C_ITListenCplt>
 80027d0:	e031      	b.n	8002836 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b29      	cmp	r3, #41	; 0x29
 80027dc:	d10e      	bne.n	80027fc <I2C_Slave_ISR_IT+0xae>
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027e4:	d00a      	beq.n	80027fc <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2210      	movs	r2, #16
 80027ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 ffef 	bl	80037d2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fc4a 	bl	800308e <I2C_ITSlaveSeqCplt>
 80027fa:	e01c      	b.n	8002836 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2210      	movs	r2, #16
 8002802:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002804:	e08f      	b.n	8002926 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2210      	movs	r2, #16
 800280c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	f043 0204 	orr.w	r2, r3, #4
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <I2C_Slave_ISR_IT+0xda>
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002826:	d17e      	bne.n	8002926 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282c:	4619      	mov	r1, r3
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 feb8 	bl	80035a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002834:	e077      	b.n	8002926 <I2C_Slave_ISR_IT+0x1d8>
 8002836:	e076      	b.n	8002926 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	2b00      	cmp	r3, #0
 8002840:	d02f      	beq.n	80028a2 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002848:	2b00      	cmp	r3, #0
 800284a:	d02a      	beq.n	80028a2 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d018      	beq.n	8002888 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d14b      	bne.n	800292a <I2C_Slave_ISR_IT+0x1dc>
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002898:	d047      	beq.n	800292a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fbf7 	bl	800308e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80028a0:	e043      	b.n	800292a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80028b6:	6939      	ldr	r1, [r7, #16]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fb27 	bl	8002f0c <I2C_ITAddrCplt>
 80028be:	e035      	b.n	800292c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d030      	beq.n	800292c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d02b      	beq.n	800292c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d018      	beq.n	8002910 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	851a      	strh	r2, [r3, #40]	; 0x28
 800290e:	e00d      	b.n	800292c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002916:	d002      	beq.n	800291e <I2C_Slave_ISR_IT+0x1d0>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 fbb5 	bl	800308e <I2C_ITSlaveSeqCplt>
 8002924:	e002      	b.n	800292c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002926:	bf00      	nop
 8002928:	e000      	b.n	800292c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800292a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b088      	sub	sp, #32
 8002942:	af02      	add	r7, sp, #8
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <I2C_Master_ISR_DMA+0x1a>
 8002954:	2302      	movs	r3, #2
 8002956:	e0d9      	b.n	8002b0c <I2C_Master_ISR_DMA+0x1ce>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d016      	beq.n	8002998 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002970:	2b00      	cmp	r3, #0
 8002972:	d011      	beq.n	8002998 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2210      	movs	r2, #16
 800297a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f043 0204 	orr.w	r2, r3, #4
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002988:	2120      	movs	r1, #32
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f001 f9d0 	bl	8003d30 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 ff1e 	bl	80037d2 <I2C_Flush_TXDR>
 8002996:	e0b4      	b.n	8002b02 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d071      	beq.n	8002a86 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d06c      	beq.n	8002a86 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ba:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d04e      	beq.n	8002a64 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029d2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2bff      	cmp	r3, #255	; 0xff
 80029dc:	d906      	bls.n	80029ec <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80029e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e010      	b.n	8002a0e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029fe:	d003      	beq.n	8002a08 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e002      	b.n	8002a0e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	8a79      	ldrh	r1, [r7, #18]
 8002a16:	2300      	movs	r3, #0
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f001 f955 	bl	8003ccc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b22      	cmp	r3, #34	; 0x22
 8002a3e:	d108      	bne.n	8002a52 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a4e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a50:	e057      	b.n	8002b02 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a60:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a62:	e04e      	b.n	8002b02 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a72:	d003      	beq.n	8002a7c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 facd 	bl	8003014 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002a7a:	e042      	b.n	8002b02 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a7c:	2140      	movs	r1, #64	; 0x40
 8002a7e:	68f8      	ldr	r0, [r7, #12]
 8002a80:	f000 fd90 	bl	80035a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a84:	e03d      	b.n	8002b02 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d028      	beq.n	8002ae2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d023      	beq.n	8002ae2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d119      	bne.n	8002ad8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ab2:	d025      	beq.n	8002b00 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002abc:	d108      	bne.n	8002ad0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002acc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002ace:	e017      	b.n	8002b00 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fa9f 	bl	8003014 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002ad6:	e013      	b.n	8002b00 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002ad8:	2140      	movs	r1, #64	; 0x40
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fd62 	bl	80035a4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ae0:	e00e      	b.n	8002b00 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fb25 	bl	8003148 <I2C_ITMasterCplt>
 8002afe:	e000      	b.n	8002b02 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8002b00:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b20:	4b8d      	ldr	r3, [pc, #564]	; (8002d58 <I2C_Mem_ISR_DMA+0x244>)
 8002b22:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <I2C_Mem_ISR_DMA+0x1e>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e10e      	b.n	8002d50 <I2C_Mem_ISR_DMA+0x23c>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d016      	beq.n	8002b72 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d011      	beq.n	8002b72 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2210      	movs	r2, #16
 8002b54:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002b62:	2120      	movs	r1, #32
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f001 f8e3 	bl	8003d30 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 fe31 	bl	80037d2 <I2C_Flush_TXDR>
 8002b70:	e0e9      	b.n	8002d46 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b96:	651a      	str	r2, [r3, #80]	; 0x50
 8002b98:	e0d5      	b.n	8002d46 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05f      	beq.n	8002c64 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d05a      	beq.n	8002c64 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002bae:	2101      	movs	r1, #1
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f001 f941 	bl	8003e38 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002bb6:	2110      	movs	r1, #16
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f001 f8b9 	bl	8003d30 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d048      	beq.n	8002c5a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2bff      	cmp	r3, #255	; 0xff
 8002bd0:	d910      	bls.n	8002bf4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	22ff      	movs	r2, #255	; 0xff
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	b299      	uxth	r1, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	2300      	movs	r3, #0
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f001 f86d 	bl	8003ccc <I2C_TransferConfig>
 8002bf2:	e011      	b.n	8002c18 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	b299      	uxth	r1, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f001 f85a 	bl	8003ccc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b22      	cmp	r3, #34	; 0x22
 8002c34:	d108      	bne.n	8002c48 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c44:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c46:	e07e      	b.n	8002d46 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c56:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002c58:	e075      	b.n	8002d46 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002c5a:	2140      	movs	r1, #64	; 0x40
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fca1 	bl	80035a4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002c62:	e070      	b.n	8002d46 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d05d      	beq.n	8002d2a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d058      	beq.n	8002d2a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c78:	2101      	movs	r1, #1
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f001 f8dc 	bl	8003e38 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002c80:	2110      	movs	r1, #16
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f001 f854 	bl	8003d30 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b22      	cmp	r3, #34	; 0x22
 8002c92:	d101      	bne.n	8002c98 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002c94:	4b31      	ldr	r3, [pc, #196]	; (8002d5c <I2C_Mem_ISR_DMA+0x248>)
 8002c96:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2bff      	cmp	r3, #255	; 0xff
 8002ca0:	d910      	bls.n	8002cc4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cac:	b299      	uxth	r1, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f001 f805 	bl	8003ccc <I2C_TransferConfig>
 8002cc2:	e011      	b.n	8002ce8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	b299      	uxth	r1, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fff2 	bl	8003ccc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b22      	cmp	r3, #34	; 0x22
 8002d04:	d108      	bne.n	8002d18 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d14:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d16:	e016      	b.n	8002d46 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d26:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d28:	e00d      	b.n	8002d46 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fa01 	bl	8003148 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	80002000 	.word	0x80002000
 8002d5c:	80002400 	.word	0x80002400

08002d60 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <I2C_Slave_ISR_DMA+0x24>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e0bf      	b.n	8002f04 <I2C_Slave_ISR_DMA+0x1a4>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fa98 	bl	80032d8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8095 	beq.w	8002ede <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 808f 	beq.w	8002ede <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d07d      	beq.n	8002ed0 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00c      	beq.n	8002df6 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8002e14:	2301      	movs	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d128      	bne.n	8002e70 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b28      	cmp	r3, #40	; 0x28
 8002e28:	d108      	bne.n	8002e3c <I2C_Slave_ISR_DMA+0xdc>
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e30:	d104      	bne.n	8002e3c <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fb61 	bl	80034fc <I2C_ITListenCplt>
 8002e3a:	e048      	b.n	8002ece <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b29      	cmp	r3, #41	; 0x29
 8002e46:	d10e      	bne.n	8002e66 <I2C_Slave_ISR_DMA+0x106>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e4e:	d00a      	beq.n	8002e66 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2210      	movs	r2, #16
 8002e56:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fcba 	bl	80037d2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f915 	bl	800308e <I2C_ITSlaveSeqCplt>
 8002e64:	e033      	b.n	8002ece <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002e6e:	e034      	b.n	8002eda <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2210      	movs	r2, #16
 8002e76:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8a:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <I2C_Slave_ISR_DMA+0x13a>
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e98:	d11f      	bne.n	8002eda <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b21      	cmp	r3, #33	; 0x21
 8002e9e:	d002      	beq.n	8002ea6 <I2C_Slave_ISR_DMA+0x146>
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b29      	cmp	r3, #41	; 0x29
 8002ea4:	d103      	bne.n	8002eae <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2221      	movs	r2, #33	; 0x21
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002eac:	e008      	b.n	8002ec0 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b22      	cmp	r3, #34	; 0x22
 8002eb2:	d002      	beq.n	8002eba <I2C_Slave_ISR_DMA+0x15a>
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8002eb8:	d102      	bne.n	8002ec0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2222      	movs	r2, #34	; 0x22
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fb6c 	bl	80035a4 <I2C_ITError>
      if (treatdmanack == 1U)
 8002ecc:	e005      	b.n	8002eda <I2C_Slave_ISR_DMA+0x17a>
 8002ece:	e004      	b.n	8002eda <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002ed8:	e00f      	b.n	8002efa <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8002eda:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002edc:	e00d      	b.n	8002efa <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 0308 	and.w	r3, r3, #8
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002ef2:	68b9      	ldr	r1, [r7, #8]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f809 	bl	8002f0c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f22:	2b28      	cmp	r3, #40	; 0x28
 8002f24:	d16a      	bne.n	8002ffc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	0c1b      	lsrs	r3, r3, #16
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f44:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f52:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f60:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d138      	bne.n	8002fdc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	09db      	lsrs	r3, r3, #7
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	89bb      	ldrh	r3, [r7, #12]
 8002f72:	4053      	eors	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	f003 0306 	and.w	r3, r3, #6
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d11c      	bne.n	8002fb8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002f7e:	897b      	ldrh	r3, [r7, #10]
 8002f80:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d13b      	bne.n	800300c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002faa:	89ba      	ldrh	r2, [r7, #12]
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7fe f8f1 	bl	8001198 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fb6:	e029      	b.n	800300c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002fb8:	893b      	ldrh	r3, [r7, #8]
 8002fba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 ff39 	bl	8003e38 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fce:	89ba      	ldrh	r2, [r7, #12]
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fe f8df 	bl	8001198 <HAL_I2C_AddrCallback>
}
 8002fda:	e017      	b.n	800300c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 ff29 	bl	8003e38 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fee:	89ba      	ldrh	r2, [r7, #12]
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe f8cf 	bl	8001198 <HAL_I2C_AddrCallback>
}
 8002ffa:	e007      	b.n	800300c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2208      	movs	r2, #8
 8003002:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800300c:	bf00      	nop
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b21      	cmp	r3, #33	; 0x21
 800302e:	d115      	bne.n	800305c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2211      	movs	r2, #17
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003044:	2101      	movs	r1, #1
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fef6 	bl	8003e38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fb3c 	bl	80026d2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800305a:	e014      	b.n	8003086 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2212      	movs	r2, #18
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003070:	2102      	movs	r1, #2
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fee0 	bl	8003e38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff fb30 	bl	80026e6 <HAL_I2C_MasterRxCpltCallback>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e00c      	b.n	80030dc <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030da:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b29      	cmp	r3, #41	; 0x29
 80030e6:	d112      	bne.n	800310e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2228      	movs	r2, #40	; 0x28
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2221      	movs	r2, #33	; 0x21
 80030f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030f6:	2101      	movs	r1, #1
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fe9d 	bl	8003e38 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fe f80c 	bl	8001124 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800310c:	e017      	b.n	800313e <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b2a      	cmp	r3, #42	; 0x2a
 8003118:	d111      	bne.n	800313e <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2228      	movs	r2, #40	; 0x28
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2222      	movs	r2, #34	; 0x22
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003128:	2102      	movs	r1, #2
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fe84 	bl	8003e38 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7fe f803 	bl	8001144 <HAL_I2C_SlaveRxCpltCallback>
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2220      	movs	r2, #32
 800315c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b21      	cmp	r3, #33	; 0x21
 8003168:	d107      	bne.n	800317a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800316a:	2101      	movs	r1, #1
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fe63 	bl	8003e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2211      	movs	r2, #17
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
 8003178:	e00c      	b.n	8003194 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b22      	cmp	r3, #34	; 0x22
 8003184:	d106      	bne.n	8003194 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003186:	2102      	movs	r1, #2
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fe55 	bl	8003e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2212      	movs	r2, #18
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <I2C_ITMasterCplt+0x188>)
 80031a0:	400b      	ands	r3, r1
 80031a2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a49      	ldr	r2, [pc, #292]	; (80032d4 <I2C_ITMasterCplt+0x18c>)
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2210      	movs	r2, #16
 80031c0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b60      	cmp	r3, #96	; 0x60
 80031d8:	d10a      	bne.n	80031f0 <I2C_ITMasterCplt+0xa8>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80031ee:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 faee 	bl	80037d2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b60      	cmp	r3, #96	; 0x60
 8003206:	d002      	beq.n	800320e <I2C_ITMasterCplt+0xc6>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d006      	beq.n	800321c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f9c5 	bl	80035a4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800321a:	e054      	b.n	80032c6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b21      	cmp	r3, #33	; 0x21
 8003226:	d124      	bne.n	8003272 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d10b      	bne.n	800325a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fa51 	bl	80026fa <HAL_I2C_MemTxCpltCallback>
}
 8003258:	e035      	b.n	80032c6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7ff fa31 	bl	80026d2 <HAL_I2C_MasterTxCpltCallback>
}
 8003270:	e029      	b.n	80032c6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b22      	cmp	r3, #34	; 0x22
 800327c:	d123      	bne.n	80032c6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d10b      	bne.n	80032b0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff fa30 	bl	800270e <HAL_I2C_MemRxCpltCallback>
}
 80032ae:	e00a      	b.n	80032c6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff fa10 	bl	80026e6 <HAL_I2C_MasterRxCpltCallback>
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	fe00e800 	.word	0xfe00e800
 80032d4:	ffff0000 	.word	0xffff0000

080032d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2220      	movs	r2, #32
 80032fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
 8003300:	2b21      	cmp	r3, #33	; 0x21
 8003302:	d002      	beq.n	800330a <I2C_ITSlaveCplt+0x32>
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b29      	cmp	r3, #41	; 0x29
 8003308:	d108      	bne.n	800331c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800330a:	f248 0101 	movw	r1, #32769	; 0x8001
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fd92 	bl	8003e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2221      	movs	r2, #33	; 0x21
 8003318:	631a      	str	r2, [r3, #48]	; 0x30
 800331a:	e019      	b.n	8003350 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	2b22      	cmp	r3, #34	; 0x22
 8003320:	d002      	beq.n	8003328 <I2C_ITSlaveCplt+0x50>
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	2b2a      	cmp	r3, #42	; 0x2a
 8003326:	d108      	bne.n	800333a <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003328:	f248 0102 	movw	r1, #32770	; 0x8002
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fd83 	bl	8003e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2222      	movs	r2, #34	; 0x22
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
 8003338:	e00a      	b.n	8003350 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b28      	cmp	r3, #40	; 0x28
 800333e:	d107      	bne.n	8003350 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003340:	f248 0103 	movw	r1, #32771	; 0x8003
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fd77 	bl	8003e38 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800335e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	4b62      	ldr	r3, [pc, #392]	; (80034f4 <I2C_ITSlaveCplt+0x21c>)
 800336c:	400b      	ands	r3, r1
 800336e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fa2e 	bl	80037d2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d013      	beq.n	80033a8 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800338e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01f      	beq.n	80033d8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033a6:	e017      	b.n	80033d8 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d012      	beq.n	80033d8 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d020      	beq.n	8003424 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	1c5a      	adds	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f043 0204 	orr.w	r2, r3, #4
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8a4 	bl	80035a4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b28      	cmp	r3, #40	; 0x28
 8003466:	d141      	bne.n	80034ec <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003468:	6979      	ldr	r1, [r7, #20]
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f846 	bl	80034fc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003470:	e03c      	b.n	80034ec <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800347a:	d014      	beq.n	80034a6 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fe06 	bl	800308e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <I2C_ITSlaveCplt+0x220>)
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fd feb8 	bl	8001214 <HAL_I2C_ListenCpltCallback>
}
 80034a4:	e022      	b.n	80034ec <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b22      	cmp	r3, #34	; 0x22
 80034b0:	d10e      	bne.n	80034d0 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fd fe3b 	bl	8001144 <HAL_I2C_SlaveRxCpltCallback>
}
 80034ce:	e00d      	b.n	80034ec <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fe1c 	bl	8001124 <HAL_I2C_SlaveTxCpltCallback>
}
 80034ec:	bf00      	nop
 80034ee:	3718      	adds	r7, #24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	fe00e800 	.word	0xfe00e800
 80034f8:	ffff0000 	.word	0xffff0000

080034fc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <I2C_ITListenCplt+0xa4>)
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d022      	beq.n	8003578 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	1c5a      	adds	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003570:	f043 0204 	orr.w	r2, r3, #4
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003578:	f248 0103 	movw	r1, #32771	; 0x8003
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fc5b 	bl	8003e38 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2210      	movs	r2, #16
 8003588:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fe3e 	bl	8001214 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	ffff0000 	.word	0xffff0000

080035a4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a6d      	ldr	r2, [pc, #436]	; (8003778 <I2C_ITError+0x1d4>)
 80035c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b28      	cmp	r3, #40	; 0x28
 80035da:	d005      	beq.n	80035e8 <I2C_ITError+0x44>
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b29      	cmp	r3, #41	; 0x29
 80035e0:	d002      	beq.n	80035e8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b2a      	cmp	r3, #42	; 0x2a
 80035e6:	d10b      	bne.n	8003600 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035e8:	2103      	movs	r1, #3
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fc24 	bl	8003e38 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2228      	movs	r2, #40	; 0x28
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a60      	ldr	r2, [pc, #384]	; (800377c <I2C_ITError+0x1d8>)
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34
 80035fe:	e030      	b.n	8003662 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003600:	f248 0103 	movw	r1, #32771	; 0x8003
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fc17 	bl	8003e38 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f8e1 	bl	80037d2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b60      	cmp	r3, #96	; 0x60
 800361a:	d01f      	beq.n	800365c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b20      	cmp	r3, #32
 8003630:	d114      	bne.n	800365c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b10      	cmp	r3, #16
 800363e:	d109      	bne.n	8003654 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2210      	movs	r2, #16
 8003646:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2220      	movs	r2, #32
 800365a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	2b00      	cmp	r3, #0
 800366e:	d039      	beq.n	80036e4 <I2C_ITError+0x140>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b11      	cmp	r3, #17
 8003674:	d002      	beq.n	800367c <I2C_ITError+0xd8>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b21      	cmp	r3, #33	; 0x21
 800367a:	d133      	bne.n	80036e4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800368a:	d107      	bne.n	800369c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800369a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fe f9bb 	bl	8001a1c <HAL_DMA_GetState>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d017      	beq.n	80036dc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	4a33      	ldr	r2, [pc, #204]	; (8003780 <I2C_ITError+0x1dc>)
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe f96a 	bl	800199a <HAL_DMA_Abort_IT>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d04d      	beq.n	8003768 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036d6:	4610      	mov	r0, r2
 80036d8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036da:	e045      	b.n	8003768 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f851 	bl	8003784 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036e2:	e041      	b.n	8003768 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d039      	beq.n	8003760 <I2C_ITError+0x1bc>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b12      	cmp	r3, #18
 80036f0:	d002      	beq.n	80036f8 <I2C_ITError+0x154>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2b22      	cmp	r3, #34	; 0x22
 80036f6:	d133      	bne.n	8003760 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003706:	d107      	bne.n	8003718 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003716:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371c:	4618      	mov	r0, r3
 800371e:	f7fe f97d 	bl	8001a1c <HAL_DMA_GetState>
 8003722:	4603      	mov	r3, r0
 8003724:	2b01      	cmp	r3, #1
 8003726:	d017      	beq.n	8003758 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	4a14      	ldr	r2, [pc, #80]	; (8003780 <I2C_ITError+0x1dc>)
 800372e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800373c:	4618      	mov	r0, r3
 800373e:	f7fe f92c 	bl	800199a <HAL_DMA_Abort_IT>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d011      	beq.n	800376c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003752:	4610      	mov	r0, r2
 8003754:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003756:	e009      	b.n	800376c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f813 	bl	8003784 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800375e:	e005      	b.n	800376c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f80f 	bl	8003784 <I2C_TreatErrorCallback>
  }
}
 8003766:	e002      	b.n	800376e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003768:	bf00      	nop
 800376a:	e000      	b.n	800376e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800376c:	bf00      	nop
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	ffff0000 	.word	0xffff0000
 800377c:	0800274f 	.word	0x0800274f
 8003780:	0800381b 	.word	0x0800381b

08003784 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b60      	cmp	r3, #96	; 0x60
 8003796:	d10e      	bne.n	80037b6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7fe ffb7 	bl	8002722 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037b4:	e009      	b.n	80037ca <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7fd fd2f 	bl	8001228 <HAL_I2C_ErrorCallback>
}
 80037ca:	bf00      	nop
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d103      	bne.n	80037f0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2200      	movs	r2, #0
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d007      	beq.n	800380e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	699a      	ldr	r2, [r3, #24]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	619a      	str	r2, [r3, #24]
  }
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	2200      	movs	r2, #0
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003844:	2200      	movs	r2, #0
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff ff9b 	bl	8003784 <I2C_TreatErrorCallback>
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4613      	mov	r3, r2
 8003864:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003866:	e031      	b.n	80038cc <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386e:	d02d      	beq.n	80038cc <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003870:	f7fd ff52 	bl	8001718 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d302      	bcc.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d122      	bne.n	80038cc <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699a      	ldr	r2, [r3, #24]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4013      	ands	r3, r2
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	bf0c      	ite	eq
 8003896:	2301      	moveq	r3, #1
 8003898:	2300      	movne	r3, #0
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d113      	bne.n	80038cc <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e00f      	b.n	80038ec <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d0be      	beq.n	8003868 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003900:	e033      	b.n	800396a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 f900 	bl	8003b0c <I2C_IsErrorOccurred>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e031      	b.n	800397a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800391c:	d025      	beq.n	800396a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fd fefb 	bl	8001718 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11a      	bne.n	800396a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b02      	cmp	r3, #2
 8003940:	d013      	beq.n	800396a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e007      	b.n	800397a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d1c4      	bne.n	8003902 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800398e:	e02f      	b.n	80039f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f8b9 	bl	8003b0c <I2C_IsErrorOccurred>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e02d      	b.n	8003a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a4:	f7fd feb8 	bl	8001718 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d302      	bcc.n	80039ba <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11a      	bne.n	80039f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d013      	beq.n	80039f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e007      	b.n	8003a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 0320 	and.w	r3, r3, #32
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d1c8      	bne.n	8003990 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a14:	e06b      	b.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f876 	bl	8003b0c <I2C_IsErrorOccurred>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e069      	b.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	d138      	bne.n	8003aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d105      	bne.n	8003a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e055      	b.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d107      	bne.n	8003a70 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2210      	movs	r2, #16
 8003a66:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
 8003a6e:	e002      	b.n	8003a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6859      	ldr	r1, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b1f      	ldr	r3, [pc, #124]	; (8003b08 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003a8a:	400b      	ands	r3, r1
 8003a8c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2220      	movs	r2, #32
 8003a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e029      	b.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fd fe35 	bl	8001718 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d116      	bne.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d00f      	beq.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	f043 0220 	orr.w	r2, r3, #32
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d18c      	bne.n	8003a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	fe00e800 	.word	0xfe00e800

08003b0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b26:	2300      	movs	r3, #0
 8003b28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f003 0310 	and.w	r3, r3, #16
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d068      	beq.n	8003c0a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b40:	e049      	b.n	8003bd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b48:	d045      	beq.n	8003bd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b4a:	f7fd fde5 	bl	8001718 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d302      	bcc.n	8003b60 <I2C_IsErrorOccurred+0x54>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d13a      	bne.n	8003bd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	d121      	bne.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8a:	d01d      	beq.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003b8c:	7cfb      	ldrb	r3, [r7, #19]
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d01a      	beq.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ba0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ba2:	f7fd fdb9 	bl	8001718 <HAL_GetTick>
 8003ba6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ba8:	e00e      	b.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003baa:	f7fd fdb5 	bl	8001718 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b19      	cmp	r3, #25
 8003bb6:	d907      	bls.n	8003bc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
 8003bba:	f043 0320 	orr.w	r3, r3, #32
 8003bbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003bc6:	e006      	b.n	8003bd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d1e9      	bne.n	8003baa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d003      	beq.n	8003bec <I2C_IsErrorOccurred+0xe0>
 8003be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0aa      	beq.n	8003b42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
 8003c02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	f043 0308 	orr.w	r3, r3, #8
 8003c44:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d01c      	beq.n	8003cba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f7ff fda6 	bl	80037d2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <I2C_IsErrorOccurred+0x1bc>)
 8003c92:	400b      	ands	r3, r1
 8003c94:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3728      	adds	r7, #40	; 0x28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	fe00e800 	.word	0xfe00e800

08003ccc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	607b      	str	r3, [r7, #4]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	817b      	strh	r3, [r7, #10]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cde:	897b      	ldrh	r3, [r7, #10]
 8003ce0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ce4:	7a7b      	ldrb	r3, [r7, #9]
 8003ce6:	041b      	lsls	r3, r3, #16
 8003ce8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003cfa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	0d5b      	lsrs	r3, r3, #21
 8003d06:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <I2C_TransferConfig+0x60>)
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	ea02 0103 	and.w	r1, r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	03ff63ff 	.word	0x03ff63ff

08003d30 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d44:	4a39      	ldr	r2, [pc, #228]	; (8003e2c <I2C_Enable_IRQ+0xfc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d032      	beq.n	8003db0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003d4e:	4a38      	ldr	r2, [pc, #224]	; (8003e30 <I2C_Enable_IRQ+0x100>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d02d      	beq.n	8003db0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003d58:	4a36      	ldr	r2, [pc, #216]	; (8003e34 <I2C_Enable_IRQ+0x104>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d028      	beq.n	8003db0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da03      	bge.n	8003d6e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d6c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003d7e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d80:	887b      	ldrh	r3, [r7, #2]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003d90:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d92:	887b      	ldrh	r3, [r7, #2]
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d103      	bne.n	8003da0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d9e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003da0:	887b      	ldrh	r3, [r7, #2]
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d133      	bne.n	8003e0e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f043 0320 	orr.w	r3, r3, #32
 8003dac:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003dae:	e02e      	b.n	8003e0e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	da03      	bge.n	8003dc0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003dbe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003dc0:	887b      	ldrh	r3, [r7, #2]
 8003dc2:	f003 0301 	and.w	r3, r3, #1
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003dd0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003dd2:	887b      	ldrh	r3, [r7, #2]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003de2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003de4:	887b      	ldrh	r3, [r7, #2]
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d103      	bne.n	8003df2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003df0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003df2:	887b      	ldrh	r3, [r7, #2]
 8003df4:	2b20      	cmp	r3, #32
 8003df6:	d103      	bne.n	8003e00 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003dfe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003e00:	887b      	ldrh	r3, [r7, #2]
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d103      	bne.n	8003e0e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6819      	ldr	r1, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	601a      	str	r2, [r3, #0]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	0800293f 	.word	0x0800293f
 8003e30:	08002d61 	.word	0x08002d61
 8003e34:	08002b15 	.word	0x08002b15

08003e38 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00f      	beq.n	8003e72 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003e58:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e66:	2b28      	cmp	r3, #40	; 0x28
 8003e68:	d003      	beq.n	8003e72 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003e72:	887b      	ldrh	r3, [r7, #2]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00f      	beq.n	8003e9c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003e82:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e90:	2b28      	cmp	r3, #40	; 0x28
 8003e92:	d003      	beq.n	8003e9c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003e9a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003e9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	da03      	bge.n	8003eac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003eaa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003eac:	887b      	ldrh	r3, [r7, #2]
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d103      	bne.n	8003eba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003eb8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003eba:	887b      	ldrh	r3, [r7, #2]
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d103      	bne.n	8003ec8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f043 0320 	orr.w	r3, r3, #32
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d103      	bne.n	8003ed6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6819      	ldr	r1, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	400a      	ands	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	d138      	bne.n	8003f7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e032      	b.n	8003f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6819      	ldr	r1, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 0201 	orr.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d139      	bne.n	8004014 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e033      	b.n	8004016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fdc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	021b      	lsls	r3, r3, #8
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <HAL_PWREx_GetVoltageRange+0x18>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004030:	4618      	mov	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40007000 	.word	0x40007000

08004040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800404e:	d130      	bne.n	80040b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004050:	4b23      	ldr	r3, [pc, #140]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405c:	d038      	beq.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800405e:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004068:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800406e:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2232      	movs	r2, #50	; 0x32
 8004074:	fb02 f303 	mul.w	r3, r2, r3
 8004078:	4a1b      	ldr	r2, [pc, #108]	; (80040e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	0c9b      	lsrs	r3, r3, #18
 8004080:	3301      	adds	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004084:	e002      	b.n	800408c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b01      	subs	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408c:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004098:	d102      	bne.n	80040a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f2      	bne.n	8004086 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ac:	d110      	bne.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e00f      	b.n	80040d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040be:	d007      	beq.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040c8:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40007000 	.word	0x40007000
 80040e4:	20000000 	.word	0x20000000
 80040e8:	431bde83 	.word	0x431bde83

080040ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f000 bc02 	b.w	8004904 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004100:	4b96      	ldr	r3, [pc, #600]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800410a:	4b94      	ldr	r3, [pc, #592]	; (800435c <HAL_RCC_OscConfig+0x270>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0310 	and.w	r3, r3, #16
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 80e4 	beq.w	80042ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_RCC_OscConfig+0x4c>
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	2b0c      	cmp	r3, #12
 800412c:	f040 808b 	bne.w	8004246 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b01      	cmp	r3, #1
 8004134:	f040 8087 	bne.w	8004246 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004138:	4b88      	ldr	r3, [pc, #544]	; (800435c <HAL_RCC_OscConfig+0x270>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_OscConfig+0x64>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e3d9      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1a      	ldr	r2, [r3, #32]
 8004154:	4b81      	ldr	r3, [pc, #516]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <HAL_RCC_OscConfig+0x7e>
 8004160:	4b7e      	ldr	r3, [pc, #504]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004168:	e005      	b.n	8004176 <HAL_RCC_OscConfig+0x8a>
 800416a:	4b7c      	ldr	r3, [pc, #496]	; (800435c <HAL_RCC_OscConfig+0x270>)
 800416c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004176:	4293      	cmp	r3, r2
 8004178:	d223      	bcs.n	80041c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fd8c 	bl	8004c9c <RCC_SetFlashLatencyFromMSIRange>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e3ba      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800418e:	4b73      	ldr	r3, [pc, #460]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a72      	ldr	r2, [pc, #456]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004194:	f043 0308 	orr.w	r3, r3, #8
 8004198:	6013      	str	r3, [r2, #0]
 800419a:	4b70      	ldr	r3, [pc, #448]	; (800435c <HAL_RCC_OscConfig+0x270>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	496d      	ldr	r1, [pc, #436]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ac:	4b6b      	ldr	r3, [pc, #428]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	021b      	lsls	r3, r3, #8
 80041ba:	4968      	ldr	r1, [pc, #416]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	604b      	str	r3, [r1, #4]
 80041c0:	e025      	b.n	800420e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041c2:	4b66      	ldr	r3, [pc, #408]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a65      	ldr	r2, [pc, #404]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80041c8:	f043 0308 	orr.w	r3, r3, #8
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	4960      	ldr	r1, [pc, #384]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e0:	4b5e      	ldr	r3, [pc, #376]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	495b      	ldr	r1, [pc, #364]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d109      	bne.n	800420e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fd4c 	bl	8004c9c <RCC_SetFlashLatencyFromMSIRange>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e37a      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800420e:	f000 fc81 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8004212:	4602      	mov	r2, r0
 8004214:	4b51      	ldr	r3, [pc, #324]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	4950      	ldr	r1, [pc, #320]	; (8004360 <HAL_RCC_OscConfig+0x274>)
 8004220:	5ccb      	ldrb	r3, [r1, r3]
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	4a4e      	ldr	r2, [pc, #312]	; (8004364 <HAL_RCC_OscConfig+0x278>)
 800422c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800422e:	4b4e      	ldr	r3, [pc, #312]	; (8004368 <HAL_RCC_OscConfig+0x27c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4618      	mov	r0, r3
 8004234:	f7fd fa20 	bl	8001678 <HAL_InitTick>
 8004238:	4603      	mov	r3, r0
 800423a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d052      	beq.n	80042e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	e35e      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d032      	beq.n	80042b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800424e:	4b43      	ldr	r3, [pc, #268]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a42      	ldr	r2, [pc, #264]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800425a:	f7fd fa5d 	bl	8001718 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004260:	e008      	b.n	8004274 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004262:	f7fd fa59 	bl	8001718 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d901      	bls.n	8004274 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e347      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004274:	4b39      	ldr	r3, [pc, #228]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f0      	beq.n	8004262 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a35      	ldr	r2, [pc, #212]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004286:	f043 0308 	orr.w	r3, r3, #8
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4b33      	ldr	r3, [pc, #204]	; (800435c <HAL_RCC_OscConfig+0x270>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4930      	ldr	r1, [pc, #192]	; (800435c <HAL_RCC_OscConfig+0x270>)
 800429a:	4313      	orrs	r3, r2
 800429c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800429e:	4b2f      	ldr	r3, [pc, #188]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	492b      	ldr	r1, [pc, #172]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]
 80042b2:	e01a      	b.n	80042ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a28      	ldr	r2, [pc, #160]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042c0:	f7fd fa2a 	bl	8001718 <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042c8:	f7fd fa26 	bl	8001718 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e314      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <HAL_RCC_OscConfig+0x270>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f0      	bne.n	80042c8 <HAL_RCC_OscConfig+0x1dc>
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d073      	beq.n	80043de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_OscConfig+0x21c>
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	d10e      	bne.n	8004320 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2b03      	cmp	r3, #3
 8004306:	d10b      	bne.n	8004320 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <HAL_RCC_OscConfig+0x270>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d063      	beq.n	80043dc <HAL_RCC_OscConfig+0x2f0>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d15f      	bne.n	80043dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e2f1      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004328:	d106      	bne.n	8004338 <HAL_RCC_OscConfig+0x24c>
 800432a:	4b0c      	ldr	r3, [pc, #48]	; (800435c <HAL_RCC_OscConfig+0x270>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a0b      	ldr	r2, [pc, #44]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e025      	b.n	8004384 <HAL_RCC_OscConfig+0x298>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d114      	bne.n	800436c <HAL_RCC_OscConfig+0x280>
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a05      	ldr	r2, [pc, #20]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b03      	ldr	r3, [pc, #12]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a02      	ldr	r2, [pc, #8]	; (800435c <HAL_RCC_OscConfig+0x270>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e013      	b.n	8004384 <HAL_RCC_OscConfig+0x298>
 800435c:	40021000 	.word	0x40021000
 8004360:	08005dc0 	.word	0x08005dc0
 8004364:	20000000 	.word	0x20000000
 8004368:	20000004 	.word	0x20000004
 800436c:	4ba0      	ldr	r3, [pc, #640]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a9f      	ldr	r2, [pc, #636]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	4b9d      	ldr	r3, [pc, #628]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a9c      	ldr	r2, [pc, #624]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 800437e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d013      	beq.n	80043b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd f9c4 	bl	8001718 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004394:	f7fd f9c0 	bl	8001718 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b64      	cmp	r3, #100	; 0x64
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e2ae      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043a6:	4b92      	ldr	r3, [pc, #584]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x2a8>
 80043b2:	e014      	b.n	80043de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fd f9b0 	bl	8001718 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043bc:	f7fd f9ac 	bl	8001718 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b64      	cmp	r3, #100	; 0x64
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e29a      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ce:	4b88      	ldr	r3, [pc, #544]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x2d0>
 80043da:	e000      	b.n	80043de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d060      	beq.n	80044ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_OscConfig+0x310>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b0c      	cmp	r3, #12
 80043f4:	d119      	bne.n	800442a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d116      	bne.n	800442a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043fc:	4b7c      	ldr	r3, [pc, #496]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <HAL_RCC_OscConfig+0x328>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e277      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004414:	4b76      	ldr	r3, [pc, #472]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	4973      	ldr	r1, [pc, #460]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004424:	4313      	orrs	r3, r2
 8004426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004428:	e040      	b.n	80044ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d023      	beq.n	800447a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004432:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a6e      	ldr	r2, [pc, #440]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443e:	f7fd f96b 	bl	8001718 <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004446:	f7fd f967 	bl	8001718 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e255      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004458:	4b65      	ldr	r3, [pc, #404]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004464:	4b62      	ldr	r3, [pc, #392]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	061b      	lsls	r3, r3, #24
 8004472:	495f      	ldr	r1, [pc, #380]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]
 8004478:	e018      	b.n	80044ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800447a:	4b5d      	ldr	r3, [pc, #372]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a5c      	ldr	r2, [pc, #368]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004486:	f7fd f947 	bl	8001718 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800448e:	f7fd f943 	bl	8001718 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e231      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a0:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f0      	bne.n	800448e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d03c      	beq.n	8004532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01c      	beq.n	80044fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c0:	4b4b      	ldr	r3, [pc, #300]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c6:	4a4a      	ldr	r2, [pc, #296]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fd f922 	bl	8001718 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d8:	f7fd f91e 	bl	8001718 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e20c      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ea:	4b41      	ldr	r3, [pc, #260]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80044ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ef      	beq.n	80044d8 <HAL_RCC_OscConfig+0x3ec>
 80044f8:	e01b      	b.n	8004532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fa:	4b3d      	ldr	r3, [pc, #244]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80044fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004500:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7fd f905 	bl	8001718 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004512:	f7fd f901 	bl	8001718 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e1ef      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004524:	4b32      	ldr	r3, [pc, #200]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1ef      	bne.n	8004512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80a6 	beq.w	800468c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004540:	2300      	movs	r3, #0
 8004542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004544:	4b2a      	ldr	r3, [pc, #168]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10d      	bne.n	800456c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004550:	4b27      	ldr	r3, [pc, #156]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004554:	4a26      	ldr	r2, [pc, #152]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 8004556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455a:	6593      	str	r3, [r2, #88]	; 0x58
 800455c:	4b24      	ldr	r3, [pc, #144]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004568:	2301      	movs	r3, #1
 800456a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456c:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <HAL_RCC_OscConfig+0x508>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d118      	bne.n	80045aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <HAL_RCC_OscConfig+0x508>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <HAL_RCC_OscConfig+0x508>)
 800457e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004584:	f7fd f8c8 	bl	8001718 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800458c:	f7fd f8c4 	bl	8001718 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e1b2      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459e:	4b15      	ldr	r3, [pc, #84]	; (80045f4 <HAL_RCC_OscConfig+0x508>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d108      	bne.n	80045c4 <HAL_RCC_OscConfig+0x4d8>
 80045b2:	4b0f      	ldr	r3, [pc, #60]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b8:	4a0d      	ldr	r2, [pc, #52]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c2:	e029      	b.n	8004618 <HAL_RCC_OscConfig+0x52c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d115      	bne.n	80045f8 <HAL_RCC_OscConfig+0x50c>
 80045cc:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	4a07      	ldr	r2, [pc, #28]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80045d4:	f043 0304 	orr.w	r3, r3, #4
 80045d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045dc:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	4a03      	ldr	r2, [pc, #12]	; (80045f0 <HAL_RCC_OscConfig+0x504>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ec:	e014      	b.n	8004618 <HAL_RCC_OscConfig+0x52c>
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40007000 	.word	0x40007000
 80045f8:	4b9a      	ldr	r3, [pc, #616]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	4a99      	ldr	r2, [pc, #612]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004608:	4b96      	ldr	r3, [pc, #600]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 800460a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800460e:	4a95      	ldr	r2, [pc, #596]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004610:	f023 0304 	bic.w	r3, r3, #4
 8004614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d016      	beq.n	800464e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fd f87a 	bl	8001718 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004626:	e00a      	b.n	800463e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004628:	f7fd f876 	bl	8001718 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	f241 3288 	movw	r2, #5000	; 0x1388
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e162      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463e:	4b89      	ldr	r3, [pc, #548]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0ed      	beq.n	8004628 <HAL_RCC_OscConfig+0x53c>
 800464c:	e015      	b.n	800467a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464e:	f7fd f863 	bl	8001718 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004654:	e00a      	b.n	800466c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f7fd f85f 	bl	8001718 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	; 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e14b      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800466c:	4b7d      	ldr	r3, [pc, #500]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1ed      	bne.n	8004656 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800467a:	7ffb      	ldrb	r3, [r7, #31]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d105      	bne.n	800468c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004680:	4b78      	ldr	r3, [pc, #480]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	4a77      	ldr	r2, [pc, #476]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d03c      	beq.n	8004712 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01c      	beq.n	80046da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046a0:	4b70      	ldr	r3, [pc, #448]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80046a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046a6:	4a6f      	ldr	r2, [pc, #444]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fd f832 	bl	8001718 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b8:	f7fd f82e 	bl	8001718 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e11c      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046ca:	4b66      	ldr	r3, [pc, #408]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80046cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <HAL_RCC_OscConfig+0x5cc>
 80046d8:	e01b      	b.n	8004712 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046da:	4b62      	ldr	r3, [pc, #392]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80046dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e0:	4a60      	ldr	r2, [pc, #384]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fd f815 	bl	8001718 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f2:	f7fd f811 	bl	8001718 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e0ff      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004704:	4b57      	ldr	r3, [pc, #348]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ef      	bne.n	80046f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80f3 	beq.w	8004902 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	2b02      	cmp	r3, #2
 8004722:	f040 80c9 	bne.w	80048b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004726:	4b4f      	ldr	r3, [pc, #316]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f003 0203 	and.w	r2, r3, #3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	429a      	cmp	r2, r3
 8004738:	d12c      	bne.n	8004794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	3b01      	subs	r3, #1
 8004746:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004748:	429a      	cmp	r2, r3
 800474a:	d123      	bne.n	8004794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004758:	429a      	cmp	r2, r3
 800475a:	d11b      	bne.n	8004794 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004768:	429a      	cmp	r2, r3
 800476a:	d113      	bne.n	8004794 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	3b01      	subs	r3, #1
 800477a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d109      	bne.n	8004794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	3b01      	subs	r3, #1
 800478e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004790:	429a      	cmp	r2, r3
 8004792:	d06b      	beq.n	800486c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d062      	beq.n	8004860 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800479a:	4b32      	ldr	r3, [pc, #200]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e0ac      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047aa:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a2d      	ldr	r2, [pc, #180]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80047b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047b6:	f7fc ffaf 	bl	8001718 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047be:	f7fc ffab 	bl	8001718 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e099      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d0:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1f0      	bne.n	80047be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047dc:	4b21      	ldr	r3, [pc, #132]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCC_OscConfig+0x77c>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047ec:	3a01      	subs	r2, #1
 80047ee:	0112      	lsls	r2, r2, #4
 80047f0:	4311      	orrs	r1, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047f6:	0212      	lsls	r2, r2, #8
 80047f8:	4311      	orrs	r1, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047fe:	0852      	lsrs	r2, r2, #1
 8004800:	3a01      	subs	r2, #1
 8004802:	0552      	lsls	r2, r2, #21
 8004804:	4311      	orrs	r1, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800480a:	0852      	lsrs	r2, r2, #1
 800480c:	3a01      	subs	r2, #1
 800480e:	0652      	lsls	r2, r2, #25
 8004810:	4311      	orrs	r1, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004816:	06d2      	lsls	r2, r2, #27
 8004818:	430a      	orrs	r2, r1
 800481a:	4912      	ldr	r1, [pc, #72]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 800481c:	4313      	orrs	r3, r2
 800481e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004820:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800482a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a0c      	ldr	r2, [pc, #48]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004836:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004838:	f7fc ff6e 	bl	8001718 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004840:	f7fc ff6a 	bl	8001718 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e058      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004852:	4b04      	ldr	r3, [pc, #16]	; (8004864 <HAL_RCC_OscConfig+0x778>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800485e:	e050      	b.n	8004902 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e04f      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
 8004864:	40021000 	.word	0x40021000
 8004868:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486c:	4b27      	ldr	r3, [pc, #156]	; (800490c <HAL_RCC_OscConfig+0x820>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d144      	bne.n	8004902 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004878:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_RCC_OscConfig+0x820>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a23      	ldr	r2, [pc, #140]	; (800490c <HAL_RCC_OscConfig+0x820>)
 800487e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004882:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004884:	4b21      	ldr	r3, [pc, #132]	; (800490c <HAL_RCC_OscConfig+0x820>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4a20      	ldr	r2, [pc, #128]	; (800490c <HAL_RCC_OscConfig+0x820>)
 800488a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800488e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004890:	f7fc ff42 	bl	8001718 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004898:	f7fc ff3e 	bl	8001718 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e02c      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048aa:	4b18      	ldr	r3, [pc, #96]	; (800490c <HAL_RCC_OscConfig+0x820>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x7ac>
 80048b6:	e024      	b.n	8004902 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d01f      	beq.n	80048fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <HAL_RCC_OscConfig+0x820>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a12      	ldr	r2, [pc, #72]	; (800490c <HAL_RCC_OscConfig+0x820>)
 80048c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fc ff25 	bl	8001718 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d2:	f7fc ff21 	bl	8001718 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e00f      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e4:	4b09      	ldr	r3, [pc, #36]	; (800490c <HAL_RCC_OscConfig+0x820>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_RCC_OscConfig+0x820>)
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	4905      	ldr	r1, [pc, #20]	; (800490c <HAL_RCC_OscConfig+0x820>)
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_OscConfig+0x824>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	60cb      	str	r3, [r1, #12]
 80048fc:	e001      	b.n	8004902 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3720      	adds	r7, #32
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40021000 	.word	0x40021000
 8004910:	feeefffc 	.word	0xfeeefffc

08004914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0e7      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b75      	ldr	r3, [pc, #468]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b72      	ldr	r3, [pc, #456]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0207 	bic.w	r2, r3, #7
 800493e:	4970      	ldr	r1, [pc, #448]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b6e      	ldr	r3, [pc, #440]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0cf      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d010      	beq.n	8004986 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	4b66      	ldr	r3, [pc, #408]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004970:	429a      	cmp	r2, r3
 8004972:	d908      	bls.n	8004986 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004974:	4b63      	ldr	r3, [pc, #396]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4960      	ldr	r1, [pc, #384]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d04c      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b03      	cmp	r3, #3
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800499a:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d121      	bne.n	80049ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0a6      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b2:	4b54      	ldr	r3, [pc, #336]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d115      	bne.n	80049ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e09a      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049ca:	4b4e      	ldr	r3, [pc, #312]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e08e      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049da:	4b4a      	ldr	r3, [pc, #296]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e086      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b46      	ldr	r3, [pc, #280]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4943      	ldr	r1, [pc, #268]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fc:	f7fc fe8c 	bl	8001718 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fc fe88 	bl	8001718 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e06e      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b3a      	ldr	r3, [pc, #232]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d010      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	4b31      	ldr	r3, [pc, #196]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d208      	bcs.n	8004a5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	492b      	ldr	r1, [pc, #172]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5a:	4b29      	ldr	r3, [pc, #164]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d210      	bcs.n	8004a8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a68:	4b25      	ldr	r3, [pc, #148]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f023 0207 	bic.w	r2, r3, #7
 8004a70:	4923      	ldr	r1, [pc, #140]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a78:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d001      	beq.n	8004a8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e036      	b.n	8004af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	4918      	ldr	r1, [pc, #96]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0308 	and.w	r3, r3, #8
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ab4:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4910      	ldr	r1, [pc, #64]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ac8:	f000 f824 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 8004acc:	4602      	mov	r2, r0
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	f003 030f 	and.w	r3, r3, #15
 8004ad8:	490b      	ldr	r1, [pc, #44]	; (8004b08 <HAL_RCC_ClockConfig+0x1f4>)
 8004ada:	5ccb      	ldrb	r3, [r1, r3]
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ae4:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <HAL_RCC_ClockConfig+0x1f8>)
 8004ae6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ae8:	4b09      	ldr	r3, [pc, #36]	; (8004b10 <HAL_RCC_ClockConfig+0x1fc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fc fdc3 	bl	8001678 <HAL_InitTick>
 8004af2:	4603      	mov	r3, r0
 8004af4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004af6:	7afb      	ldrb	r3, [r7, #11]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40022000 	.word	0x40022000
 8004b04:	40021000 	.word	0x40021000
 8004b08:	08005dc0 	.word	0x08005dc0
 8004b0c:	20000000 	.word	0x20000000
 8004b10:	20000004 	.word	0x20000004

08004b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b089      	sub	sp, #36	; 0x24
 8004b18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b22:	4b3e      	ldr	r3, [pc, #248]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b2c:	4b3b      	ldr	r3, [pc, #236]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x34>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b0c      	cmp	r3, #12
 8004b40:	d121      	bne.n	8004b86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d11e      	bne.n	8004b86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b48:	4b34      	ldr	r3, [pc, #208]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b54:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5a:	0a1b      	lsrs	r3, r3, #8
 8004b5c:	f003 030f 	and.w	r3, r3, #15
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e005      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b64:	4b2d      	ldr	r3, [pc, #180]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b70:	4a2b      	ldr	r2, [pc, #172]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10d      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b84:	e00a      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d102      	bne.n	8004b92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b8c:	4b25      	ldr	r3, [pc, #148]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e004      	b.n	8004b9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d101      	bne.n	8004b9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b98:	4b23      	ldr	r3, [pc, #140]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b0c      	cmp	r3, #12
 8004ba0:	d134      	bne.n	8004c0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ba2:	4b1e      	ldr	r3, [pc, #120]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d003      	beq.n	8004bba <HAL_RCC_GetSysClockFreq+0xa6>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d003      	beq.n	8004bc0 <HAL_RCC_GetSysClockFreq+0xac>
 8004bb8:	e005      	b.n	8004bc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bba:	4b1a      	ldr	r3, [pc, #104]	; (8004c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bbc:	617b      	str	r3, [r7, #20]
      break;
 8004bbe:	e005      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bc0:	4b19      	ldr	r3, [pc, #100]	; (8004c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bc2:	617b      	str	r3, [r7, #20]
      break;
 8004bc4:	e002      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	617b      	str	r3, [r7, #20]
      break;
 8004bca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bcc:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 0307 	and.w	r3, r3, #7
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	fb03 f202 	mul.w	r2, r3, r2
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	0e5b      	lsrs	r3, r3, #25
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c0c:	69bb      	ldr	r3, [r7, #24]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3724      	adds	r7, #36	; 0x24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	08005dd8 	.word	0x08005dd8
 8004c24:	00f42400 	.word	0x00f42400
 8004c28:	007a1200 	.word	0x007a1200

08004c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c30:	4b03      	ldr	r3, [pc, #12]	; (8004c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000000 	.word	0x20000000

08004c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c48:	f7ff fff0 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4904      	ldr	r1, [pc, #16]	; (8004c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000
 8004c6c:	08005dd0 	.word	0x08005dd0

08004c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c74:	f7ff ffda 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	0adb      	lsrs	r3, r3, #11
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4904      	ldr	r1, [pc, #16]	; (8004c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000
 8004c98:	08005dd0 	.word	0x08005dd0

08004c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ca8:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cb4:	f7ff f9b6 	bl	8004024 <HAL_PWREx_GetVoltageRange>
 8004cb8:	6178      	str	r0, [r7, #20]
 8004cba:	e014      	b.n	8004ce6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	4a24      	ldr	r2, [pc, #144]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc8:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004cd4:	f7ff f9a6 	bl	8004024 <HAL_PWREx_GetVoltageRange>
 8004cd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cda:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ce0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	d10b      	bne.n	8004d06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b80      	cmp	r3, #128	; 0x80
 8004cf2:	d919      	bls.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2ba0      	cmp	r3, #160	; 0xa0
 8004cf8:	d902      	bls.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	e013      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d00:	2301      	movs	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	e010      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d902      	bls.n	8004d12 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e00a      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b80      	cmp	r3, #128	; 0x80
 8004d16:	d102      	bne.n	8004d1e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d18:	2302      	movs	r3, #2
 8004d1a:	613b      	str	r3, [r7, #16]
 8004d1c:	e004      	b.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b70      	cmp	r3, #112	; 0x70
 8004d22:	d101      	bne.n	8004d28 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d24:	2301      	movs	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f023 0207 	bic.w	r2, r3, #7
 8004d30:	4909      	ldr	r1, [pc, #36]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d38:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d001      	beq.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40021000 	.word	0x40021000
 8004d58:	40022000 	.word	0x40022000

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d64:	2300      	movs	r3, #0
 8004d66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d68:	2300      	movs	r3, #0
 8004d6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d031      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d80:	d01a      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d82:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d86:	d814      	bhi.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d009      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d90:	d10f      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d92:	4b5d      	ldr	r3, [pc, #372]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	4a5c      	ldr	r2, [pc, #368]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d9e:	e00c      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa22 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 8004dac:	4603      	mov	r3, r0
 8004dae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004db0:	e003      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	74fb      	strb	r3, [r7, #19]
      break;
 8004db6:	e000      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dba:	7cfb      	ldrb	r3, [r7, #19]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dc0:	4b51      	ldr	r3, [pc, #324]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	494e      	ldr	r1, [pc, #312]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dd6:	e001      	b.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	7cfb      	ldrb	r3, [r7, #19]
 8004dda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 809e 	beq.w	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dea:	2300      	movs	r3, #0
 8004dec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004dee:	4b46      	ldr	r3, [pc, #280]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d101      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00d      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e04:	4b40      	ldr	r3, [pc, #256]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	4a3f      	ldr	r2, [pc, #252]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004e10:	4b3d      	ldr	r3, [pc, #244]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e18:	60bb      	str	r3, [r7, #8]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e20:	4b3a      	ldr	r3, [pc, #232]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a39      	ldr	r2, [pc, #228]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e2c:	f7fc fc74 	bl	8001718 <HAL_GetTick>
 8004e30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e32:	e009      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e34:	f7fc fc70 	bl	8001718 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d902      	bls.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	74fb      	strb	r3, [r7, #19]
        break;
 8004e46:	e005      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e48:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ef      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004e54:	7cfb      	ldrb	r3, [r7, #19]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d15a      	bne.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e5a:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01e      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d019      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e76:	4b24      	ldr	r3, [pc, #144]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e82:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e92:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ea2:	4a19      	ldr	r2, [pc, #100]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d016      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fc fc30 	bl	8001718 <HAL_GetTick>
 8004eb8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eba:	e00b      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fc fc2c 	bl	8001718 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d902      	bls.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	74fb      	strb	r3, [r7, #19]
            break;
 8004ed2:	e006      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0ec      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10b      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee8:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef6:	4904      	ldr	r1, [pc, #16]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004efe:	e009      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f00:	7cfb      	ldrb	r3, [r7, #19]
 8004f02:	74bb      	strb	r3, [r7, #18]
 8004f04:	e006      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004f06:	bf00      	nop
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f10:	7cfb      	ldrb	r3, [r7, #19]
 8004f12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f14:	7c7b      	ldrb	r3, [r7, #17]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d105      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f1a:	4b8d      	ldr	r3, [pc, #564]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1e:	4a8c      	ldr	r2, [pc, #560]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f32:	4b87      	ldr	r3, [pc, #540]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f023 0203 	bic.w	r2, r3, #3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	4983      	ldr	r1, [pc, #524]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f54:	4b7e      	ldr	r3, [pc, #504]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f023 020c 	bic.w	r2, r3, #12
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	497b      	ldr	r1, [pc, #492]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f76:	4b76      	ldr	r3, [pc, #472]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	4972      	ldr	r1, [pc, #456]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f98:	4b6d      	ldr	r3, [pc, #436]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	496a      	ldr	r1, [pc, #424]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fba:	4b65      	ldr	r3, [pc, #404]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	4961      	ldr	r1, [pc, #388]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fdc:	4b5c      	ldr	r3, [pc, #368]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	4959      	ldr	r1, [pc, #356]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ffe:	4b54      	ldr	r3, [pc, #336]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005004:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	4950      	ldr	r1, [pc, #320]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005020:	4b4b      	ldr	r3, [pc, #300]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005026:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	4948      	ldr	r1, [pc, #288]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005042:	4b43      	ldr	r3, [pc, #268]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	493f      	ldr	r1, [pc, #252]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d028      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005064:	4b3a      	ldr	r3, [pc, #232]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005072:	4937      	ldr	r1, [pc, #220]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005082:	d106      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005084:	4b32      	ldr	r3, [pc, #200]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	4a31      	ldr	r2, [pc, #196]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800508a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800508e:	60d3      	str	r3, [r2, #12]
 8005090:	e011      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005096:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800509a:	d10c      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	2101      	movs	r1, #1
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f8a4 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050ac:	7cfb      	ldrb	r3, [r7, #19]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80050b2:	7cfb      	ldrb	r3, [r7, #19]
 80050b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d028      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050c2:	4b23      	ldr	r3, [pc, #140]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d0:	491f      	ldr	r1, [pc, #124]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050e0:	d106      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	4a1a      	ldr	r2, [pc, #104]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80050e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ec:	60d3      	str	r3, [r2, #12]
 80050ee:	e011      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050f8:	d10c      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3304      	adds	r3, #4
 80050fe:	2101      	movs	r1, #1
 8005100:	4618      	mov	r0, r3
 8005102:	f000 f875 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 8005106:	4603      	mov	r3, r0
 8005108:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800510a:	7cfb      	ldrb	r3, [r7, #19]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005110:	7cfb      	ldrb	r3, [r7, #19]
 8005112:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02b      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005120:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512e:	4908      	ldr	r1, [pc, #32]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005130:	4313      	orrs	r3, r2
 8005132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800513a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800513e:	d109      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005140:	4b03      	ldr	r3, [pc, #12]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	4a02      	ldr	r2, [pc, #8]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800514a:	60d3      	str	r3, [r2, #12]
 800514c:	e014      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800515c:	d10c      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3304      	adds	r3, #4
 8005162:	2101      	movs	r1, #1
 8005164:	4618      	mov	r0, r3
 8005166:	f000 f843 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 800516a:	4603      	mov	r3, r0
 800516c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800516e:	7cfb      	ldrb	r3, [r7, #19]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005174:	7cfb      	ldrb	r3, [r7, #19]
 8005176:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01c      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005184:	4b19      	ldr	r3, [pc, #100]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005192:	4916      	ldr	r1, [pc, #88]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a2:	d10c      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	2102      	movs	r1, #2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f820 	bl	80051f0 <RCCEx_PLLSAI1_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051b4:	7cfb      	ldrb	r3, [r7, #19]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80051ba:	7cfb      	ldrb	r3, [r7, #19]
 80051bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80051ca:	4b08      	ldr	r3, [pc, #32]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	4904      	ldr	r1, [pc, #16]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80051e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000

080051f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051fe:	4b74      	ldr	r3, [pc, #464]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d018      	beq.n	800523c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800520a:	4b71      	ldr	r3, [pc, #452]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0203 	and.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d10d      	bne.n	8005236 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
       ||
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005222:	4b6b      	ldr	r3, [pc, #428]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
       ||
 8005232:	429a      	cmp	r2, r3
 8005234:	d047      	beq.n	80052c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
 800523a:	e044      	b.n	80052c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b03      	cmp	r3, #3
 8005242:	d018      	beq.n	8005276 <RCCEx_PLLSAI1_Config+0x86>
 8005244:	2b03      	cmp	r3, #3
 8005246:	d825      	bhi.n	8005294 <RCCEx_PLLSAI1_Config+0xa4>
 8005248:	2b01      	cmp	r3, #1
 800524a:	d002      	beq.n	8005252 <RCCEx_PLLSAI1_Config+0x62>
 800524c:	2b02      	cmp	r3, #2
 800524e:	d009      	beq.n	8005264 <RCCEx_PLLSAI1_Config+0x74>
 8005250:	e020      	b.n	8005294 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005252:	4b5f      	ldr	r3, [pc, #380]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d11d      	bne.n	800529a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005262:	e01a      	b.n	800529a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005264:	4b5a      	ldr	r3, [pc, #360]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800526c:	2b00      	cmp	r3, #0
 800526e:	d116      	bne.n	800529e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005274:	e013      	b.n	800529e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005276:	4b56      	ldr	r3, [pc, #344]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005282:	4b53      	ldr	r3, [pc, #332]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005292:	e006      	b.n	80052a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
      break;
 8005298:	e004      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800529a:	bf00      	nop
 800529c:	e002      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10d      	bne.n	80052c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052aa:	4b49      	ldr	r3, [pc, #292]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	430b      	orrs	r3, r1
 80052c0:	4943      	ldr	r1, [pc, #268]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d17c      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052cc:	4b40      	ldr	r3, [pc, #256]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a3f      	ldr	r2, [pc, #252]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d8:	f7fc fa1e 	bl	8001718 <HAL_GetTick>
 80052dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052de:	e009      	b.n	80052f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052e0:	f7fc fa1a 	bl	8001718 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d902      	bls.n	80052f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	73fb      	strb	r3, [r7, #15]
        break;
 80052f2:	e005      	b.n	8005300 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052f4:	4b36      	ldr	r3, [pc, #216]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1ef      	bne.n	80052e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d15f      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d110      	bne.n	800532e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800530c:	4b30      	ldr	r3, [pc, #192]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005314:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6892      	ldr	r2, [r2, #8]
 800531c:	0211      	lsls	r1, r2, #8
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68d2      	ldr	r2, [r2, #12]
 8005322:	06d2      	lsls	r2, r2, #27
 8005324:	430a      	orrs	r2, r1
 8005326:	492a      	ldr	r1, [pc, #168]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005328:	4313      	orrs	r3, r2
 800532a:	610b      	str	r3, [r1, #16]
 800532c:	e027      	b.n	800537e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d112      	bne.n	800535a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005334:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800533c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	0211      	lsls	r1, r2, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6912      	ldr	r2, [r2, #16]
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	3a01      	subs	r2, #1
 800534e:	0552      	lsls	r2, r2, #21
 8005350:	430a      	orrs	r2, r1
 8005352:	491f      	ldr	r1, [pc, #124]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005354:	4313      	orrs	r3, r2
 8005356:	610b      	str	r3, [r1, #16]
 8005358:	e011      	b.n	800537e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800535a:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005362:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6892      	ldr	r2, [r2, #8]
 800536a:	0211      	lsls	r1, r2, #8
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6952      	ldr	r2, [r2, #20]
 8005370:	0852      	lsrs	r2, r2, #1
 8005372:	3a01      	subs	r2, #1
 8005374:	0652      	lsls	r2, r2, #25
 8005376:	430a      	orrs	r2, r1
 8005378:	4915      	ldr	r1, [pc, #84]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800537a:	4313      	orrs	r3, r2
 800537c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a13      	ldr	r2, [pc, #76]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005388:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538a:	f7fc f9c5 	bl	8001718 <HAL_GetTick>
 800538e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005390:	e009      	b.n	80053a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005392:	f7fc f9c1 	bl	8001718 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d902      	bls.n	80053a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	73fb      	strb	r3, [r7, #15]
          break;
 80053a4:	e005      	b.n	80053b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ef      	beq.n	8005392 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	4903      	ldr	r1, [pc, #12]	; (80053d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40021000 	.word	0x40021000

080053d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e040      	b.n	8005468 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc f84a 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 fa82 	bl	8005924 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f825 	bl	8005470 <UART_SetConfig>
 8005426:	4603      	mov	r3, r0
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e01b      	b.n	8005468 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800543e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800544e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fb01 	bl	8005a68 <UART_CheckIdleState>
 8005466:	4603      	mov	r3, r0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005474:	b08a      	sub	sp, #40	; 0x28
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800547a:	2300      	movs	r3, #0
 800547c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	431a      	orrs	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	431a      	orrs	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	4313      	orrs	r3, r2
 8005496:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b9e      	ldr	r3, [pc, #632]	; (8005718 <UART_SetConfig+0x2a8>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054a8:	430b      	orrs	r3, r1
 80054aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a93      	ldr	r2, [pc, #588]	; (800571c <UART_SetConfig+0x2ac>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d004      	beq.n	80054dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d8:	4313      	orrs	r3, r2
 80054da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ec:	430a      	orrs	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a8a      	ldr	r2, [pc, #552]	; (8005720 <UART_SetConfig+0x2b0>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d126      	bne.n	8005548 <UART_SetConfig+0xd8>
 80054fa:	4b8a      	ldr	r3, [pc, #552]	; (8005724 <UART_SetConfig+0x2b4>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	2b03      	cmp	r3, #3
 8005506:	d81b      	bhi.n	8005540 <UART_SetConfig+0xd0>
 8005508:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <UART_SetConfig+0xa0>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005521 	.word	0x08005521
 8005514:	08005531 	.word	0x08005531
 8005518:	08005529 	.word	0x08005529
 800551c:	08005539 	.word	0x08005539
 8005520:	2301      	movs	r3, #1
 8005522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005526:	e0ab      	b.n	8005680 <UART_SetConfig+0x210>
 8005528:	2302      	movs	r3, #2
 800552a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552e:	e0a7      	b.n	8005680 <UART_SetConfig+0x210>
 8005530:	2304      	movs	r3, #4
 8005532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005536:	e0a3      	b.n	8005680 <UART_SetConfig+0x210>
 8005538:	2308      	movs	r3, #8
 800553a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553e:	e09f      	b.n	8005680 <UART_SetConfig+0x210>
 8005540:	2310      	movs	r3, #16
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005546:	e09b      	b.n	8005680 <UART_SetConfig+0x210>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a76      	ldr	r2, [pc, #472]	; (8005728 <UART_SetConfig+0x2b8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d138      	bne.n	80055c4 <UART_SetConfig+0x154>
 8005552:	4b74      	ldr	r3, [pc, #464]	; (8005724 <UART_SetConfig+0x2b4>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f003 030c 	and.w	r3, r3, #12
 800555c:	2b0c      	cmp	r3, #12
 800555e:	d82d      	bhi.n	80055bc <UART_SetConfig+0x14c>
 8005560:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <UART_SetConfig+0xf8>)
 8005562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005566:	bf00      	nop
 8005568:	0800559d 	.word	0x0800559d
 800556c:	080055bd 	.word	0x080055bd
 8005570:	080055bd 	.word	0x080055bd
 8005574:	080055bd 	.word	0x080055bd
 8005578:	080055ad 	.word	0x080055ad
 800557c:	080055bd 	.word	0x080055bd
 8005580:	080055bd 	.word	0x080055bd
 8005584:	080055bd 	.word	0x080055bd
 8005588:	080055a5 	.word	0x080055a5
 800558c:	080055bd 	.word	0x080055bd
 8005590:	080055bd 	.word	0x080055bd
 8005594:	080055bd 	.word	0x080055bd
 8005598:	080055b5 	.word	0x080055b5
 800559c:	2300      	movs	r3, #0
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a2:	e06d      	b.n	8005680 <UART_SetConfig+0x210>
 80055a4:	2302      	movs	r3, #2
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055aa:	e069      	b.n	8005680 <UART_SetConfig+0x210>
 80055ac:	2304      	movs	r3, #4
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b2:	e065      	b.n	8005680 <UART_SetConfig+0x210>
 80055b4:	2308      	movs	r3, #8
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ba:	e061      	b.n	8005680 <UART_SetConfig+0x210>
 80055bc:	2310      	movs	r3, #16
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c2:	e05d      	b.n	8005680 <UART_SetConfig+0x210>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a58      	ldr	r2, [pc, #352]	; (800572c <UART_SetConfig+0x2bc>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d125      	bne.n	800561a <UART_SetConfig+0x1aa>
 80055ce:	4b55      	ldr	r3, [pc, #340]	; (8005724 <UART_SetConfig+0x2b4>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055d8:	2b30      	cmp	r3, #48	; 0x30
 80055da:	d016      	beq.n	800560a <UART_SetConfig+0x19a>
 80055dc:	2b30      	cmp	r3, #48	; 0x30
 80055de:	d818      	bhi.n	8005612 <UART_SetConfig+0x1a2>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d00a      	beq.n	80055fa <UART_SetConfig+0x18a>
 80055e4:	2b20      	cmp	r3, #32
 80055e6:	d814      	bhi.n	8005612 <UART_SetConfig+0x1a2>
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <UART_SetConfig+0x182>
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d008      	beq.n	8005602 <UART_SetConfig+0x192>
 80055f0:	e00f      	b.n	8005612 <UART_SetConfig+0x1a2>
 80055f2:	2300      	movs	r3, #0
 80055f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f8:	e042      	b.n	8005680 <UART_SetConfig+0x210>
 80055fa:	2302      	movs	r3, #2
 80055fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005600:	e03e      	b.n	8005680 <UART_SetConfig+0x210>
 8005602:	2304      	movs	r3, #4
 8005604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005608:	e03a      	b.n	8005680 <UART_SetConfig+0x210>
 800560a:	2308      	movs	r3, #8
 800560c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005610:	e036      	b.n	8005680 <UART_SetConfig+0x210>
 8005612:	2310      	movs	r3, #16
 8005614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005618:	e032      	b.n	8005680 <UART_SetConfig+0x210>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3f      	ldr	r2, [pc, #252]	; (800571c <UART_SetConfig+0x2ac>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d12a      	bne.n	800567a <UART_SetConfig+0x20a>
 8005624:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <UART_SetConfig+0x2b4>)
 8005626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800562e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005632:	d01a      	beq.n	800566a <UART_SetConfig+0x1fa>
 8005634:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005638:	d81b      	bhi.n	8005672 <UART_SetConfig+0x202>
 800563a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563e:	d00c      	beq.n	800565a <UART_SetConfig+0x1ea>
 8005640:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005644:	d815      	bhi.n	8005672 <UART_SetConfig+0x202>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <UART_SetConfig+0x1e2>
 800564a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800564e:	d008      	beq.n	8005662 <UART_SetConfig+0x1f2>
 8005650:	e00f      	b.n	8005672 <UART_SetConfig+0x202>
 8005652:	2300      	movs	r3, #0
 8005654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005658:	e012      	b.n	8005680 <UART_SetConfig+0x210>
 800565a:	2302      	movs	r3, #2
 800565c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005660:	e00e      	b.n	8005680 <UART_SetConfig+0x210>
 8005662:	2304      	movs	r3, #4
 8005664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005668:	e00a      	b.n	8005680 <UART_SetConfig+0x210>
 800566a:	2308      	movs	r3, #8
 800566c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005670:	e006      	b.n	8005680 <UART_SetConfig+0x210>
 8005672:	2310      	movs	r3, #16
 8005674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005678:	e002      	b.n	8005680 <UART_SetConfig+0x210>
 800567a:	2310      	movs	r3, #16
 800567c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a25      	ldr	r2, [pc, #148]	; (800571c <UART_SetConfig+0x2ac>)
 8005686:	4293      	cmp	r3, r2
 8005688:	f040 808a 	bne.w	80057a0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800568c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005690:	2b08      	cmp	r3, #8
 8005692:	d824      	bhi.n	80056de <UART_SetConfig+0x26e>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <UART_SetConfig+0x22c>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056c1 	.word	0x080056c1
 80056a0:	080056df 	.word	0x080056df
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056df 	.word	0x080056df
 80056ac:	080056cf 	.word	0x080056cf
 80056b0:	080056df 	.word	0x080056df
 80056b4:	080056df 	.word	0x080056df
 80056b8:	080056df 	.word	0x080056df
 80056bc:	080056d7 	.word	0x080056d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c0:	f7ff fac0 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 80056c4:	61f8      	str	r0, [r7, #28]
        break;
 80056c6:	e010      	b.n	80056ea <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b19      	ldr	r3, [pc, #100]	; (8005730 <UART_SetConfig+0x2c0>)
 80056ca:	61fb      	str	r3, [r7, #28]
        break;
 80056cc:	e00d      	b.n	80056ea <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7ff fa21 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 80056d2:	61f8      	str	r0, [r7, #28]
        break;
 80056d4:	e009      	b.n	80056ea <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056da:	61fb      	str	r3, [r7, #28]
        break;
 80056dc:	e005      	b.n	80056ea <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8109 	beq.w	8005904 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4613      	mov	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	4413      	add	r3, r2
 80056fc:	69fa      	ldr	r2, [r7, #28]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d305      	bcc.n	800570e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	429a      	cmp	r2, r3
 800570c:	d912      	bls.n	8005734 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005714:	e0f6      	b.n	8005904 <UART_SetConfig+0x494>
 8005716:	bf00      	nop
 8005718:	efff69f3 	.word	0xefff69f3
 800571c:	40008000 	.word	0x40008000
 8005720:	40013800 	.word	0x40013800
 8005724:	40021000 	.word	0x40021000
 8005728:	40004400 	.word	0x40004400
 800572c:	40004800 	.word	0x40004800
 8005730:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2200      	movs	r2, #0
 8005738:	461c      	mov	r4, r3
 800573a:	4615      	mov	r5, r2
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	022b      	lsls	r3, r5, #8
 8005746:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800574a:	0222      	lsls	r2, r4, #8
 800574c:	68f9      	ldr	r1, [r7, #12]
 800574e:	6849      	ldr	r1, [r1, #4]
 8005750:	0849      	lsrs	r1, r1, #1
 8005752:	2000      	movs	r0, #0
 8005754:	4688      	mov	r8, r1
 8005756:	4681      	mov	r9, r0
 8005758:	eb12 0a08 	adds.w	sl, r2, r8
 800575c:	eb43 0b09 	adc.w	fp, r3, r9
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800576e:	4650      	mov	r0, sl
 8005770:	4659      	mov	r1, fp
 8005772:	f7fa fd2b 	bl	80001cc <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4613      	mov	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005784:	d308      	bcc.n	8005798 <UART_SetConfig+0x328>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800578c:	d204      	bcs.n	8005798 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	e0b5      	b.n	8005904 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800579e:	e0b1      	b.n	8005904 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057a8:	d15d      	bne.n	8005866 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80057aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057ae:	2b08      	cmp	r3, #8
 80057b0:	d827      	bhi.n	8005802 <UART_SetConfig+0x392>
 80057b2:	a201      	add	r2, pc, #4	; (adr r2, 80057b8 <UART_SetConfig+0x348>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057dd 	.word	0x080057dd
 80057bc:	080057e5 	.word	0x080057e5
 80057c0:	080057ed 	.word	0x080057ed
 80057c4:	08005803 	.word	0x08005803
 80057c8:	080057f3 	.word	0x080057f3
 80057cc:	08005803 	.word	0x08005803
 80057d0:	08005803 	.word	0x08005803
 80057d4:	08005803 	.word	0x08005803
 80057d8:	080057fb 	.word	0x080057fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057dc:	f7ff fa32 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 80057e0:	61f8      	str	r0, [r7, #28]
        break;
 80057e2:	e014      	b.n	800580e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057e4:	f7ff fa44 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 80057e8:	61f8      	str	r0, [r7, #28]
        break;
 80057ea:	e010      	b.n	800580e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057ec:	4b4c      	ldr	r3, [pc, #304]	; (8005920 <UART_SetConfig+0x4b0>)
 80057ee:	61fb      	str	r3, [r7, #28]
        break;
 80057f0:	e00d      	b.n	800580e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057f2:	f7ff f98f 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 80057f6:	61f8      	str	r0, [r7, #28]
        break;
 80057f8:	e009      	b.n	800580e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057fe:	61fb      	str	r3, [r7, #28]
        break;
 8005800:	e005      	b.n	800580e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800580c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d077      	beq.n	8005904 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	005a      	lsls	r2, r3, #1
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	085b      	lsrs	r3, r3, #1
 800581e:	441a      	add	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	fbb2 f3f3 	udiv	r3, r2, r3
 8005828:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b0f      	cmp	r3, #15
 800582e:	d916      	bls.n	800585e <UART_SetConfig+0x3ee>
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005836:	d212      	bcs.n	800585e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f023 030f 	bic.w	r3, r3, #15
 8005840:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	b29b      	uxth	r3, r3
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	b29a      	uxth	r2, r3
 800584e:	8afb      	ldrh	r3, [r7, #22]
 8005850:	4313      	orrs	r3, r2
 8005852:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	8afa      	ldrh	r2, [r7, #22]
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	e052      	b.n	8005904 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005864:	e04e      	b.n	8005904 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800586a:	2b08      	cmp	r3, #8
 800586c:	d827      	bhi.n	80058be <UART_SetConfig+0x44e>
 800586e:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <UART_SetConfig+0x404>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	08005899 	.word	0x08005899
 8005878:	080058a1 	.word	0x080058a1
 800587c:	080058a9 	.word	0x080058a9
 8005880:	080058bf 	.word	0x080058bf
 8005884:	080058af 	.word	0x080058af
 8005888:	080058bf 	.word	0x080058bf
 800588c:	080058bf 	.word	0x080058bf
 8005890:	080058bf 	.word	0x080058bf
 8005894:	080058b7 	.word	0x080058b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005898:	f7ff f9d4 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 800589c:	61f8      	str	r0, [r7, #28]
        break;
 800589e:	e014      	b.n	80058ca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058a0:	f7ff f9e6 	bl	8004c70 <HAL_RCC_GetPCLK2Freq>
 80058a4:	61f8      	str	r0, [r7, #28]
        break;
 80058a6:	e010      	b.n	80058ca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a8:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <UART_SetConfig+0x4b0>)
 80058aa:	61fb      	str	r3, [r7, #28]
        break;
 80058ac:	e00d      	b.n	80058ca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ae:	f7ff f931 	bl	8004b14 <HAL_RCC_GetSysClockFreq>
 80058b2:	61f8      	str	r0, [r7, #28]
        break;
 80058b4:	e009      	b.n	80058ca <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ba:	61fb      	str	r3, [r7, #28]
        break;
 80058bc:	e005      	b.n	80058ca <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80058be:	2300      	movs	r3, #0
 80058c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058c8:	bf00      	nop
    }

    if (pclk != 0U)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d019      	beq.n	8005904 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	085a      	lsrs	r2, r3, #1
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	441a      	add	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b0f      	cmp	r3, #15
 80058e8:	d909      	bls.n	80058fe <UART_SetConfig+0x48e>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f0:	d205      	bcs.n	80058fe <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	60da      	str	r2, [r3, #12]
 80058fc:	e002      	b.n	8005904 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005910:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005914:	4618      	mov	r0, r3
 8005916:	3728      	adds	r7, #40	; 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800591e:	bf00      	nop
 8005920:	00f42400 	.word	0x00f42400

08005924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00a      	beq.n	80059d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00a      	beq.n	80059f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01a      	beq.n	8005a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a22:	d10a      	bne.n	8005a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b098      	sub	sp, #96	; 0x60
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a78:	f7fb fe4e 	bl	8001718 <HAL_GetTick>
 8005a7c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d12e      	bne.n	8005aea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a94:	2200      	movs	r2, #0
 8005a96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f88c 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d021      	beq.n	8005aea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aba:	653b      	str	r3, [r7, #80]	; 0x50
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ac4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e6      	bne.n	8005aa6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e062      	b.n	8005bb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d149      	bne.n	8005b8c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b00:	2200      	movs	r2, #0
 8005b02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f856 	bl	8005bb8 <UART_WaitOnFlagUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d03c      	beq.n	8005b8c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b30:	633b      	str	r3, [r7, #48]	; 0x30
 8005b32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3308      	adds	r3, #8
 8005b4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3308      	adds	r3, #8
 8005b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b64:	61fa      	str	r2, [r7, #28]
 8005b66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	69b9      	ldr	r1, [r7, #24]
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	617b      	str	r3, [r7, #20]
   return(result);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e5      	bne.n	8005b44 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e011      	b.n	8005bb0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3758      	adds	r7, #88	; 0x58
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc8:	e049      	b.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd0:	d045      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd2:	f7fb fda1 	bl	8001718 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	69ba      	ldr	r2, [r7, #24]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d302      	bcc.n	8005be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e048      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d031      	beq.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d110      	bne.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f838 	bl	8005c86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2208      	movs	r2, #8
 8005c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e029      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c38:	d111      	bne.n	8005c5e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f81e 	bl	8005c86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e00f      	b.n	8005c7e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4013      	ands	r3, r2
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d0a6      	beq.n	8005bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b095      	sub	sp, #84	; 0x54
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
 8005cae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005cb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cb4:	e841 2300 	strex	r3, r2, [r1]
 8005cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1e6      	bne.n	8005c8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f023 0301 	bic.w	r3, r3, #1
 8005cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3308      	adds	r3, #8
 8005cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d118      	bne.n	8005d2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f023 0310 	bic.w	r3, r3, #16
 8005d10:	647b      	str	r3, [r7, #68]	; 0x44
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d1a:	61bb      	str	r3, [r7, #24]
 8005d1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6979      	ldr	r1, [r7, #20]
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	613b      	str	r3, [r7, #16]
   return(result);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e6      	bne.n	8005cfc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d42:	bf00      	nop
 8005d44:	3754      	adds	r7, #84	; 0x54
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <memset>:
 8005d4e:	4402      	add	r2, r0
 8005d50:	4603      	mov	r3, r0
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d100      	bne.n	8005d58 <memset+0xa>
 8005d56:	4770      	bx	lr
 8005d58:	f803 1b01 	strb.w	r1, [r3], #1
 8005d5c:	e7f9      	b.n	8005d52 <memset+0x4>
	...

08005d60 <__libc_init_array>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	4d0d      	ldr	r5, [pc, #52]	; (8005d98 <__libc_init_array+0x38>)
 8005d64:	4c0d      	ldr	r4, [pc, #52]	; (8005d9c <__libc_init_array+0x3c>)
 8005d66:	1b64      	subs	r4, r4, r5
 8005d68:	10a4      	asrs	r4, r4, #2
 8005d6a:	2600      	movs	r6, #0
 8005d6c:	42a6      	cmp	r6, r4
 8005d6e:	d109      	bne.n	8005d84 <__libc_init_array+0x24>
 8005d70:	4d0b      	ldr	r5, [pc, #44]	; (8005da0 <__libc_init_array+0x40>)
 8005d72:	4c0c      	ldr	r4, [pc, #48]	; (8005da4 <__libc_init_array+0x44>)
 8005d74:	f000 f818 	bl	8005da8 <_init>
 8005d78:	1b64      	subs	r4, r4, r5
 8005d7a:	10a4      	asrs	r4, r4, #2
 8005d7c:	2600      	movs	r6, #0
 8005d7e:	42a6      	cmp	r6, r4
 8005d80:	d105      	bne.n	8005d8e <__libc_init_array+0x2e>
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d88:	4798      	blx	r3
 8005d8a:	3601      	adds	r6, #1
 8005d8c:	e7ee      	b.n	8005d6c <__libc_init_array+0xc>
 8005d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d92:	4798      	blx	r3
 8005d94:	3601      	adds	r6, #1
 8005d96:	e7f2      	b.n	8005d7e <__libc_init_array+0x1e>
 8005d98:	08005e10 	.word	0x08005e10
 8005d9c:	08005e10 	.word	0x08005e10
 8005da0:	08005e10 	.word	0x08005e10
 8005da4:	08005e14 	.word	0x08005e14

08005da8 <_init>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr

08005db4 <_fini>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr
