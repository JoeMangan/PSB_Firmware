
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f84  08006f84  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f84  08006f84  00016f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f8c  08006f8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f8c  08006f8c  00016f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000000c  08006fa0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08006fa0  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e9c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ed  00000000  00000000  00033f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00036408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed1  00000000  00000000  000376c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b26  00000000  00000000  00038599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152e4  00000000  00000000  0003b0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9094  00000000  00000000  000503a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005070  00000000  00000000  00129438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0012e4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006f24 	.word	0x08006f24

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08006f24 	.word	0x08006f24

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f001 fd35 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_MspInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f83b 	bl	800054c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9c9 	bl	800086c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f997 	bl	800080c <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80004de:	f000 f907 	bl	80006f0 <MX_I2C3_Init>
  MX_I2C2_Init();
 80004e2:	f000 f8c5 	bl	8000670 <MX_I2C2_Init>
  MX_I2C1_Init();
 80004e6:	f000 f883 	bl	80005f0 <MX_I2C1_Init>
  MX_TIM2_Init();
 80004ea:	f000 f941 	bl	8000770 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  // Initialize the system
  i2c_slv_init(); // Initialize the I2C slave module
 80004ee:	f001 fa13 	bl	8001918 <i2c_slv_init>
  bool ijc_init_status = ijc_detector_init();
 80004f2:	f000 fced 	bl	8000ed0 <ijc_detector_init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]

  if(ijc_init_status == EXIT_FAILURE)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d000      	beq.n	8000502 <main+0x3a>
  {
	  while(1);
 8000500:	e7fe      	b.n	8000500 <main+0x38>
  }



  ht_enable_set(GPIO_PIN_SET);
 8000502:	2001      	movs	r0, #1
 8000504:	f000 fb9c 	bl	8000c40 <ht_enable_set>




  // Start the timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000508:	480d      	ldr	r0, [pc, #52]	; (8000540 <main+0x78>)
 800050a:	f005 fc57 	bl	8005dbc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ijc_dssd_ramp_loop();
 800050e:	f000 fba9 	bl	8000c64 <ijc_dssd_ramp_loop>
	  cea_dssd_ramp_loop();
 8000512:	f000 fc43 	bl	8000d9c <cea_dssd_ramp_loop>

	  if (Xfer_Complete ==1)                            // Check for the I2C read complete to have been executed
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <main+0x7c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d1f7      	bne.n	800050e <main+0x46>
	  {

		  i2c_slv_cmd_rx_tx_handle();
 800051e:	f000 fe7f 	bl	8001220 <i2c_slv_cmd_rx_tx_handle>

		  HAL_Delay(1); 								  // Delay for 1 ms
 8000522:	2001      	movs	r0, #1
 8000524:	f001 fd86 	bl	8002034 <HAL_Delay>
		  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) // Put I2C peripheral in listen mode process
 8000528:	4807      	ldr	r0, [pc, #28]	; (8000548 <main+0x80>)
 800052a:	f002 fcd9 	bl	8002ee0 <HAL_I2C_EnableListen_IT>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <main+0x70>
		  {
			  Error_Handler();
 8000534:	f001 fadc 	bl	8001af0 <Error_Handler>
		  }
		  Xfer_Complete =0;
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <main+0x7c>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
	  ijc_dssd_ramp_loop();
 800053e:	e7e6      	b.n	800050e <main+0x46>
 8000540:	2000012c 	.word	0x2000012c
 8000544:	2000002c 	.word	0x2000002c
 8000548:	20000030 	.word	0x20000030

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b096      	sub	sp, #88	; 0x58
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2244      	movs	r2, #68	; 0x44
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 fcb5 	bl	8006eca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000572:	f004 fa01 	bl	8004978 <HAL_PWREx_ControlVoltageScaling>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800057c:	f001 fab8 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	2310      	movs	r3, #16
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	2302      	movs	r3, #2
 8000594:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000596:	2301      	movs	r3, #1
 8000598:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800059a:	230a      	movs	r3, #10
 800059c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059e:	2307      	movs	r3, #7
 80005a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 fa38 	bl	8004a24 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ba:	f001 fa99 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2303      	movs	r3, #3
 80005c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d2:	463b      	mov	r3, r7
 80005d4:	2104      	movs	r1, #4
 80005d6:	4618      	mov	r0, r3
 80005d8:	f004 fe38 	bl	800524c <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005e2:	f001 fa85 	bl	8001af0 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3758      	adds	r7, #88	; 0x58
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
	...

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_I2C1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_I2C1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_I2C1_Init+0x74>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <MX_I2C1_Init+0x7c>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 50;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_I2C1_Init+0x74>)
 8000602:	2232      	movs	r2, #50	; 0x32
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_I2C1_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <MX_I2C1_Init+0x74>)
 800062c:	f002 f84a 	bl	80026c4 <HAL_I2C_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000636:	f001 fa5b 	bl	8001af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <MX_I2C1_Init+0x74>)
 800063e:	f004 f8f5 	bl	800482c <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000648:	f001 fa52 	bl	8001af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_I2C1_Init+0x74>)
 8000650:	f004 f937 	bl	80048c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f001 fa49 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000030 	.word	0x20000030
 8000668:	40005400 	.word	0x40005400
 800066c:	10909cec 	.word	0x10909cec

08000670 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_I2C2_Init+0x74>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <MX_I2C2_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_I2C2_Init+0x74>)
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <MX_I2C2_Init+0x7c>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_I2C2_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_I2C2_Init+0x74>)
 8000688:	2201      	movs	r2, #1
 800068a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_I2C2_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_I2C2_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006aa:	480e      	ldr	r0, [pc, #56]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006ac:	f002 f80a 	bl	80026c4 <HAL_I2C_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006b6:	f001 fa1b 	bl	8001af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ba:	2100      	movs	r1, #0
 80006bc:	4809      	ldr	r0, [pc, #36]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006be:	f004 f8b5 	bl	800482c <HAL_I2CEx_ConfigAnalogFilter>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006c8:	f001 fa12 	bl	8001af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_I2C2_Init+0x74>)
 80006d0:	f004 f8f7 	bl	80048c2 <HAL_I2CEx_ConfigDigitalFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006da:	f001 fa09 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000084 	.word	0x20000084
 80006e8:	40005800 	.word	0x40005800
 80006ec:	10909cec 	.word	0x10909cec

080006f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	; (8000764 <MX_I2C3_Init+0x74>)
 80006f6:	4a1c      	ldr	r2, [pc, #112]	; (8000768 <MX_I2C3_Init+0x78>)
 80006f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <MX_I2C3_Init+0x74>)
 80006fc:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_I2C3_Init+0x7c>)
 80006fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000700:	4b18      	ldr	r3, [pc, #96]	; (8000764 <MX_I2C3_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000706:	4b17      	ldr	r3, [pc, #92]	; (8000764 <MX_I2C3_Init+0x74>)
 8000708:	2201      	movs	r2, #1
 800070a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b15      	ldr	r3, [pc, #84]	; (8000764 <MX_I2C3_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <MX_I2C3_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_I2C3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C3_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <MX_I2C3_Init+0x74>)
 800072c:	f001 ffca 	bl	80026c4 <HAL_I2C_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000736:	f001 f9db 	bl	8001af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4809      	ldr	r0, [pc, #36]	; (8000764 <MX_I2C3_Init+0x74>)
 800073e:	f004 f875 	bl	800482c <HAL_I2CEx_ConfigAnalogFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000748:	f001 f9d2 	bl	8001af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_I2C3_Init+0x74>)
 8000750:	f004 f8b7 	bl	80048c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800075a:	f001 f9c9 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000d8 	.word	0x200000d8
 8000768:	40005c00 	.word	0x40005c00
 800076c:	10909cec 	.word	0x10909cec

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_TIM2_Init+0x98>)
 8000790:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <MX_TIM2_Init+0x98>)
 8000798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800079c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_TIM2_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_TIM2_Init+0x98>)
 80007a6:	f649 4240 	movw	r2, #40000	; 0x9c40
 80007aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_TIM2_Init+0x98>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_TIM2_Init+0x98>)
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <MX_TIM2_Init+0x98>)
 80007ba:	f005 faa7 	bl	8005d0c <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80007c4:	f001 f994 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_TIM2_Init+0x98>)
 80007d6:	f005 fc47 	bl	8006068 <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007e0:	f001 f986 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_TIM2_Init+0x98>)
 80007f2:	f005 fe29 	bl	8006448 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007fc:	f001 f978 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000012c 	.word	0x2000012c

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART2_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART2_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART2_UART_Init+0x58>)
 8000850:	f005 fe7e 	bl	8006550 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f001 f949 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000178 	.word	0x20000178
 8000868:	40004400 	.word	0x40004400

0800086c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000872:	f107 0314 	add.w	r3, r7, #20
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b46      	ldr	r3, [pc, #280]	; (800099c <MX_GPIO_Init+0x130>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a45      	ldr	r2, [pc, #276]	; (800099c <MX_GPIO_Init+0x130>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b43      	ldr	r3, [pc, #268]	; (800099c <MX_GPIO_Init+0x130>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	4b40      	ldr	r3, [pc, #256]	; (800099c <MX_GPIO_Init+0x130>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a3f      	ldr	r2, [pc, #252]	; (800099c <MX_GPIO_Init+0x130>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b3d      	ldr	r3, [pc, #244]	; (800099c <MX_GPIO_Init+0x130>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	4b3a      	ldr	r3, [pc, #232]	; (800099c <MX_GPIO_Init+0x130>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a39      	ldr	r2, [pc, #228]	; (800099c <MX_GPIO_Init+0x130>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b37      	ldr	r3, [pc, #220]	; (800099c <MX_GPIO_Init+0x130>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	4b34      	ldr	r3, [pc, #208]	; (800099c <MX_GPIO_Init+0x130>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a33      	ldr	r2, [pc, #204]	; (800099c <MX_GPIO_Init+0x130>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b31      	ldr	r3, [pc, #196]	; (800099c <MX_GPIO_Init+0x130>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	21b0      	movs	r1, #176	; 0xb0
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f001 feb9 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 80008ee:	2200      	movs	r2, #0
 80008f0:	f243 31e0 	movw	r1, #13280	; 0x33e0
 80008f4:	482a      	ldr	r0, [pc, #168]	; (80009a0 <MX_GPIO_Init+0x134>)
 80008f6:	f001 feb3 	bl	8002660 <HAL_GPIO_WritePin>
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIMING_PIN_GPIO_Port, TIMING_PIN_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	4829      	ldr	r0, [pc, #164]	; (80009a4 <MX_GPIO_Init+0x138>)
 8000900:	f001 feae 	bl	8002660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4822      	ldr	r0, [pc, #136]	; (80009a4 <MX_GPIO_Init+0x138>)
 800091c:	f001 fd0e 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000920:	23b0      	movs	r3, #176	; 0xb0
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f001 fcff 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800093e:	2340      	movs	r3, #64	; 0x40
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f001 fcf2 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_HT_Pin LD4_Pin ENABLE_1_FPGA_Pin ENABLE_2_IJC_Pin
                           ENABLE_3_CEA_Pin ENABLE_4_Pin ENABLE_5_UCD_Pin */
  GPIO_InitStruct.Pin = ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 8000958:	f243 33e0 	movw	r3, #13280	; 0x33e0
 800095c:	617b      	str	r3, [r7, #20]
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <MX_GPIO_Init+0x134>)
 8000972:	f001 fce3 	bl	800233c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIMING_PIN_Pin */
  GPIO_InitStruct.Pin = TIMING_PIN_Pin;
 8000976:	2340      	movs	r3, #64	; 0x40
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIMING_PIN_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_GPIO_Init+0x138>)
 800098e:	f001 fcd5 	bl	800233c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	; 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000400 	.word	0x48000400
 80009a4:	48000800 	.word	0x48000800

080009a8 <i2c_read>:
}
*/
// ###############################################

HAL_StatusTypeDef i2c_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af02      	add	r7, sp, #8
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	461a      	mov	r2, r3
 80009b4:	460b      	mov	r3, r1
 80009b6:	72fb      	strb	r3, [r7, #11]
 80009b8:	4613      	mov	r3, r2
 80009ba:	813b      	strh	r3, [r7, #8]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(hi2c, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 80009bc:	7afb      	ldrb	r3, [r7, #11]
 80009be:	b299      	uxth	r1, r3
 80009c0:	893b      	ldrh	r3, [r7, #8]
 80009c2:	220a      	movs	r2, #10
 80009c4:	9200      	str	r2, [sp, #0]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f002 f82f 	bl	8002a2c <HAL_I2C_Master_Receive>
 80009ce:	4603      	mov	r3, r0
 80009d0:	75fb      	strb	r3, [r7, #23]
	return(ret);
 80009d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <i2c_write>:

HAL_StatusTypeDef i2c_write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af02      	add	r7, sp, #8
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	461a      	mov	r2, r3
 80009e8:	460b      	mov	r3, r1
 80009ea:	72fb      	strb	r3, [r7, #11]
 80009ec:	4613      	mov	r3, r2
 80009ee:	813b      	strh	r3, [r7, #8]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b299      	uxth	r1, r3
 80009f4:	893b      	ldrh	r3, [r7, #8]
 80009f6:	220a      	movs	r2, #10
 80009f8:	9200      	str	r2, [sp, #0]
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f001 fefd 	bl	80027fc <HAL_I2C_Master_Transmit>
 8000a02:	4603      	mov	r3, r0
 8000a04:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <i2c_write_read>:

HAL_StatusTypeDef i2c_write_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	607a      	str	r2, [r7, #4]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	72fb      	strb	r3, [r7, #11]
 8000a20:	4613      	mov	r3, r2
 8000a22:	813b      	strh	r3, [r7, #8]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	d802      	bhi.n	8000a3c <i2c_write_read+0x2c>
 8000a36:	2064      	movs	r0, #100	; 0x64
 8000a38:	f001 fafc 	bl	8002034 <HAL_Delay>
		status = i2c_write(hi2c, dev_addr, out_ptr, countTX);						// Perform I2C operation
 8000a3c:	893b      	ldrh	r3, [r7, #8]
 8000a3e:	7af9      	ldrb	r1, [r7, #11]
 8000a40:	687a      	ldr	r2, [r7, #4]
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff ffca 	bl	80009dc <i2c_write>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8000a52:	7d7b      	ldrb	r3, [r7, #21]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d102      	bne.n	8000a5e <i2c_write_read+0x4e>
 8000a58:	7dfb      	ldrb	r3, [r7, #23]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1e8      	bne.n	8000a30 <i2c_write_read+0x20>

	if(status == HAL_ERROR){return(status);}
 8000a5e:	7d7b      	ldrb	r3, [r7, #21]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d101      	bne.n	8000a68 <i2c_write_read+0x58>
 8000a64:	7d7b      	ldrb	r3, [r7, #21]
 8000a66:	e01a      	b.n	8000a9e <i2c_write_read+0x8e>

	HAL_Delay(5);
 8000a68:	2005      	movs	r0, #5
 8000a6a:	f001 fae3 	bl	8002034 <HAL_Delay>

	do
	{
		// Read operation
		status =  i2c_read(hi2c, dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 8000a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a70:	7af9      	ldrb	r1, [r7, #11]
 8000a72:	6a3a      	ldr	r2, [r7, #32]
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f7ff ff97 	bl	80009a8 <i2c_read>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8000a7e:	7dbb      	ldrb	r3, [r7, #22]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d802      	bhi.n	8000a8a <i2c_write_read+0x7a>
 8000a84:	2064      	movs	r0, #100	; 0x64
 8000a86:	f001 fad5 	bl	8002034 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8000a8a:	7dbb      	ldrb	r3, [r7, #22]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8000a90:	7d7b      	ldrb	r3, [r7, #21]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d102      	bne.n	8000a9c <i2c_write_read+0x8c>
 8000a96:	7dbb      	ldrb	r3, [r7, #22]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1e8      	bne.n	8000a6e <i2c_write_read+0x5e>

	return(status);
 8000a9c:	7d7b      	ldrb	r3, [r7, #21]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <max6911_read>:
//************************************
//        Chips and Devs
//************************************

uint16_t max6911_read(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t cmd_msb, uint8_t cmd_lsb)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af02      	add	r7, sp, #8
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	70fb      	strb	r3, [r7, #3]
 8000aba:	460b      	mov	r3, r1
 8000abc:	70bb      	strb	r3, [r7, #2]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	707b      	strb	r3, [r7, #1]
	uint16_t temp_data = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	81fb      	strh	r3, [r7, #14]
	uint8_t rx_data[2] = {0x00, 0x00};
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	81bb      	strh	r3, [r7, #12]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000aca:	2300      	movs	r3, #0
 8000acc:	813b      	strh	r3, [r7, #8]

	// Init the device ctrl reg1
	max6911_set_ctrl1_register(INIT_WITH_CURRENT_GAIN_8);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 f864 	bl	8000b9c <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000ad4:	230a      	movs	r3, #10
 8000ad6:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <max6911_read+0xec>)
 8000ada:	7b1b      	ldrb	r3, [r3, #12]
 8000adc:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000ade:	f107 0208 	add.w	r2, r7, #8
 8000ae2:	78f9      	ldrb	r1, [r7, #3]
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff78 	bl	80009dc <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000aec:	230b      	movs	r3, #11
 8000aee:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <max6911_read+0xec>)
 8000af2:	7b5b      	ldrb	r3, [r3, #13]
 8000af4:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000af6:	f107 0208 	add.w	r2, r7, #8
 8000afa:	78f9      	ldrb	r1, [r7, #3]
 8000afc:	2302      	movs	r3, #2
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff ff6c 	bl	80009dc <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the device for normal fast read operation
	max6911_set_ctrl1_register(FASTREAD_NORMAL_OPERATION);
 8000b04:	2001      	movs	r0, #1
 8000b06:	f000 f849 	bl	8000b9c <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	; (8000b94 <max6911_read+0xec>)
 8000b10:	7b1b      	ldrb	r3, [r3, #12]
 8000b12:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000b14:	f107 0208 	add.w	r2, r7, #8
 8000b18:	78f9      	ldrb	r1, [r7, #3]
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff5d 	bl	80009dc <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000b22:	230b      	movs	r3, #11
 8000b24:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <max6911_read+0xec>)
 8000b28:	7b5b      	ldrb	r3, [r3, #13]
 8000b2a:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000b2c:	f107 0208 	add.w	r2, r7, #8
 8000b30:	78f9      	ldrb	r1, [r7, #3]
 8000b32:	2302      	movs	r3, #2
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff ff51 	bl	80009dc <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the read for MSB and LSB
	status = i2c_write_read(hi2c, device_addr, &cmd_msb, 1, &rx_data[0], 1);
 8000b3a:	1cba      	adds	r2, r7, #2
 8000b3c:	78f9      	ldrb	r1, [r7, #3]
 8000b3e:	2301      	movs	r3, #1
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2301      	movs	r3, #1
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ff60 	bl	8000a10 <i2c_write_read>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <max6911_read+0xf0>)
 8000b56:	701a      	strb	r2, [r3, #0]
	status = i2c_write_read(hi2c, device_addr, &cmd_lsb, 1, &rx_data[1], 1);
 8000b58:	1c7a      	adds	r2, r7, #1
 8000b5a:	78f9      	ldrb	r1, [r7, #3]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	3301      	adds	r3, #1
 8000b66:	9300      	str	r3, [sp, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff50 	bl	8000a10 <i2c_write_read>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <max6911_read+0xf0>)
 8000b76:	701a      	strb	r2, [r3, #0]

	temp_data = (rx_data[0]<<8) | (rx_data[1]);
 8000b78:	7b3b      	ldrb	r3, [r7, #12]
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	b21a      	sxth	r2, r3
 8000b7e:	7b7b      	ldrb	r3, [r7, #13]
 8000b80:	b21b      	sxth	r3, r3
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b21b      	sxth	r3, r3
 8000b86:	81fb      	strh	r3, [r7, #14]
	return(temp_data);
 8000b88:	89fb      	ldrh	r3, [r7, #14]

}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000228 	.word	0x20000228
 8000b98:	20000200 	.word	0x20000200

08000b9c <max6911_set_ctrl1_register>:


void max6911_set_ctrl1_register(_max6911_ctrl selector)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]

	switch(selector)
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d002      	beq.n	8000bb2 <max6911_set_ctrl1_register+0x16>
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d01f      	beq.n	8000bf0 <max6911_set_ctrl1_register+0x54>
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		default:
			break;
 8000bb0:	e03c      	b.n	8000c2c <max6911_set_ctrl1_register+0x90>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000bb4:	7b13      	ldrb	r3, [r2, #12]
 8000bb6:	f36f 03c3 	bfc	r3, #3, #1
 8000bba:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000bbc:	4a1f      	ldr	r2, [pc, #124]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000bbe:	7b13      	ldrb	r3, [r2, #12]
 8000bc0:	f36f 1304 	bfc	r3, #4, #1
 8000bc4:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000bc6:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000bc8:	7b13      	ldrb	r3, [r2, #12]
 8000bca:	f36f 1347 	bfc	r3, #5, #3
 8000bce:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_A_GAIN_8x_DEC;
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000bd2:	7b13      	ldrb	r3, [r2, #12]
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	f361 0302 	bfi	r3, r1, #0, #3
 8000bda:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000bdc:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000bde:	7b53      	ldrb	r3, [r2, #13]
 8000be0:	f36f 03c3 	bfc	r3, #3, #1
 8000be4:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000be6:	4a15      	ldr	r2, [pc, #84]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000be8:	7b53      	ldrb	r3, [r2, #13]
 8000bea:	f36f 0382 	bfc	r3, #2, #1
 8000bee:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000bf2:	7b13      	ldrb	r3, [r2, #12]
 8000bf4:	f36f 03c3 	bfc	r3, #3, #1
 8000bf8:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000bfc:	7b13      	ldrb	r3, [r2, #12]
 8000bfe:	f36f 1304 	bfc	r3, #4, #1
 8000c02:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000c06:	7b13      	ldrb	r3, [r2, #12]
 8000c08:	f36f 1347 	bfc	r3, #5, #3
 8000c0c:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_FAST_READ_DEC;
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000c10:	7b13      	ldrb	r3, [r2, #12]
 8000c12:	f043 0307 	orr.w	r3, r3, #7
 8000c16:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000c18:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000c1a:	7b53      	ldrb	r3, [r2, #13]
 8000c1c:	f36f 03c3 	bfc	r3, #3, #1
 8000c20:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000c22:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <max6911_set_ctrl1_register+0xa0>)
 8000c24:	7b53      	ldrb	r3, [r2, #13]
 8000c26:	f36f 0382 	bfc	r3, #2, #1
 8000c2a:	7353      	strb	r3, [r2, #13]
			break;
 8000c2c:	bf00      	nop
	}
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	20000228 	.word	0x20000228

08000c40 <ht_enable_set>:
//            HV
//************************************

// Board enable functions
void ht_enable_set(bool gpio_state)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_GPIO_Port, ENABLE_HT_Pin, gpio_state);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c52:	4803      	ldr	r0, [pc, #12]	; (8000c60 <ht_enable_set+0x20>)
 8000c54:	f001 fd04 	bl	8002660 <HAL_GPIO_WritePin>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	48000400 	.word	0x48000400

08000c64 <ijc_dssd_ramp_loop>:

void ijc_dssd_ramp_loop(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the IJC voltage

	uint16_t max6911_measured_voltage = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000c6e:	2300      	movs	r3, #0
 8000c70:	803b      	strh	r3, [r7, #0]
	uint8_t rx_data = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	717b      	strb	r3, [r7, #5]


	if(ijc_detector.ramp_flag == true && ijc_detector.hv_loop_enable == true)
 8000c76:	4b45      	ldr	r3, [pc, #276]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f000 8082 	beq.w	8000d84 <ijc_dssd_ramp_loop+0x120>
 8000c80:	4b42      	ldr	r3, [pc, #264]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d07d      	beq.n	8000d84 <ijc_dssd_ramp_loop+0x120>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000c88:	2303      	movs	r3, #3
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	21e4      	movs	r1, #228	; 0xe4
 8000c8e:	4840      	ldr	r0, [pc, #256]	; (8000d90 <ijc_dssd_ramp_loop+0x12c>)
 8000c90:	f7ff ff0a 	bl	8000aa8 <max6911_read>
 8000c94:	4603      	mov	r3, r0
 8000c96:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	091b      	lsrs	r3, r3, #4
 8000c9c:	80fb      	strh	r3, [r7, #6]

		// Get the current digipot value
		status = ijc_i2c_read(ADDR_IJC_DIGIPOT, &ijc_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	493c      	ldr	r1, [pc, #240]	; (8000d94 <ijc_dssd_ramp_loop+0x130>)
 8000ca2:	2058      	movs	r0, #88	; 0x58
 8000ca4:	f000 f9ac 	bl	8001000 <ijc_i2c_read>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	4b3a      	ldr	r3, [pc, #232]	; (8000d98 <ijc_dssd_ramp_loop+0x134>)
 8000cae:	701a      	strb	r2, [r3, #0]
		//ijc_detector.hv_digipot_value = rx_data;

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((ijc_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (ijc_detector.hv_targate_value - ijc_detector.hv_lower_deadband)))
 8000cb0:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000cb2:	891b      	ldrh	r3, [r3, #8]
 8000cb4:	88fa      	ldrh	r2, [r7, #6]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d220      	bcs.n	8000cfc <ijc_dssd_ramp_loop+0x98>
 8000cba:	88fa      	ldrh	r2, [r7, #6]
 8000cbc:	4b33      	ldr	r3, [pc, #204]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000cbe:	891b      	ldrh	r3, [r3, #8]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4b32      	ldr	r3, [pc, #200]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000cc4:	795b      	ldrb	r3, [r3, #5]
 8000cc6:	1acb      	subs	r3, r1, r3
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	da17      	bge.n	8000cfc <ijc_dssd_ramp_loop+0x98>
		{
			// If the target is greater than the current value, increment the digipot value
			if (ijc_detector.hv_digipot_value <= 149)
 8000ccc:	4b2f      	ldr	r3, [pc, #188]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000cce:	799b      	ldrb	r3, [r3, #6]
 8000cd0:	2b95      	cmp	r3, #149	; 0x95
 8000cd2:	d854      	bhi.n	8000d7e <ijc_dssd_ramp_loop+0x11a>
			{
				ijc_detector.hv_digipot_value ++;
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000cd6:	799b      	ldrb	r3, [r3, #6]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b2b      	ldr	r3, [pc, #172]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000cde:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000ce2:	799b      	ldrb	r3, [r3, #6]
 8000ce4:	707b      	strb	r3, [r7, #1]
				//uint8_t command[2] = {0x00, 0x00};
				//uint8_t data[2]    = {0x00, 0x00};
				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	2301      	movs	r3, #1
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <ijc_dssd_ramp_loop+0x130>)
 8000cee:	2202      	movs	r2, #2
 8000cf0:	2058      	movs	r0, #88	; 0x58
 8000cf2:	f000 f99f 	bl	8001034 <ijc_i2c_write_read>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	713b      	strb	r3, [r7, #4]
			if (ijc_detector.hv_digipot_value <= 149)
 8000cfa:	e040      	b.n	8000d7e <ijc_dssd_ramp_loop+0x11a>
				//ijc_detector.hv_digipot_value = data[0]<<8 | data[1];
			}
		}
		else if ((ijc_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (ijc_detector.hv_targate_value + ijc_detector.hv_upper_deadband)))
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000cfe:	891b      	ldrh	r3, [r3, #8]
 8000d00:	88fa      	ldrh	r2, [r7, #6]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d920      	bls.n	8000d48 <ijc_dssd_ramp_loop+0xe4>
 8000d06:	88fa      	ldrh	r2, [r7, #6]
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d0a:	891b      	ldrh	r3, [r3, #8]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d10:	791b      	ldrb	r3, [r3, #4]
 8000d12:	440b      	add	r3, r1
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dd17      	ble.n	8000d48 <ijc_dssd_ramp_loop+0xe4>
		{
			if (ijc_detector.hv_digipot_value >= 1)
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d1a:	799b      	ldrb	r3, [r3, #6]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d02e      	beq.n	8000d7e <ijc_dssd_ramp_loop+0x11a>
			{
				// If the target is less than the current value
				ijc_detector.hv_digipot_value --;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d22:	799b      	ldrb	r3, [r3, #6]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d2a:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d2e:	799b      	ldrb	r3, [r3, #6]
 8000d30:	707b      	strb	r3, [r7, #1]
				//uint8_t command[2] = {0x00, 0x00};
				//uint8_t data[2]    = {0x00, 0x00};
				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000d32:	4639      	mov	r1, r7
 8000d34:	2301      	movs	r3, #1
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <ijc_dssd_ramp_loop+0x130>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	2058      	movs	r0, #88	; 0x58
 8000d3e:	f000 f979 	bl	8001034 <ijc_i2c_write_read>
 8000d42:	4603      	mov	r3, r0
 8000d44:	70fb      	strb	r3, [r7, #3]
			if (ijc_detector.hv_digipot_value >= 1)
 8000d46:	e01a      	b.n	8000d7e <ijc_dssd_ramp_loop+0x11a>
				//ijc_detector.hv_digipot_value = data[0]<<8 | data[1];
			}
		}
		else if((ijc_detector.hv_targate_value == 0) && (ijc_detector.hv_digipot_value > 0))
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d4a:	891b      	ldrh	r3, [r3, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d116      	bne.n	8000d7e <ijc_dssd_ramp_loop+0x11a>
 8000d50:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d52:	799b      	ldrb	r3, [r3, #6]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d012      	beq.n	8000d7e <ijc_dssd_ramp_loop+0x11a>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			ijc_detector.hv_digipot_value --;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d5a:	799b      	ldrb	r3, [r3, #6]
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d62:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = ijc_detector.hv_digipot_value;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d66:	799b      	ldrb	r3, [r3, #6]
 8000d68:	707b      	strb	r3, [r7, #1]
			//uint8_t command[2] = {0x00, 0x00};
			//uint8_t data[2]    = {0x00, 0x00};
			HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000d6a:	4639      	mov	r1, r7
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <ijc_dssd_ramp_loop+0x130>)
 8000d72:	2202      	movs	r2, #2
 8000d74:	2058      	movs	r0, #88	; 0x58
 8000d76:	f000 f95d 	bl	8001034 <ijc_i2c_write_read>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	70bb      	strb	r3, [r7, #2]
			//ijc_detector.hv_digipot_value = data[0]<<8 | data[1];
		}
		ijc_detector.ramp_flag  = false;
 8000d7e:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <ijc_dssd_ramp_loop+0x128>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
	}
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000210 	.word	0x20000210
 8000d90:	20000084 	.word	0x20000084
 8000d94:	20000216 	.word	0x20000216
 8000d98:	20000200 	.word	0x20000200

08000d9c <cea_dssd_ramp_loop>:

void cea_dssd_ramp_loop(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the CEA voltage

	uint16_t max6911_measured_voltage = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000da6:	2300      	movs	r3, #0
 8000da8:	803b      	strh	r3, [r7, #0]
	uint8_t rx_data = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	717b      	strb	r3, [r7, #5]


	if(cea_detector.ramp_flag == true)
 8000dae:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d04f      	beq.n	8000e56 <cea_dssd_ramp_loop+0xba>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c2, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000db6:	2303      	movs	r3, #3
 8000db8:	2202      	movs	r2, #2
 8000dba:	21e0      	movs	r1, #224	; 0xe0
 8000dbc:	4829      	ldr	r0, [pc, #164]	; (8000e64 <cea_dssd_ramp_loop+0xc8>)
 8000dbe:	f7ff fe73 	bl	8000aa8 <max6911_read>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	091b      	lsrs	r3, r3, #4
 8000dca:	80fb      	strh	r3, [r7, #6]

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4926      	ldr	r1, [pc, #152]	; (8000e68 <cea_dssd_ramp_loop+0xcc>)
 8000dd0:	2058      	movs	r0, #88	; 0x58
 8000dd2:	f000 f9c3 	bl	800115c <cea_i2c_read>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <cea_dssd_ramp_loop+0xd0>)
 8000ddc:	701a      	strb	r2, [r3, #0]
		//cea_detector.hv_digipot_value = rx_data;

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if(cea_detector.hv_targate_value > max6911_measured_voltage)
 8000dde:	4b20      	ldr	r3, [pc, #128]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000de0:	891b      	ldrh	r3, [r3, #8]
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d217      	bcs.n	8000e18 <cea_dssd_ramp_loop+0x7c>
		{
			// If the target is greater than the current value, increment the digipot value
			if (cea_detector.hv_digipot_value <= 149)
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000dea:	799b      	ldrb	r3, [r3, #6]
 8000dec:	2b95      	cmp	r3, #149	; 0x95
 8000dee:	d82f      	bhi.n	8000e50 <cea_dssd_ramp_loop+0xb4>
			{
				cea_detector.hv_digipot_value ++;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000df2:	799b      	ldrb	r3, [r3, #6]
 8000df4:	3301      	adds	r3, #1
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000dfa:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000dfe:	799b      	ldrb	r3, [r3, #6]
 8000e00:	707b      	strb	r3, [r7, #1]
				//uint8_t command[2] = {0x00, 0x00};
				//uint8_t data[2]    = {0x00, 0x00};
				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000e02:	4639      	mov	r1, r7
 8000e04:	2301      	movs	r3, #1
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <cea_dssd_ramp_loop+0xcc>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	2058      	movs	r0, #88	; 0x58
 8000e0e:	f000 f9bf 	bl	8001190 <cea_i2c_write_read>
 8000e12:	4603      	mov	r3, r0
 8000e14:	70fb      	strb	r3, [r7, #3]
 8000e16:	e01b      	b.n	8000e50 <cea_dssd_ramp_loop+0xb4>
				//cea_detector.hv_digipot_value = data[0]<<8 | data[1];
			}
		}
		else if (cea_detector.hv_targate_value < max6911_measured_voltage)
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000e1a:	891b      	ldrh	r3, [r3, #8]
 8000e1c:	88fa      	ldrh	r2, [r7, #6]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d916      	bls.n	8000e50 <cea_dssd_ramp_loop+0xb4>
		{
			if (cea_detector.hv_digipot_value >= 1)
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000e24:	799b      	ldrb	r3, [r3, #6]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d012      	beq.n	8000e50 <cea_dssd_ramp_loop+0xb4>
			{
				// If the target is less than the current value
				cea_detector.hv_digipot_value --;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000e2c:	799b      	ldrb	r3, [r3, #6]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000e34:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000e38:	799b      	ldrb	r3, [r3, #6]
 8000e3a:	707b      	strb	r3, [r7, #1]
				//uint8_t command[2] = {0x00, 0x00};
				//uint8_t data[2]    = {0x00, 0x00};
				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	2301      	movs	r3, #1
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <cea_dssd_ramp_loop+0xcc>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	2058      	movs	r0, #88	; 0x58
 8000e48:	f000 f9a2 	bl	8001190 <cea_i2c_write_read>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	713b      	strb	r3, [r7, #4]
				//cea_detector.hv_digipot_value = data[0]<<8 | data[1];
			}
		}
		cea_detector.ramp_flag  = false;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <cea_dssd_ramp_loop+0xc4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
	}
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000021c 	.word	0x2000021c
 8000e64:	20000084 	.word	0x20000084
 8000e68:	20000222 	.word	0x20000222
 8000e6c:	20000200 	.word	0x20000200

08000e70 <ucd_board_enable_set>:
//            UCD PSB
//************************************

// Board enable functions
void ucd_board_enable_set(bool gpio_state)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin, gpio_state);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e82:	4805      	ldr	r0, [pc, #20]	; (8000e98 <ucd_board_enable_set+0x28>)
 8000e84:	f001 fbec 	bl	8002660 <HAL_GPIO_WritePin>
	ucd_detector.board_enable_state = gpio_state;
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <ucd_board_enable_set+0x2c>)
 8000e8e:	815a      	strh	r2, [r3, #10]

}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	48000400 	.word	0x48000400
 8000e9c:	20000204 	.word	0x20000204

08000ea0 <ucd_board_enable_get>:

bool ucd_board_enable_get(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	ucd_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin);
 8000ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <ucd_board_enable_get+0x28>)
 8000eaa:	f001 fbc1 	bl	8002630 <HAL_GPIO_ReadPin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <ucd_board_enable_get+0x2c>)
 8000eb4:	815a      	strh	r2, [r3, #10]
	return(ucd_detector.board_enable_state);
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <ucd_board_enable_get+0x2c>)
 8000eb8:	895b      	ldrh	r3, [r3, #10]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	bf14      	ite	ne
 8000ebe:	2301      	movne	r3, #1
 8000ec0:	2300      	moveq	r3, #0
 8000ec2:	b2db      	uxtb	r3, r3
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	20000204 	.word	0x20000204

08000ed0 <ijc_detector_init>:
//            IJC PSB
//************************************

// Init function
bool ijc_detector_init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af02      	add	r7, sp, #8

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71fb      	strb	r3, [r7, #7]

	// Init the IJC lab detector
	ijc_detector.ramp_flag            = 0;
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <ijc_detector_init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
	ijc_detector.hv_max_digipot_value = IJC_MAX_DIGIPOT_VALUE - 1;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <ijc_detector_init+0x94>)
 8000ee2:	2295      	movs	r2, #149	; 0x95
 8000ee4:	709a      	strb	r2, [r3, #2]
	ijc_detector.hv_min_digipot_value = IJC_MIN_DIGIPOT_VALUE - 1;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <ijc_detector_init+0x94>)
 8000ee8:	22ff      	movs	r2, #255	; 0xff
 8000eea:	70da      	strb	r2, [r3, #3]
	ijc_detector.hv_lower_deadband 	  = IJC_LOWER_DEADBAND;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <ijc_detector_init+0x94>)
 8000eee:	222b      	movs	r2, #43	; 0x2b
 8000ef0:	715a      	strb	r2, [r3, #5]
	ijc_detector.hv_upper_deadband 	  = IJC_UPPER_DEADBAND;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <ijc_detector_init+0x94>)
 8000ef4:	222b      	movs	r2, #43	; 0x2b
 8000ef6:	711a      	strb	r2, [r3, #4]
	ijc_detector.hv_digipot_value 	  = 0;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <ijc_detector_init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	719a      	strb	r2, [r3, #6]
	ijc_detector.hv_targate_value 	  = 0;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <ijc_detector_init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	811a      	strh	r2, [r3, #8]
	ijc_detector.board_enable_state   = 0;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <ijc_detector_init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	815a      	strh	r2, [r3, #10]
	ijc_detector.hv_loop_enable 	  = 1;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <ijc_detector_init+0x94>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	705a      	strb	r2, [r3, #1]


	// Configure the board enable state
	ht_enable_set(GPIO_PIN_RESET);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f7ff fe95 	bl	8000c40 <ht_enable_set>
	ijc_board_enable_set(GPIO_PIN_SET);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 f828 	bl	8000f6c <ijc_board_enable_set>

	HAL_Delay(100);
 8000f1c:	2064      	movs	r0, #100	; 0x64
 8000f1e:	f001 f889 	bl	8002034 <HAL_Delay>

	// Reset the digipot value to 0
	uint8_t command[2] = {0x00, 0x00};
 8000f22:	2300      	movs	r3, #0
 8000f24:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef digipot_set_stataus = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &command[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000f26:	1d39      	adds	r1, r7, #4
 8000f28:	2301      	movs	r3, #1
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <ijc_detector_init+0x98>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	2058      	movs	r0, #88	; 0x58
 8000f32:	f000 f87f 	bl	8001034 <ijc_i2c_write_read>
 8000f36:	4603      	mov	r3, r0
 8000f38:	71bb      	strb	r3, [r7, #6]


	if (ijc_detector.hv_digipot_value != 0 || digipot_set_stataus == HAL_ERROR)
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <ijc_detector_init+0x94>)
 8000f3c:	799b      	ldrb	r3, [r3, #6]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d102      	bne.n	8000f48 <ijc_detector_init+0x78>
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d106      	bne.n	8000f56 <ijc_detector_init+0x86>
	{
		// Disable the loop enable flag
		ijc_detector.hv_loop_enable = false;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <ijc_detector_init+0x94>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	705a      	strb	r2, [r3, #1]
		status = EXIT_FAILURE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	71fb      	strb	r3, [r7, #7]
		return(status);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	e002      	b.n	8000f5c <ijc_detector_init+0x8c>
	}
	else
	{
		status = EXIT_SUCCESS;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
		return(status);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000210 	.word	0x20000210
 8000f68:	20000216 	.word	0x20000216

08000f6c <ijc_board_enable_set>:

// Board enable functions
void ijc_board_enable_set(bool gpio_state)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, gpio_state);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	4805      	ldr	r0, [pc, #20]	; (8000f94 <ijc_board_enable_set+0x28>)
 8000f7e:	f001 fb6f 	bl	8002660 <HAL_GPIO_WritePin>
	ijc_detector.board_enable_state = gpio_state;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <ijc_board_enable_set+0x2c>)
 8000f88:	815a      	strh	r2, [r3, #10]
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	48000400 	.word	0x48000400
 8000f98:	20000210 	.word	0x20000210

08000f9c <ijc_board_enable_get>:

bool ijc_board_enable_get(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	ijc_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin);
 8000fa0:	2140      	movs	r1, #64	; 0x40
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <ijc_board_enable_get+0x28>)
 8000fa4:	f001 fb44 	bl	8002630 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <ijc_board_enable_get+0x2c>)
 8000fae:	815a      	strh	r2, [r3, #10]
	return(ijc_detector.board_enable_state);
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <ijc_board_enable_get+0x2c>)
 8000fb2:	895b      	ldrh	r3, [r3, #10]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	bf14      	ite	ne
 8000fb8:	2301      	movne	r3, #1
 8000fba:	2300      	moveq	r3, #0
 8000fbc:	b2db      	uxtb	r3, r3
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	48000400 	.word	0x48000400
 8000fc8:	20000210 	.word	0x20000210

08000fcc <ijc_i2c_write>:

HAL_StatusTypeDef ijc_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c2, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	220a      	movs	r2, #10
 8000fe4:	9200      	str	r2, [sp, #0]
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4804      	ldr	r0, [pc, #16]	; (8000ffc <ijc_i2c_write+0x30>)
 8000fea:	f001 fc07 	bl	80027fc <HAL_I2C_Master_Transmit>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000084 	.word	0x20000084

08001000 <ijc_i2c_read>:

HAL_StatusTypeDef ijc_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c2, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	b299      	uxth	r1, r3
 8001014:	88bb      	ldrh	r3, [r7, #4]
 8001016:	220a      	movs	r2, #10
 8001018:	9200      	str	r2, [sp, #0]
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <ijc_i2c_read+0x30>)
 800101e:	f001 fd05 	bl	8002a2c <HAL_I2C_Master_Receive>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000084 	.word	0x20000084

08001034 <ijc_i2c_write_read>:
}
*/
// ###############################################

HAL_StatusTypeDef ijc_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	4613      	mov	r3, r2
 8001044:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 800104a:	2305      	movs	r3, #5
 800104c:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 800104e:	2305      	movs	r3, #5
 8001050:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8001052:	7dfb      	ldrb	r3, [r7, #23]
 8001054:	2b04      	cmp	r3, #4
 8001056:	d802      	bhi.n	800105e <ijc_i2c_write_read+0x2a>
 8001058:	2064      	movs	r0, #100	; 0x64
 800105a:	f000 ffeb 	bl	8002034 <HAL_Delay>
		status = ijc_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 800105e:	89ba      	ldrh	r2, [r7, #12]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ffb1 	bl	8000fcc <ijc_i2c_write>
 800106a:	4603      	mov	r3, r0
 800106c:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	3b01      	subs	r3, #1
 8001072:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8001074:	7d7b      	ldrb	r3, [r7, #21]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d102      	bne.n	8001080 <ijc_i2c_write_read+0x4c>
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1e8      	bne.n	8001052 <ijc_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 8001080:	7d7b      	ldrb	r3, [r7, #21]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <ijc_i2c_write_read+0x56>
 8001086:	7d7b      	ldrb	r3, [r7, #21]
 8001088:	e01a      	b.n	80010c0 <ijc_i2c_write_read+0x8c>

	HAL_Delay(5);
 800108a:	2005      	movs	r0, #5
 800108c:	f000 ffd2 	bl	8002034 <HAL_Delay>

	do
	{
		// Read operation
		status =  ijc_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 8001090:	8c3a      	ldrh	r2, [r7, #32]
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ffb2 	bl	8001000 <ijc_i2c_read>
 800109c:	4603      	mov	r3, r0
 800109e:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 80010a0:	7dbb      	ldrb	r3, [r7, #22]
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d802      	bhi.n	80010ac <ijc_i2c_write_read+0x78>
 80010a6:	2064      	movs	r0, #100	; 0x64
 80010a8:	f000 ffc4 	bl	8002034 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 80010ac:	7dbb      	ldrb	r3, [r7, #22]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 80010b2:	7d7b      	ldrb	r3, [r7, #21]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d102      	bne.n	80010be <ijc_i2c_write_read+0x8a>
 80010b8:	7dbb      	ldrb	r3, [r7, #22]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1e8      	bne.n	8001090 <ijc_i2c_write_read+0x5c>

	return(status);
 80010be:	7d7b      	ldrb	r3, [r7, #21]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <cea_board_enable_set>:
//            CEA PSB
//************************************

// Board enable functions
void cea_board_enable_set(bool gpio_state)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, gpio_state);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	461a      	mov	r2, r3
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <cea_board_enable_set+0x28>)
 80010da:	f001 fac1 	bl	8002660 <HAL_GPIO_WritePin>
	cea_detector.board_enable_state = gpio_state;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <cea_board_enable_set+0x2c>)
 80010e4:	815a      	strh	r2, [r3, #10]
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	48000400 	.word	0x48000400
 80010f4:	2000021c 	.word	0x2000021c

080010f8 <cea_board_enable_get>:

bool cea_board_enable_get(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	cea_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin);
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <cea_board_enable_get+0x28>)
 8001100:	f001 fa96 	bl	8002630 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <cea_board_enable_get+0x2c>)
 800110a:	815a      	strh	r2, [r3, #10]
	return(cea_detector.board_enable_state);
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <cea_board_enable_get+0x2c>)
 800110e:	895b      	ldrh	r3, [r3, #10]
 8001110:	2b00      	cmp	r3, #0
 8001112:	bf14      	ite	ne
 8001114:	2301      	movne	r3, #1
 8001116:	2300      	moveq	r3, #0
 8001118:	b2db      	uxtb	r3, r3
}
 800111a:	4618      	mov	r0, r3
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	48000400 	.word	0x48000400
 8001124:	2000021c 	.word	0x2000021c

08001128 <cea_i2c_write>:



HAL_StatusTypeDef cea_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af02      	add	r7, sp, #8
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c3, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	b299      	uxth	r1, r3
 800113c:	88bb      	ldrh	r3, [r7, #4]
 800113e:	220a      	movs	r2, #10
 8001140:	9200      	str	r2, [sp, #0]
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <cea_i2c_write+0x30>)
 8001146:	f001 fb59 	bl	80027fc <HAL_I2C_Master_Transmit>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
	return(ret);
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200000d8 	.word	0x200000d8

0800115c <cea_i2c_read>:

HAL_StatusTypeDef cea_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af02      	add	r7, sp, #8
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
 8001168:	4613      	mov	r3, r2
 800116a:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	b299      	uxth	r1, r3
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	220a      	movs	r2, #10
 8001174:	9200      	str	r2, [sp, #0]
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <cea_i2c_read+0x30>)
 800117a:	f001 fc57 	bl	8002a2c <HAL_I2C_Master_Receive>
 800117e:	4603      	mov	r3, r0
 8001180:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200000d8 	.word	0x200000d8

08001190 <cea_i2c_write_read>:

HAL_StatusTypeDef cea_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	4613      	mov	r3, r2
 80011a0:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 80011a6:	2305      	movs	r3, #5
 80011a8:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 80011aa:	2305      	movs	r3, #5
 80011ac:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d802      	bhi.n	80011ba <cea_i2c_write_read+0x2a>
 80011b4:	2064      	movs	r0, #100	; 0x64
 80011b6:	f000 ff3d 	bl	8002034 <HAL_Delay>
		status = cea_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 80011ba:	89ba      	ldrh	r2, [r7, #12]
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ffb1 	bl	8001128 <cea_i2c_write>
 80011c6:	4603      	mov	r3, r0
 80011c8:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 80011d0:	7d7b      	ldrb	r3, [r7, #21]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d102      	bne.n	80011dc <cea_i2c_write_read+0x4c>
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e8      	bne.n	80011ae <cea_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 80011dc:	7d7b      	ldrb	r3, [r7, #21]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d101      	bne.n	80011e6 <cea_i2c_write_read+0x56>
 80011e2:	7d7b      	ldrb	r3, [r7, #21]
 80011e4:	e017      	b.n	8001216 <cea_i2c_write_read+0x86>

	do
	{
		// Read operation
		status =  cea_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 80011e6:	8c3a      	ldrh	r2, [r7, #32]
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ffb5 	bl	800115c <cea_i2c_read>
 80011f2:	4603      	mov	r3, r0
 80011f4:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 80011f6:	7dbb      	ldrb	r3, [r7, #22]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d802      	bhi.n	8001202 <cea_i2c_write_read+0x72>
 80011fc:	2064      	movs	r0, #100	; 0x64
 80011fe:	f000 ff19 	bl	8002034 <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8001202:	7dbb      	ldrb	r3, [r7, #22]
 8001204:	3b01      	subs	r3, #1
 8001206:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8001208:	7d7b      	ldrb	r3, [r7, #21]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d102      	bne.n	8001214 <cea_i2c_write_read+0x84>
 800120e:	7dbb      	ldrb	r3, [r7, #22]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1e8      	bne.n	80011e6 <cea_i2c_write_read+0x56>

	return(status);
 8001214:	7d7b      	ldrb	r3, [r7, #21]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <i2c_slv_cmd_rx_tx_handle>:
//************************************
//            I2C Slave
//************************************

bool i2c_slv_cmd_rx_tx_handle(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
	bool status = EXIT_SUCCESS;
 8001226:	2300      	movs	r3, #0
 8001228:	75fb      	strb	r3, [r7, #23]


	// SOME FUNCTION HERE TO HANDLE RX/TX
    switch(i2c_slv_rx.bytes.cmd)
 800122a:	4baf      	ldr	r3, [pc, #700]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	3b40      	subs	r3, #64	; 0x40
 8001230:	2b47      	cmp	r3, #71	; 0x47
 8001232:	f200 8342 	bhi.w	80018ba <i2c_slv_cmd_rx_tx_handle+0x69a>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <i2c_slv_cmd_rx_tx_handle+0x1c>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	08001447 	.word	0x08001447
 8001240:	080014b1 	.word	0x080014b1
 8001244:	08001525 	.word	0x08001525
 8001248:	08001565 	.word	0x08001565
 800124c:	080015a5 	.word	0x080015a5
 8001250:	080018bb 	.word	0x080018bb
 8001254:	080018bb 	.word	0x080018bb
 8001258:	080018bb 	.word	0x080018bb
 800125c:	080018bb 	.word	0x080018bb
 8001260:	080018bb 	.word	0x080018bb
 8001264:	080018bb 	.word	0x080018bb
 8001268:	080018bb 	.word	0x080018bb
 800126c:	080018bb 	.word	0x080018bb
 8001270:	080018bb 	.word	0x080018bb
 8001274:	080018bb 	.word	0x080018bb
 8001278:	080018bb 	.word	0x080018bb
 800127c:	080018bb 	.word	0x080018bb
 8001280:	080018bb 	.word	0x080018bb
 8001284:	080018bb 	.word	0x080018bb
 8001288:	080018bb 	.word	0x080018bb
 800128c:	080018bb 	.word	0x080018bb
 8001290:	080018bb 	.word	0x080018bb
 8001294:	080018bb 	.word	0x080018bb
 8001298:	080018bb 	.word	0x080018bb
 800129c:	080018bb 	.word	0x080018bb
 80012a0:	080018bb 	.word	0x080018bb
 80012a4:	080018bb 	.word	0x080018bb
 80012a8:	080018bb 	.word	0x080018bb
 80012ac:	080018bb 	.word	0x080018bb
 80012b0:	080018bb 	.word	0x080018bb
 80012b4:	080018bb 	.word	0x080018bb
 80012b8:	080018bb 	.word	0x080018bb
 80012bc:	080015fd 	.word	0x080015fd
 80012c0:	08001667 	.word	0x08001667
 80012c4:	080017e9 	.word	0x080017e9
 80012c8:	08001827 	.word	0x08001827
 80012cc:	08001865 	.word	0x08001865
 80012d0:	080016c7 	.word	0x080016c7
 80012d4:	08001707 	.word	0x08001707
 80012d8:	08001769 	.word	0x08001769
 80012dc:	080017a9 	.word	0x080017a9
 80012e0:	080018bb 	.word	0x080018bb
 80012e4:	080018bb 	.word	0x080018bb
 80012e8:	080018bb 	.word	0x080018bb
 80012ec:	080018bb 	.word	0x080018bb
 80012f0:	080018bb 	.word	0x080018bb
 80012f4:	080018bb 	.word	0x080018bb
 80012f8:	080018bb 	.word	0x080018bb
 80012fc:	080018bb 	.word	0x080018bb
 8001300:	080018bb 	.word	0x080018bb
 8001304:	080018bb 	.word	0x080018bb
 8001308:	080018bb 	.word	0x080018bb
 800130c:	080018bb 	.word	0x080018bb
 8001310:	080018bb 	.word	0x080018bb
 8001314:	080018bb 	.word	0x080018bb
 8001318:	080018bb 	.word	0x080018bb
 800131c:	080018bb 	.word	0x080018bb
 8001320:	080018bb 	.word	0x080018bb
 8001324:	080018bb 	.word	0x080018bb
 8001328:	080018bb 	.word	0x080018bb
 800132c:	080018bb 	.word	0x080018bb
 8001330:	080018bb 	.word	0x080018bb
 8001334:	080018bb 	.word	0x080018bb
 8001338:	080018bb 	.word	0x080018bb
 800133c:	0800135d 	.word	0x0800135d
 8001340:	080018bb 	.word	0x080018bb
 8001344:	080018bb 	.word	0x080018bb
 8001348:	080018bb 	.word	0x080018bb
 800134c:	080018bb 	.word	0x080018bb
 8001350:	080018bb 	.word	0x080018bb
 8001354:	080013c7 	.word	0x080013c7
 8001358:	08001407 	.word	0x08001407
		//                     UCD Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800135c:	4b62      	ldr	r3, [pc, #392]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 800135e:	789b      	ldrb	r3, [r3, #2]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10b      	bne.n	800137c <i2c_slv_cmd_rx_tx_handle+0x15c>
			{
				ucd_detector.board_enable_state = (uint16_t)ucd_board_enable_get(); // Read the state enable pin
 8001364:	f7ff fd9c 	bl	8000ea0 <ucd_board_enable_get>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b5f      	ldr	r3, [pc, #380]	; (80014ec <i2c_slv_cmd_rx_tx_handle+0x2cc>)
 800136e:	815a      	strh	r2, [r3, #10]
				i2c_slv_tx.data = ucd_detector.board_enable_state; 					// Prepare the date into the transmit
 8001370:	4b5e      	ldr	r3, [pc, #376]	; (80014ec <i2c_slv_cmd_rx_tx_handle+0x2cc>)
 8001372:	895a      	ldrh	r2, [r3, #10]
 8001374:	4b5e      	ldr	r3, [pc, #376]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001376:	801a      	strh	r2, [r3, #0]
				return(status);
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	e2c1      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800137c:	4b5a      	ldr	r3, [pc, #360]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	2b00      	cmp	r3, #0
 8001382:	f040 829c 	bne.w	80018be <i2c_slv_cmd_rx_tx_handle+0x69e>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8001386:	4b58      	ldr	r3, [pc, #352]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d107      	bne.n	800139e <i2c_slv_cmd_rx_tx_handle+0x17e>
				{
					ucd_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fd6e 	bl	8000e70 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001394:	4b56      	ldr	r3, [pc, #344]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001396:	2201      	movs	r2, #1
 8001398:	801a      	strh	r2, [r3, #0]
					return(status);
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	e2b0      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 800139e:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d107      	bne.n	80013b6 <i2c_slv_cmd_rx_tx_handle+0x196>
				{
					ucd_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 80013a6:	2000      	movs	r0, #0
 80013a8:	f7ff fd62 	bl	8000e70 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80013ac:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	801a      	strh	r2, [r3, #0]
					return(status);
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	e2a4      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80013b6:	4b4e      	ldr	r3, [pc, #312]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80013b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013bc:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80013be:	2301      	movs	r3, #1
 80013c0:	75fb      	strb	r3, [r7, #23]
				return(status);
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	e29c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80013c8:	789b      	ldrb	r3, [r3, #2]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10e      	bne.n	80013ec <i2c_slv_cmd_rx_tx_handle+0x1cc>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	827b      	strh	r3, [r7, #18]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80013d2:	2303      	movs	r3, #3
 80013d4:	2202      	movs	r2, #2
 80013d6:	21e4      	movs	r1, #228	; 0xe4
 80013d8:	4846      	ldr	r0, [pc, #280]	; (80014f4 <i2c_slv_cmd_rx_tx_handle+0x2d4>)
 80013da:	f7ff fb65 	bl	8000aa8 <max6911_read>
 80013de:	4603      	mov	r3, r0
 80013e0:	827b      	strh	r3, [r7, #18]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80013e2:	4a43      	ldr	r2, [pc, #268]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80013e4:	8a7b      	ldrh	r3, [r7, #18]
 80013e6:	8013      	strh	r3, [r2, #0]

				return(status);
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	e289      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80013ec:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80013ee:	789b      	ldrb	r3, [r3, #2]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f040 8266 	bne.w	80018c2 <i2c_slv_cmd_rx_tx_handle+0x6a2>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80013f6:	4b3e      	ldr	r3, [pc, #248]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80013f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fc:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001402:	7dfb      	ldrb	r3, [r7, #23]
 8001404:	e27c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001406:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001408:	789b      	ldrb	r3, [r3, #2]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d10e      	bne.n	800142c <i2c_slv_cmd_rx_tx_handle+0x20c>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	82bb      	strh	r3, [r7, #20]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001412:	2301      	movs	r3, #1
 8001414:	2200      	movs	r2, #0
 8001416:	21e4      	movs	r1, #228	; 0xe4
 8001418:	4836      	ldr	r0, [pc, #216]	; (80014f4 <i2c_slv_cmd_rx_tx_handle+0x2d4>)
 800141a:	f7ff fb45 	bl	8000aa8 <max6911_read>
 800141e:	4603      	mov	r3, r0
 8001420:	82bb      	strh	r3, [r7, #20]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001422:	4a33      	ldr	r2, [pc, #204]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001424:	8abb      	ldrh	r3, [r7, #20]
 8001426:	8013      	strh	r3, [r2, #0]

				return(status);
 8001428:	7dfb      	ldrb	r3, [r7, #23]
 800142a:	e269      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 800142e:	789b      	ldrb	r3, [r3, #2]
 8001430:	2b00      	cmp	r3, #0
 8001432:	f040 8248 	bne.w	80018c6 <i2c_slv_cmd_rx_tx_handle+0x6a6>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001436:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800143c:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800143e:	2301      	movs	r3, #1
 8001440:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	e25c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
    	//                     CEA Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001446:	4b28      	ldr	r3, [pc, #160]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001448:	789b      	ldrb	r3, [r3, #2]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d10b      	bne.n	8001466 <i2c_slv_cmd_rx_tx_handle+0x246>
			{
				cea_detector.board_enable_state = (uint16_t)cea_board_enable_get(); // Read the state enable pin
 800144e:	f7ff fe53 	bl	80010f8 <cea_board_enable_get>
 8001452:	4603      	mov	r3, r0
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b28      	ldr	r3, [pc, #160]	; (80014f8 <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 8001458:	815a      	strh	r2, [r3, #10]
				i2c_slv_tx.data = cea_detector.board_enable_state; 					// Prepare the date into the transmit
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 800145c:	895a      	ldrh	r2, [r3, #10]
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001460:	801a      	strh	r2, [r3, #0]
				return(status);
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	e24c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001468:	789b      	ldrb	r3, [r3, #2]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 822d 	bne.w	80018ca <i2c_slv_cmd_rx_tx_handle+0x6aa>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d107      	bne.n	8001488 <i2c_slv_cmd_rx_tx_handle+0x268>
				{
					cea_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8001478:	2001      	movs	r0, #1
 800147a:	f7ff fe25 	bl	80010c8 <cea_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001480:	2201      	movs	r2, #1
 8001482:	801a      	strh	r2, [r3, #0]
					return(status);
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	e23b      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <i2c_slv_cmd_rx_tx_handle+0x280>
				{
					cea_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fe19 	bl	80010c8 <cea_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 8001498:	2201      	movs	r2, #1
 800149a:	801a      	strh	r2, [r3, #0]
					return(status);
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	e22f      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80014a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a6:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	75fb      	strb	r3, [r7, #23]
				return(status);
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	e227      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80014b2:	789b      	ldrb	r3, [r3, #2]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <i2c_slv_cmd_rx_tx_handle+0x2a6>
			{
				i2c_slv_tx.data = cea_detector.hv_loop_enable; 						// Prepare the date into the transmit
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80014c0:	801a      	strh	r2, [r3, #0]
				return(status);
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	e21c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80014c8:	789b      	ldrb	r3, [r3, #2]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f040 81ff 	bne.w	80018ce <i2c_slv_cmd_rx_tx_handle+0x6ae>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <i2c_slv_cmd_rx_tx_handle+0x2c8>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d111      	bne.n	80014fc <i2c_slv_cmd_rx_tx_handle+0x2dc>
				{
					cea_detector.hv_loop_enable = true;								// Set the state of the flag
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <i2c_slv_cmd_rx_tx_handle+0x2d8>)
 80014da:	2201      	movs	r2, #1
 80014dc:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <i2c_slv_cmd_rx_tx_handle+0x2d0>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	801a      	strh	r2, [r3, #0]
					return(status);
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	e20b      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
 80014e8:	20000240 	.word	0x20000240
 80014ec:	20000204 	.word	0x20000204
 80014f0:	20000244 	.word	0x20000244
 80014f4:	200000d8 	.word	0x200000d8
 80014f8:	2000021c 	.word	0x2000021c
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 80014fc:	4b94      	ldr	r3, [pc, #592]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d107      	bne.n	8001514 <i2c_slv_cmd_rx_tx_handle+0x2f4>
				{
					cea_detector.hv_loop_enable = false;						    // Set the state of the flag
 8001504:	4b93      	ldr	r3, [pc, #588]	; (8001754 <i2c_slv_cmd_rx_tx_handle+0x534>)
 8001506:	2200      	movs	r2, #0
 8001508:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800150a:	4b93      	ldr	r3, [pc, #588]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800150c:	2201      	movs	r2, #1
 800150e:	801a      	strh	r2, [r3, #0]
					return(status);
 8001510:	7dfb      	ldrb	r3, [r7, #23]
 8001512:	e1f5      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001514:	4b90      	ldr	r3, [pc, #576]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800151c:	2301      	movs	r3, #1
 800151e:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001520:	7dfb      	ldrb	r3, [r7, #23]
 8001522:	e1ed      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001524:	4b8a      	ldr	r3, [pc, #552]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001526:	789b      	ldrb	r3, [r3, #2]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d10e      	bne.n	800154a <i2c_slv_cmd_rx_tx_handle+0x32a>
			{
				uint16_t dataread = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	807b      	strh	r3, [r7, #2]
				dataread = max6911_read(&hi2c2, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001530:	2303      	movs	r3, #3
 8001532:	2202      	movs	r2, #2
 8001534:	21e0      	movs	r1, #224	; 0xe0
 8001536:	4889      	ldr	r0, [pc, #548]	; (800175c <i2c_slv_cmd_rx_tx_handle+0x53c>)
 8001538:	f7ff fab6 	bl	8000aa8 <max6911_read>
 800153c:	4603      	mov	r3, r0
 800153e:	807b      	strh	r3, [r7, #2]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001540:	4a85      	ldr	r2, [pc, #532]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	8013      	strh	r3, [r2, #0]

				return(status);
 8001546:	7dfb      	ldrb	r3, [r7, #23]
 8001548:	e1da      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 800154c:	789b      	ldrb	r3, [r3, #2]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f040 81bf 	bne.w	80018d2 <i2c_slv_cmd_rx_tx_handle+0x6b2>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001554:	4b80      	ldr	r3, [pc, #512]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800155c:	2301      	movs	r3, #1
 800155e:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	e1cd      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001564:	4b7a      	ldr	r3, [pc, #488]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001566:	789b      	ldrb	r3, [r3, #2]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d10e      	bne.n	800158a <i2c_slv_cmd_rx_tx_handle+0x36a>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	80bb      	strh	r3, [r7, #4]
				dataread = max6911_read(&hi2c2, ADDR_CEA_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001570:	2301      	movs	r3, #1
 8001572:	2200      	movs	r2, #0
 8001574:	21e6      	movs	r1, #230	; 0xe6
 8001576:	4879      	ldr	r0, [pc, #484]	; (800175c <i2c_slv_cmd_rx_tx_handle+0x53c>)
 8001578:	f7ff fa96 	bl	8000aa8 <max6911_read>
 800157c:	4603      	mov	r3, r0
 800157e:	80bb      	strh	r3, [r7, #4]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001580:	4a75      	ldr	r2, [pc, #468]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001582:	88bb      	ldrh	r3, [r7, #4]
 8001584:	8013      	strh	r3, [r2, #0]

				return(status);
 8001586:	7dfb      	ldrb	r3, [r7, #23]
 8001588:	e1ba      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800158a:	4b71      	ldr	r3, [pc, #452]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 800158c:	789b      	ldrb	r3, [r3, #2]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 81a1 	bne.w	80018d6 <i2c_slv_cmd_rx_tx_handle+0x6b6>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001594:	4b70      	ldr	r3, [pc, #448]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800159c:	2301      	movs	r3, #1
 800159e:	75fb      	strb	r3, [r7, #23]
				return(status);
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	e1ad      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80015a4:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80015a6:	789b      	ldrb	r3, [r3, #2]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <i2c_slv_cmd_rx_tx_handle+0x398>
			{
				i2c_slv_tx.data = cea_detector.hv_targate_value;        // Prepare the date into the transmit
 80015ac:	4b69      	ldr	r3, [pc, #420]	; (8001754 <i2c_slv_cmd_rx_tx_handle+0x534>)
 80015ae:	891a      	ldrh	r2, [r3, #8]
 80015b0:	4b69      	ldr	r3, [pc, #420]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80015b2:	801a      	strh	r2, [r3, #0]
				return(status);
 80015b4:	7dfb      	ldrb	r3, [r7, #23]
 80015b6:	e1a3      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80015b8:	4b65      	ldr	r3, [pc, #404]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80015ba:	789b      	ldrb	r3, [r3, #2]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f040 818c 	bne.w	80018da <i2c_slv_cmd_rx_tx_handle+0x6ba>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80015c4:	785b      	ldrb	r3, [r3, #1]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	d810      	bhi.n	80015ec <i2c_slv_cmd_rx_tx_handle+0x3cc>
				{
					// Read the data from the buffer
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80015ca:	4b61      	ldr	r3, [pc, #388]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 80015d2:	4b5f      	ldr	r3, [pc, #380]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	b21b      	sxth	r3, r3
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21b      	sxth	r3, r3
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <i2c_slv_cmd_rx_tx_handle+0x534>)
 80015e0:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80015e2:	4b5d      	ldr	r3, [pc, #372]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	801a      	strh	r2, [r3, #0]
					return(status);
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	e189      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80015ec:	4b5a      	ldr	r3, [pc, #360]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80015ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015f2:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 80015f4:	2301      	movs	r3, #1
 80015f6:	75fb      	strb	r3, [r7, #23]
					return(status);
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
 80015fa:	e181      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
    	//                     IJC Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80015fc:	4b54      	ldr	r3, [pc, #336]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10b      	bne.n	800161c <i2c_slv_cmd_rx_tx_handle+0x3fc>
			{
				ijc_detector.board_enable_state = (uint16_t)ijc_board_enable_get(); // Read the state enable pin
 8001604:	f7ff fcca 	bl	8000f9c <ijc_board_enable_get>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b54      	ldr	r3, [pc, #336]	; (8001760 <i2c_slv_cmd_rx_tx_handle+0x540>)
 800160e:	815a      	strh	r2, [r3, #10]
				i2c_slv_tx.data = ijc_detector.board_enable_state; 					// Prepare the date into the transmit
 8001610:	4b53      	ldr	r3, [pc, #332]	; (8001760 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001612:	895a      	ldrh	r2, [r3, #10]
 8001614:	4b50      	ldr	r3, [pc, #320]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001616:	801a      	strh	r2, [r3, #0]
				return(status);
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	e171      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800161c:	4b4c      	ldr	r3, [pc, #304]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 800161e:	789b      	ldrb	r3, [r3, #2]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f040 815c 	bne.w	80018de <i2c_slv_cmd_rx_tx_handle+0x6be>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d107      	bne.n	800163e <i2c_slv_cmd_rx_tx_handle+0x41e>
				{
					ijc_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff fc9c 	bl	8000f6c <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001636:	2201      	movs	r2, #1
 8001638:	801a      	strh	r2, [r3, #0]
					return(status);
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	e160      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 800163e:	4b44      	ldr	r3, [pc, #272]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d107      	bne.n	8001656 <i2c_slv_cmd_rx_tx_handle+0x436>
				{
					ijc_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff fc90 	bl	8000f6c <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800164c:	4b42      	ldr	r3, [pc, #264]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 800164e:	2201      	movs	r2, #1
 8001650:	801a      	strh	r2, [r3, #0]
					return(status);
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	e154      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001656:	4b40      	ldr	r3, [pc, #256]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165c:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800165e:	2301      	movs	r3, #1
 8001660:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001662:	7dfb      	ldrb	r3, [r7, #23]
 8001664:	e14c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001668:	789b      	ldrb	r3, [r3, #2]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d106      	bne.n	800167c <i2c_slv_cmd_rx_tx_handle+0x45c>
			{
				i2c_slv_tx.data = ijc_detector.hv_loop_enable; 						// Prepare the date into the transmit
 800166e:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001670:	785b      	ldrb	r3, [r3, #1]
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b38      	ldr	r3, [pc, #224]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001676:	801a      	strh	r2, [r3, #0]
				return(status);
 8001678:	7dfb      	ldrb	r3, [r7, #23]
 800167a:	e141      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f040 812e 	bne.w	80018e2 <i2c_slv_cmd_rx_tx_handle+0x6c2>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <i2c_slv_cmd_rx_tx_handle+0x47e>
				{
					ijc_detector.hv_loop_enable = true;								// Set the state of the flag
 800168e:	4b34      	ldr	r3, [pc, #208]	; (8001760 <i2c_slv_cmd_rx_tx_handle+0x540>)
 8001690:	2201      	movs	r2, #1
 8001692:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001696:	2201      	movs	r2, #1
 8001698:	801a      	strh	r2, [r3, #0]
					return(status);
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	e130      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 800169e:	4b2c      	ldr	r3, [pc, #176]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d107      	bne.n	80016b6 <i2c_slv_cmd_rx_tx_handle+0x496>
				{
					ijc_detector.hv_loop_enable = false;						    // Set the state of the flag
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <i2c_slv_cmd_rx_tx_handle+0x540>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	801a      	strh	r2, [r3, #0]
					return(status);
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	e124      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80016b6:	4b28      	ldr	r3, [pc, #160]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80016b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016bc:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
				return(status);
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	e11c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80016c8:	789b      	ldrb	r3, [r3, #2]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10e      	bne.n	80016ec <i2c_slv_cmd_rx_tx_handle+0x4cc>
			{
				uint16_t dataread = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	817b      	strh	r3, [r7, #10]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80016d2:	2303      	movs	r3, #3
 80016d4:	2202      	movs	r2, #2
 80016d6:	21e0      	movs	r1, #224	; 0xe0
 80016d8:	4820      	ldr	r0, [pc, #128]	; (800175c <i2c_slv_cmd_rx_tx_handle+0x53c>)
 80016da:	f7ff f9e5 	bl	8000aa8 <max6911_read>
 80016de:	4603      	mov	r3, r0
 80016e0:	817b      	strh	r3, [r7, #10]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80016e2:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80016e4:	897b      	ldrh	r3, [r7, #10]
 80016e6:	8013      	strh	r3, [r2, #0]

				return(status);
 80016e8:	7dfb      	ldrb	r3, [r7, #23]
 80016ea:	e109      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80016ec:	4b18      	ldr	r3, [pc, #96]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 80f8 	bne.w	80018e6 <i2c_slv_cmd_rx_tx_handle+0x6c6>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 80016f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fc:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	e0fc      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 8001708:	789b      	ldrb	r3, [r3, #2]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d10e      	bne.n	800172c <i2c_slv_cmd_rx_tx_handle+0x50c>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	81bb      	strh	r3, [r7, #12]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001712:	2301      	movs	r3, #1
 8001714:	2200      	movs	r2, #0
 8001716:	21e0      	movs	r1, #224	; 0xe0
 8001718:	4810      	ldr	r0, [pc, #64]	; (800175c <i2c_slv_cmd_rx_tx_handle+0x53c>)
 800171a:	f7ff f9c5 	bl	8000aa8 <max6911_read>
 800171e:	4603      	mov	r3, r0
 8001720:	81bb      	strh	r3, [r7, #12]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001722:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001724:	89bb      	ldrh	r3, [r7, #12]
 8001726:	8013      	strh	r3, [r2, #0]

				return(status);
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	e0e9      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <i2c_slv_cmd_rx_tx_handle+0x530>)
 800172e:	789b      	ldrb	r3, [r3, #2]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 80da 	bne.w	80018ea <i2c_slv_cmd_rx_tx_handle+0x6ca>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <i2c_slv_cmd_rx_tx_handle+0x538>)
 8001738:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800173c:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800173e:	2301      	movs	r3, #1
 8001740:	75fb      	strb	r3, [r7, #23]
				{
				    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001746:	4807      	ldr	r0, [pc, #28]	; (8001764 <i2c_slv_cmd_rx_tx_handle+0x544>)
 8001748:	f000 ffa2 	bl	8002690 <HAL_GPIO_TogglePin>
				}
				return(status);
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	e0d7      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
 8001750:	20000240 	.word	0x20000240
 8001754:	2000021c 	.word	0x2000021c
 8001758:	20000244 	.word	0x20000244
 800175c:	20000084 	.word	0x20000084
 8001760:	20000210 	.word	0x20000210
 8001764:	48000400 	.word	0x48000400
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001768:	4b67      	ldr	r3, [pc, #412]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 800176a:	789b      	ldrb	r3, [r3, #2]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d10e      	bne.n	800178e <i2c_slv_cmd_rx_tx_handle+0x56e>
			{
				uint16_t dataread = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	81fb      	strh	r3, [r7, #14]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001774:	2303      	movs	r3, #3
 8001776:	2202      	movs	r2, #2
 8001778:	21e2      	movs	r1, #226	; 0xe2
 800177a:	4864      	ldr	r0, [pc, #400]	; (800190c <i2c_slv_cmd_rx_tx_handle+0x6ec>)
 800177c:	f7ff f994 	bl	8000aa8 <max6911_read>
 8001780:	4603      	mov	r3, r0
 8001782:	81fb      	strh	r3, [r7, #14]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001784:	4a62      	ldr	r2, [pc, #392]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 8001786:	89fb      	ldrh	r3, [r7, #14]
 8001788:	8013      	strh	r3, [r2, #0]

				return(status);
 800178a:	7dfb      	ldrb	r3, [r7, #23]
 800178c:	e0b8      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800178e:	4b5e      	ldr	r3, [pc, #376]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f040 80ab 	bne.w	80018ee <i2c_slv_cmd_rx_tx_handle+0x6ce>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001798:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 800179a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800179e:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80017a0:	2301      	movs	r3, #1
 80017a2:	75fb      	strb	r3, [r7, #23]
				return(status);
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	e0ab      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80017a8:	4b57      	ldr	r3, [pc, #348]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 80017aa:	789b      	ldrb	r3, [r3, #2]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d10e      	bne.n	80017ce <i2c_slv_cmd_rx_tx_handle+0x5ae>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	823b      	strh	r3, [r7, #16]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 80017b4:	2301      	movs	r3, #1
 80017b6:	2200      	movs	r2, #0
 80017b8:	21e2      	movs	r1, #226	; 0xe2
 80017ba:	4854      	ldr	r0, [pc, #336]	; (800190c <i2c_slv_cmd_rx_tx_handle+0x6ec>)
 80017bc:	f7ff f974 	bl	8000aa8 <max6911_read>
 80017c0:	4603      	mov	r3, r0
 80017c2:	823b      	strh	r3, [r7, #16]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80017c4:	4a52      	ldr	r2, [pc, #328]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 80017c6:	8a3b      	ldrh	r3, [r7, #16]
 80017c8:	8013      	strh	r3, [r2, #0]

				return(status);
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	e098      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80017ce:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 80017d0:	789b      	ldrb	r3, [r3, #2]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 808d 	bne.w	80018f2 <i2c_slv_cmd_rx_tx_handle+0x6d2>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80017d8:	4b4d      	ldr	r3, [pc, #308]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 80017da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017de:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80017e0:	2301      	movs	r3, #1
 80017e2:	75fb      	strb	r3, [r7, #23]
				return(status);
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	e08b      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80017e8:	4b47      	ldr	r3, [pc, #284]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 80017ea:	789b      	ldrb	r3, [r3, #2]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d10e      	bne.n	800180e <i2c_slv_cmd_rx_tx_handle+0x5ee>
			{
				uint16_t dataread = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	80fb      	strh	r3, [r7, #6]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80017f4:	2303      	movs	r3, #3
 80017f6:	2202      	movs	r2, #2
 80017f8:	21e4      	movs	r1, #228	; 0xe4
 80017fa:	4844      	ldr	r0, [pc, #272]	; (800190c <i2c_slv_cmd_rx_tx_handle+0x6ec>)
 80017fc:	f7ff f954 	bl	8000aa8 <max6911_read>
 8001800:	4603      	mov	r3, r0
 8001802:	80fb      	strh	r3, [r7, #6]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001804:	4a42      	ldr	r2, [pc, #264]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	8013      	strh	r3, [r2, #0]

				return(status);
 800180a:	7dfb      	ldrb	r3, [r7, #23]
 800180c:	e078      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800180e:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 8001810:	789b      	ldrb	r3, [r3, #2]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d16f      	bne.n	80018f6 <i2c_slv_cmd_rx_tx_handle+0x6d6>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 8001818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181c:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800181e:	2301      	movs	r3, #1
 8001820:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	e06c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10e      	bne.n	800184c <i2c_slv_cmd_rx_tx_handle+0x62c>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	813b      	strh	r3, [r7, #8]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001832:	2301      	movs	r3, #1
 8001834:	2200      	movs	r2, #0
 8001836:	21e6      	movs	r1, #230	; 0xe6
 8001838:	4834      	ldr	r0, [pc, #208]	; (800190c <i2c_slv_cmd_rx_tx_handle+0x6ec>)
 800183a:	f7ff f935 	bl	8000aa8 <max6911_read>
 800183e:	4603      	mov	r3, r0
 8001840:	813b      	strh	r3, [r7, #8]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001842:	4a33      	ldr	r2, [pc, #204]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 8001844:	893b      	ldrh	r3, [r7, #8]
 8001846:	8013      	strh	r3, [r2, #0]

				return(status);
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	e059      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 800184e:	789b      	ldrb	r3, [r3, #2]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d152      	bne.n	80018fa <i2c_slv_cmd_rx_tx_handle+0x6da>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 8001856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800185c:	2301      	movs	r3, #1
 800185e:	75fb      	strb	r3, [r7, #23]
				return(status);
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	e04d      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 8001866:	789b      	ldrb	r3, [r3, #2]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <i2c_slv_cmd_rx_tx_handle+0x658>
			{
				i2c_slv_tx.data = ijc_detector.hv_targate_value;        // Prepare the date into the transmit
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <i2c_slv_cmd_rx_tx_handle+0x6f4>)
 800186e:	891a      	ldrh	r2, [r3, #8]
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 8001872:	801a      	strh	r2, [r3, #0]
				return(status);
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	e043      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 800187a:	789b      	ldrb	r3, [r3, #2]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d13e      	bne.n	80018fe <i2c_slv_cmd_rx_tx_handle+0x6de>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 8001880:	4b21      	ldr	r3, [pc, #132]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 8001882:	785b      	ldrb	r3, [r3, #1]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d810      	bhi.n	80018aa <i2c_slv_cmd_rx_tx_handle+0x68a>
				{
					// Read the data from the buffer
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8001888:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 800188a:	785b      	ldrb	r3, [r3, #1]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <i2c_slv_cmd_rx_tx_handle+0x6e8>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b21b      	sxth	r3, r3
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8001896:	4313      	orrs	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <i2c_slv_cmd_rx_tx_handle+0x6f4>)
 800189e:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	801a      	strh	r2, [r3, #0]
					return(status);
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	e02a      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <i2c_slv_cmd_rx_tx_handle+0x6f0>)
 80018ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b0:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	75fb      	strb	r3, [r7, #23]
					return(status);
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	e022      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	default:
			break;
 80018ba:	bf00      	nop
 80018bc:	e020      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018be:	bf00      	nop
 80018c0:	e01e      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018c2:	bf00      	nop
 80018c4:	e01c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018c6:	bf00      	nop
 80018c8:	e01a      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018ca:	bf00      	nop
 80018cc:	e018      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018ce:	bf00      	nop
 80018d0:	e016      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018d2:	bf00      	nop
 80018d4:	e014      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018d6:	bf00      	nop
 80018d8:	e012      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018da:	bf00      	nop
 80018dc:	e010      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018de:	bf00      	nop
 80018e0:	e00e      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018e2:	bf00      	nop
 80018e4:	e00c      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018e6:	bf00      	nop
 80018e8:	e00a      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018ea:	bf00      	nop
 80018ec:	e008      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018ee:	bf00      	nop
 80018f0:	e006      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018f2:	bf00      	nop
 80018f4:	e004      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018f6:	bf00      	nop
 80018f8:	e002      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018fa:	bf00      	nop
 80018fc:	e000      	b.n	8001900 <i2c_slv_cmd_rx_tx_handle+0x6e0>
			break;
 80018fe:	bf00      	nop
	}
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000240 	.word	0x20000240
 800190c:	20000084 	.word	0x20000084
 8001910:	20000244 	.word	0x20000244
 8001914:	20000210 	.word	0x20000210

08001918 <i2c_slv_init>:



void i2c_slv_init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	// Clear the Tx and Rx buffers before use
	i2c_slv_clear_buffer(&i2c_tx_buffer[0], TXBUFFERSIZE);
 800191c:	2102      	movs	r1, #2
 800191e:	4808      	ldr	r0, [pc, #32]	; (8001940 <i2c_slv_init+0x28>)
 8001920:	f000 f814 	bl	800194c <i2c_slv_clear_buffer>
	i2c_slv_clear_buffer(&i2c_rx_buffer[0], RXBUFFERSIZE);
 8001924:	2104      	movs	r1, #4
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <i2c_slv_init+0x2c>)
 8001928:	f000 f810 	bl	800194c <i2c_slv_clear_buffer>

	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 800192c:	4806      	ldr	r0, [pc, #24]	; (8001948 <i2c_slv_init+0x30>)
 800192e:	f001 fad7 	bl	8002ee0 <HAL_I2C_EnableListen_IT>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <i2c_slv_init+0x24>
	{
		/* Transfer error in reception process */
		Error_Handler();
 8001938:	f000 f8da 	bl	8001af0 <Error_Handler>
	}
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000238 	.word	0x20000238
 8001944:	2000023c 	.word	0x2000023c
 8001948:	20000030 	.word	0x20000030

0800194c <i2c_slv_clear_buffer>:


void i2c_slv_clear_buffer(uint8_t* buffer, uint8_t size)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	70fb      	strb	r3, [r7, #3]

	uint8_t idx = 0; // An index
 8001958:	2300      	movs	r3, #0
 800195a:	73fb      	strb	r3, [r7, #15]

	for(idx = 0; idx < size; idx++)
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e008      	b.n	8001974 <i2c_slv_clear_buffer+0x28>
	{
		// Cycle through and clear the buffer array
		*buffer = 0x00;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
		buffer++;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3301      	adds	r3, #1
 800196c:	607b      	str	r3, [r7, #4]
	for(idx = 0; idx < size; idx++)
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	3301      	adds	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	429a      	cmp	r2, r3
 800197a:	d3f2      	bcc.n	8001962 <i2c_slv_clear_buffer+0x16>
	}

}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	Xfer_Complete = 1;        // Set flag for RX completion
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	2000002c 	.word	0x2000002c

080019ac <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	// Handle the I2C receive callback complete
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 80019b4:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	061a      	lsls	r2, r3, #24
					| (i2c_rx_buffer[1] << 16)
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80019bc:	785b      	ldrb	r3, [r3, #1]
 80019be:	041b      	lsls	r3, r3, #16
 80019c0:	431a      	orrs	r2, r3
					| (i2c_rx_buffer[2] << 8)
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80019c4:	789b      	ldrb	r3, [r3, #2]
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	4313      	orrs	r3, r2
					| (i2c_rx_buffer[3]);
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80019cc:	78d2      	ldrb	r2, [r2, #3]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	461a      	mov	r2, r3
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80019d4:	601a      	str	r2, [r3, #0]

	// Load the init/fail value into the tx buffer
	i2c_slv_tx.data = CMD_FAIL_OP_INPROG_RESP;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80019d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80019dc:	801a      	strh	r2, [r3, #0]

	Xfer_Complete = 1;                           // Set flag for RX completion
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	2000023c 	.word	0x2000023c
 80019f4:	20000240 	.word	0x20000240
 80019f8:	20000244 	.word	0x20000244
 80019fc:	2000002c 	.word	0x2000002c

08001a00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	70fb      	strb	r3, [r7, #3]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <HAL_I2C_AddrCallback+0x68>)
 8001a14:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_I2C_AddrCallback+0x68>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d014      	beq.n	8001a48 <HAL_I2C_AddrCallback+0x48>
	/*##- Start the transmission process #####################################*/
	/* While the I2C in reception process, user can transmit data through
	"i2c_tx_buffer" buffer */

	// Update the TX buffer
	i2c_tx_buffer[0] = i2c_slv_tx.bytes.byte_1;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_I2C_AddrCallback+0x6c>)
 8001a20:	785a      	ldrb	r2, [r3, #1]
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <HAL_I2C_AddrCallback+0x70>)
 8001a24:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_slv_tx.bytes.byte_2;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_I2C_AddrCallback+0x6c>)
 8001a28:	781a      	ldrb	r2, [r3, #0]
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_I2C_AddrCallback+0x70>)
 8001a2c:	705a      	strb	r2, [r3, #1]
	//copy_array(&i2c_slv_tx.bytes.byte_1, i2c_tx_buffer[0], TXBUFFERSIZE);

	if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)i2c_tx_buffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8001a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a32:	2202      	movs	r2, #2
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <HAL_I2C_AddrCallback+0x70>)
 8001a36:	480f      	ldr	r0, [pc, #60]	; (8001a74 <HAL_I2C_AddrCallback+0x74>)
 8001a38:	f001 f8ee 	bl	8002c18 <HAL_I2C_Slave_Seq_Transmit_IT>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00e      	beq.n	8001a60 <HAL_I2C_AddrCallback+0x60>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 8001a42:	f000 f855 	bl	8001af0 <Error_Handler>
		Error_Handler();
	}

  }

}
 8001a46:	e00b      	b.n	8001a60 <HAL_I2C_AddrCallback+0x60>
	if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)i2c_rx_buffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8001a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	490a      	ldr	r1, [pc, #40]	; (8001a78 <HAL_I2C_AddrCallback+0x78>)
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <HAL_I2C_AddrCallback+0x74>)
 8001a52:	f001 f993 	bl	8002d7c <HAL_I2C_Slave_Seq_Receive_IT>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_AddrCallback+0x60>
		Error_Handler();
 8001a5c:	f000 f848 	bl	8001af0 <Error_Handler>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000028 	.word	0x20000028
 8001a6c:	20000244 	.word	0x20000244
 8001a70:	20000238 	.word	0x20000238
 8001a74:	20000030 	.word	0x20000030
 8001a78:	2000023c 	.word	0x2000023c

08001a7c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	//HAL_I2C_EnableListen_IT(&hi2c1);
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f001 fae8 	bl	800306e <HAL_I2C_GetError>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d001      	beq.n	8001aa8 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8001aa4:	f000 f824 	bl	8001af0 <Error_Handler>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	counter ++;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	3301      	adds	r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001ac2:	701a      	strb	r2, [r3, #0]
	ijc_detector.ramp_flag = true;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
	cea_detector.ramp_flag = true;
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001ad0:	2140      	movs	r1, #64	; 0x40
 8001ad2:	4806      	ldr	r0, [pc, #24]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ad4:	f000 fddc 	bl	8002690 <HAL_GPIO_TogglePin>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000246 	.word	0x20000246
 8001ae4:	20000210 	.word	0x20000210
 8001ae8:	2000021c 	.word	0x2000021c
 8001aec:	48000800 	.word	0x48000800

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <Error_Handler+0x8>
	...

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_MspInit+0x44>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_MspInit+0x44>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_MspInit+0x44>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_MspInit+0x44>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0a6      	sub	sp, #152	; 0x98
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	2260      	movs	r2, #96	; 0x60
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f005 f9b0 	bl	8006eca <memset>
  if(hi2c->Instance==I2C1)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6c      	ldr	r2, [pc, #432]	; (8001d20 <HAL_I2C_MspInit+0x1dc>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d14d      	bne.n	8001c10 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b74:	2340      	movs	r3, #64	; 0x40
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fd87 	bl	8005694 <HAL_RCCEx_PeriphCLKConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b8c:	f7ff ffb0 	bl	8001af0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	4b64      	ldr	r3, [pc, #400]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	4a63      	ldr	r2, [pc, #396]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9c:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	623b      	str	r3, [r7, #32]
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ba8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb0:	2312      	movs	r3, #18
 8001bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd2:	f000 fbb3 	bl	800233c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd6:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be0:	6593      	str	r3, [r2, #88]	; 0x58
 8001be2:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	201f      	movs	r0, #31
 8001bf4:	f000 fb1d 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001bf8:	201f      	movs	r0, #31
 8001bfa:	f000 fb36 	bl	800226a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2020      	movs	r0, #32
 8001c04:	f000 fb15 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c08:	2020      	movs	r0, #32
 8001c0a:	f000 fb2e 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c0e:	e082      	b.n	8001d16 <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a44      	ldr	r2, [pc, #272]	; (8001d28 <HAL_I2C_MspInit+0x1e4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d13c      	bne.n	8001c94 <HAL_I2C_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fd34 	bl	8005694 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8001c32:	f7ff ff5d 	bl	8001af0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c56:	2312      	movs	r3, #18
 8001c58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001c72:	4619      	mov	r1, r3
 8001c74:	482d      	ldr	r0, [pc, #180]	; (8001d2c <HAL_I2C_MspInit+0x1e8>)
 8001c76:	f000 fb61 	bl	800233c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	4a29      	ldr	r2, [pc, #164]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001c80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c84:	6593      	str	r3, [r2, #88]	; 0x58
 8001c86:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
}
 8001c92:	e040      	b.n	8001d16 <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a25      	ldr	r2, [pc, #148]	; (8001d30 <HAL_I2C_MspInit+0x1ec>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d13b      	bne.n	8001d16 <HAL_I2C_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fcf1 	bl	8005694 <HAL_RCCEx_PeriphCLKConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <HAL_I2C_MspInit+0x178>
      Error_Handler();
 8001cb8:	f7ff ff1a 	bl	8001af0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cda:	2312      	movs	r3, #18
 8001cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cec:	2304      	movs	r3, #4
 8001cee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480e      	ldr	r0, [pc, #56]	; (8001d34 <HAL_I2C_MspInit+0x1f0>)
 8001cfa:	f000 fb1f 	bl	800233c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001d04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_I2C_MspInit+0x1e0>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
}
 8001d16:	bf00      	nop
 8001d18:	3798      	adds	r7, #152	; 0x98
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40005400 	.word	0x40005400
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40005800 	.word	0x40005800
 8001d2c:	48000400 	.word	0x48000400
 8001d30:	40005c00 	.word	0x40005c00
 8001d34:	48000800 	.word	0x48000800

08001d38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d48:	d113      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_TIM_Base_MspInit+0x44>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <HAL_TIM_Base_MspInit+0x44>)
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	6593      	str	r3, [r2, #88]	; 0x58
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_TIM_Base_MspInit+0x44>)
 8001d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	201c      	movs	r0, #28
 8001d68:	f000 fa63 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d6c:	201c      	movs	r0, #28
 8001d6e:	f000 fa7c 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000

08001d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0a2      	sub	sp, #136	; 0x88
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2260      	movs	r2, #96	; 0x60
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 f892 	bl	8006eca <memset>
  if(huart->Instance==USART2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <HAL_UART_MspInit+0xac>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d138      	bne.n	8001e22 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001db0:	2302      	movs	r3, #2
 8001db2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fc69 	bl	8005694 <HAL_RCCEx_PeriphCLKConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dc8:	f7ff fe92 	bl	8001af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_UART_MspInit+0xb0>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_UART_MspInit+0xb0>)
 8001dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_UART_MspInit+0xb0>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_UART_MspInit+0xb0>)
 8001de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de8:	4a11      	ldr	r2, [pc, #68]	; (8001e30 <HAL_UART_MspInit+0xb0>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_UART_MspInit+0xb0>)
 8001df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dfc:	230c      	movs	r3, #12
 8001dfe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0e:	2307      	movs	r3, #7
 8001e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1e:	f000 fa8d 	bl	800233c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e22:	bf00      	nop
 8001e24:	3788      	adds	r7, #136	; 0x88
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40004400 	.word	0x40004400
 8001e30:	40021000 	.word	0x40021000

08001e34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <NMI_Handler+0x4>

08001e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler+0x4>

08001e46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e80:	f000 f8b8 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM2_IRQHandler+0x10>)
 8001e8e:	f003 ffe9 	bl	8005e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000012c 	.word	0x2000012c

08001e9c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <I2C1_EV_IRQHandler+0x10>)
 8001ea2:	f001 f83d 	bl	8002f20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000030 	.word	0x20000030

08001eb0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <I2C1_ER_IRQHandler+0x10>)
 8001eb6:	f001 f84d 	bl	8002f54 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000030 	.word	0x20000030

08001ec4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <SystemInit+0x20>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <SystemInit+0x20>)
 8001ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000ed00 	.word	0xe000ed00

08001ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eec:	f7ff ffea 	bl	8001ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ef0:	480c      	ldr	r0, [pc, #48]	; (8001f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ef2:	490d      	ldr	r1, [pc, #52]	; (8001f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <LoopForever+0xe>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef8:	e002      	b.n	8001f00 <LoopCopyDataInit>

08001efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efe:	3304      	adds	r3, #4

08001f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f04:	d3f9      	bcc.n	8001efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f06:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f08:	4c0a      	ldr	r4, [pc, #40]	; (8001f34 <LoopForever+0x16>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f0c:	e001      	b.n	8001f12 <LoopFillZerobss>

08001f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f10:	3204      	adds	r2, #4

08001f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f14:	d3fb      	bcc.n	8001f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f16:	f004 ffe1 	bl	8006edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f1a:	f7fe fad5 	bl	80004c8 <main>

08001f1e <LoopForever>:

LoopForever:
    b LoopForever
 8001f1e:	e7fe      	b.n	8001f1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f2c:	08006f94 	.word	0x08006f94
  ldr r2, =_sbss
 8001f30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f34:	2000024c 	.word	0x2000024c

08001f38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f38:	e7fe      	b.n	8001f38 <ADC1_IRQHandler>
	...

08001f3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_Init+0x3c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <HAL_Init+0x3c>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f52:	2003      	movs	r0, #3
 8001f54:	f000 f962 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f000 f80f 	bl	8001f7c <HAL_InitTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	71fb      	strb	r3, [r7, #7]
 8001f68:	e001      	b.n	8001f6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f6a:	f7ff fdc7 	bl	8001afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40022000 	.word	0x40022000

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f88:	4b17      	ldr	r3, [pc, #92]	; (8001fe8 <HAL_InitTick+0x6c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d023      	beq.n	8001fd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f90:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_InitTick+0x70>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_InitTick+0x6c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f96d 	bl	8002286 <HAL_SYSTICK_Config>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d809      	bhi.n	8001fcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc0:	f000 f937 	bl	8002232 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_InitTick+0x74>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	e007      	b.n	8001fdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e004      	b.n	8001fdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e001      	b.n	8001fdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	20000004 	.word	0x20000004

08001ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x20>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x24>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_IncTick+0x24>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	20000008 	.word	0x20000008
 8002018:	20000248 	.word	0x20000248

0800201c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return uwTick;
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_GetTick+0x14>)
 8002022:	681b      	ldr	r3, [r3, #0]
}
 8002024:	4618      	mov	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000248 	.word	0x20000248

08002034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800203c:	f7ff ffee 	bl	800201c <HAL_GetTick>
 8002040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800204c:	d005      	beq.n	800205a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_Delay+0x44>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800205a:	bf00      	nop
 800205c:	f7ff ffde 	bl	800201c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d8f7      	bhi.n	800205c <HAL_Delay+0x28>
  {
  }
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	20000008 	.word	0x20000008

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4907      	ldr	r1, [pc, #28]	; (8002118 <__NVIC_EnableIRQ+0x38>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	; (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021fc:	f7ff ff8e 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff29 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff3e 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff8e 	bl	8002170 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5d 	bl	800211c <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff31 	bl	80020e0 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa2 	bl	80021d8 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d005      	beq.n	80022c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2204      	movs	r2, #4
 80022ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e029      	b.n	8002316 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 020e 	bic.w	r2, r2, #14
 80022d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0201 	bic.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	f003 021c 	and.w	r2, r3, #28
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
    }
  }
  return status;
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800232e:	b2db      	uxtb	r3, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800234a:	e154      	b.n	80025f6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	4013      	ands	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8146 	beq.w	80025f0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b01      	cmp	r3, #1
 800236e:	d005      	beq.n	800237c <HAL_GPIO_Init+0x40>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d130      	bne.n	80023de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	2203      	movs	r2, #3
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023b2:	2201      	movs	r2, #1
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	f003 0201 	and.w	r2, r3, #1
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d017      	beq.n	800241a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	2203      	movs	r2, #3
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43db      	mvns	r3, r3
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4013      	ands	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d123      	bne.n	800246e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	08da      	lsrs	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	6939      	ldr	r1, [r7, #16]
 800246a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0203 	and.w	r2, r3, #3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 80a0 	beq.w	80025f0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b0:	4b58      	ldr	r3, [pc, #352]	; (8002614 <HAL_GPIO_Init+0x2d8>)
 80024b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b4:	4a57      	ldr	r2, [pc, #348]	; (8002614 <HAL_GPIO_Init+0x2d8>)
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6613      	str	r3, [r2, #96]	; 0x60
 80024bc:	4b55      	ldr	r3, [pc, #340]	; (8002614 <HAL_GPIO_Init+0x2d8>)
 80024be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024c8:	4a53      	ldr	r2, [pc, #332]	; (8002618 <HAL_GPIO_Init+0x2dc>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	220f      	movs	r2, #15
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024f2:	d019      	beq.n	8002528 <HAL_GPIO_Init+0x1ec>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a49      	ldr	r2, [pc, #292]	; (800261c <HAL_GPIO_Init+0x2e0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_GPIO_Init+0x1e8>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_GPIO_Init+0x2e4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d00d      	beq.n	8002520 <HAL_GPIO_Init+0x1e4>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a47      	ldr	r2, [pc, #284]	; (8002624 <HAL_GPIO_Init+0x2e8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d007      	beq.n	800251c <HAL_GPIO_Init+0x1e0>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a46      	ldr	r2, [pc, #280]	; (8002628 <HAL_GPIO_Init+0x2ec>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d101      	bne.n	8002518 <HAL_GPIO_Init+0x1dc>
 8002514:	2304      	movs	r3, #4
 8002516:	e008      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002518:	2307      	movs	r3, #7
 800251a:	e006      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 800251c:	2303      	movs	r3, #3
 800251e:	e004      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002520:	2302      	movs	r3, #2
 8002522:	e002      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_GPIO_Init+0x1ee>
 8002528:	2300      	movs	r3, #0
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	f002 0203 	and.w	r2, r2, #3
 8002530:	0092      	lsls	r2, r2, #2
 8002532:	4093      	lsls	r3, r2
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800253a:	4937      	ldr	r1, [pc, #220]	; (8002618 <HAL_GPIO_Init+0x2dc>)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	089b      	lsrs	r3, r3, #2
 8002540:	3302      	adds	r3, #2
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002548:	4b38      	ldr	r3, [pc, #224]	; (800262c <HAL_GPIO_Init+0x2f0>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800256c:	4a2f      	ldr	r2, [pc, #188]	; (800262c <HAL_GPIO_Init+0x2f0>)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002572:	4b2e      	ldr	r3, [pc, #184]	; (800262c <HAL_GPIO_Init+0x2f0>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43db      	mvns	r3, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <HAL_GPIO_Init+0x2f0>)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800259c:	4b23      	ldr	r3, [pc, #140]	; (800262c <HAL_GPIO_Init+0x2f0>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025c0:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ea:	4a10      	ldr	r2, [pc, #64]	; (800262c <HAL_GPIO_Init+0x2f0>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3301      	adds	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	f47f aea3 	bne.w	800234c <HAL_GPIO_Init+0x10>
  }
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40021000 	.word	0x40021000
 8002618:	40010000 	.word	0x40010000
 800261c:	48000400 	.word	0x48000400
 8002620:	48000800 	.word	0x48000800
 8002624:	48000c00 	.word	0x48000c00
 8002628:	48001000 	.word	0x48001000
 800262c:	40010400 	.word	0x40010400

08002630 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	887b      	ldrh	r3, [r7, #2]
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d002      	beq.n	800264e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
 800266c:	4613      	mov	r3, r2
 800266e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002670:	787b      	ldrb	r3, [r7, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800267c:	e002      	b.n	8002684 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800267e:	887a      	ldrh	r2, [r7, #2]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	041a      	lsls	r2, r3, #16
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	43d9      	mvns	r1, r3
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	400b      	ands	r3, r1
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	619a      	str	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e08d      	b.n	80027f2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff fa2a 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2224      	movs	r2, #36	; 0x24
 80026f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002724:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e006      	b.n	800274c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689a      	ldr	r2, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800274a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d108      	bne.n	8002766 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	e007      	b.n	8002776 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002774:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002788:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002798:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69d9      	ldr	r1, [r3, #28]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1a      	ldr	r2, [r3, #32]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	4613      	mov	r3, r2
 800280e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	f040 80fd 	bne.w	8002a18 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_I2C_Master_Transmit+0x30>
 8002828:	2302      	movs	r3, #2
 800282a:	e0f6      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x21e>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002834:	f7ff fbf2 	bl	800201c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2319      	movs	r3, #25
 8002840:	2201      	movs	r2, #1
 8002842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f001 fca1 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0e1      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2221      	movs	r2, #33	; 0x21
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2210      	movs	r2, #16
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d906      	bls.n	8002896 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800288e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e007      	b.n	80028a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80028a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d024      	beq.n	80028f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <HAL_I2C_Master_Transmit+0x228>)
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f001 fe87 	bl	8004604 <I2C_TransferConfig>
 80028f6:	e066      	b.n	80029c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	8979      	ldrh	r1, [r7, #10]
 8002900:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_I2C_Master_Transmit+0x228>)
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f001 fe7c 	bl	8004604 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800290c:	e05b      	b.n	80029c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	6a39      	ldr	r1, [r7, #32]
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f001 fc8a 	bl	800422c <I2C_WaitOnTXISFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e07b      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d034      	beq.n	80029c6 <HAL_I2C_Master_Transmit+0x1ca>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d130      	bne.n	80029c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	2200      	movs	r2, #0
 800296c:	2180      	movs	r1, #128	; 0x80
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f001 fc0d 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e04d      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002982:	b29b      	uxth	r3, r3
 8002984:	2bff      	cmp	r3, #255	; 0xff
 8002986:	d90e      	bls.n	80029a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	22ff      	movs	r2, #255	; 0xff
 800298c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002992:	b2da      	uxtb	r2, r3
 8002994:	8979      	ldrh	r1, [r7, #10]
 8002996:	2300      	movs	r3, #0
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f001 fe30 	bl	8004604 <I2C_TransferConfig>
 80029a4:	e00f      	b.n	80029c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	8979      	ldrh	r1, [r7, #10]
 80029b8:	2300      	movs	r3, #0
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f001 fe1f 	bl	8004604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d19e      	bne.n	800290e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	6a39      	ldr	r1, [r7, #32]
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f001 fc70 	bl	80042ba <I2C_WaitOnSTOPFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e01a      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2220      	movs	r2, #32
 80029ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <HAL_I2C_Master_Transmit+0x22c>)
 80029f8:	400b      	ands	r3, r1
 80029fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e000      	b.n	8002a1a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002a18:	2302      	movs	r3, #2
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	80002000 	.word	0x80002000
 8002a28:	fe00e800 	.word	0xfe00e800

08002a2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	461a      	mov	r2, r3
 8002a38:	460b      	mov	r3, r1
 8002a3a:	817b      	strh	r3, [r7, #10]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	f040 80db 	bne.w	8002c04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_I2C_Master_Receive+0x30>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e0d4      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a64:	f7ff fada 	bl	800201c <HAL_GetTick>
 8002a68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2319      	movs	r3, #25
 8002a70:	2201      	movs	r2, #1
 8002a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f001 fb89 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0bf      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2222      	movs	r2, #34	; 0x22
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2210      	movs	r2, #16
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	893a      	ldrh	r2, [r7, #8]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2bff      	cmp	r3, #255	; 0xff
 8002ab6:	d90e      	bls.n	8002ad6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	22ff      	movs	r2, #255	; 0xff
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	8979      	ldrh	r1, [r7, #10]
 8002ac6:	4b52      	ldr	r3, [pc, #328]	; (8002c10 <HAL_I2C_Master_Receive+0x1e4>)
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f001 fd98 	bl	8004604 <I2C_TransferConfig>
 8002ad4:	e06d      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_I2C_Master_Receive+0x1e4>)
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f001 fd87 	bl	8004604 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002af6:	e05c      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	6a39      	ldr	r1, [r7, #32]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f001 fc1f 	bl	8004340 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e07c      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d034      	beq.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d130      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f001 fb17 	bl	800418e <I2C_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e04d      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2bff      	cmp	r3, #255	; 0xff
 8002b72:	d90e      	bls.n	8002b92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	22ff      	movs	r2, #255	; 0xff
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f001 fd3a 	bl	8004604 <I2C_TransferConfig>
 8002b90:	e00f      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8979      	ldrh	r1, [r7, #10]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f001 fd29 	bl	8004604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d19d      	bne.n	8002af8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	6a39      	ldr	r1, [r7, #32]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f001 fb7a 	bl	80042ba <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e01a      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_I2C_Master_Receive+0x1e8>)
 8002be4:	400b      	ands	r3, r1
 8002be6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	80002400 	.word	0x80002400
 8002c14:	fe00e800 	.word	0xfe00e800

08002c18 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c34:	2b28      	cmp	r3, #40	; 0x28
 8002c36:	f040 8098 	bne.w	8002d6a <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d105      	bne.n	8002c52 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e08c      	b.n	8002d6c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002c52:	f248 0101 	movw	r1, #32769	; 0x8001
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f001 fd8a 	bl	8004770 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e080      	b.n	8002d6c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c7c:	d12a      	bne.n	8002cd4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c7e:	2102      	movs	r1, #2
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f001 fd75 	bl	8004770 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c94:	d11e      	bne.n	8002cd4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ca4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d012      	beq.n	8002cd4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb2:	4a30      	ldr	r2, [pc, #192]	; (8002d74 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff faef 	bl	800229e <HAL_DMA_Abort_IT>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2229      	movs	r2, #41	; 0x29
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cf8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8002d1a:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	bf0c      	ite	eq
 8002d2a:	2301      	moveq	r3, #1
 8002d2c:	2300      	movne	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	0c1b      	lsrs	r3, r3, #16
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d106      	bne.n	8002d54 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2208      	movs	r2, #8
 8002d52:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8002d5c:	f248 0101 	movw	r1, #32769	; 0x8001
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f001 fc81 	bl	8004668 <I2C_Enable_IRQ>

    return HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	e000      	b.n	8002d6c <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
  }
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	08004153 	.word	0x08004153
 8002d78:	08003087 	.word	0x08003087

08002d7c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d98:	2b28      	cmp	r3, #40	; 0x28
 8002d9a:	f040 8098 	bne.w	8002ece <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e08c      	b.n	8002ed0 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002db6:	f248 0102 	movw	r1, #32770	; 0x8002
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f001 fcd8 	bl	8004770 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d101      	bne.n	8002dce <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8002dca:	2302      	movs	r3, #2
 8002dcc:	e080      	b.n	8002ed0 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b29      	cmp	r3, #41	; 0x29
 8002de0:	d12a      	bne.n	8002e38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002de2:	2101      	movs	r1, #1
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f001 fcc3 	bl	8004770 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002df8:	d11e      	bne.n	8002e38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e08:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d012      	beq.n	8002e38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fa3d 	bl	800229e <HAL_DMA_Abort_IT>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d006      	beq.n	8002e38 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e34:	4610      	mov	r0, r2
 8002e36:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	222a      	movs	r2, #42	; 0x2a
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e5c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4a17      	ldr	r2, [pc, #92]	; (8002edc <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8002e7e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002ec0:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f001 fbcf 	bl	8004668 <I2C_Enable_IRQ>

    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	08004153 	.word	0x08004153
 8002edc:	08003087 	.word	0x08003087

08002ee0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d10d      	bne.n	8002f10 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2228      	movs	r2, #40	; 0x28
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_I2C_EnableListen_IT+0x3c>)
 8002f00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f001 fbae 	bl	8004668 <I2C_Enable_IRQ>

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	08003087 	.word	0x08003087

08002f20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	68f9      	ldr	r1, [r7, #12]
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00f      	beq.n	8002f96 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00a      	beq.n	8002f96 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f84:	f043 0201 	orr.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f94:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00f      	beq.n	8002fc0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f043 0208 	orr.w	r2, r3, #8
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00f      	beq.n	8002fea <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00a      	beq.n	8002fea <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	f043 0202 	orr.w	r2, r3, #2
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 030b 	and.w	r3, r3, #11
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 ff6d 	bl	8003edc <I2C_ITError>
  }
}
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <I2C_Slave_ISR_IT+0x24>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0e1      	b.n	800326e <I2C_Slave_ISR_IT+0x1e8>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80030c6:	6939      	ldr	r1, [r7, #16]
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fda1 	bl	8003c10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d04b      	beq.n	8003170 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d046      	beq.n	8003170 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d128      	bne.n	800313e <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b28      	cmp	r3, #40	; 0x28
 80030f6:	d108      	bne.n	800310a <I2C_Slave_ISR_IT+0x84>
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030fe:	d104      	bne.n	800310a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003100:	6939      	ldr	r1, [r7, #16]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fe96 	bl	8003e34 <I2C_ITListenCplt>
 8003108:	e031      	b.n	800316e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b29      	cmp	r3, #41	; 0x29
 8003114:	d10e      	bne.n	8003134 <I2C_Slave_ISR_IT+0xae>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800311c:	d00a      	beq.n	8003134 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2210      	movs	r2, #16
 8003124:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 ffef 	bl	800410a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fc4a 	bl	80039c6 <I2C_ITSlaveSeqCplt>
 8003132:	e01c      	b.n	800316e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2210      	movs	r2, #16
 800313a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800313c:	e08f      	b.n	800325e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2210      	movs	r2, #16
 8003144:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f043 0204 	orr.w	r2, r3, #4
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <I2C_Slave_ISR_IT+0xda>
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315e:	d17e      	bne.n	800325e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	4619      	mov	r1, r3
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 feb8 	bl	8003edc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800316c:	e077      	b.n	800325e <I2C_Slave_ISR_IT+0x1d8>
 800316e:	e076      	b.n	800325e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02f      	beq.n	80031da <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02a      	beq.n	80031da <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d018      	beq.n	80031c0 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d14b      	bne.n	8003262 <I2C_Slave_ISR_IT+0x1dc>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031d0:	d047      	beq.n	8003262 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f000 fbf7 	bl	80039c6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80031d8:	e043      	b.n	8003262 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80031ee:	6939      	ldr	r1, [r7, #16]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fb27 	bl	8003844 <I2C_ITAddrCplt>
 80031f6:	e035      	b.n	8003264 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d030      	beq.n	8003264 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003208:	2b00      	cmp	r3, #0
 800320a:	d02b      	beq.n	8003264 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
 8003246:	e00d      	b.n	8003264 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324e:	d002      	beq.n	8003256 <I2C_Slave_ISR_IT+0x1d0>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fbb5 	bl	80039c6 <I2C_ITSlaveSeqCplt>
 800325c:	e002      	b.n	8003264 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003262:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3718      	adds	r7, #24
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b088      	sub	sp, #32
 800327a:	af02      	add	r7, sp, #8
 800327c:	60f8      	str	r0, [r7, #12]
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <I2C_Master_ISR_DMA+0x1a>
 800328c:	2302      	movs	r3, #2
 800328e:	e0d9      	b.n	8003444 <I2C_Master_ISR_DMA+0x1ce>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d011      	beq.n	80032d0 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2210      	movs	r2, #16
 80032b2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f043 0204 	orr.w	r2, r3, #4
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80032c0:	2120      	movs	r1, #32
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f001 f9d0 	bl	8004668 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 ff1e 	bl	800410a <I2C_Flush_TXDR>
 80032ce:	e0b4      	b.n	800343a <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d071      	beq.n	80033be <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d06c      	beq.n	80033be <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032f2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04e      	beq.n	800339c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	b29b      	uxth	r3, r3
 8003306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800330a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2bff      	cmp	r3, #255	; 0xff
 8003314:	d906      	bls.n	8003324 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	22ff      	movs	r2, #255	; 0xff
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800331c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e010      	b.n	8003346 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003336:	d003      	beq.n	8003340 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333c:	617b      	str	r3, [r7, #20]
 800333e:	e002      	b.n	8003346 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003344:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334a:	b2da      	uxtb	r2, r3
 800334c:	8a79      	ldrh	r1, [r7, #18]
 800334e:	2300      	movs	r3, #0
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f001 f955 	bl	8004604 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b22      	cmp	r3, #34	; 0x22
 8003376:	d108      	bne.n	800338a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003386:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003388:	e057      	b.n	800343a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003398:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800339a:	e04e      	b.n	800343a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033aa:	d003      	beq.n	80033b4 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 facd 	bl	800394c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80033b2:	e042      	b.n	800343a <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80033b4:	2140      	movs	r1, #64	; 0x40
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fd90 	bl	8003edc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80033bc:	e03d      	b.n	800343a <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d028      	beq.n	800341a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d023      	beq.n	800341a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d119      	bne.n	8003410 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ea:	d025      	beq.n	8003438 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033f4:	d108      	bne.n	8003408 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003404:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003406:	e017      	b.n	8003438 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 fa9f 	bl	800394c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800340e:	e013      	b.n	8003438 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003410:	2140      	movs	r1, #64	; 0x40
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fd62 	bl	8003edc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003418:	e00e      	b.n	8003438 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00a      	beq.n	800343a <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fb25 	bl	8003a80 <I2C_ITMasterCplt>
 8003436:	e000      	b.n	800343a <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003438:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003458:	4b8d      	ldr	r3, [pc, #564]	; (8003690 <I2C_Mem_ISR_DMA+0x244>)
 800345a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <I2C_Mem_ISR_DMA+0x1e>
 8003466:	2302      	movs	r3, #2
 8003468:	e10e      	b.n	8003688 <I2C_Mem_ISR_DMA+0x23c>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	d016      	beq.n	80034aa <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003482:	2b00      	cmp	r3, #0
 8003484:	d011      	beq.n	80034aa <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2210      	movs	r2, #16
 800348c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800349a:	2120      	movs	r1, #32
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f001 f8e3 	bl	8004668 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fe31 	bl	800410a <I2C_Flush_TXDR>
 80034a8:	e0e9      	b.n	800367e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00e      	beq.n	80034d2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034ce:	651a      	str	r2, [r3, #80]	; 0x50
 80034d0:	e0d5      	b.n	800367e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d05f      	beq.n	800359c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d05a      	beq.n	800359c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034e6:	2101      	movs	r1, #1
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f001 f941 	bl	8004770 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80034ee:	2110      	movs	r1, #16
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f001 f8b9 	bl	8004668 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d048      	beq.n	8003592 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	2bff      	cmp	r3, #255	; 0xff
 8003508:	d910      	bls.n	800352c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	22ff      	movs	r2, #255	; 0xff
 800350e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003514:	b299      	uxth	r1, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351a:	b2da      	uxtb	r2, r3
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f001 f86d 	bl	8004604 <I2C_TransferConfig>
 800352a:	e011      	b.n	8003550 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353a:	b299      	uxth	r1, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	b2da      	uxtb	r2, r3
 8003542:	2300      	movs	r3, #0
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f001 f85a 	bl	8004604 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b22      	cmp	r3, #34	; 0x22
 800356c:	d108      	bne.n	8003580 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800357c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800357e:	e07e      	b.n	800367e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800358e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003590:	e075      	b.n	800367e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003592:	2140      	movs	r1, #64	; 0x40
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fca1 	bl	8003edc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800359a:	e070      	b.n	800367e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d05d      	beq.n	8003662 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d058      	beq.n	8003662 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80035b0:	2101      	movs	r1, #1
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f001 f8dc 	bl	8004770 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80035b8:	2110      	movs	r1, #16
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f001 f854 	bl	8004668 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b22      	cmp	r3, #34	; 0x22
 80035ca:	d101      	bne.n	80035d0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80035cc:	4b31      	ldr	r3, [pc, #196]	; (8003694 <I2C_Mem_ISR_DMA+0x248>)
 80035ce:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2bff      	cmp	r3, #255	; 0xff
 80035d8:	d910      	bls.n	80035fc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	22ff      	movs	r2, #255	; 0xff
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e4:	b299      	uxth	r1, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f001 f805 	bl	8004604 <I2C_TransferConfig>
 80035fa:	e011      	b.n	8003620 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	b299      	uxth	r1, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003610:	b2da      	uxtb	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fff2 	bl	8004604 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b22      	cmp	r3, #34	; 0x22
 800363c:	d108      	bne.n	8003650 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800364e:	e016      	b.n	800367e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800365e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003660:	e00d      	b.n	800367e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fa01 	bl	8003a80 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	80002000 	.word	0x80002000
 8003694:	80002400 	.word	0x80002400

08003698 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <I2C_Slave_ISR_DMA+0x24>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0bf      	b.n	800383c <I2C_Slave_ISR_DMA+0x1a4>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa98 	bl	8003c10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8095 	beq.w	8003816 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 808f 	beq.w	8003816 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d104      	bne.n	800370c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003708:	2b00      	cmp	r3, #0
 800370a:	d07d      	beq.n	8003808 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00c      	beq.n	800372e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800372a:	2301      	movs	r3, #1
 800372c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00c      	beq.n	8003750 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 800374c:	2301      	movs	r3, #1
 800374e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d128      	bne.n	80037a8 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b28      	cmp	r3, #40	; 0x28
 8003760:	d108      	bne.n	8003774 <I2C_Slave_ISR_DMA+0xdc>
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003768:	d104      	bne.n	8003774 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800376a:	68b9      	ldr	r1, [r7, #8]
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 fb61 	bl	8003e34 <I2C_ITListenCplt>
 8003772:	e048      	b.n	8003806 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b29      	cmp	r3, #41	; 0x29
 800377e:	d10e      	bne.n	800379e <I2C_Slave_ISR_DMA+0x106>
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003786:	d00a      	beq.n	800379e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2210      	movs	r2, #16
 800378e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fcba 	bl	800410a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f915 	bl	80039c6 <I2C_ITSlaveSeqCplt>
 800379c:	e033      	b.n	8003806 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2210      	movs	r2, #16
 80037a4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80037a6:	e034      	b.n	8003812 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2210      	movs	r2, #16
 80037ae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b4:	f043 0204 	orr.w	r2, r3, #4
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <I2C_Slave_ISR_DMA+0x13a>
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d0:	d11f      	bne.n	8003812 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b21      	cmp	r3, #33	; 0x21
 80037d6:	d002      	beq.n	80037de <I2C_Slave_ISR_DMA+0x146>
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	2b29      	cmp	r3, #41	; 0x29
 80037dc:	d103      	bne.n	80037e6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2221      	movs	r2, #33	; 0x21
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
 80037e4:	e008      	b.n	80037f8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	2b22      	cmp	r3, #34	; 0x22
 80037ea:	d002      	beq.n	80037f2 <I2C_Slave_ISR_DMA+0x15a>
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	2b2a      	cmp	r3, #42	; 0x2a
 80037f0:	d102      	bne.n	80037f8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2222      	movs	r2, #34	; 0x22
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	4619      	mov	r1, r3
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 fb6c 	bl	8003edc <I2C_ITError>
      if (treatdmanack == 1U)
 8003804:	e005      	b.n	8003812 <I2C_Slave_ISR_DMA+0x17a>
 8003806:	e004      	b.n	8003812 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2210      	movs	r2, #16
 800380e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003810:	e00f      	b.n	8003832 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8003812:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003814:	e00d      	b.n	8003832 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d008      	beq.n	8003832 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f809 	bl	8003844 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800385a:	2b28      	cmp	r3, #40	; 0x28
 800385c:	d16a      	bne.n	8003934 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	b29b      	uxth	r3, r3
 8003878:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800387c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	b29b      	uxth	r3, r3
 8003886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800388a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	b29b      	uxth	r3, r3
 8003894:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003898:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d138      	bne.n	8003914 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80038a2:	897b      	ldrh	r3, [r7, #10]
 80038a4:	09db      	lsrs	r3, r3, #7
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	89bb      	ldrh	r3, [r7, #12]
 80038aa:	4053      	eors	r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	f003 0306 	and.w	r3, r3, #6
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11c      	bne.n	80038f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d13b      	bne.n	8003944 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2208      	movs	r2, #8
 80038d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038e2:	89ba      	ldrh	r2, [r7, #12]
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	4619      	mov	r1, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fe f889 	bl	8001a00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80038ee:	e029      	b.n	8003944 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80038f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 ff39 	bl	8004770 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003906:	89ba      	ldrh	r2, [r7, #12]
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7fe f877 	bl	8001a00 <HAL_I2C_AddrCallback>
}
 8003912:	e017      	b.n	8003944 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 ff29 	bl	8004770 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003926:	89ba      	ldrh	r2, [r7, #12]
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7fe f867 	bl	8001a00 <HAL_I2C_AddrCallback>
}
 8003932:	e007      	b.n	8003944 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2208      	movs	r2, #8
 800393a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003944:	bf00      	nop
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b21      	cmp	r3, #33	; 0x21
 8003966:	d115      	bne.n	8003994 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2211      	movs	r2, #17
 8003974:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800397c:	2101      	movs	r1, #1
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fef6 	bl	8004770 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff fb3c 	bl	800300a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003992:	e014      	b.n	80039be <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2212      	movs	r2, #18
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039a8:	2102      	movs	r1, #2
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fee0 	bl	8004770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff fb30 	bl	800301e <HAL_I2C_MasterRxCpltCallback>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b084      	sub	sp, #16
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e00c      	b.n	8003a14 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a12:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b29      	cmp	r3, #41	; 0x29
 8003a1e:	d112      	bne.n	8003a46 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2228      	movs	r2, #40	; 0x28
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2221      	movs	r2, #33	; 0x21
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a2e:	2101      	movs	r1, #1
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fe9d 	bl	8004770 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd ffa4 	bl	800198c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a44:	e017      	b.n	8003a76 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a50:	d111      	bne.n	8003a76 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2228      	movs	r2, #40	; 0x28
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2222      	movs	r2, #34	; 0x22
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a60:	2102      	movs	r1, #2
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fe84 	bl	8004770 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fd ff9b 	bl	80019ac <HAL_I2C_SlaveRxCpltCallback>
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2220      	movs	r2, #32
 8003a94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b21      	cmp	r3, #33	; 0x21
 8003aa0:	d107      	bne.n	8003ab2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fe63 	bl	8004770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2211      	movs	r2, #17
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
 8003ab0:	e00c      	b.n	8003acc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b22      	cmp	r3, #34	; 0x22
 8003abc:	d106      	bne.n	8003acc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003abe:	2102      	movs	r1, #2
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fe55 	bl	8004770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2212      	movs	r2, #18
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <I2C_ITMasterCplt+0x188>)
 8003ad8:	400b      	ands	r3, r1
 8003ada:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a49      	ldr	r2, [pc, #292]	; (8003c0c <I2C_ITMasterCplt+0x18c>)
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2210      	movs	r2, #16
 8003af8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afe:	f043 0204 	orr.w	r2, r3, #4
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b60      	cmp	r3, #96	; 0x60
 8003b10:	d10a      	bne.n	8003b28 <I2C_ITMasterCplt+0xa8>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003b26:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 faee 	bl	800410a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b32:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b60      	cmp	r3, #96	; 0x60
 8003b3e:	d002      	beq.n	8003b46 <I2C_ITMasterCplt+0xc6>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f9c5 	bl	8003edc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b52:	e054      	b.n	8003bfe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b21      	cmp	r3, #33	; 0x21
 8003b5e:	d124      	bne.n	8003baa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b40      	cmp	r3, #64	; 0x40
 8003b78:	d10b      	bne.n	8003b92 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fa51 	bl	8003032 <HAL_I2C_MemTxCpltCallback>
}
 8003b90:	e035      	b.n	8003bfe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fa31 	bl	800300a <HAL_I2C_MasterTxCpltCallback>
}
 8003ba8:	e029      	b.n	8003bfe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b22      	cmp	r3, #34	; 0x22
 8003bb4:	d123      	bne.n	8003bfe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d10b      	bne.n	8003be8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff fa30 	bl	8003046 <HAL_I2C_MemRxCpltCallback>
}
 8003be6:	e00a      	b.n	8003bfe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fa10 	bl	800301e <HAL_I2C_MasterRxCpltCallback>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	fe00e800 	.word	0xfe00e800
 8003c0c:	ffff0000 	.word	0xffff0000

08003c10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c2c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2220      	movs	r2, #32
 8003c34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b21      	cmp	r3, #33	; 0x21
 8003c3a:	d002      	beq.n	8003c42 <I2C_ITSlaveCplt+0x32>
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b29      	cmp	r3, #41	; 0x29
 8003c40:	d108      	bne.n	8003c54 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c42:	f248 0101 	movw	r1, #32769	; 0x8001
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fd92 	bl	8004770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2221      	movs	r2, #33	; 0x21
 8003c50:	631a      	str	r2, [r3, #48]	; 0x30
 8003c52:	e019      	b.n	8003c88 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	2b22      	cmp	r3, #34	; 0x22
 8003c58:	d002      	beq.n	8003c60 <I2C_ITSlaveCplt+0x50>
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8003c5e:	d108      	bne.n	8003c72 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003c60:	f248 0102 	movw	r1, #32770	; 0x8002
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fd83 	bl	8004770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2222      	movs	r2, #34	; 0x22
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c70:	e00a      	b.n	8003c88 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
 8003c74:	2b28      	cmp	r3, #40	; 0x28
 8003c76:	d107      	bne.n	8003c88 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003c78:	f248 0103 	movw	r1, #32771	; 0x8003
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fd77 	bl	8004770 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c96:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4b62      	ldr	r3, [pc, #392]	; (8003e2c <I2C_ITSlaveCplt+0x21c>)
 8003ca4:	400b      	ands	r3, r1
 8003ca6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fa2e 	bl	800410a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d013      	beq.n	8003ce0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cc6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d01f      	beq.n	8003d10 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cde:	e017      	b.n	8003d10 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d012      	beq.n	8003d10 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cf8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d006      	beq.n	8003d10 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d020      	beq.n	8003d5c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d46:	3b01      	subs	r3, #1
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f043 0204 	orr.w	r2, r3, #4
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d010      	beq.n	8003daa <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8a4 	bl	8003edc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b28      	cmp	r3, #40	; 0x28
 8003d9e:	d141      	bne.n	8003e24 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003da0:	6979      	ldr	r1, [r7, #20]
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f846 	bl	8003e34 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003da8:	e03c      	b.n	8003e24 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003db2:	d014      	beq.n	8003dde <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff fe06 	bl	80039c6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <I2C_ITSlaveCplt+0x220>)
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd fe50 	bl	8001a7c <HAL_I2C_ListenCpltCallback>
}
 8003ddc:	e022      	b.n	8003e24 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b22      	cmp	r3, #34	; 0x22
 8003de8:	d10e      	bne.n	8003e08 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7fd fdd3 	bl	80019ac <HAL_I2C_SlaveRxCpltCallback>
}
 8003e06:	e00d      	b.n	8003e24 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fdb4 	bl	800198c <HAL_I2C_SlaveTxCpltCallback>
}
 8003e24:	bf00      	nop
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	fe00e800 	.word	0xfe00e800
 8003e30:	ffff0000 	.word	0xffff0000

08003e34 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a25      	ldr	r2, [pc, #148]	; (8003ed8 <I2C_ITListenCplt+0xa4>)
 8003e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	f003 0304 	and.w	r3, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d022      	beq.n	8003eb0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d012      	beq.n	8003eb0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	f043 0204 	orr.w	r2, r3, #4
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003eb0:	f248 0103 	movw	r1, #32771	; 0x8003
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fc5b 	bl	8004770 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd fdd6 	bl	8001a7c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	ffff0000 	.word	0xffff0000

08003edc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eec:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a6d      	ldr	r2, [pc, #436]	; (80040b0 <I2C_ITError+0x1d4>)
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b28      	cmp	r3, #40	; 0x28
 8003f12:	d005      	beq.n	8003f20 <I2C_ITError+0x44>
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b29      	cmp	r3, #41	; 0x29
 8003f18:	d002      	beq.n	8003f20 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1e:	d10b      	bne.n	8003f38 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f20:	2103      	movs	r1, #3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fc24 	bl	8004770 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2228      	movs	r2, #40	; 0x28
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a60      	ldr	r2, [pc, #384]	; (80040b4 <I2C_ITError+0x1d8>)
 8003f34:	635a      	str	r2, [r3, #52]	; 0x34
 8003f36:	e030      	b.n	8003f9a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f38:	f248 0103 	movw	r1, #32771	; 0x8003
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fc17 	bl	8004770 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f8e1 	bl	800410a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b60      	cmp	r3, #96	; 0x60
 8003f52:	d01f      	beq.n	8003f94 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d114      	bne.n	8003f94 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d109      	bne.n	8003f8c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	f043 0204 	orr.w	r2, r3, #4
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2220      	movs	r2, #32
 8003f92:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d039      	beq.n	800401c <I2C_ITError+0x140>
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b11      	cmp	r3, #17
 8003fac:	d002      	beq.n	8003fb4 <I2C_ITError+0xd8>
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b21      	cmp	r3, #33	; 0x21
 8003fb2:	d133      	bne.n	800401c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc2:	d107      	bne.n	8003fd4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fd2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7fe f9a1 	bl	8002320 <HAL_DMA_GetState>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d017      	beq.n	8004014 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	4a33      	ldr	r2, [pc, #204]	; (80040b8 <I2C_ITError+0x1dc>)
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fe f950 	bl	800229e <HAL_DMA_Abort_IT>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d04d      	beq.n	80040a0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800400e:	4610      	mov	r0, r2
 8004010:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004012:	e045      	b.n	80040a0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f851 	bl	80040bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800401a:	e041      	b.n	80040a0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d039      	beq.n	8004098 <I2C_ITError+0x1bc>
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2b12      	cmp	r3, #18
 8004028:	d002      	beq.n	8004030 <I2C_ITError+0x154>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b22      	cmp	r3, #34	; 0x22
 800402e:	d133      	bne.n	8004098 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800403a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403e:	d107      	bne.n	8004050 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800404e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004054:	4618      	mov	r0, r3
 8004056:	f7fe f963 	bl	8002320 <HAL_DMA_GetState>
 800405a:	4603      	mov	r3, r0
 800405c:	2b01      	cmp	r3, #1
 800405e:	d017      	beq.n	8004090 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	4a14      	ldr	r2, [pc, #80]	; (80040b8 <I2C_ITError+0x1dc>)
 8004066:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe f912 	bl	800229e <HAL_DMA_Abort_IT>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d011      	beq.n	80040a4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800408a:	4610      	mov	r0, r2
 800408c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800408e:	e009      	b.n	80040a4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f813 	bl	80040bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004096:	e005      	b.n	80040a4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f80f 	bl	80040bc <I2C_TreatErrorCallback>
  }
}
 800409e:	e002      	b.n	80040a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040a4:	bf00      	nop
}
 80040a6:	bf00      	nop
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	ffff0000 	.word	0xffff0000
 80040b4:	08003087 	.word	0x08003087
 80040b8:	08004153 	.word	0x08004153

080040bc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b60      	cmp	r3, #96	; 0x60
 80040ce:	d10e      	bne.n	80040ee <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fe ffb7 	bl	800305a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80040ec:	e009      	b.n	8004102 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7fd fcc7 	bl	8001a90 <HAL_I2C_ErrorCallback>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b02      	cmp	r3, #2
 800411e:	d103      	bne.n	8004128 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2200      	movs	r2, #0
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d007      	beq.n	8004146 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0201 	orr.w	r2, r2, #1
 8004144:	619a      	str	r2, [r3, #24]
  }
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	2200      	movs	r2, #0
 800416e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d003      	beq.n	8004180 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	2200      	movs	r2, #0
 800417e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f7ff ff9b 	bl	80040bc <I2C_TreatErrorCallback>
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419e:	e031      	b.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a6:	d02d      	beq.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a8:	f7fd ff38 	bl	800201c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	683a      	ldr	r2, [r7, #0]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d302      	bcc.n	80041be <I2C_WaitOnFlagUntilTimeout+0x30>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d122      	bne.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	bf0c      	ite	eq
 80041ce:	2301      	moveq	r3, #1
 80041d0:	2300      	movne	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	79fb      	ldrb	r3, [r7, #7]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d113      	bne.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e00f      	b.n	8004224 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	429a      	cmp	r2, r3
 8004220:	d0be      	beq.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004238:	e033      	b.n	80042a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f900 	bl	8004444 <I2C_IsErrorOccurred>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e031      	b.n	80042b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004254:	d025      	beq.n	80042a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004256:	f7fd fee1 	bl	800201c <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	429a      	cmp	r2, r3
 8004264:	d302      	bcc.n	800426c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d11a      	bne.n	80042a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b02      	cmp	r3, #2
 8004278:	d013      	beq.n	80042a2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	f043 0220 	orr.w	r2, r3, #32
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e007      	b.n	80042b2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d1c4      	bne.n	800423a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042c6:	e02f      	b.n	8004328 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f8b9 	bl	8004444 <I2C_IsErrorOccurred>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e02d      	b.n	8004338 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042dc:	f7fd fe9e 	bl	800201c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11a      	bne.n	8004328 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d013      	beq.n	8004328 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	f043 0220 	orr.w	r2, r3, #32
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e007      	b.n	8004338 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b20      	cmp	r3, #32
 8004334:	d1c8      	bne.n	80042c8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800434c:	e06b      	b.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f876 	bl	8004444 <I2C_IsErrorOccurred>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e069      	b.n	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b20      	cmp	r3, #32
 800436e:	d138      	bne.n	80043e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f003 0304 	and.w	r3, r3, #4
 800437a:	2b04      	cmp	r3, #4
 800437c:	d105      	bne.n	800438a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e055      	b.n	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b10      	cmp	r3, #16
 8004396:	d107      	bne.n	80043a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2210      	movs	r2, #16
 800439e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2204      	movs	r2, #4
 80043a4:	645a      	str	r2, [r3, #68]	; 0x44
 80043a6:	e002      	b.n	80043ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2220      	movs	r2, #32
 80043b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6859      	ldr	r1, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80043c2:	400b      	ands	r3, r1
 80043c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e029      	b.n	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fd fe1b 	bl	800201c <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d116      	bne.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d00f      	beq.n	8004426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f043 0220 	orr.w	r2, r3, #32
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e007      	b.n	8004436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b04      	cmp	r3, #4
 8004432:	d18c      	bne.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	fe00e800 	.word	0xfe00e800

08004444 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08a      	sub	sp, #40	; 0x28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	d068      	beq.n	8004542 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2210      	movs	r2, #16
 8004476:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004478:	e049      	b.n	800450e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004480:	d045      	beq.n	800450e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fd fdcb 	bl	800201c <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <I2C_IsErrorOccurred+0x54>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d13a      	bne.n	800450e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044ba:	d121      	bne.n	8004500 <I2C_IsErrorOccurred+0xbc>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044c2:	d01d      	beq.n	8004500 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d01a      	beq.n	8004500 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044da:	f7fd fd9f 	bl	800201c <HAL_GetTick>
 80044de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e0:	e00e      	b.n	8004500 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044e2:	f7fd fd9b 	bl	800201c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b19      	cmp	r3, #25
 80044ee:	d907      	bls.n	8004500 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	f043 0320 	orr.w	r3, r3, #32
 80044f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80044fe:	e006      	b.n	800450e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d1e9      	bne.n	80044e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b20      	cmp	r3, #32
 800451a:	d003      	beq.n	8004524 <I2C_IsErrorOccurred+0xe0>
 800451c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0aa      	beq.n	800447a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004528:	2b00      	cmp	r3, #0
 800452a:	d103      	bne.n	8004534 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2220      	movs	r2, #32
 8004532:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004534:	6a3b      	ldr	r3, [r7, #32]
 8004536:	f043 0304 	orr.w	r3, r3, #4
 800453a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004564:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	f043 0308 	orr.w	r3, r3, #8
 800457c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004586:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	f043 0302 	orr.w	r3, r3, #2
 800459e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80045b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01c      	beq.n	80045f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f7ff fda6 	bl	800410a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <I2C_IsErrorOccurred+0x1bc>)
 80045ca:	400b      	ands	r3, r1
 80045cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	431a      	orrs	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80045f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3728      	adds	r7, #40	; 0x28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	fe00e800 	.word	0xfe00e800

08004604 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	460b      	mov	r3, r1
 8004610:	817b      	strh	r3, [r7, #10]
 8004612:	4613      	mov	r3, r2
 8004614:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800461c:	7a7b      	ldrb	r3, [r7, #9]
 800461e:	041b      	lsls	r3, r3, #16
 8004620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004624:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	4313      	orrs	r3, r2
 800462e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004632:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	0d5b      	lsrs	r3, r3, #21
 800463e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <I2C_TransferConfig+0x60>)
 8004644:	430b      	orrs	r3, r1
 8004646:	43db      	mvns	r3, r3
 8004648:	ea02 0103 	and.w	r1, r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	03ff63ff 	.word	0x03ff63ff

08004668 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004674:	2300      	movs	r3, #0
 8004676:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467c:	4a39      	ldr	r2, [pc, #228]	; (8004764 <I2C_Enable_IRQ+0xfc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d032      	beq.n	80046e8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004686:	4a38      	ldr	r2, [pc, #224]	; (8004768 <I2C_Enable_IRQ+0x100>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d02d      	beq.n	80046e8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004690:	4a36      	ldr	r2, [pc, #216]	; (800476c <I2C_Enable_IRQ+0x104>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d028      	beq.n	80046e8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004696:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800469a:	2b00      	cmp	r3, #0
 800469c:	da03      	bge.n	80046a6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80046a4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80046b6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80046c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80046ca:	887b      	ldrh	r3, [r7, #2]
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d103      	bne.n	80046d8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80046d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80046d8:	887b      	ldrh	r3, [r7, #2]
 80046da:	2b20      	cmp	r3, #32
 80046dc:	d133      	bne.n	8004746 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f043 0320 	orr.w	r3, r3, #32
 80046e4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80046e6:	e02e      	b.n	8004746 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80046e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	da03      	bge.n	80046f8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80046f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80046f8:	887b      	ldrh	r3, [r7, #2]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004708:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800470a:	887b      	ldrh	r3, [r7, #2]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800471a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800471c:	887b      	ldrh	r3, [r7, #2]
 800471e:	2b10      	cmp	r3, #16
 8004720:	d103      	bne.n	800472a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004728:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800472a:	887b      	ldrh	r3, [r7, #2]
 800472c:	2b20      	cmp	r3, #32
 800472e:	d103      	bne.n	8004738 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004736:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004738:	887b      	ldrh	r3, [r7, #2]
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d103      	bne.n	8004746 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004744:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6819      	ldr	r1, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	430a      	orrs	r2, r1
 8004754:	601a      	str	r2, [r3, #0]
}
 8004756:	bf00      	nop
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	08003277 	.word	0x08003277
 8004768:	08003699 	.word	0x08003699
 800476c:	0800344d 	.word	0x0800344d

08004770 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004780:	887b      	ldrh	r3, [r7, #2]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00f      	beq.n	80047aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004790:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800479e:	2b28      	cmp	r3, #40	; 0x28
 80047a0:	d003      	beq.n	80047aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80047a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80047aa:	887b      	ldrh	r3, [r7, #2]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00f      	beq.n	80047d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80047ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047c8:	2b28      	cmp	r3, #40	; 0x28
 80047ca:	d003      	beq.n	80047d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80047d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	da03      	bge.n	80047e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047e4:	887b      	ldrh	r3, [r7, #2]
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d103      	bne.n	80047f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047f2:	887b      	ldrh	r3, [r7, #2]
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d103      	bne.n	8004800 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f043 0320 	orr.w	r3, r3, #32
 80047fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004800:	887b      	ldrh	r3, [r7, #2]
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d103      	bne.n	800480e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800480c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6819      	ldr	r1, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	43da      	mvns	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	400a      	ands	r2, r1
 800481e:	601a      	str	r2, [r3, #0]
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	d138      	bne.n	80048b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800484c:	2302      	movs	r3, #2
 800484e:	e032      	b.n	80048b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2224      	movs	r2, #36	; 0x24
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0201 	bic.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800487e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e000      	b.n	80048b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048b4:	2302      	movs	r3, #2
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d139      	bne.n	800494c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e033      	b.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2224      	movs	r2, #36	; 0x24
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0201 	bic.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2220      	movs	r2, #32
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
	...

0800495c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004960:	4b04      	ldr	r3, [pc, #16]	; (8004974 <HAL_PWREx_GetVoltageRange+0x18>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40007000 	.word	0x40007000

08004978 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004986:	d130      	bne.n	80049ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004988:	4b23      	ldr	r3, [pc, #140]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004994:	d038      	beq.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004996:	4b20      	ldr	r3, [pc, #128]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049a6:	4b1d      	ldr	r3, [pc, #116]	; (8004a1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2232      	movs	r2, #50	; 0x32
 80049ac:	fb02 f303 	mul.w	r3, r2, r3
 80049b0:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	0c9b      	lsrs	r3, r3, #18
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049bc:	e002      	b.n	80049c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049c4:	4b14      	ldr	r3, [pc, #80]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d0:	d102      	bne.n	80049d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f2      	bne.n	80049be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049d8:	4b0f      	ldr	r3, [pc, #60]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d110      	bne.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e00f      	b.n	8004a0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049f6:	d007      	beq.n	8004a08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049f8:	4b07      	ldr	r3, [pc, #28]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a00:	4a05      	ldr	r2, [pc, #20]	; (8004a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	20000000 	.word	0x20000000
 8004a20:	431bde83 	.word	0x431bde83

08004a24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f000 bc02 	b.w	800523c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a38:	4b96      	ldr	r3, [pc, #600]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a42:	4b94      	ldr	r3, [pc, #592]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0310 	and.w	r3, r3, #16
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80e4 	beq.w	8004c22 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_RCC_OscConfig+0x4c>
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b0c      	cmp	r3, #12
 8004a64:	f040 808b 	bne.w	8004b7e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	f040 8087 	bne.w	8004b7e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a70:	4b88      	ldr	r3, [pc, #544]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_OscConfig+0x64>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e3d9      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1a      	ldr	r2, [r3, #32]
 8004a8c:	4b81      	ldr	r3, [pc, #516]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0308 	and.w	r3, r3, #8
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x7e>
 8004a98:	4b7e      	ldr	r3, [pc, #504]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa0:	e005      	b.n	8004aae <HAL_RCC_OscConfig+0x8a>
 8004aa2:	4b7c      	ldr	r3, [pc, #496]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa8:	091b      	lsrs	r3, r3, #4
 8004aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d223      	bcs.n	8004afa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fd8c 	bl	80055d4 <RCC_SetFlashLatencyFromMSIRange>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e3ba      	b.n	800523c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac6:	4b73      	ldr	r3, [pc, #460]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a72      	ldr	r2, [pc, #456]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004acc:	f043 0308 	orr.w	r3, r3, #8
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b70      	ldr	r3, [pc, #448]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	496d      	ldr	r1, [pc, #436]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae4:	4b6b      	ldr	r3, [pc, #428]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	4968      	ldr	r1, [pc, #416]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
 8004af8:	e025      	b.n	8004b46 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004afa:	4b66      	ldr	r3, [pc, #408]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a65      	ldr	r2, [pc, #404]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004b00:	f043 0308 	orr.w	r3, r3, #8
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b63      	ldr	r3, [pc, #396]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	4960      	ldr	r1, [pc, #384]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b18:	4b5e      	ldr	r3, [pc, #376]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	495b      	ldr	r1, [pc, #364]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fd4c 	bl	80055d4 <RCC_SetFlashLatencyFromMSIRange>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e37a      	b.n	800523c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b46:	f000 fc81 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	4b51      	ldr	r3, [pc, #324]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	091b      	lsrs	r3, r3, #4
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	4950      	ldr	r1, [pc, #320]	; (8004c98 <HAL_RCC_OscConfig+0x274>)
 8004b58:	5ccb      	ldrb	r3, [r1, r3]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b62:	4a4e      	ldr	r2, [pc, #312]	; (8004c9c <HAL_RCC_OscConfig+0x278>)
 8004b64:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b66:	4b4e      	ldr	r3, [pc, #312]	; (8004ca0 <HAL_RCC_OscConfig+0x27c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fd fa06 	bl	8001f7c <HAL_InitTick>
 8004b70:	4603      	mov	r3, r0
 8004b72:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d052      	beq.n	8004c20 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
 8004b7c:	e35e      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d032      	beq.n	8004bec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b86:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a42      	ldr	r2, [pc, #264]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b92:	f7fd fa43 	bl	800201c <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b9a:	f7fd fa3f 	bl	800201c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e347      	b.n	800523c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bac:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bb8:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a35      	ldr	r2, [pc, #212]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004bbe:	f043 0308 	orr.w	r3, r3, #8
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	4b33      	ldr	r3, [pc, #204]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4930      	ldr	r1, [pc, #192]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bd6:	4b2f      	ldr	r3, [pc, #188]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	492b      	ldr	r1, [pc, #172]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]
 8004bea:	e01a      	b.n	8004c22 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004bec:	4b29      	ldr	r3, [pc, #164]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004bf2:	f023 0301 	bic.w	r3, r3, #1
 8004bf6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fa10 	bl	800201c <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c00:	f7fd fa0c 	bl	800201c <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e314      	b.n	800523c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c12:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x1dc>
 8004c1e:	e000      	b.n	8004c22 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d073      	beq.n	8004d16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d005      	beq.n	8004c40 <HAL_RCC_OscConfig+0x21c>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d10e      	bne.n	8004c58 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	2b03      	cmp	r3, #3
 8004c3e:	d10b      	bne.n	8004c58 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d063      	beq.n	8004d14 <HAL_RCC_OscConfig+0x2f0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d15f      	bne.n	8004d14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e2f1      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c60:	d106      	bne.n	8004c70 <HAL_RCC_OscConfig+0x24c>
 8004c62:	4b0c      	ldr	r3, [pc, #48]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c6c:	6013      	str	r3, [r2, #0]
 8004c6e:	e025      	b.n	8004cbc <HAL_RCC_OscConfig+0x298>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c78:	d114      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x280>
 8004c7a:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a05      	ldr	r2, [pc, #20]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a02      	ldr	r2, [pc, #8]	; (8004c94 <HAL_RCC_OscConfig+0x270>)
 8004c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	e013      	b.n	8004cbc <HAL_RCC_OscConfig+0x298>
 8004c94:	40021000 	.word	0x40021000
 8004c98:	08006f3c 	.word	0x08006f3c
 8004c9c:	20000000 	.word	0x20000000
 8004ca0:	20000004 	.word	0x20000004
 8004ca4:	4ba0      	ldr	r3, [pc, #640]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a9f      	ldr	r2, [pc, #636]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	4b9d      	ldr	r3, [pc, #628]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a9c      	ldr	r2, [pc, #624]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d013      	beq.n	8004cec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fd f9aa 	bl	800201c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ccc:	f7fd f9a6 	bl	800201c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	; 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e2ae      	b.n	800523c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cde:	4b92      	ldr	r3, [pc, #584]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCC_OscConfig+0x2a8>
 8004cea:	e014      	b.n	8004d16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cec:	f7fd f996 	bl	800201c <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cf4:	f7fd f992 	bl	800201c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b64      	cmp	r3, #100	; 0x64
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e29a      	b.n	800523c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d06:	4b88      	ldr	r3, [pc, #544]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x2d0>
 8004d12:	e000      	b.n	8004d16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d060      	beq.n	8004de4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_OscConfig+0x310>
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d119      	bne.n	8004d62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d116      	bne.n	8004d62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d34:	4b7c      	ldr	r3, [pc, #496]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_OscConfig+0x328>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e277      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4c:	4b76      	ldr	r3, [pc, #472]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	061b      	lsls	r3, r3, #24
 8004d5a:	4973      	ldr	r1, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d60:	e040      	b.n	8004de4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d023      	beq.n	8004db2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d6a:	4b6f      	ldr	r3, [pc, #444]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a6e      	ldr	r2, [pc, #440]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d76:	f7fd f951 	bl	800201c <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7e:	f7fd f94d 	bl	800201c <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e255      	b.n	800523c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d90:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9c:	4b62      	ldr	r3, [pc, #392]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	061b      	lsls	r3, r3, #24
 8004daa:	495f      	ldr	r1, [pc, #380]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	604b      	str	r3, [r1, #4]
 8004db0:	e018      	b.n	8004de4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004db2:	4b5d      	ldr	r3, [pc, #372]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a5c      	ldr	r2, [pc, #368]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fd f92d 	bl	800201c <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc6:	f7fd f929 	bl	800201c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e231      	b.n	800523c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004dd8:	4b53      	ldr	r3, [pc, #332]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f0      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d03c      	beq.n	8004e6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01c      	beq.n	8004e32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004df8:	4b4b      	ldr	r3, [pc, #300]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	4a4a      	ldr	r2, [pc, #296]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fd f908 	bl	800201c <HAL_GetTick>
 8004e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e0e:	e008      	b.n	8004e22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e10:	f7fd f904 	bl	800201c <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d901      	bls.n	8004e22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	e20c      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e22:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ef      	beq.n	8004e10 <HAL_RCC_OscConfig+0x3ec>
 8004e30:	e01b      	b.n	8004e6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e32:	4b3d      	ldr	r3, [pc, #244]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e38:	4a3b      	ldr	r2, [pc, #236]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004e3a:	f023 0301 	bic.w	r3, r3, #1
 8004e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e42:	f7fd f8eb 	bl	800201c <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4a:	f7fd f8e7 	bl	800201c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e1ef      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004e5c:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1ef      	bne.n	8004e4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0304 	and.w	r3, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80a6 	beq.w	8004fc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10d      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e88:	4b27      	ldr	r3, [pc, #156]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e92:	6593      	str	r3, [r2, #88]	; 0x58
 8004e94:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ea4:	4b21      	ldr	r3, [pc, #132]	; (8004f2c <HAL_RCC_OscConfig+0x508>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d118      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eb0:	4b1e      	ldr	r3, [pc, #120]	; (8004f2c <HAL_RCC_OscConfig+0x508>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1d      	ldr	r2, [pc, #116]	; (8004f2c <HAL_RCC_OscConfig+0x508>)
 8004eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ebc:	f7fd f8ae 	bl	800201c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec4:	f7fd f8aa 	bl	800201c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e1b2      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ed6:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <HAL_RCC_OscConfig+0x508>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d108      	bne.n	8004efc <HAL_RCC_OscConfig+0x4d8>
 8004eea:	4b0f      	ldr	r3, [pc, #60]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	4a0d      	ldr	r2, [pc, #52]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004efa:	e029      	b.n	8004f50 <HAL_RCC_OscConfig+0x52c>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b05      	cmp	r3, #5
 8004f02:	d115      	bne.n	8004f30 <HAL_RCC_OscConfig+0x50c>
 8004f04:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0a:	4a07      	ldr	r2, [pc, #28]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004f0c:	f043 0304 	orr.w	r3, r3, #4
 8004f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	4a03      	ldr	r2, [pc, #12]	; (8004f28 <HAL_RCC_OscConfig+0x504>)
 8004f1c:	f043 0301 	orr.w	r3, r3, #1
 8004f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f24:	e014      	b.n	8004f50 <HAL_RCC_OscConfig+0x52c>
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40007000 	.word	0x40007000
 8004f30:	4b9a      	ldr	r3, [pc, #616]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	4a99      	ldr	r2, [pc, #612]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004f38:	f023 0301 	bic.w	r3, r3, #1
 8004f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f40:	4b96      	ldr	r3, [pc, #600]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	4a95      	ldr	r2, [pc, #596]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004f48:	f023 0304 	bic.w	r3, r3, #4
 8004f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d016      	beq.n	8004f86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fd f860 	bl	800201c <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fd f85c 	bl	800201c <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e162      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f76:	4b89      	ldr	r3, [pc, #548]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0ed      	beq.n	8004f60 <HAL_RCC_OscConfig+0x53c>
 8004f84:	e015      	b.n	8004fb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f86:	f7fd f849 	bl	800201c <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f8e:	f7fd f845 	bl	800201c <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e14b      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004fa4:	4b7d      	ldr	r3, [pc, #500]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1ed      	bne.n	8004f8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fb2:	7ffb      	ldrb	r3, [r7, #31]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d105      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb8:	4b78      	ldr	r3, [pc, #480]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	4a77      	ldr	r2, [pc, #476]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0320 	and.w	r3, r3, #32
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d03c      	beq.n	800504a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01c      	beq.n	8005012 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004fd8:	4b70      	ldr	r3, [pc, #448]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fde:	4a6f      	ldr	r2, [pc, #444]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8004fe0:	f043 0301 	orr.w	r3, r3, #1
 8004fe4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fd f818 	bl	800201c <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fee:	e008      	b.n	8005002 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff0:	f7fd f814 	bl	800201c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e11c      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005002:	4b66      	ldr	r3, [pc, #408]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8005004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ef      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x5cc>
 8005010:	e01b      	b.n	800504a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005012:	4b62      	ldr	r3, [pc, #392]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8005014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005018:	4a60      	ldr	r2, [pc, #384]	; (800519c <HAL_RCC_OscConfig+0x778>)
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005022:	f7fc fffb 	bl	800201c <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800502a:	f7fc fff7 	bl	800201c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e0ff      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800503c:	4b57      	ldr	r3, [pc, #348]	; (800519c <HAL_RCC_OscConfig+0x778>)
 800503e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1ef      	bne.n	800502a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80f3 	beq.w	800523a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	2b02      	cmp	r3, #2
 800505a:	f040 80c9 	bne.w	80051f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800505e:	4b4f      	ldr	r3, [pc, #316]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f003 0203 	and.w	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506e:	429a      	cmp	r2, r3
 8005070:	d12c      	bne.n	80050cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507c:	3b01      	subs	r3, #1
 800507e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005080:	429a      	cmp	r2, r3
 8005082:	d123      	bne.n	80050cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005090:	429a      	cmp	r2, r3
 8005092:	d11b      	bne.n	80050cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d113      	bne.n	80050cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	3b01      	subs	r3, #1
 80050b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d109      	bne.n	80050cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c2:	085b      	lsrs	r3, r3, #1
 80050c4:	3b01      	subs	r3, #1
 80050c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d06b      	beq.n	80051a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d062      	beq.n	8005198 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050d2:	4b32      	ldr	r3, [pc, #200]	; (800519c <HAL_RCC_OscConfig+0x778>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e0ac      	b.n	800523c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050e2:	4b2e      	ldr	r3, [pc, #184]	; (800519c <HAL_RCC_OscConfig+0x778>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2d      	ldr	r2, [pc, #180]	; (800519c <HAL_RCC_OscConfig+0x778>)
 80050e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050ee:	f7fc ff95 	bl	800201c <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f4:	e008      	b.n	8005108 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f6:	f7fc ff91 	bl	800201c <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e099      	b.n	800523c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005108:	4b24      	ldr	r3, [pc, #144]	; (800519c <HAL_RCC_OscConfig+0x778>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005114:	4b21      	ldr	r3, [pc, #132]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <HAL_RCC_OscConfig+0x77c>)
 800511a:	4013      	ands	r3, r2
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005124:	3a01      	subs	r2, #1
 8005126:	0112      	lsls	r2, r2, #4
 8005128:	4311      	orrs	r1, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800512e:	0212      	lsls	r2, r2, #8
 8005130:	4311      	orrs	r1, r2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005136:	0852      	lsrs	r2, r2, #1
 8005138:	3a01      	subs	r2, #1
 800513a:	0552      	lsls	r2, r2, #21
 800513c:	4311      	orrs	r1, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005142:	0852      	lsrs	r2, r2, #1
 8005144:	3a01      	subs	r2, #1
 8005146:	0652      	lsls	r2, r2, #25
 8005148:	4311      	orrs	r1, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800514e:	06d2      	lsls	r2, r2, #27
 8005150:	430a      	orrs	r2, r1
 8005152:	4912      	ldr	r1, [pc, #72]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8005154:	4313      	orrs	r3, r2
 8005156:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005158:	4b10      	ldr	r3, [pc, #64]	; (800519c <HAL_RCC_OscConfig+0x778>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a0f      	ldr	r2, [pc, #60]	; (800519c <HAL_RCC_OscConfig+0x778>)
 800515e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005162:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005164:	4b0d      	ldr	r3, [pc, #52]	; (800519c <HAL_RCC_OscConfig+0x778>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4a0c      	ldr	r2, [pc, #48]	; (800519c <HAL_RCC_OscConfig+0x778>)
 800516a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800516e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005170:	f7fc ff54 	bl	800201c <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005178:	f7fc ff50 	bl	800201c <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e058      	b.n	800523c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518a:	4b04      	ldr	r3, [pc, #16]	; (800519c <HAL_RCC_OscConfig+0x778>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005196:	e050      	b.n	800523a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e04f      	b.n	800523c <HAL_RCC_OscConfig+0x818>
 800519c:	40021000 	.word	0x40021000
 80051a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a4:	4b27      	ldr	r3, [pc, #156]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d144      	bne.n	800523a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051b0:	4b24      	ldr	r3, [pc, #144]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a23      	ldr	r2, [pc, #140]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 80051b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051bc:	4b21      	ldr	r3, [pc, #132]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	4a20      	ldr	r2, [pc, #128]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 80051c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051c8:	f7fc ff28 	bl	800201c <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051d0:	f7fc ff24 	bl	800201c <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e02c      	b.n	800523c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e2:	4b18      	ldr	r3, [pc, #96]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0x7ac>
 80051ee:	e024      	b.n	800523a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	d01f      	beq.n	8005236 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a12      	ldr	r2, [pc, #72]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 80051fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005202:	f7fc ff0b 	bl	800201c <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520a:	f7fc ff07 	bl	800201c <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e00f      	b.n	800523c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800521c:	4b09      	ldr	r3, [pc, #36]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f0      	bne.n	800520a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005228:	4b06      	ldr	r3, [pc, #24]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	4905      	ldr	r1, [pc, #20]	; (8005244 <HAL_RCC_OscConfig+0x820>)
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <HAL_RCC_OscConfig+0x824>)
 8005230:	4013      	ands	r3, r2
 8005232:	60cb      	str	r3, [r1, #12]
 8005234:	e001      	b.n	800523a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	40021000 	.word	0x40021000
 8005248:	feeefffc 	.word	0xfeeefffc

0800524c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0e7      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005260:	4b75      	ldr	r3, [pc, #468]	; (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d910      	bls.n	8005290 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526e:	4b72      	ldr	r3, [pc, #456]	; (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f023 0207 	bic.w	r2, r3, #7
 8005276:	4970      	ldr	r1, [pc, #448]	; (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	4b6e      	ldr	r3, [pc, #440]	; (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0cf      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d010      	beq.n	80052be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	4b66      	ldr	r3, [pc, #408]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d908      	bls.n	80052be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ac:	4b63      	ldr	r3, [pc, #396]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4960      	ldr	r1, [pc, #384]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d04c      	beq.n	8005364 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d107      	bne.n	80052e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d2:	4b5a      	ldr	r3, [pc, #360]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d121      	bne.n	8005322 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e0a6      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d107      	bne.n	80052fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052ea:	4b54      	ldr	r3, [pc, #336]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d115      	bne.n	8005322 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e09a      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005302:	4b4e      	ldr	r3, [pc, #312]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e08e      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005312:	4b4a      	ldr	r3, [pc, #296]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e086      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005322:	4b46      	ldr	r3, [pc, #280]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f023 0203 	bic.w	r2, r3, #3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	4943      	ldr	r1, [pc, #268]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005330:	4313      	orrs	r3, r2
 8005332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005334:	f7fc fe72 	bl	800201c <HAL_GetTick>
 8005338:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533a:	e00a      	b.n	8005352 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533c:	f7fc fe6e 	bl	800201c <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	f241 3288 	movw	r2, #5000	; 0x1388
 800534a:	4293      	cmp	r3, r2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e06e      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	4b3a      	ldr	r3, [pc, #232]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 020c 	and.w	r2, r3, #12
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	429a      	cmp	r2, r3
 8005362:	d1eb      	bne.n	800533c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	4b31      	ldr	r3, [pc, #196]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800537c:	429a      	cmp	r2, r3
 800537e:	d208      	bcs.n	8005392 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005380:	4b2e      	ldr	r3, [pc, #184]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	492b      	ldr	r1, [pc, #172]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 800538e:	4313      	orrs	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005392:	4b29      	ldr	r3, [pc, #164]	; (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d210      	bcs.n	80053c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a0:	4b25      	ldr	r3, [pc, #148]	; (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f023 0207 	bic.w	r2, r3, #7
 80053a8:	4923      	ldr	r1, [pc, #140]	; (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b0:	4b21      	ldr	r3, [pc, #132]	; (8005438 <HAL_RCC_ClockConfig+0x1ec>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d001      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e036      	b.n	8005430 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053ce:	4b1b      	ldr	r3, [pc, #108]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	4918      	ldr	r1, [pc, #96]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ec:	4b13      	ldr	r3, [pc, #76]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	4910      	ldr	r1, [pc, #64]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005400:	f000 f824 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <HAL_RCC_ClockConfig+0x1f0>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	490b      	ldr	r1, [pc, #44]	; (8005440 <HAL_RCC_ClockConfig+0x1f4>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
 800541c:	4a09      	ldr	r2, [pc, #36]	; (8005444 <HAL_RCC_ClockConfig+0x1f8>)
 800541e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <HAL_RCC_ClockConfig+0x1fc>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4618      	mov	r0, r3
 8005426:	f7fc fda9 	bl	8001f7c <HAL_InitTick>
 800542a:	4603      	mov	r3, r0
 800542c:	72fb      	strb	r3, [r7, #11]

  return status;
 800542e:	7afb      	ldrb	r3, [r7, #11]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40022000 	.word	0x40022000
 800543c:	40021000 	.word	0x40021000
 8005440:	08006f3c 	.word	0x08006f3c
 8005444:	20000000 	.word	0x20000000
 8005448:	20000004 	.word	0x20000004

0800544c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800544c:	b480      	push	{r7}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	2300      	movs	r3, #0
 8005458:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800545a:	4b3e      	ldr	r3, [pc, #248]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005464:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d005      	beq.n	8005480 <HAL_RCC_GetSysClockFreq+0x34>
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b0c      	cmp	r3, #12
 8005478:	d121      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d11e      	bne.n	80054be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005480:	4b34      	ldr	r3, [pc, #208]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d107      	bne.n	800549c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800548c:	4b31      	ldr	r3, [pc, #196]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800548e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 030f 	and.w	r3, r3, #15
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e005      	b.n	80054a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800549c:	4b2d      	ldr	r3, [pc, #180]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054a8:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10d      	bne.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80054bc:	e00a      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	d102      	bne.n	80054ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054c4:	4b25      	ldr	r3, [pc, #148]	; (800555c <HAL_RCC_GetSysClockFreq+0x110>)
 80054c6:	61bb      	str	r3, [r7, #24]
 80054c8:	e004      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d101      	bne.n	80054d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054d0:	4b23      	ldr	r3, [pc, #140]	; (8005560 <HAL_RCC_GetSysClockFreq+0x114>)
 80054d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d134      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054da:	4b1e      	ldr	r3, [pc, #120]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d003      	beq.n	80054f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d003      	beq.n	80054f8 <HAL_RCC_GetSysClockFreq+0xac>
 80054f0:	e005      	b.n	80054fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80054f2:	4b1a      	ldr	r3, [pc, #104]	; (800555c <HAL_RCC_GetSysClockFreq+0x110>)
 80054f4:	617b      	str	r3, [r7, #20]
      break;
 80054f6:	e005      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80054f8:	4b19      	ldr	r3, [pc, #100]	; (8005560 <HAL_RCC_GetSysClockFreq+0x114>)
 80054fa:	617b      	str	r3, [r7, #20]
      break;
 80054fc:	e002      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	617b      	str	r3, [r7, #20]
      break;
 8005502:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005504:	4b13      	ldr	r3, [pc, #76]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	3301      	adds	r3, #1
 8005510:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005512:	4b10      	ldr	r3, [pc, #64]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	0a1b      	lsrs	r3, r3, #8
 8005518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	fb03 f202 	mul.w	r2, r3, r2
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	fbb2 f3f3 	udiv	r3, r2, r3
 8005528:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800552a:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <HAL_RCC_GetSysClockFreq+0x108>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	0e5b      	lsrs	r3, r3, #25
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	3301      	adds	r3, #1
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005542:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005544:	69bb      	ldr	r3, [r7, #24]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3724      	adds	r7, #36	; 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40021000 	.word	0x40021000
 8005558:	08006f54 	.word	0x08006f54
 800555c:	00f42400 	.word	0x00f42400
 8005560:	007a1200 	.word	0x007a1200

08005564 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005568:	4b03      	ldr	r3, [pc, #12]	; (8005578 <HAL_RCC_GetHCLKFreq+0x14>)
 800556a:	681b      	ldr	r3, [r3, #0]
}
 800556c:	4618      	mov	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	20000000 	.word	0x20000000

0800557c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005580:	f7ff fff0 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 8005584:	4602      	mov	r2, r0
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	4904      	ldr	r1, [pc, #16]	; (80055a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005592:	5ccb      	ldrb	r3, [r1, r3]
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40021000 	.word	0x40021000
 80055a4:	08006f4c 	.word	0x08006f4c

080055a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055ac:	f7ff ffda 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 80055b0:	4602      	mov	r2, r0
 80055b2:	4b06      	ldr	r3, [pc, #24]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	0adb      	lsrs	r3, r3, #11
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	4904      	ldr	r1, [pc, #16]	; (80055d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055be:	5ccb      	ldrb	r3, [r1, r3]
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40021000 	.word	0x40021000
 80055d0:	08006f4c 	.word	0x08006f4c

080055d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80055e0:	4b2a      	ldr	r3, [pc, #168]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80055ec:	f7ff f9b6 	bl	800495c <HAL_PWREx_GetVoltageRange>
 80055f0:	6178      	str	r0, [r7, #20]
 80055f2:	e014      	b.n	800561e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80055f4:	4b25      	ldr	r3, [pc, #148]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f8:	4a24      	ldr	r2, [pc, #144]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80055fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005600:	4b22      	ldr	r3, [pc, #136]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800560c:	f7ff f9a6 	bl	800495c <HAL_PWREx_GetVoltageRange>
 8005610:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005612:	4b1e      	ldr	r3, [pc, #120]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005616:	4a1d      	ldr	r2, [pc, #116]	; (800568c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005624:	d10b      	bne.n	800563e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d919      	bls.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2ba0      	cmp	r3, #160	; 0xa0
 8005630:	d902      	bls.n	8005638 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005632:	2302      	movs	r3, #2
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	e013      	b.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005638:	2301      	movs	r3, #1
 800563a:	613b      	str	r3, [r7, #16]
 800563c:	e010      	b.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b80      	cmp	r3, #128	; 0x80
 8005642:	d902      	bls.n	800564a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005644:	2303      	movs	r3, #3
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	e00a      	b.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b80      	cmp	r3, #128	; 0x80
 800564e:	d102      	bne.n	8005656 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005650:	2302      	movs	r3, #2
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	e004      	b.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b70      	cmp	r3, #112	; 0x70
 800565a:	d101      	bne.n	8005660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800565c:	2301      	movs	r3, #1
 800565e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005660:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f023 0207 	bic.w	r2, r3, #7
 8005668:	4909      	ldr	r1, [pc, #36]	; (8005690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	429a      	cmp	r2, r3
 800567c:	d001      	beq.n	8005682 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	40021000 	.word	0x40021000
 8005690:	40022000 	.word	0x40022000

08005694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800569c:	2300      	movs	r3, #0
 800569e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056a0:	2300      	movs	r3, #0
 80056a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d031      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056b8:	d01a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80056ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80056be:	d814      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d009      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056c8:	d10f      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80056ca:	4b5d      	ldr	r3, [pc, #372]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4a5c      	ldr	r2, [pc, #368]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056d6:	e00c      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	2100      	movs	r1, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fa22 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056e8:	e003      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	74fb      	strb	r3, [r7, #19]
      break;
 80056ee:	e000      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80056f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f2:	7cfb      	ldrb	r3, [r7, #19]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056f8:	4b51      	ldr	r3, [pc, #324]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	494e      	ldr	r1, [pc, #312]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800570e:	e001      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	7cfb      	ldrb	r3, [r7, #19]
 8005712:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571c:	2b00      	cmp	r3, #0
 800571e:	f000 809e 	beq.w	800585e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005722:	2300      	movs	r3, #0
 8005724:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005726:	4b46      	ldr	r3, [pc, #280]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005736:	2300      	movs	r3, #0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00d      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573c:	4b40      	ldr	r3, [pc, #256]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800573e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005740:	4a3f      	ldr	r2, [pc, #252]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005746:	6593      	str	r3, [r2, #88]	; 0x58
 8005748:	4b3d      	ldr	r3, [pc, #244]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005754:	2301      	movs	r3, #1
 8005756:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005758:	4b3a      	ldr	r3, [pc, #232]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a39      	ldr	r2, [pc, #228]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800575e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005764:	f7fc fc5a 	bl	800201c <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800576a:	e009      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576c:	f7fc fc56 	bl	800201c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d902      	bls.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	74fb      	strb	r3, [r7, #19]
        break;
 800577e:	e005      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005780:	4b30      	ldr	r3, [pc, #192]	; (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0ef      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800578c:	7cfb      	ldrb	r3, [r7, #19]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d15a      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005792:	4b2b      	ldr	r3, [pc, #172]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800579c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01e      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d019      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057ae:	4b24      	ldr	r3, [pc, #144]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ba:	4b21      	ldr	r3, [pc, #132]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c0:	4a1f      	ldr	r2, [pc, #124]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057da:	4a19      	ldr	r2, [pc, #100]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d016      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fc fc16 	bl	800201c <HAL_GetTick>
 80057f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f2:	e00b      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f4:	f7fc fc12 	bl	800201c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d902      	bls.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	74fb      	strb	r3, [r7, #19]
            break;
 800580a:	e006      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ec      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005820:	4b07      	ldr	r3, [pc, #28]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582e:	4904      	ldr	r1, [pc, #16]	; (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005836:	e009      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005838:	7cfb      	ldrb	r3, [r7, #19]
 800583a:	74bb      	strb	r3, [r7, #18]
 800583c:	e006      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800584c:	7c7b      	ldrb	r3, [r7, #17]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005852:	4b8d      	ldr	r3, [pc, #564]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005856:	4a8c      	ldr	r2, [pc, #560]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800585c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800586a:	4b87      	ldr	r3, [pc, #540]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005870:	f023 0203 	bic.w	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	4983      	ldr	r1, [pc, #524]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800588c:	4b7e      	ldr	r3, [pc, #504]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005892:	f023 020c 	bic.w	r2, r3, #12
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	497b      	ldr	r1, [pc, #492]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ae:	4b76      	ldr	r3, [pc, #472]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	4972      	ldr	r1, [pc, #456]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058d0:	4b6d      	ldr	r3, [pc, #436]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	496a      	ldr	r1, [pc, #424]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80058f2:	4b65      	ldr	r3, [pc, #404]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005900:	4961      	ldr	r1, [pc, #388]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005914:	4b5c      	ldr	r3, [pc, #368]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	4959      	ldr	r1, [pc, #356]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005936:	4b54      	ldr	r3, [pc, #336]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	4950      	ldr	r1, [pc, #320]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005958:	4b4b      	ldr	r3, [pc, #300]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005966:	4948      	ldr	r1, [pc, #288]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800597a:	4b43      	ldr	r3, [pc, #268]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005980:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	493f      	ldr	r1, [pc, #252]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d028      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800599c:	4b3a      	ldr	r3, [pc, #232]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059aa:	4937      	ldr	r1, [pc, #220]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ba:	d106      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059bc:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	4a31      	ldr	r2, [pc, #196]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059c6:	60d3      	str	r3, [r2, #12]
 80059c8:	e011      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059d2:	d10c      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3304      	adds	r3, #4
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 f8a4 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80059ea:	7cfb      	ldrb	r3, [r7, #19]
 80059ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d028      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059fa:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a08:	491f      	ldr	r1, [pc, #124]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a18:	d106      	bne.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005a20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a24:	60d3      	str	r3, [r2, #12]
 8005a26:	e011      	b.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a30:	d10c      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3304      	adds	r3, #4
 8005a36:	2101      	movs	r1, #1
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 f875 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a42:	7cfb      	ldrb	r3, [r7, #19]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005a48:	7cfb      	ldrb	r3, [r7, #19]
 8005a4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d02b      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a66:	4908      	ldr	r1, [pc, #32]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a76:	d109      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a78:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4a02      	ldr	r2, [pc, #8]	; (8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8005a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a82:	60d3      	str	r3, [r2, #12]
 8005a84:	e014      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005a86:	bf00      	nop
 8005a88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f843 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aa6:	7cfb      	ldrb	r3, [r7, #19]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
 8005aae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d01c      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005abc:	4b19      	ldr	r3, [pc, #100]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aca:	4916      	ldr	r1, [pc, #88]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ada:	d10c      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3304      	adds	r3, #4
 8005ae0:	2102      	movs	r1, #2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f820 	bl	8005b28 <RCCEx_PLLSAI1_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aec:	7cfb      	ldrb	r3, [r7, #19]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8005af2:	7cfb      	ldrb	r3, [r7, #19]
 8005af4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d00a      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b10:	4904      	ldr	r1, [pc, #16]	; (8005b24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b18:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	40021000 	.word	0x40021000

08005b28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b36:	4b74      	ldr	r3, [pc, #464]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d018      	beq.n	8005b74 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b42:	4b71      	ldr	r3, [pc, #452]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0203 	and.w	r2, r3, #3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d10d      	bne.n	8005b6e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
       ||
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d009      	beq.n	8005b6e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b5a:	4b6b      	ldr	r3, [pc, #428]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	091b      	lsrs	r3, r3, #4
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
       ||
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d047      	beq.n	8005bfe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	73fb      	strb	r3, [r7, #15]
 8005b72:	e044      	b.n	8005bfe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d018      	beq.n	8005bae <RCCEx_PLLSAI1_Config+0x86>
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d825      	bhi.n	8005bcc <RCCEx_PLLSAI1_Config+0xa4>
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d002      	beq.n	8005b8a <RCCEx_PLLSAI1_Config+0x62>
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d009      	beq.n	8005b9c <RCCEx_PLLSAI1_Config+0x74>
 8005b88:	e020      	b.n	8005bcc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b8a:	4b5f      	ldr	r3, [pc, #380]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d11d      	bne.n	8005bd2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b9a:	e01a      	b.n	8005bd2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b9c:	4b5a      	ldr	r3, [pc, #360]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d116      	bne.n	8005bd6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bac:	e013      	b.n	8005bd6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005bae:	4b56      	ldr	r3, [pc, #344]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10f      	bne.n	8005bda <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005bba:	4b53      	ldr	r3, [pc, #332]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005bca:	e006      	b.n	8005bda <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e004      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bd2:	bf00      	nop
 8005bd4:	e002      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bd6:	bf00      	nop
 8005bd8:	e000      	b.n	8005bdc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bda:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10d      	bne.n	8005bfe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005be2:	4b49      	ldr	r3, [pc, #292]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6819      	ldr	r1, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	4943      	ldr	r1, [pc, #268]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d17c      	bne.n	8005cfe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c04:	4b40      	ldr	r3, [pc, #256]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3f      	ldr	r2, [pc, #252]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c10:	f7fc fa04 	bl	800201c <HAL_GetTick>
 8005c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c16:	e009      	b.n	8005c2c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c18:	f7fc fa00 	bl	800201c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d902      	bls.n	8005c2c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	73fb      	strb	r3, [r7, #15]
        break;
 8005c2a:	e005      	b.n	8005c38 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c2c:	4b36      	ldr	r3, [pc, #216]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1ef      	bne.n	8005c18 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d15f      	bne.n	8005cfe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d110      	bne.n	8005c66 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c44:	4b30      	ldr	r3, [pc, #192]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005c4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6892      	ldr	r2, [r2, #8]
 8005c54:	0211      	lsls	r1, r2, #8
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	68d2      	ldr	r2, [r2, #12]
 8005c5a:	06d2      	lsls	r2, r2, #27
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	492a      	ldr	r1, [pc, #168]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	610b      	str	r3, [r1, #16]
 8005c64:	e027      	b.n	8005cb6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d112      	bne.n	8005c92 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c6c:	4b26      	ldr	r3, [pc, #152]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6892      	ldr	r2, [r2, #8]
 8005c7c:	0211      	lsls	r1, r2, #8
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6912      	ldr	r2, [r2, #16]
 8005c82:	0852      	lsrs	r2, r2, #1
 8005c84:	3a01      	subs	r2, #1
 8005c86:	0552      	lsls	r2, r2, #21
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	491f      	ldr	r1, [pc, #124]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	610b      	str	r3, [r1, #16]
 8005c90:	e011      	b.n	8005cb6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c92:	4b1d      	ldr	r3, [pc, #116]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6892      	ldr	r2, [r2, #8]
 8005ca2:	0211      	lsls	r1, r2, #8
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6952      	ldr	r2, [r2, #20]
 8005ca8:	0852      	lsrs	r2, r2, #1
 8005caa:	3a01      	subs	r2, #1
 8005cac:	0652      	lsls	r2, r2, #25
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	4915      	ldr	r1, [pc, #84]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005cb6:	4b14      	ldr	r3, [pc, #80]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005cc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc2:	f7fc f9ab 	bl	800201c <HAL_GetTick>
 8005cc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cc8:	e009      	b.n	8005cde <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cca:	f7fc f9a7 	bl	800201c <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d902      	bls.n	8005cde <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	73fb      	strb	r3, [r7, #15]
          break;
 8005cdc:	e005      	b.n	8005cea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0ef      	beq.n	8005cca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cf0:	4b05      	ldr	r3, [pc, #20]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	4903      	ldr	r1, [pc, #12]	; (8005d08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	40021000 	.word	0x40021000

08005d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e049      	b.n	8005db2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fc f800 	bl	8001d38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3304      	adds	r3, #4
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4610      	mov	r0, r2
 8005d4c:	f000 fa7e 	bl	800624c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d001      	beq.n	8005dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e03b      	b.n	8005e4c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f042 0201 	orr.w	r2, r2, #1
 8005dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a19      	ldr	r2, [pc, #100]	; (8005e58 <HAL_TIM_Base_Start_IT+0x9c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x4e>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x4e>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <HAL_TIM_Base_Start_IT+0xa0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d115      	bne.n	8005e36 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <HAL_TIM_Base_Start_IT+0xa4>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b06      	cmp	r3, #6
 8005e1a:	d015      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x8c>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e22:	d011      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e34:	e008      	b.n	8005e48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e000      	b.n	8005e4a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	00010007 	.word	0x00010007

08005e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d020      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01b      	beq.n	8005ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0202 	mvn.w	r2, #2
 8005e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f9ad 	bl	800620e <HAL_TIM_IC_CaptureCallback>
 8005eb4:	e005      	b.n	8005ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f99f 	bl	80061fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f9b0 	bl	8006222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d020      	beq.n	8005f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0204 	mvn.w	r2, #4
 8005ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2202      	movs	r2, #2
 8005eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f987 	bl	800620e <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f979 	bl	80061fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f98a 	bl	8006222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d020      	beq.n	8005f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0208 	mvn.w	r2, #8
 8005f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2204      	movs	r2, #4
 8005f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f961 	bl	800620e <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f953 	bl	80061fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f964 	bl	8006222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d020      	beq.n	8005fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d01b      	beq.n	8005fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0210 	mvn.w	r2, #16
 8005f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2208      	movs	r2, #8
 8005f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f93b 	bl	800620e <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f92d 	bl	80061fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f93e 	bl	8006222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d007      	beq.n	8005fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0201 	mvn.w	r2, #1
 8005fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fb fd70 	bl	8001ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa9a 	bl	8006528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fa92 	bl	800653c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8fd 	bl	8006236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0220 	mvn.w	r2, #32
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa5a 	bl	8006514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_TIM_ConfigClockSource+0x1c>
 8006080:	2302      	movs	r3, #2
 8006082:	e0b6      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x18a>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c0:	d03e      	beq.n	8006140 <HAL_TIM_ConfigClockSource+0xd8>
 80060c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c6:	f200 8087 	bhi.w	80061d8 <HAL_TIM_ConfigClockSource+0x170>
 80060ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ce:	f000 8086 	beq.w	80061de <HAL_TIM_ConfigClockSource+0x176>
 80060d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d6:	d87f      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x170>
 80060d8:	2b70      	cmp	r3, #112	; 0x70
 80060da:	d01a      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0xaa>
 80060dc:	2b70      	cmp	r3, #112	; 0x70
 80060de:	d87b      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x170>
 80060e0:	2b60      	cmp	r3, #96	; 0x60
 80060e2:	d050      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x11e>
 80060e4:	2b60      	cmp	r3, #96	; 0x60
 80060e6:	d877      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x170>
 80060e8:	2b50      	cmp	r3, #80	; 0x50
 80060ea:	d03c      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0xfe>
 80060ec:	2b50      	cmp	r3, #80	; 0x50
 80060ee:	d873      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x170>
 80060f0:	2b40      	cmp	r3, #64	; 0x40
 80060f2:	d058      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x13e>
 80060f4:	2b40      	cmp	r3, #64	; 0x40
 80060f6:	d86f      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x170>
 80060f8:	2b30      	cmp	r3, #48	; 0x30
 80060fa:	d064      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x15e>
 80060fc:	2b30      	cmp	r3, #48	; 0x30
 80060fe:	d86b      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x170>
 8006100:	2b20      	cmp	r3, #32
 8006102:	d060      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006104:	2b20      	cmp	r3, #32
 8006106:	d867      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x170>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d05c      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x15e>
 800610c:	2b10      	cmp	r3, #16
 800610e:	d05a      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x15e>
 8006110:	e062      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006122:	f000 f971 	bl	8006408 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	609a      	str	r2, [r3, #8]
      break;
 800613e:	e04f      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006150:	f000 f95a 	bl	8006408 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006162:	609a      	str	r2, [r3, #8]
      break;
 8006164:	e03c      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006172:	461a      	mov	r2, r3
 8006174:	f000 f8ce 	bl	8006314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2150      	movs	r1, #80	; 0x50
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f927 	bl	80063d2 <TIM_ITRx_SetConfig>
      break;
 8006184:	e02c      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006192:	461a      	mov	r2, r3
 8006194:	f000 f8ed 	bl	8006372 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2160      	movs	r1, #96	; 0x60
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f917 	bl	80063d2 <TIM_ITRx_SetConfig>
      break;
 80061a4:	e01c      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b2:	461a      	mov	r2, r3
 80061b4:	f000 f8ae 	bl	8006314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2140      	movs	r1, #64	; 0x40
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f907 	bl	80063d2 <TIM_ITRx_SetConfig>
      break;
 80061c4:	e00c      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f000 f8fe 	bl	80063d2 <TIM_ITRx_SetConfig>
      break;
 80061d6:	e003      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
      break;
 80061dc:	e000      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80061de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a2a      	ldr	r2, [pc, #168]	; (8006308 <TIM_Base_SetConfig+0xbc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_Base_SetConfig+0x20>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626a:	d108      	bne.n	800627e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a21      	ldr	r2, [pc, #132]	; (8006308 <TIM_Base_SetConfig+0xbc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00b      	beq.n	800629e <TIM_Base_SetConfig+0x52>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628c:	d007      	beq.n	800629e <TIM_Base_SetConfig+0x52>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1e      	ldr	r2, [pc, #120]	; (800630c <TIM_Base_SetConfig+0xc0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_Base_SetConfig+0x52>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a1d      	ldr	r2, [pc, #116]	; (8006310 <TIM_Base_SetConfig+0xc4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d108      	bne.n	80062b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a0c      	ldr	r2, [pc, #48]	; (8006308 <TIM_Base_SetConfig+0xbc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d007      	beq.n	80062ec <TIM_Base_SetConfig+0xa0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a0b      	ldr	r2, [pc, #44]	; (800630c <TIM_Base_SetConfig+0xc0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d003      	beq.n	80062ec <TIM_Base_SetConfig+0xa0>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <TIM_Base_SetConfig+0xc4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d103      	bne.n	80062f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	691a      	ldr	r2, [r3, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	615a      	str	r2, [r3, #20]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40014000 	.word	0x40014000
 8006310:	40014400 	.word	0x40014400

08006314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f023 0201 	bic.w	r2, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800633e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f023 030a 	bic.w	r3, r3, #10
 8006350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4313      	orrs	r3, r2
 8006358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	621a      	str	r2, [r3, #32]
}
 8006366:	bf00      	nop
 8006368:	371c      	adds	r7, #28
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006372:	b480      	push	{r7}
 8006374:	b087      	sub	sp, #28
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f023 0210 	bic.w	r2, r3, #16
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800639c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	031b      	lsls	r3, r3, #12
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	f043 0307 	orr.w	r3, r3, #7
 80063f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	609a      	str	r2, [r3, #8]
}
 80063fc:	bf00      	nop
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	021a      	lsls	r2, r3, #8
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	431a      	orrs	r2, r3
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	4313      	orrs	r3, r2
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	4313      	orrs	r3, r2
 8006434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	609a      	str	r2, [r3, #8]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006458:	2b01      	cmp	r3, #1
 800645a:	d101      	bne.n	8006460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800645c:	2302      	movs	r3, #2
 800645e:	e04f      	b.n	8006500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a21      	ldr	r2, [pc, #132]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d108      	bne.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006490:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a14      	ldr	r2, [pc, #80]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d009      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c8:	d004      	beq.n	80064d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a10      	ldr	r2, [pc, #64]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d10c      	bne.n	80064ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40014000 	.word	0x40014000

08006514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e040      	b.n	80065e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7fb fc04 	bl	8001d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2224      	movs	r2, #36	; 0x24
 800657c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0201 	bic.w	r2, r2, #1
 800658c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	2b00      	cmp	r3, #0
 8006594:	d002      	beq.n	800659c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fa82 	bl	8006aa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f825 	bl	80065ec <UART_SetConfig>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e01b      	b.n	80065e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fb01 	bl	8006be4 <UART_CheckIdleState>
 80065e2:	4603      	mov	r3, r0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f0:	b08a      	sub	sp, #40	; 0x28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	431a      	orrs	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	431a      	orrs	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	4313      	orrs	r3, r2
 8006612:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	4b9e      	ldr	r3, [pc, #632]	; (8006894 <UART_SetConfig+0x2a8>)
 800661c:	4013      	ands	r3, r2
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	6812      	ldr	r2, [r2, #0]
 8006622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006624:	430b      	orrs	r3, r1
 8006626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a93      	ldr	r2, [pc, #588]	; (8006898 <UART_SetConfig+0x2ac>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006654:	4313      	orrs	r3, r2
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	430a      	orrs	r2, r1
 800666a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a8a      	ldr	r2, [pc, #552]	; (800689c <UART_SetConfig+0x2b0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d126      	bne.n	80066c4 <UART_SetConfig+0xd8>
 8006676:	4b8a      	ldr	r3, [pc, #552]	; (80068a0 <UART_SetConfig+0x2b4>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	2b03      	cmp	r3, #3
 8006682:	d81b      	bhi.n	80066bc <UART_SetConfig+0xd0>
 8006684:	a201      	add	r2, pc, #4	; (adr r2, 800668c <UART_SetConfig+0xa0>)
 8006686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668a:	bf00      	nop
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066ad 	.word	0x080066ad
 8006694:	080066a5 	.word	0x080066a5
 8006698:	080066b5 	.word	0x080066b5
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066a2:	e0ab      	b.n	80067fc <UART_SetConfig+0x210>
 80066a4:	2302      	movs	r3, #2
 80066a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066aa:	e0a7      	b.n	80067fc <UART_SetConfig+0x210>
 80066ac:	2304      	movs	r3, #4
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b2:	e0a3      	b.n	80067fc <UART_SetConfig+0x210>
 80066b4:	2308      	movs	r3, #8
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ba:	e09f      	b.n	80067fc <UART_SetConfig+0x210>
 80066bc:	2310      	movs	r3, #16
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c2:	e09b      	b.n	80067fc <UART_SetConfig+0x210>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a76      	ldr	r2, [pc, #472]	; (80068a4 <UART_SetConfig+0x2b8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d138      	bne.n	8006740 <UART_SetConfig+0x154>
 80066ce:	4b74      	ldr	r3, [pc, #464]	; (80068a0 <UART_SetConfig+0x2b4>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d4:	f003 030c 	and.w	r3, r3, #12
 80066d8:	2b0c      	cmp	r3, #12
 80066da:	d82d      	bhi.n	8006738 <UART_SetConfig+0x14c>
 80066dc:	a201      	add	r2, pc, #4	; (adr r2, 80066e4 <UART_SetConfig+0xf8>)
 80066de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e2:	bf00      	nop
 80066e4:	08006719 	.word	0x08006719
 80066e8:	08006739 	.word	0x08006739
 80066ec:	08006739 	.word	0x08006739
 80066f0:	08006739 	.word	0x08006739
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006739 	.word	0x08006739
 80066fc:	08006739 	.word	0x08006739
 8006700:	08006739 	.word	0x08006739
 8006704:	08006721 	.word	0x08006721
 8006708:	08006739 	.word	0x08006739
 800670c:	08006739 	.word	0x08006739
 8006710:	08006739 	.word	0x08006739
 8006714:	08006731 	.word	0x08006731
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671e:	e06d      	b.n	80067fc <UART_SetConfig+0x210>
 8006720:	2302      	movs	r3, #2
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006726:	e069      	b.n	80067fc <UART_SetConfig+0x210>
 8006728:	2304      	movs	r3, #4
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672e:	e065      	b.n	80067fc <UART_SetConfig+0x210>
 8006730:	2308      	movs	r3, #8
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006736:	e061      	b.n	80067fc <UART_SetConfig+0x210>
 8006738:	2310      	movs	r3, #16
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e05d      	b.n	80067fc <UART_SetConfig+0x210>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a58      	ldr	r2, [pc, #352]	; (80068a8 <UART_SetConfig+0x2bc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d125      	bne.n	8006796 <UART_SetConfig+0x1aa>
 800674a:	4b55      	ldr	r3, [pc, #340]	; (80068a0 <UART_SetConfig+0x2b4>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006754:	2b30      	cmp	r3, #48	; 0x30
 8006756:	d016      	beq.n	8006786 <UART_SetConfig+0x19a>
 8006758:	2b30      	cmp	r3, #48	; 0x30
 800675a:	d818      	bhi.n	800678e <UART_SetConfig+0x1a2>
 800675c:	2b20      	cmp	r3, #32
 800675e:	d00a      	beq.n	8006776 <UART_SetConfig+0x18a>
 8006760:	2b20      	cmp	r3, #32
 8006762:	d814      	bhi.n	800678e <UART_SetConfig+0x1a2>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <UART_SetConfig+0x182>
 8006768:	2b10      	cmp	r3, #16
 800676a:	d008      	beq.n	800677e <UART_SetConfig+0x192>
 800676c:	e00f      	b.n	800678e <UART_SetConfig+0x1a2>
 800676e:	2300      	movs	r3, #0
 8006770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006774:	e042      	b.n	80067fc <UART_SetConfig+0x210>
 8006776:	2302      	movs	r3, #2
 8006778:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677c:	e03e      	b.n	80067fc <UART_SetConfig+0x210>
 800677e:	2304      	movs	r3, #4
 8006780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006784:	e03a      	b.n	80067fc <UART_SetConfig+0x210>
 8006786:	2308      	movs	r3, #8
 8006788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678c:	e036      	b.n	80067fc <UART_SetConfig+0x210>
 800678e:	2310      	movs	r3, #16
 8006790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006794:	e032      	b.n	80067fc <UART_SetConfig+0x210>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a3f      	ldr	r2, [pc, #252]	; (8006898 <UART_SetConfig+0x2ac>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d12a      	bne.n	80067f6 <UART_SetConfig+0x20a>
 80067a0:	4b3f      	ldr	r3, [pc, #252]	; (80068a0 <UART_SetConfig+0x2b4>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ae:	d01a      	beq.n	80067e6 <UART_SetConfig+0x1fa>
 80067b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067b4:	d81b      	bhi.n	80067ee <UART_SetConfig+0x202>
 80067b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ba:	d00c      	beq.n	80067d6 <UART_SetConfig+0x1ea>
 80067bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c0:	d815      	bhi.n	80067ee <UART_SetConfig+0x202>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <UART_SetConfig+0x1e2>
 80067c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ca:	d008      	beq.n	80067de <UART_SetConfig+0x1f2>
 80067cc:	e00f      	b.n	80067ee <UART_SetConfig+0x202>
 80067ce:	2300      	movs	r3, #0
 80067d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d4:	e012      	b.n	80067fc <UART_SetConfig+0x210>
 80067d6:	2302      	movs	r3, #2
 80067d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067dc:	e00e      	b.n	80067fc <UART_SetConfig+0x210>
 80067de:	2304      	movs	r3, #4
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e4:	e00a      	b.n	80067fc <UART_SetConfig+0x210>
 80067e6:	2308      	movs	r3, #8
 80067e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ec:	e006      	b.n	80067fc <UART_SetConfig+0x210>
 80067ee:	2310      	movs	r3, #16
 80067f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f4:	e002      	b.n	80067fc <UART_SetConfig+0x210>
 80067f6:	2310      	movs	r3, #16
 80067f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a25      	ldr	r2, [pc, #148]	; (8006898 <UART_SetConfig+0x2ac>)
 8006802:	4293      	cmp	r3, r2
 8006804:	f040 808a 	bne.w	800691c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800680c:	2b08      	cmp	r3, #8
 800680e:	d824      	bhi.n	800685a <UART_SetConfig+0x26e>
 8006810:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0x22c>)
 8006812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006816:	bf00      	nop
 8006818:	0800683d 	.word	0x0800683d
 800681c:	0800685b 	.word	0x0800685b
 8006820:	08006845 	.word	0x08006845
 8006824:	0800685b 	.word	0x0800685b
 8006828:	0800684b 	.word	0x0800684b
 800682c:	0800685b 	.word	0x0800685b
 8006830:	0800685b 	.word	0x0800685b
 8006834:	0800685b 	.word	0x0800685b
 8006838:	08006853 	.word	0x08006853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800683c:	f7fe fe9e 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 8006840:	61f8      	str	r0, [r7, #28]
        break;
 8006842:	e010      	b.n	8006866 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006844:	4b19      	ldr	r3, [pc, #100]	; (80068ac <UART_SetConfig+0x2c0>)
 8006846:	61fb      	str	r3, [r7, #28]
        break;
 8006848:	e00d      	b.n	8006866 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800684a:	f7fe fdff 	bl	800544c <HAL_RCC_GetSysClockFreq>
 800684e:	61f8      	str	r0, [r7, #28]
        break;
 8006850:	e009      	b.n	8006866 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	61fb      	str	r3, [r7, #28]
        break;
 8006858:	e005      	b.n	8006866 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006864:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 8109 	beq.w	8006a80 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	4413      	add	r3, r2
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	429a      	cmp	r2, r3
 800687c:	d305      	bcc.n	800688a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	429a      	cmp	r2, r3
 8006888:	d912      	bls.n	80068b0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006890:	e0f6      	b.n	8006a80 <UART_SetConfig+0x494>
 8006892:	bf00      	nop
 8006894:	efff69f3 	.word	0xefff69f3
 8006898:	40008000 	.word	0x40008000
 800689c:	40013800 	.word	0x40013800
 80068a0:	40021000 	.word	0x40021000
 80068a4:	40004400 	.word	0x40004400
 80068a8:	40004800 	.word	0x40004800
 80068ac:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2200      	movs	r2, #0
 80068b4:	461c      	mov	r4, r3
 80068b6:	4615      	mov	r5, r2
 80068b8:	f04f 0200 	mov.w	r2, #0
 80068bc:	f04f 0300 	mov.w	r3, #0
 80068c0:	022b      	lsls	r3, r5, #8
 80068c2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80068c6:	0222      	lsls	r2, r4, #8
 80068c8:	68f9      	ldr	r1, [r7, #12]
 80068ca:	6849      	ldr	r1, [r1, #4]
 80068cc:	0849      	lsrs	r1, r1, #1
 80068ce:	2000      	movs	r0, #0
 80068d0:	4688      	mov	r8, r1
 80068d2:	4681      	mov	r9, r0
 80068d4:	eb12 0a08 	adds.w	sl, r2, r8
 80068d8:	eb43 0b09 	adc.w	fp, r3, r9
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ea:	4650      	mov	r0, sl
 80068ec:	4659      	mov	r1, fp
 80068ee:	f7f9 fc6d 	bl	80001cc <__aeabi_uldivmod>
 80068f2:	4602      	mov	r2, r0
 80068f4:	460b      	mov	r3, r1
 80068f6:	4613      	mov	r3, r2
 80068f8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006900:	d308      	bcc.n	8006914 <UART_SetConfig+0x328>
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006908:	d204      	bcs.n	8006914 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	60da      	str	r2, [r3, #12]
 8006912:	e0b5      	b.n	8006a80 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800691a:	e0b1      	b.n	8006a80 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006924:	d15d      	bne.n	80069e2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800692a:	2b08      	cmp	r3, #8
 800692c:	d827      	bhi.n	800697e <UART_SetConfig+0x392>
 800692e:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x348>)
 8006930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006934:	08006959 	.word	0x08006959
 8006938:	08006961 	.word	0x08006961
 800693c:	08006969 	.word	0x08006969
 8006940:	0800697f 	.word	0x0800697f
 8006944:	0800696f 	.word	0x0800696f
 8006948:	0800697f 	.word	0x0800697f
 800694c:	0800697f 	.word	0x0800697f
 8006950:	0800697f 	.word	0x0800697f
 8006954:	08006977 	.word	0x08006977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006958:	f7fe fe10 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 800695c:	61f8      	str	r0, [r7, #28]
        break;
 800695e:	e014      	b.n	800698a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006960:	f7fe fe22 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 8006964:	61f8      	str	r0, [r7, #28]
        break;
 8006966:	e010      	b.n	800698a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006968:	4b4c      	ldr	r3, [pc, #304]	; (8006a9c <UART_SetConfig+0x4b0>)
 800696a:	61fb      	str	r3, [r7, #28]
        break;
 800696c:	e00d      	b.n	800698a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696e:	f7fe fd6d 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8006972:	61f8      	str	r0, [r7, #28]
        break;
 8006974:	e009      	b.n	800698a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697a:	61fb      	str	r3, [r7, #28]
        break;
 800697c:	e005      	b.n	800698a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006988:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d077      	beq.n	8006a80 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	005a      	lsls	r2, r3, #1
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	085b      	lsrs	r3, r3, #1
 800699a:	441a      	add	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b0f      	cmp	r3, #15
 80069aa:	d916      	bls.n	80069da <UART_SetConfig+0x3ee>
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b2:	d212      	bcs.n	80069da <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	f023 030f 	bic.w	r3, r3, #15
 80069bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	085b      	lsrs	r3, r3, #1
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	8afb      	ldrh	r3, [r7, #22]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	8afa      	ldrh	r2, [r7, #22]
 80069d6:	60da      	str	r2, [r3, #12]
 80069d8:	e052      	b.n	8006a80 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069e0:	e04e      	b.n	8006a80 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	d827      	bhi.n	8006a3a <UART_SetConfig+0x44e>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <UART_SetConfig+0x404>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a15 	.word	0x08006a15
 80069f4:	08006a1d 	.word	0x08006a1d
 80069f8:	08006a25 	.word	0x08006a25
 80069fc:	08006a3b 	.word	0x08006a3b
 8006a00:	08006a2b 	.word	0x08006a2b
 8006a04:	08006a3b 	.word	0x08006a3b
 8006a08:	08006a3b 	.word	0x08006a3b
 8006a0c:	08006a3b 	.word	0x08006a3b
 8006a10:	08006a33 	.word	0x08006a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a14:	f7fe fdb2 	bl	800557c <HAL_RCC_GetPCLK1Freq>
 8006a18:	61f8      	str	r0, [r7, #28]
        break;
 8006a1a:	e014      	b.n	8006a46 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a1c:	f7fe fdc4 	bl	80055a8 <HAL_RCC_GetPCLK2Freq>
 8006a20:	61f8      	str	r0, [r7, #28]
        break;
 8006a22:	e010      	b.n	8006a46 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a24:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <UART_SetConfig+0x4b0>)
 8006a26:	61fb      	str	r3, [r7, #28]
        break;
 8006a28:	e00d      	b.n	8006a46 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a2a:	f7fe fd0f 	bl	800544c <HAL_RCC_GetSysClockFreq>
 8006a2e:	61f8      	str	r0, [r7, #28]
        break;
 8006a30:	e009      	b.n	8006a46 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a36:	61fb      	str	r3, [r7, #28]
        break;
 8006a38:	e005      	b.n	8006a46 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a44:	bf00      	nop
    }

    if (pclk != 0U)
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d019      	beq.n	8006a80 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	085a      	lsrs	r2, r3, #1
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	441a      	add	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b0f      	cmp	r3, #15
 8006a64:	d909      	bls.n	8006a7a <UART_SetConfig+0x48e>
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a6c:	d205      	bcs.n	8006a7a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	60da      	str	r2, [r3, #12]
 8006a78:	e002      	b.n	8006a80 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3728      	adds	r7, #40	; 0x28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a9a:	bf00      	nop
 8006a9c:	00f42400 	.word	0x00f42400

08006aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	f003 0308 	and.w	r3, r3, #8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00a      	beq.n	8006aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af0:	f003 0302 	and.w	r3, r3, #2
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00a      	beq.n	8006b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00a      	beq.n	8006b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00a      	beq.n	8006b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d01a      	beq.n	8006bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b9e:	d10a      	bne.n	8006bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00a      	beq.n	8006bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	605a      	str	r2, [r3, #4]
  }
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b098      	sub	sp, #96	; 0x60
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bf4:	f7fb fa12 	bl	800201c <HAL_GetTick>
 8006bf8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0308 	and.w	r3, r3, #8
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d12e      	bne.n	8006c66 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c10:	2200      	movs	r2, #0
 8006c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 f88c 	bl	8006d34 <UART_WaitOnFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d021      	beq.n	8006c66 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c36:	653b      	str	r3, [r7, #80]	; 0x50
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c40:	647b      	str	r3, [r7, #68]	; 0x44
 8006c42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e6      	bne.n	8006c22 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e062      	b.n	8006d2c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d149      	bne.n	8006d08 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f856 	bl	8006d34 <UART_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d03c      	beq.n	8006d08 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cac:	633b      	str	r3, [r7, #48]	; 0x30
 8006cae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e6      	bne.n	8006c8e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	e853 3f00 	ldrex	r3, [r3]
 8006cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3308      	adds	r3, #8
 8006cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce0:	61fa      	str	r2, [r7, #28]
 8006ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	69b9      	ldr	r1, [r7, #24]
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	e841 2300 	strex	r3, r2, [r1]
 8006cec:	617b      	str	r3, [r7, #20]
   return(result);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d1e5      	bne.n	8006cc0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e011      	b.n	8006d2c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3758      	adds	r7, #88	; 0x58
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d44:	e049      	b.n	8006dda <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d4c:	d045      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d4e:	f7fb f965 	bl	800201c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d302      	bcc.n	8006d64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d101      	bne.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e048      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0304 	and.w	r3, r3, #4
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d031      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d110      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f838 	bl	8006e02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2208      	movs	r2, #8
 8006d96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e029      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db4:	d111      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f81e 	bl	8006e02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e00f      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d0a6      	beq.n	8006d46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b095      	sub	sp, #84	; 0x54
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e28:	643b      	str	r3, [r7, #64]	; 0x40
 8006e2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e6      	bne.n	8006e0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3308      	adds	r3, #8
 8006e42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	e853 3f00 	ldrex	r3, [r3]
 8006e4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f023 0301 	bic.w	r3, r3, #1
 8006e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3308      	adds	r3, #8
 8006e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e64:	e841 2300 	strex	r3, r2, [r1]
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1e5      	bne.n	8006e3c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d118      	bne.n	8006eaa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f023 0310 	bic.w	r3, r3, #16
 8006e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	461a      	mov	r2, r3
 8006e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	6979      	ldr	r1, [r7, #20]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	e841 2300 	strex	r3, r2, [r1]
 8006ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1e6      	bne.n	8006e78 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ebe:	bf00      	nop
 8006ec0:	3754      	adds	r7, #84	; 0x54
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <memset>:
 8006eca:	4402      	add	r2, r0
 8006ecc:	4603      	mov	r3, r0
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d100      	bne.n	8006ed4 <memset+0xa>
 8006ed2:	4770      	bx	lr
 8006ed4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed8:	e7f9      	b.n	8006ece <memset+0x4>
	...

08006edc <__libc_init_array>:
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	4d0d      	ldr	r5, [pc, #52]	; (8006f14 <__libc_init_array+0x38>)
 8006ee0:	4c0d      	ldr	r4, [pc, #52]	; (8006f18 <__libc_init_array+0x3c>)
 8006ee2:	1b64      	subs	r4, r4, r5
 8006ee4:	10a4      	asrs	r4, r4, #2
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	42a6      	cmp	r6, r4
 8006eea:	d109      	bne.n	8006f00 <__libc_init_array+0x24>
 8006eec:	4d0b      	ldr	r5, [pc, #44]	; (8006f1c <__libc_init_array+0x40>)
 8006eee:	4c0c      	ldr	r4, [pc, #48]	; (8006f20 <__libc_init_array+0x44>)
 8006ef0:	f000 f818 	bl	8006f24 <_init>
 8006ef4:	1b64      	subs	r4, r4, r5
 8006ef6:	10a4      	asrs	r4, r4, #2
 8006ef8:	2600      	movs	r6, #0
 8006efa:	42a6      	cmp	r6, r4
 8006efc:	d105      	bne.n	8006f0a <__libc_init_array+0x2e>
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f04:	4798      	blx	r3
 8006f06:	3601      	adds	r6, #1
 8006f08:	e7ee      	b.n	8006ee8 <__libc_init_array+0xc>
 8006f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0e:	4798      	blx	r3
 8006f10:	3601      	adds	r6, #1
 8006f12:	e7f2      	b.n	8006efa <__libc_init_array+0x1e>
 8006f14:	08006f8c 	.word	0x08006f8c
 8006f18:	08006f8c 	.word	0x08006f8c
 8006f1c:	08006f8c 	.word	0x08006f8c
 8006f20:	08006f90 	.word	0x08006f90

08006f24 <_init>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr

08006f30 <_fini>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr
