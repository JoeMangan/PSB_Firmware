
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049c8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004b54  08004b54  00014b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b9c  08004b9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b9c  08004b9c  00014b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba4  08004ba4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08004bb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004bb8  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dcd8  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e49  00000000  00000000  0002dd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002fba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d0  00000000  00000000  00030838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021471  00000000  00000000  00031208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f0a1  00000000  00000000  00052679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdb82  00000000  00000000  0006171a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000340c  00000000  00000000  0012f29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001326a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004b3c 	.word	0x08004b3c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004b3c 	.word	0x08004b3c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fc7d 	bl	8000dcc <HAL_Init>

  /* USER CODE BEGIN Init */
  aRxBuffer[0]=0x00;
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <main+0x88>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 80004d8:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <main+0x88>)
 80004da:	2200      	movs	r2, #0
 80004dc:	705a      	strb	r2, [r3, #1]
  aRxBuffer[2]=0x00;
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <main+0x88>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	709a      	strb	r2, [r3, #2]
  aRxBuffer[3]=0x00;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <main+0x88>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	70da      	strb	r2, [r3, #3]
  aTxBuffer[0]=0xAA;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	; (8000554 <main+0x8c>)
 80004ec:	22aa      	movs	r2, #170	; 0xaa
 80004ee:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1]=0xBB;
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <main+0x8c>)
 80004f2:	22bb      	movs	r2, #187	; 0xbb
 80004f4:	705a      	strb	r2, [r3, #1]
  aTxBuffer[2]=0xCC;
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <main+0x8c>)
 80004f8:	22cc      	movs	r2, #204	; 0xcc
 80004fa:	709a      	strb	r2, [r3, #2]
  aTxBuffer[3]=0xDD;
 80004fc:	4b15      	ldr	r3, [pc, #84]	; (8000554 <main+0x8c>)
 80004fe:	22dd      	movs	r2, #221	; 0xdd
 8000500:	70da      	strb	r2, [r3, #3]
  //HAL_I2C_MspInit();

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f82d 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f96d 	bl	80007e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f93b 	bl	8000784 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800050e:	f000 f8f9 	bl	8000704 <MX_I2C3_Init>
  MX_I2C2_Init();
 8000512:	f000 f8b7 	bl	8000684 <MX_I2C2_Init>
  MX_I2C1_Init();
 8000516:	f000 f875 	bl	8000604 <MX_I2C1_Init>

  // Enable the Listen mode with Interrupts for the I2C:
  // The Listen Mode will wait for an I2C Event to occur
  // and will be treated in the Interrupt Service Routine
  // of the I2C.
  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 800051a:	480f      	ldr	r0, [pc, #60]	; (8000558 <main+0x90>)
 800051c:	f001 f9bc 	bl	8001898 <HAL_I2C_EnableListen_IT>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <main+0x62>
  {
    /* Transfer error in reception process */
    Error_Handler();
 8000526:	f000 fa7d 	bl	8000a24 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(1)
  {
	  if (Xfer_Complete ==1)
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <main+0x94>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d1fb      	bne.n	800052a <main+0x62>
	  {
		HAL_Delay(1);
 8000532:	2001      	movs	r0, #1
 8000534:	f000 fcc6 	bl	8000ec4 <HAL_Delay>
		/*##- Put I2C peripheral in listen mode process ###########################*/
		if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x90>)
 800053a:	f001 f9ad 	bl	8001898 <HAL_I2C_EnableListen_IT>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <main+0x80>
		{
		  /* Transfer error in reception process */
		  Error_Handler();
 8000544:	f000 fa6e 	bl	8000a24 <Error_Handler>
		}
		  Xfer_Complete =0;
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <main+0x94>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
	  if (Xfer_Complete ==1)
 800054e:	e7ec      	b.n	800052a <main+0x62>
 8000550:	20000034 	.word	0x20000034
 8000554:	20000030 	.word	0x20000030
 8000558:	20000038 	.word	0x20000038
 800055c:	2000002c 	.word	0x2000002c

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b096      	sub	sp, #88	; 0x58
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2244      	movs	r2, #68	; 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fab7 	bl	8004ae2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000582:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000586:	f002 fc25 	bl	8002dd4 <HAL_PWREx_ControlVoltageScaling>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000590:	f000 fa48 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000598:	f44f 7380 	mov.w	r3, #256	; 0x100
 800059c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	2310      	movs	r3, #16
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a6:	2302      	movs	r3, #2
 80005a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005aa:	2301      	movs	r3, #1
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ae:	230a      	movs	r3, #10
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fc5c 	bl	8002e80 <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ce:	f000 fa29 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	230f      	movs	r3, #15
 80005d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2303      	movs	r3, #3
 80005d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	2102      	movs	r1, #2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f85c 	bl	80036a8 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f6:	f000 fa15 	bl	8000a24 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3758      	adds	r7, #88	; 0x58
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_I2C1_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <MX_I2C1_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_I2C1_Init+0x74>)
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <MX_I2C1_Init+0x7c>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = ADDR_I2C_SLV;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_I2C1_Init+0x74>)
 8000616:	22aa      	movs	r2, #170	; 0xaa
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_I2C1_Init+0x74>)
 800061c:	2201      	movs	r2, #1
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_I2C1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <MX_I2C1_Init+0x74>)
 8000640:	f000 ff2a 	bl	8001498 <HAL_I2C_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064a:	f000 f9eb 	bl	8000a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064e:	2100      	movs	r1, #0
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_I2C1_Init+0x74>)
 8000652:	f002 fb19 	bl	8002c88 <HAL_I2CEx_ConfigAnalogFilter>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800065c:	f000 f9e2 	bl	8000a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_I2C1_Init+0x74>)
 8000664:	f002 fb5b 	bl	8002d1e <HAL_I2CEx_ConfigDigitalFilter>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 f9d9 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000038 	.word	0x20000038
 800067c:	40005400 	.word	0x40005400
 8000680:	00909beb 	.word	0x00909beb

08000684 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_I2C2_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <MX_I2C2_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_I2C2_Init+0x74>)
 8000690:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <MX_I2C2_Init+0x7c>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_I2C2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_I2C2_Init+0x74>)
 800069c:	2201      	movs	r2, #1
 800069e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006c0:	f000 feea 	bl	8001498 <HAL_I2C_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ca:	f000 f9ab 	bl	8000a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006d2:	f002 fad9 	bl	8002c88 <HAL_I2CEx_ConfigAnalogFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006dc:	f000 f9a2 	bl	8000a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e0:	2100      	movs	r1, #0
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006e4:	f002 fb1b 	bl	8002d1e <HAL_I2CEx_ConfigDigitalFilter>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006ee:	f000 f999 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	40005800 	.word	0x40005800
 8000700:	00909beb 	.word	0x00909beb

08000704 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_I2C3_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_I2C3_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00909BEB;
 800070e:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_I2C3_Init+0x74>)
 8000710:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <MX_I2C3_Init+0x7c>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_I2C3_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_I2C3_Init+0x74>)
 800071c:	2201      	movs	r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_I2C3_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_I2C3_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C3_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C3_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C3_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800073e:	480e      	ldr	r0, [pc, #56]	; (8000778 <MX_I2C3_Init+0x74>)
 8000740:	f000 feaa 	bl	8001498 <HAL_I2C_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800074a:	f000 f96b 	bl	8000a24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	4809      	ldr	r0, [pc, #36]	; (8000778 <MX_I2C3_Init+0x74>)
 8000752:	f002 fa99 	bl	8002c88 <HAL_I2CEx_ConfigAnalogFilter>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800075c:	f000 f962 	bl	8000a24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_I2C3_Init+0x74>)
 8000764:	f002 fadb 	bl	8002d1e <HAL_I2CEx_ConfigDigitalFilter>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800076e:	f000 f959 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000e0 	.word	0x200000e0
 800077c:	40005c00 	.word	0x40005c00
 8000780:	00909beb 	.word	0x00909beb

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_USART2_UART_Init+0x58>)
 800078a:	4a15      	ldr	r2, [pc, #84]	; (80007e0 <MX_USART2_UART_Init+0x5c>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800078e:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_USART2_UART_Init+0x58>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_USART2_UART_Init+0x58>)
 80007c8:	f003 fcce 	bl	8004168 <HAL_UART_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007d2:	f000 f927 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000134 	.word	0x20000134
 80007e0:	40004400 	.word	0x40004400

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <MX_GPIO_Init+0x108>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a3b      	ldr	r2, [pc, #236]	; (80008ec <MX_GPIO_Init+0x108>)
 8000800:	f043 0304 	orr.w	r3, r3, #4
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b39      	ldr	r3, [pc, #228]	; (80008ec <MX_GPIO_Init+0x108>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0304 	and.w	r3, r3, #4
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000812:	4b36      	ldr	r3, [pc, #216]	; (80008ec <MX_GPIO_Init+0x108>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a35      	ldr	r2, [pc, #212]	; (80008ec <MX_GPIO_Init+0x108>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <MX_GPIO_Init+0x108>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <MX_GPIO_Init+0x108>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a2f      	ldr	r2, [pc, #188]	; (80008ec <MX_GPIO_Init+0x108>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_GPIO_Init+0x108>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0x108>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a29      	ldr	r2, [pc, #164]	; (80008ec <MX_GPIO_Init+0x108>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_GPIO_Init+0x108>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	21b0      	movs	r1, #176	; 0xb0
 800085e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000862:	f000 fe01 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f243 31e0 	movw	r1, #13280	; 0x33e0
 800086c:	4820      	ldr	r0, [pc, #128]	; (80008f0 <MX_GPIO_Init+0x10c>)
 800086e:	f000 fdfb 	bl	8001468 <HAL_GPIO_WritePin>
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000878:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	481a      	ldr	r0, [pc, #104]	; (80008f4 <MX_GPIO_Init+0x110>)
 800088a:	f000 fc73 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 800088e:	23b0      	movs	r3, #176	; 0xb0
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f000 fc64 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f000 fc57 	bl	8001174 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_HT_Pin LD4_Pin ENABLE_1_FPGA_Pin ENABLE_2_IJC_Pin
                           ENABLE_3_CEA_Pin ENABLE_4_Pin ENABLE_5_UCD_Pin */
  GPIO_InitStruct.Pin = ENABLE_HT_Pin|LD4_Pin|ENABLE_1_FPGA_Pin|ENABLE_2_IJC_Pin
 80008c6:	f243 33e0 	movw	r3, #13280	; 0x33e0
 80008ca:	617b      	str	r3, [r7, #20]
                          |ENABLE_3_CEA_Pin|ENABLE_4_Pin|ENABLE_5_UCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008cc:	2301      	movs	r3, #1
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	4619      	mov	r1, r3
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_GPIO_Init+0x10c>)
 80008e0:	f000 fc48 	bl	8001174 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 80008e4:	bf00      	nop
 80008e6:	3728      	adds	r7, #40	; 0x28
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000400 	.word	0x48000400
 80008f4:	48000800 	.word	0x48000800

080008f8 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in transmission process is correct */

  Xfer_Complete = 1;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_I2C_SlaveTxCpltCallback+0x4c>)
 8000902:	2201      	movs	r2, #1
 8000904:	601a      	str	r2, [r3, #0]
  aTxBuffer[0]++;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	3301      	adds	r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000910:	701a      	strb	r2, [r3, #0]
  aTxBuffer[1]++;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000914:	785b      	ldrb	r3, [r3, #1]
 8000916:	3301      	adds	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 800091c:	705a      	strb	r2, [r3, #1]
  aTxBuffer[2]++;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000920:	789b      	ldrb	r3, [r3, #2]
 8000922:	3301      	adds	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000928:	709a      	strb	r2, [r3, #2]
  aTxBuffer[3]++;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 800092c:	78db      	ldrb	r3, [r3, #3]
 800092e:	3301      	adds	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_I2C_SlaveTxCpltCallback+0x50>)
 8000934:	70da      	strb	r2, [r3, #3]

}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	2000002c 	.word	0x2000002c
 8000948:	20000030 	.word	0x20000030

0800094c <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* Toggle LED4: Transfer in reception process is correct */

  Xfer_Complete = 1;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
  aRxBuffer[0]=0x00;
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
  aRxBuffer[1]=0x00;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8000962:	2200      	movs	r2, #0
 8000964:	705a      	strb	r2, [r3, #1]
  aRxBuffer[2]=0x00;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 8000968:	2200      	movs	r2, #0
 800096a:	709a      	strb	r2, [r3, #2]
  aRxBuffer[3]=0x00;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 800096e:	2200      	movs	r2, #0
 8000970:	70da      	strb	r2, [r3, #3]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	2000002c 	.word	0x2000002c
 8000984:	20000034 	.word	0x20000034

08000988 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	460b      	mov	r3, r1
 8000992:	70fb      	strb	r3, [r7, #3]
 8000994:	4613      	mov	r3, r2
 8000996:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	4a11      	ldr	r2, [pc, #68]	; (80009e0 <HAL_I2C_AddrCallback+0x58>)
 800099c:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_I2C_AddrCallback+0x58>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00c      	beq.n	80009c0 <HAL_I2C_AddrCallback+0x38>
  {
     /*##- Start the transmission process #####################################*/
  /* While the I2C in reception process, user can transmit data through
     "aTxBuffer" buffer */
  if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)aTxBuffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80009a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009aa:	2204      	movs	r2, #4
 80009ac:	490d      	ldr	r1, [pc, #52]	; (80009e4 <HAL_I2C_AddrCallback+0x5c>)
 80009ae:	480e      	ldr	r0, [pc, #56]	; (80009e8 <HAL_I2C_AddrCallback+0x60>)
 80009b0:	f000 fe0e 	bl	80015d0 <HAL_I2C_Slave_Seq_Transmit_IT>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00e      	beq.n	80009d8 <HAL_I2C_AddrCallback+0x50>

    {
    /* Transfer error in transmission process */
    Error_Handler();
 80009ba:	f000 f833 	bl	8000a24 <Error_Handler>
    Error_Handler();
  }

  }

}
 80009be:	e00b      	b.n	80009d8 <HAL_I2C_AddrCallback+0x50>
  if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)aRxBuffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 80009c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009c4:	2204      	movs	r2, #4
 80009c6:	4909      	ldr	r1, [pc, #36]	; (80009ec <HAL_I2C_AddrCallback+0x64>)
 80009c8:	4807      	ldr	r0, [pc, #28]	; (80009e8 <HAL_I2C_AddrCallback+0x60>)
 80009ca:	f000 feb3 	bl	8001734 <HAL_I2C_Slave_Seq_Receive_IT>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_I2C_AddrCallback+0x50>
    Error_Handler();
 80009d4:	f000 f826 	bl	8000a24 <Error_Handler>
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000028 	.word	0x20000028
 80009e4:	20000030 	.word	0x20000030
 80009e8:	20000038 	.word	0x20000038
 80009ec:	20000034 	.word	0x20000034

080009f0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 ff95 	bl	800193c <HAL_I2C_GetError>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b04      	cmp	r3, #4
 8000a16:	d001      	beq.n	8000a1c <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8000a18:	f000 f804 	bl	8000a24 <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <HAL_MspInit+0x44>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6613      	str	r3, [r2, #96]	; 0x60
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_MspInit+0x44>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_MspInit+0x44>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_MspInit+0x44>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b0a6      	sub	sp, #152	; 0x98
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	2260      	movs	r2, #96	; 0x60
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f004 f822 	bl	8004ae2 <memset>
  if(hi2c->Instance==I2C1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a64      	ldr	r2, [pc, #400]	; (8000c34 <HAL_I2C_MspInit+0x1bc>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d13d      	bne.n	8000b24 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000aa8:	2340      	movs	r3, #64	; 0x40
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 f81b 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ac0:	f7ff ffb0 	bl	8000a24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b5c      	ldr	r3, [pc, #368]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a5b      	ldr	r2, [pc, #364]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b59      	ldr	r3, [pc, #356]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0301 	and.w	r3, r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000adc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af6:	2304      	movs	r3, #4
 8000af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b06:	f000 fb35 	bl	8001174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b0a:	4b4b      	ldr	r3, [pc, #300]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a4a      	ldr	r2, [pc, #296]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b48      	ldr	r3, [pc, #288]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000b22:	e082      	b.n	8000c2a <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a44      	ldr	r2, [pc, #272]	; (8000c3c <HAL_I2C_MspInit+0x1c4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d13c      	bne.n	8000ba8 <HAL_I2C_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 ffd8 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_I2C_MspInit+0xd2>
      Error_Handler();
 8000b46:	f7ff ff6d 	bl	8000a24 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a3a      	ldr	r2, [pc, #232]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000b50:	f043 0302 	orr.w	r3, r3, #2
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0302 	and.w	r3, r3, #2
 8000b5e:	61bb      	str	r3, [r7, #24]
 8000b60:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b76:	2303      	movs	r3, #3
 8000b78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b82:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b86:	4619      	mov	r1, r3
 8000b88:	482d      	ldr	r0, [pc, #180]	; (8000c40 <HAL_I2C_MspInit+0x1c8>)
 8000b8a:	f000 faf3 	bl	8001174 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b8e:	4b2a      	ldr	r3, [pc, #168]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b92:	4a29      	ldr	r2, [pc, #164]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b98:	6593      	str	r3, [r2, #88]	; 0x58
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
}
 8000ba6:	e040      	b.n	8000c2a <HAL_I2C_MspInit+0x1b2>
  else if(hi2c->Instance==I2C3)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <HAL_I2C_MspInit+0x1cc>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d13b      	bne.n	8000c2a <HAL_I2C_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 ff95 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_I2C_MspInit+0x158>
      Error_Handler();
 8000bcc:	f7ff ff2a 	bl	8000a24 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd4:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000be8:	2303      	movs	r3, #3
 8000bea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c00:	2304      	movs	r3, #4
 8000c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c06:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480e      	ldr	r0, [pc, #56]	; (8000c48 <HAL_I2C_MspInit+0x1d0>)
 8000c0e:	f000 fab1 	bl	8001174 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000c18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_I2C_MspInit+0x1c0>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	3798      	adds	r7, #152	; 0x98
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40005800 	.word	0x40005800
 8000c40:	48000400 	.word	0x48000400
 8000c44:	40005c00 	.word	0x40005c00
 8000c48:	48000800 	.word	0x48000800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0a2      	sub	sp, #136	; 0x88
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2260      	movs	r2, #96	; 0x60
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 ff38 	bl	8004ae2 <memset>
  if(huart->Instance==USART2)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <HAL_UART_MspInit+0xac>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d138      	bne.n	8000cee <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 ff31 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c94:	f7ff fec6 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_UART_MspInit+0xb0>)
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0xb0>)
 8000c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_UART_MspInit+0xb0>)
 8000ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_UART_MspInit+0xb0>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb4:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0xb0>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_UART_MspInit+0xb0>)
 8000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc8:	230c      	movs	r3, #12
 8000cca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cda:	2307      	movs	r3, #7
 8000cdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f000 fa43 	bl	8001174 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3788      	adds	r7, #136	; 0x88
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40021000 	.word	0x40021000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f89a 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <SystemInit+0x20>)
 8000d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <SystemInit+0x20>)
 8000d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff ffea 	bl	8000d54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f003 fea5 	bl	8004af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fb8d 	bl	80004c8 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dbc:	08004bac 	.word	0x08004bac
  ldr r2, =_sbss
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc4:	200001c0 	.word	0x200001c0

08000dc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_Init+0x3c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_Init+0x3c>)
 8000ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f944 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f80f 	bl	8000e0c <HAL_InitTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	e001      	b.n	8000dfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfa:	f7ff fe19 	bl	8000a30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d023      	beq.n	8000e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_InitTick+0x70>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f941 	bl	80010be <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10f      	bne.n	8000e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d809      	bhi.n	8000e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e50:	f000 f919 	bl	8001086 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_InitTick+0x74>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e004      	b.n	8000e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e001      	b.n	8000e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200001bc 	.word	0x200001bc

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200001bc 	.word	0x200001bc

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001050:	f7ff ff8e 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff47 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff5c 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff8e 	bl	8000fc4 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffb0 	bl	800102c <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d005      	beq.n	80010fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2204      	movs	r2, #4
 80010f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e029      	b.n	800114e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 020e 	bic.w	r2, r2, #14
 8001108:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0201 	bic.w	r2, r2, #1
 8001118:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f003 021c 	and.w	r2, r3, #28
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	4798      	blx	r3
    }
  }
  return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001166:	b2db      	uxtb	r3, r3
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001182:	e154      	b.n	800142e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	4013      	ands	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8146 	beq.w	8001428 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0303 	and.w	r3, r3, #3
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d005      	beq.n	80011b4 <HAL_GPIO_Init+0x40>
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d130      	bne.n	8001216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ea:	2201      	movs	r2, #1
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 0201 	and.w	r2, r3, #1
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b03      	cmp	r3, #3
 8001220:	d017      	beq.n	8001252 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2203      	movs	r2, #3
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d123      	bne.n	80012a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3208      	adds	r2, #8
 8001266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	220f      	movs	r2, #15
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	6939      	ldr	r1, [r7, #16]
 80012a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0203 	and.w	r2, r3, #3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 80a0 	beq.w	8001428 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4b58      	ldr	r3, [pc, #352]	; (800144c <HAL_GPIO_Init+0x2d8>)
 80012ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ec:	4a57      	ldr	r2, [pc, #348]	; (800144c <HAL_GPIO_Init+0x2d8>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6613      	str	r3, [r2, #96]	; 0x60
 80012f4:	4b55      	ldr	r3, [pc, #340]	; (800144c <HAL_GPIO_Init+0x2d8>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001300:	4a53      	ldr	r2, [pc, #332]	; (8001450 <HAL_GPIO_Init+0x2dc>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	3302      	adds	r3, #2
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800132a:	d019      	beq.n	8001360 <HAL_GPIO_Init+0x1ec>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a49      	ldr	r2, [pc, #292]	; (8001454 <HAL_GPIO_Init+0x2e0>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d013      	beq.n	800135c <HAL_GPIO_Init+0x1e8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a48      	ldr	r2, [pc, #288]	; (8001458 <HAL_GPIO_Init+0x2e4>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d00d      	beq.n	8001358 <HAL_GPIO_Init+0x1e4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a47      	ldr	r2, [pc, #284]	; (800145c <HAL_GPIO_Init+0x2e8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0x1e0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a46      	ldr	r2, [pc, #280]	; (8001460 <HAL_GPIO_Init+0x2ec>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d101      	bne.n	8001350 <HAL_GPIO_Init+0x1dc>
 800134c:	2304      	movs	r3, #4
 800134e:	e008      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001350:	2307      	movs	r3, #7
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001354:	2303      	movs	r3, #3
 8001356:	e004      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001358:	2302      	movs	r3, #2
 800135a:	e002      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 800135c:	2301      	movs	r3, #1
 800135e:	e000      	b.n	8001362 <HAL_GPIO_Init+0x1ee>
 8001360:	2300      	movs	r3, #0
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	f002 0203 	and.w	r2, r2, #3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4093      	lsls	r3, r2
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001372:	4937      	ldr	r1, [pc, #220]	; (8001450 <HAL_GPIO_Init+0x2dc>)
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	089b      	lsrs	r3, r3, #2
 8001378:	3302      	adds	r3, #2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001380:	4b38      	ldr	r3, [pc, #224]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	43db      	mvns	r3, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a4:	4a2f      	ldr	r2, [pc, #188]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ce:	4a25      	ldr	r2, [pc, #148]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f8:	4a1a      	ldr	r2, [pc, #104]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_GPIO_Init+0x2f0>)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa22 f303 	lsr.w	r3, r2, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	f47f aea3 	bne.w	8001184 <HAL_GPIO_Init+0x10>
  }
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000
 8001454:	48000400 	.word	0x48000400
 8001458:	48000800 	.word	0x48000800
 800145c:	48000c00 	.word	0x48000c00
 8001460:	48001000 	.word	0x48001000
 8001464:	40010400 	.word	0x40010400

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001484:	e002      	b.n	800148c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e08d      	b.n	80015c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d106      	bne.n	80014c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fada 	bl	8000a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2224      	movs	r2, #36	; 0x24
 80014c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	e006      	b.n	8001520 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800151e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d108      	bne.n	800153a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	e007      	b.n	800154a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001548:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800156c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69d9      	ldr	r1, [r3, #28]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80015ec:	2b28      	cmp	r3, #40	; 0x28
 80015ee:	f040 8098 	bne.w	8001722 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d105      	bne.n	800160a <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001604:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e08c      	b.n	8001724 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800160a:	f248 0101 	movw	r1, #32769	; 0x8001
 800160e:	68f8      	ldr	r0, [r7, #12]
 8001610:	f001 fadc 	bl	8002bcc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800161a:	2b01      	cmp	r3, #1
 800161c:	d101      	bne.n	8001622 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800161e:	2302      	movs	r3, #2
 8001620:	e080      	b.n	8001724 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2201      	movs	r2, #1
 8001626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b2a      	cmp	r3, #42	; 0x2a
 8001634:	d12a      	bne.n	800168c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001636:	2102      	movs	r1, #2
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f001 fac7 	bl	8002bcc <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800164c:	d11e      	bne.n	800168c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800165c:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001662:	2b00      	cmp	r3, #0
 8001664:	d012      	beq.n	800168c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166a:	4a30      	ldr	r2, [pc, #192]	; (800172c <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 800166c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fd2f 	bl	80010d6 <HAL_DMA_Abort_IT>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001688:	4610      	mov	r0, r2
 800168a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2229      	movs	r2, #41	; 0x29
 8001690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2220      	movs	r2, #32
 8001698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016b0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	88fa      	ldrh	r2, [r7, #6]
 80016bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4a17      	ldr	r2, [pc, #92]	; (8001730 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b08      	cmp	r3, #8
 80016e0:	bf0c      	ite	eq
 80016e2:	2301      	moveq	r3, #1
 80016e4:	2300      	movne	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	0c1b      	lsrs	r3, r3, #16
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2208      	movs	r2, #8
 800170a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001714:	f248 0101 	movw	r1, #32769	; 0x8001
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f001 f9d3 	bl	8002ac4 <I2C_Enable_IRQ>

    return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
  }
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	08002a23 	.word	0x08002a23
 8001730:	08001955 	.word	0x08001955

08001734 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	4613      	mov	r3, r2
 8001742:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001750:	2b28      	cmp	r3, #40	; 0x28
 8001752:	f040 8098 	bne.w	8001886 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 800175c:	88fb      	ldrh	r3, [r7, #6]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d105      	bne.n	800176e <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e08c      	b.n	8001888 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800176e:	f248 0102 	movw	r1, #32770	; 0x8002
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f001 fa2a 	bl	8002bcc <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8001782:	2302      	movs	r3, #2
 8001784:	e080      	b.n	8001888 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b29      	cmp	r3, #41	; 0x29
 8001798:	d12a      	bne.n	80017f0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800179a:	2101      	movs	r1, #1
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f001 fa15 	bl	8002bcc <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017b0:	d11e      	bne.n	80017f0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017c0:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d012      	beq.n	80017f0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	4a30      	ldr	r2, [pc, #192]	; (8001890 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fc7d 	bl	80010d6 <HAL_DMA_Abort_IT>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017ec:	4610      	mov	r0, r2
 80017ee:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	222a      	movs	r2, #42	; 0x2a
 80017f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2220      	movs	r2, #32
 80017fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001814:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8001836:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b08      	cmp	r3, #8
 8001844:	bf0c      	ite	eq
 8001846:	2301      	moveq	r3, #1
 8001848:	2300      	movne	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d106      	bne.n	8001870 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8001862:	7dfb      	ldrb	r3, [r7, #23]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2208      	movs	r2, #8
 800186e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001878:	f248 0102 	movw	r1, #32770	; 0x8002
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f001 f921 	bl	8002ac4 <I2C_Enable_IRQ>

    return HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	e000      	b.n	8001888 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
  }
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	08002a23 	.word	0x08002a23
 8001894:	08001955 	.word	0x08001955

08001898 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d10d      	bne.n	80018c8 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2228      	movs	r2, #40	; 0x28
 80018b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_I2C_EnableListen_IT+0x3c>)
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80018ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f001 f900 	bl	8002ac4 <I2C_Enable_IRQ>

    return HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e000      	b.n	80018ca <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 80018c8:	2302      	movs	r3, #2
  }
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08001955 	.word	0x08001955

080018d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <I2C_Slave_ISR_IT+0x24>
 8001974:	2302      	movs	r3, #2
 8001976:	e0e1      	b.n	8001b3c <I2C_Slave_ISR_IT+0x1e8>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001994:	6939      	ldr	r1, [r7, #16]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 fda2 	bl	80024e0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d04b      	beq.n	8001a3e <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d046      	beq.n	8001a3e <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d128      	bne.n	8001a0c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b28      	cmp	r3, #40	; 0x28
 80019c4:	d108      	bne.n	80019d8 <I2C_Slave_ISR_IT+0x84>
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019cc:	d104      	bne.n	80019d8 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80019ce:	6939      	ldr	r1, [r7, #16]
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 fe97 	bl	8002704 <I2C_ITListenCplt>
 80019d6:	e031      	b.n	8001a3c <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b29      	cmp	r3, #41	; 0x29
 80019e2:	d10e      	bne.n	8001a02 <I2C_Slave_ISR_IT+0xae>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019ea:	d00a      	beq.n	8001a02 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2210      	movs	r2, #16
 80019f2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 fff0 	bl	80029da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 fc4b 	bl	8002296 <I2C_ITSlaveSeqCplt>
 8001a00:	e01c      	b.n	8001a3c <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2210      	movs	r2, #16
 8001a08:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a0a:	e08f      	b.n	8001b2c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2210      	movs	r2, #16
 8001a12:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a18:	f043 0204 	orr.w	r2, r3, #4
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <I2C_Slave_ISR_IT+0xda>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d17e      	bne.n	8001b2c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4619      	mov	r1, r3
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 feb9 	bl	80027ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a3a:	e077      	b.n	8001b2c <I2C_Slave_ISR_IT+0x1d8>
 8001a3c:	e076      	b.n	8001b2c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d02f      	beq.n	8001aa8 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d02a      	beq.n	8001aa8 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d018      	beq.n	8001a8e <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d14b      	bne.n	8001b30 <I2C_Slave_ISR_IT+0x1dc>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a9e:	d047      	beq.n	8001b30 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 fbf8 	bl	8002296 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001aa6:	e043      	b.n	8001b30 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d009      	beq.n	8001ac6 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d004      	beq.n	8001ac6 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001abc:	6939      	ldr	r1, [r7, #16]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fb28 	bl	8002114 <I2C_ITAddrCplt>
 8001ac4:	e035      	b.n	8001b32 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d030      	beq.n	8001b32 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02b      	beq.n	8001b32 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d018      	beq.n	8001b16 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	781a      	ldrb	r2, [r3, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	1c5a      	adds	r2, r3, #1
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
 8001b14:	e00d      	b.n	8001b32 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d002      	beq.n	8001b24 <I2C_Slave_ISR_IT+0x1d0>
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fbb6 	bl	8002296 <I2C_ITSlaveSeqCplt>
 8001b2a:	e002      	b.n	8001b32 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001b2c:	bf00      	nop
 8001b2e:	e000      	b.n	8001b32 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001b30:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <I2C_Master_ISR_DMA+0x1a>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e0d9      	b.n	8001d12 <I2C_Master_ISR_DMA+0x1ce>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f003 0310 	and.w	r3, r3, #16
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d016      	beq.n	8001b9e <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d011      	beq.n	8001b9e <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2210      	movs	r2, #16
 8001b80:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f043 0204 	orr.w	r2, r3, #4
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001b8e:	2120      	movs	r1, #32
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 ff97 	bl	8002ac4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 ff1f 	bl	80029da <I2C_Flush_TXDR>
 8001b9c:	e0b4      	b.n	8001d08 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d071      	beq.n	8001c8c <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d06c      	beq.n	8001c8c <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d04e      	beq.n	8001c6a <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bd8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	2bff      	cmp	r3, #255	; 0xff
 8001be2:	d906      	bls.n	8001bf2 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	22ff      	movs	r2, #255	; 0xff
 8001be8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001bea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e010      	b.n	8001c14 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c04:	d003      	beq.n	8001c0e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e002      	b.n	8001c14 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001c0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c12:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	8a79      	ldrh	r1, [r7, #18]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 ff1c 	bl	8002a60 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b22      	cmp	r3, #34	; 0x22
 8001c44:	d108      	bne.n	8001c58 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001c56:	e057      	b.n	8001d08 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c66:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001c68:	e04e      	b.n	8001d08 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c78:	d003      	beq.n	8001c82 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 face 	bl	800221c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001c80:	e042      	b.n	8001d08 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001c82:	2140      	movs	r1, #64	; 0x40
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 fd91 	bl	80027ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001c8a:	e03d      	b.n	8001d08 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d028      	beq.n	8001ce8 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d119      	bne.n	8001cde <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cb8:	d025      	beq.n	8001d06 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cc2:	d108      	bne.n	8001cd6 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cd2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001cd4:	e017      	b.n	8001d06 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 faa0 	bl	800221c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001cdc:	e013      	b.n	8001d06 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001cde:	2140      	movs	r1, #64	; 0x40
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fd63 	bl	80027ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001ce6:	e00e      	b.n	8001d06 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00a      	beq.n	8001d08 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 fb26 	bl	8002350 <I2C_ITMasterCplt>
 8001d04:	e000      	b.n	8001d08 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8001d06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8001d28:	4b8d      	ldr	r3, [pc, #564]	; (8001f60 <I2C_Mem_ISR_DMA+0x244>)
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <I2C_Mem_ISR_DMA+0x1e>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e10e      	b.n	8001f58 <I2C_Mem_ISR_DMA+0x23c>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f003 0310 	and.w	r3, r3, #16
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d016      	beq.n	8001d7a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d011      	beq.n	8001d7a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f043 0204 	orr.w	r2, r3, #4
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001d6a:	2120      	movs	r1, #32
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fea9 	bl	8002ac4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fe31 	bl	80029da <I2C_Flush_TXDR>
 8001d78:	e0e9      	b.n	8001f4e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00e      	beq.n	8001da2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d9e:	651a      	str	r2, [r3, #80]	; 0x50
 8001da0:	e0d5      	b.n	8001f4e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d05f      	beq.n	8001e6c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d05a      	beq.n	8001e6c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001db6:	2101      	movs	r1, #1
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 ff07 	bl	8002bcc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fe7f 	bl	8002ac4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d048      	beq.n	8001e62 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d910      	bls.n	8001dfc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	22ff      	movs	r2, #255	; 0xff
 8001dde:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de4:	b299      	uxth	r1, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	2300      	movs	r3, #0
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fe33 	bl	8002a60 <I2C_TransferConfig>
 8001dfa:	e011      	b.n	8001e20 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	b299      	uxth	r1, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 fe20 	bl	8002a60 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b22      	cmp	r3, #34	; 0x22
 8001e3c:	d108      	bne.n	8001e50 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e4e:	e07e      	b.n	8001f4e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e5e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001e60:	e075      	b.n	8001f4e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001e62:	2140      	movs	r1, #64	; 0x40
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fca1 	bl	80027ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001e6a:	e070      	b.n	8001f4e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d05d      	beq.n	8001f32 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d058      	beq.n	8001f32 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e80:	2101      	movs	r1, #1
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fea2 	bl	8002bcc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001e88:	2110      	movs	r1, #16
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	f000 fe1a 	bl	8002ac4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b22      	cmp	r3, #34	; 0x22
 8001e9a:	d101      	bne.n	8001ea0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <I2C_Mem_ISR_DMA+0x248>)
 8001e9e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	2bff      	cmp	r3, #255	; 0xff
 8001ea8:	d910      	bls.n	8001ecc <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	22ff      	movs	r2, #255	; 0xff
 8001eae:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	b299      	uxth	r1, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 fdcb 	bl	8002a60 <I2C_TransferConfig>
 8001eca:	e011      	b.n	8001ef0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eda:	b299      	uxth	r1, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 fdb8 	bl	8002a60 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b22      	cmp	r3, #34	; 0x22
 8001f0c:	d108      	bne.n	8001f20 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f1e:	e016      	b.n	8001f4e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f2e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f30:	e00d      	b.n	8001f4e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001f46:	68b9      	ldr	r1, [r7, #8]
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fa01 	bl	8002350 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	80002000 	.word	0x80002000
 8001f64:	80002400 	.word	0x80002400

08001f68 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <I2C_Slave_ISR_DMA+0x24>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e0bf      	b.n	800210c <I2C_Slave_ISR_DMA+0x1a4>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0320 	and.w	r3, r3, #32
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fa98 	bl	80024e0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8095 	beq.w	80020e6 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 808f 	beq.w	80020e6 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d104      	bne.n	8001fdc <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d07d      	beq.n	80020d8 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00c      	beq.n	8001ffe <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 800201c:	2301      	movs	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d128      	bne.n	8002078 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b28      	cmp	r3, #40	; 0x28
 8002030:	d108      	bne.n	8002044 <I2C_Slave_ISR_DMA+0xdc>
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002038:	d104      	bne.n	8002044 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fb61 	bl	8002704 <I2C_ITListenCplt>
 8002042:	e048      	b.n	80020d6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b29      	cmp	r3, #41	; 0x29
 800204e:	d10e      	bne.n	800206e <I2C_Slave_ISR_DMA+0x106>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002056:	d00a      	beq.n	800206e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2210      	movs	r2, #16
 800205e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fcba 	bl	80029da <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 f915 	bl	8002296 <I2C_ITSlaveSeqCplt>
 800206c:	e033      	b.n	80020d6 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2210      	movs	r2, #16
 8002074:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002076:	e034      	b.n	80020e2 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002092:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <I2C_Slave_ISR_DMA+0x13a>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a0:	d11f      	bne.n	80020e2 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020a2:	7dfb      	ldrb	r3, [r7, #23]
 80020a4:	2b21      	cmp	r3, #33	; 0x21
 80020a6:	d002      	beq.n	80020ae <I2C_Slave_ISR_DMA+0x146>
 80020a8:	7dfb      	ldrb	r3, [r7, #23]
 80020aa:	2b29      	cmp	r3, #41	; 0x29
 80020ac:	d103      	bne.n	80020b6 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2221      	movs	r2, #33	; 0x21
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
 80020b4:	e008      	b.n	80020c8 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	2b22      	cmp	r3, #34	; 0x22
 80020ba:	d002      	beq.n	80020c2 <I2C_Slave_ISR_DMA+0x15a>
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	2b2a      	cmp	r3, #42	; 0x2a
 80020c0:	d102      	bne.n	80020c8 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2222      	movs	r2, #34	; 0x22
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	4619      	mov	r1, r3
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fb6c 	bl	80027ac <I2C_ITError>
      if (treatdmanack == 1U)
 80020d4:	e005      	b.n	80020e2 <I2C_Slave_ISR_DMA+0x17a>
 80020d6:	e004      	b.n	80020e2 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2210      	movs	r2, #16
 80020de:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80020e0:	e00f      	b.n	8002102 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80020e2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80020e4:	e00d      	b.n	8002102 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80020fa:	68b9      	ldr	r1, [r7, #8]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f809 	bl	8002114 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800212a:	2b28      	cmp	r3, #40	; 0x28
 800212c:	d16a      	bne.n	8002204 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	0c1b      	lsrs	r3, r3, #16
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	0c1b      	lsrs	r3, r3, #16
 8002146:	b29b      	uxth	r3, r3
 8002148:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800214c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	b29b      	uxth	r3, r3
 8002156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800215a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	b29b      	uxth	r3, r3
 8002164:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002168:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d138      	bne.n	80021e4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002172:	897b      	ldrh	r3, [r7, #10]
 8002174:	09db      	lsrs	r3, r3, #7
 8002176:	b29a      	uxth	r2, r3
 8002178:	89bb      	ldrh	r3, [r7, #12]
 800217a:	4053      	eors	r3, r2
 800217c:	b29b      	uxth	r3, r3
 800217e:	f003 0306 	and.w	r3, r3, #6
 8002182:	2b00      	cmp	r3, #0
 8002184:	d11c      	bne.n	80021c0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002186:	897b      	ldrh	r3, [r7, #10]
 8002188:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002198:	2b02      	cmp	r3, #2
 800219a:	d13b      	bne.n	8002214 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2208      	movs	r2, #8
 80021a8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80021b2:	89ba      	ldrh	r2, [r7, #12]
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	4619      	mov	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7fe fbe5 	bl	8000988 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80021be:	e029      	b.n	8002214 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80021c0:	893b      	ldrh	r3, [r7, #8]
 80021c2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80021c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fcff 	bl	8002bcc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80021d6:	89ba      	ldrh	r2, [r7, #12]
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	4619      	mov	r1, r3
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7fe fbd3 	bl	8000988 <HAL_I2C_AddrCallback>
}
 80021e2:	e017      	b.n	8002214 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80021e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fcef 	bl	8002bcc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80021f6:	89ba      	ldrh	r2, [r7, #12]
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	4619      	mov	r1, r3
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7fe fbc3 	bl	8000988 <HAL_I2C_AddrCallback>
}
 8002202:	e007      	b.n	8002214 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2208      	movs	r2, #8
 800220a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002214:	bf00      	nop
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b21      	cmp	r3, #33	; 0x21
 8002236:	d115      	bne.n	8002264 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2211      	movs	r2, #17
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800224c:	2101      	movs	r1, #1
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fcbc 	bl	8002bcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff fb3b 	bl	80018d8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002262:	e014      	b.n	800228e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2212      	movs	r2, #18
 8002270:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002278:	2102      	movs	r1, #2
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fca6 	bl	8002bcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff fb2f 	bl	80018ec <HAL_I2C_MasterRxCpltCallback>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b084      	sub	sp, #16
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d008      	beq.n	80022ca <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e00c      	b.n	80022e4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d007      	beq.n	80022e4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b29      	cmp	r3, #41	; 0x29
 80022ee:	d112      	bne.n	8002316 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2228      	movs	r2, #40	; 0x28
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2221      	movs	r2, #33	; 0x21
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80022fe:	2101      	movs	r1, #1
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fc63 	bl	8002bcc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7fe faf2 	bl	80008f8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002314:	e017      	b.n	8002346 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b2a      	cmp	r3, #42	; 0x2a
 8002320:	d111      	bne.n	8002346 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2228      	movs	r2, #40	; 0x28
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2222      	movs	r2, #34	; 0x22
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002330:	2102      	movs	r1, #2
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fc4a 	bl	8002bcc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe fb03 	bl	800094c <HAL_I2C_SlaveRxCpltCallback>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2220      	movs	r2, #32
 8002364:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b21      	cmp	r3, #33	; 0x21
 8002370:	d107      	bne.n	8002382 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002372:	2101      	movs	r1, #1
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fc29 	bl	8002bcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2211      	movs	r2, #17
 800237e:	631a      	str	r2, [r3, #48]	; 0x30
 8002380:	e00c      	b.n	800239c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b22      	cmp	r3, #34	; 0x22
 800238c:	d106      	bne.n	800239c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800238e:	2102      	movs	r1, #2
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fc1b 	bl	8002bcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2212      	movs	r2, #18
 800239a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <I2C_ITMasterCplt+0x188>)
 80023a8:	400b      	ands	r3, r1
 80023aa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a49      	ldr	r2, [pc, #292]	; (80024dc <I2C_ITMasterCplt+0x18c>)
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2210      	movs	r2, #16
 80023c8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f043 0204 	orr.w	r2, r3, #4
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b60      	cmp	r3, #96	; 0x60
 80023e0:	d10a      	bne.n	80023f8 <I2C_ITMasterCplt+0xa8>
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80023f6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 faee 	bl	80029da <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b60      	cmp	r3, #96	; 0x60
 800240e:	d002      	beq.n	8002416 <I2C_ITMasterCplt+0xc6>
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d006      	beq.n	8002424 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	4619      	mov	r1, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f9c5 	bl	80027ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002422:	e054      	b.n	80024ce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b21      	cmp	r3, #33	; 0x21
 800242e:	d124      	bne.n	800247a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	d10b      	bne.n	8002462 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff fa50 	bl	8001900 <HAL_I2C_MemTxCpltCallback>
}
 8002460:	e035      	b.n	80024ce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fa30 	bl	80018d8 <HAL_I2C_MasterTxCpltCallback>
}
 8002478:	e029      	b.n	80024ce <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b22      	cmp	r3, #34	; 0x22
 8002484:	d123      	bne.n	80024ce <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b40      	cmp	r3, #64	; 0x40
 800249e:	d10b      	bne.n	80024b8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fa2f 	bl	8001914 <HAL_I2C_MemRxCpltCallback>
}
 80024b6:	e00a      	b.n	80024ce <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7ff fa0f 	bl	80018ec <HAL_I2C_MasterRxCpltCallback>
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	fe00e800 	.word	0xfe00e800
 80024dc:	ffff0000 	.word	0xffff0000

080024e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024fc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2220      	movs	r2, #32
 8002504:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	2b21      	cmp	r3, #33	; 0x21
 800250a:	d002      	beq.n	8002512 <I2C_ITSlaveCplt+0x32>
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	2b29      	cmp	r3, #41	; 0x29
 8002510:	d108      	bne.n	8002524 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002512:	f248 0101 	movw	r1, #32769	; 0x8001
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fb58 	bl	8002bcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2221      	movs	r2, #33	; 0x21
 8002520:	631a      	str	r2, [r3, #48]	; 0x30
 8002522:	e019      	b.n	8002558 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	2b22      	cmp	r3, #34	; 0x22
 8002528:	d002      	beq.n	8002530 <I2C_ITSlaveCplt+0x50>
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	2b2a      	cmp	r3, #42	; 0x2a
 800252e:	d108      	bne.n	8002542 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002530:	f248 0102 	movw	r1, #32770	; 0x8002
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fb49 	bl	8002bcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2222      	movs	r2, #34	; 0x22
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
 8002540:	e00a      	b.n	8002558 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b28      	cmp	r3, #40	; 0x28
 8002546:	d107      	bne.n	8002558 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002548:	f248 0103 	movw	r1, #32771	; 0x8003
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fb3d 	bl	8002bcc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002566:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6859      	ldr	r1, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b62      	ldr	r3, [pc, #392]	; (80026fc <I2C_ITSlaveCplt+0x21c>)
 8002574:	400b      	ands	r3, r1
 8002576:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 fa2e 	bl	80029da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002596:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01f      	beq.n	80025e0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025ae:	e017      	b.n	80025e0 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d012      	beq.n	80025e0 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d006      	beq.n	80025e0 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d020      	beq.n	800262c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00c      	beq.n	800262c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263a:	f043 0204 	orr.w	r2, r3, #4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002654:	2b00      	cmp	r3, #0
 8002656:	d010      	beq.n	800267a <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	4619      	mov	r1, r3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8a4 	bl	80027ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b28      	cmp	r3, #40	; 0x28
 800266e:	d141      	bne.n	80026f4 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002670:	6979      	ldr	r1, [r7, #20]
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f846 	bl	8002704 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002678:	e03c      	b.n	80026f4 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002682:	d014      	beq.n	80026ae <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fe06 	bl	8002296 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <I2C_ITSlaveCplt+0x220>)
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe f9a2 	bl	80009f0 <HAL_I2C_ListenCpltCallback>
}
 80026ac:	e022      	b.n	80026f4 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b22      	cmp	r3, #34	; 0x22
 80026b8:	d10e      	bne.n	80026d8 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7fe f93b 	bl	800094c <HAL_I2C_SlaveRxCpltCallback>
}
 80026d6:	e00d      	b.n	80026f4 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe f902 	bl	80008f8 <HAL_I2C_SlaveTxCpltCallback>
}
 80026f4:	bf00      	nop
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	fe00e800 	.word	0xfe00e800
 8002700:	ffff0000 	.word	0xffff0000

08002704 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <I2C_ITListenCplt+0xa4>)
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d022      	beq.n	8002780 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	2b00      	cmp	r3, #0
 8002758:	d012      	beq.n	8002780 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002780:	f248 0103 	movw	r1, #32771	; 0x8003
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fa21 	bl	8002bcc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2210      	movs	r2, #16
 8002790:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe f928 	bl	80009f0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	ffff0000 	.word	0xffff0000

080027ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027bc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a6d      	ldr	r2, [pc, #436]	; (8002980 <I2C_ITError+0x1d4>)
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80027de:	7bfb      	ldrb	r3, [r7, #15]
 80027e0:	2b28      	cmp	r3, #40	; 0x28
 80027e2:	d005      	beq.n	80027f0 <I2C_ITError+0x44>
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
 80027e6:	2b29      	cmp	r3, #41	; 0x29
 80027e8:	d002      	beq.n	80027f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b2a      	cmp	r3, #42	; 0x2a
 80027ee:	d10b      	bne.n	8002808 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80027f0:	2103      	movs	r1, #3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f9ea 	bl	8002bcc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2228      	movs	r2, #40	; 0x28
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a60      	ldr	r2, [pc, #384]	; (8002984 <I2C_ITError+0x1d8>)
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
 8002806:	e030      	b.n	800286a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002808:	f248 0103 	movw	r1, #32771	; 0x8003
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f9dd 	bl	8002bcc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8e1 	bl	80029da <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b60      	cmp	r3, #96	; 0x60
 8002822:	d01f      	beq.n	8002864 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b20      	cmp	r3, #32
 8002838:	d114      	bne.n	8002864 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0310 	and.w	r3, r3, #16
 8002844:	2b10      	cmp	r3, #16
 8002846:	d109      	bne.n	800285c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2210      	movs	r2, #16
 800284e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f043 0204 	orr.w	r2, r3, #4
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2220      	movs	r2, #32
 8002862:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	2b00      	cmp	r3, #0
 8002876:	d039      	beq.n	80028ec <I2C_ITError+0x140>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b11      	cmp	r3, #17
 800287c:	d002      	beq.n	8002884 <I2C_ITError+0xd8>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b21      	cmp	r3, #33	; 0x21
 8002882:	d133      	bne.n	80028ec <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002892:	d107      	bne.n	80028a4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80028a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fc55 	bl	8001158 <HAL_DMA_GetState>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d017      	beq.n	80028e4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b8:	4a33      	ldr	r2, [pc, #204]	; (8002988 <I2C_ITError+0x1dc>)
 80028ba:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe fc04 	bl	80010d6 <HAL_DMA_Abort_IT>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d04d      	beq.n	8002970 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028de:	4610      	mov	r0, r2
 80028e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028e2:	e045      	b.n	8002970 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f851 	bl	800298c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028ea:	e041      	b.n	8002970 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d039      	beq.n	8002968 <I2C_ITError+0x1bc>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b12      	cmp	r3, #18
 80028f8:	d002      	beq.n	8002900 <I2C_ITError+0x154>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b22      	cmp	r3, #34	; 0x22
 80028fe:	d133      	bne.n	8002968 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800290a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290e:	d107      	bne.n	8002920 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800291e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe fc17 	bl	8001158 <HAL_DMA_GetState>
 800292a:	4603      	mov	r3, r0
 800292c:	2b01      	cmp	r3, #1
 800292e:	d017      	beq.n	8002960 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <I2C_ITError+0x1dc>)
 8002936:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fbc6 	bl	80010d6 <HAL_DMA_Abort_IT>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d011      	beq.n	8002974 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800295a:	4610      	mov	r0, r2
 800295c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800295e:	e009      	b.n	8002974 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f813 	bl	800298c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002966:	e005      	b.n	8002974 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f80f 	bl	800298c <I2C_TreatErrorCallback>
  }
}
 800296e:	e002      	b.n	8002976 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002970:	bf00      	nop
 8002972:	e000      	b.n	8002976 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002974:	bf00      	nop
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	ffff0000 	.word	0xffff0000
 8002984:	08001955 	.word	0x08001955
 8002988:	08002a23 	.word	0x08002a23

0800298c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b60      	cmp	r3, #96	; 0x60
 800299e:	d10e      	bne.n	80029be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe ffb6 	bl	8001928 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80029bc:	e009      	b.n	80029d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7fe f819 	bl	8000a04 <HAL_I2C_ErrorCallback>
}
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d103      	bne.n	80029f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2200      	movs	r2, #0
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d007      	beq.n	8002a16 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	619a      	str	r2, [r3, #24]
  }
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b084      	sub	sp, #16
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff ff9b 	bl	800298c <I2C_TreatErrorCallback>
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a72:	897b      	ldrh	r3, [r7, #10]
 8002a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a78:	7a7b      	ldrb	r3, [r7, #9]
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	0d5b      	lsrs	r3, r3, #21
 8002a9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <I2C_TransferConfig+0x60>)
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	ea02 0103 	and.w	r1, r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	03ff63ff 	.word	0x03ff63ff

08002ac4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad8:	4a39      	ldr	r2, [pc, #228]	; (8002bc0 <I2C_Enable_IRQ+0xfc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d032      	beq.n	8002b44 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002ae2:	4a38      	ldr	r2, [pc, #224]	; (8002bc4 <I2C_Enable_IRQ+0x100>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02d      	beq.n	8002b44 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002aec:	4a36      	ldr	r2, [pc, #216]	; (8002bc8 <I2C_Enable_IRQ+0x104>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d028      	beq.n	8002b44 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002af2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	da03      	bge.n	8002b02 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002b00:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002b02:	887b      	ldrh	r3, [r7, #2]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002b12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002b24:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d103      	bne.n	8002b34 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002b32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002b34:	887b      	ldrh	r3, [r7, #2]
 8002b36:	2b20      	cmp	r3, #32
 8002b38:	d133      	bne.n	8002ba2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f043 0320 	orr.w	r3, r3, #32
 8002b40:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002b42:	e02e      	b.n	8002ba2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002b44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	da03      	bge.n	8002b54 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002b52:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002b64:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002b66:	887b      	ldrh	r3, [r7, #2]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002b76:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002b78:	887b      	ldrh	r3, [r7, #2]
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d103      	bne.n	8002b86 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002b84:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d103      	bne.n	8002b94 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b92:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d103      	bne.n	8002ba2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	08001b45 	.word	0x08001b45
 8002bc4:	08001f69 	.word	0x08001f69
 8002bc8:	08001d1d 	.word	0x08001d1d

08002bcc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00f      	beq.n	8002c06 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002bec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bfa:	2b28      	cmp	r3, #40	; 0x28
 8002bfc:	d003      	beq.n	8002c06 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002c04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002c06:	887b      	ldrh	r3, [r7, #2]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00f      	beq.n	8002c30 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002c16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c24:	2b28      	cmp	r3, #40	; 0x28
 8002c26:	d003      	beq.n	8002c30 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002c2e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002c30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	da03      	bge.n	8002c40 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002c3e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002c40:	887b      	ldrh	r3, [r7, #2]
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d103      	bne.n	8002c4e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002c4e:	887b      	ldrh	r3, [r7, #2]
 8002c50:	2b20      	cmp	r3, #32
 8002c52:	d103      	bne.n	8002c5c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f043 0320 	orr.w	r3, r3, #32
 8002c5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	2b40      	cmp	r3, #64	; 0x40
 8002c60:	d103      	bne.n	8002c6a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43da      	mvns	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	400a      	ands	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d138      	bne.n	8002d10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e032      	b.n	8002d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2224      	movs	r2, #36	; 0x24
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6819      	ldr	r1, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e000      	b.n	8002d12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d139      	bne.n	8002da8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e033      	b.n	8002daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2224      	movs	r2, #36	; 0x24
 8002d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40007000 	.word	0x40007000

08002dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de2:	d130      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df0:	d038      	beq.n	8002e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002df2:	4b20      	ldr	r3, [pc, #128]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e02:	4b1d      	ldr	r3, [pc, #116]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2232      	movs	r2, #50	; 0x32
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	4a1b      	ldr	r2, [pc, #108]	; (8002e7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0c9b      	lsrs	r3, r3, #18
 8002e14:	3301      	adds	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e18:	e002      	b.n	8002e20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2c:	d102      	bne.n	8002e34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f2      	bne.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e40:	d110      	bne.n	8002e64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e00f      	b.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e46:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e52:	d007      	beq.n	8002e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e5c:	4a05      	ldr	r2, [pc, #20]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40007000 	.word	0x40007000
 8002e78:	20000000 	.word	0x20000000
 8002e7c:	431bde83 	.word	0x431bde83

08002e80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d102      	bne.n	8002e94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f000 bc02 	b.w	8003698 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e94:	4b96      	ldr	r3, [pc, #600]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 030c 	and.w	r3, r3, #12
 8002e9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e9e:	4b94      	ldr	r3, [pc, #592]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80e4 	beq.w	800307e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4c>
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	2b0c      	cmp	r3, #12
 8002ec0:	f040 808b 	bne.w	8002fda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	f040 8087 	bne.w	8002fda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ecc:	4b88      	ldr	r3, [pc, #544]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x64>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e3d9      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1a      	ldr	r2, [r3, #32]
 8002ee8:	4b81      	ldr	r3, [pc, #516]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d004      	beq.n	8002efe <HAL_RCC_OscConfig+0x7e>
 8002ef4:	4b7e      	ldr	r3, [pc, #504]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efc:	e005      	b.n	8002f0a <HAL_RCC_OscConfig+0x8a>
 8002efe:	4b7c      	ldr	r3, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d223      	bcs.n	8002f56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd8c 	bl	8003a30 <RCC_SetFlashLatencyFromMSIRange>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e3ba      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f22:	4b73      	ldr	r3, [pc, #460]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a72      	ldr	r2, [pc, #456]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f28:	f043 0308 	orr.w	r3, r3, #8
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b70      	ldr	r3, [pc, #448]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	496d      	ldr	r1, [pc, #436]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f40:	4b6b      	ldr	r3, [pc, #428]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	4968      	ldr	r1, [pc, #416]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
 8002f54:	e025      	b.n	8002fa2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f56:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a65      	ldr	r2, [pc, #404]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	f043 0308 	orr.w	r3, r3, #8
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b63      	ldr	r3, [pc, #396]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4960      	ldr	r1, [pc, #384]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f74:	4b5e      	ldr	r3, [pc, #376]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	495b      	ldr	r1, [pc, #364]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fd4c 	bl	8003a30 <RCC_SetFlashLatencyFromMSIRange>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e37a      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa2:	f000 fc81 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	4b51      	ldr	r3, [pc, #324]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	4950      	ldr	r1, [pc, #320]	; (80030f4 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	5ccb      	ldrb	r3, [r1, r3]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbe:	4a4e      	ldr	r2, [pc, #312]	; (80030f8 <HAL_RCC_OscConfig+0x278>)
 8002fc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fc2:	4b4e      	ldr	r3, [pc, #312]	; (80030fc <HAL_RCC_OscConfig+0x27c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd ff20 	bl	8000e0c <HAL_InitTick>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d052      	beq.n	800307c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
 8002fd8:	e35e      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d032      	beq.n	8003048 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fe2:	4b43      	ldr	r3, [pc, #268]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a42      	ldr	r2, [pc, #264]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fee:	f7fd ff5d 	bl	8000eac <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff6:	f7fd ff59 	bl	8000eac <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e347      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003008:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003014:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a35      	ldr	r2, [pc, #212]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4930      	ldr	r1, [pc, #192]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 800302e:	4313      	orrs	r3, r2
 8003030:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003032:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	492b      	ldr	r1, [pc, #172]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
 8003046:	e01a      	b.n	800307e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003048:	4b29      	ldr	r3, [pc, #164]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a28      	ldr	r2, [pc, #160]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 800304e:	f023 0301 	bic.w	r3, r3, #1
 8003052:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003054:	f7fd ff2a 	bl	8000eac <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800305c:	f7fd ff26 	bl	8000eac <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e314      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x1dc>
 800307a:	e000      	b.n	800307e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800307c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d073      	beq.n	8003172 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d005      	beq.n	800309c <HAL_RCC_OscConfig+0x21c>
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b0c      	cmp	r3, #12
 8003094:	d10e      	bne.n	80030b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d10b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d063      	beq.n	8003170 <HAL_RCC_OscConfig+0x2f0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d15f      	bne.n	8003170 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e2f1      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x24c>
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e025      	b.n	8003118 <HAL_RCC_OscConfig+0x298>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d114      	bne.n	8003100 <HAL_RCC_OscConfig+0x280>
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a05      	ldr	r2, [pc, #20]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a02      	ldr	r2, [pc, #8]	; (80030f0 <HAL_RCC_OscConfig+0x270>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e013      	b.n	8003118 <HAL_RCC_OscConfig+0x298>
 80030f0:	40021000 	.word	0x40021000
 80030f4:	08004b54 	.word	0x08004b54
 80030f8:	20000000 	.word	0x20000000
 80030fc:	20000004 	.word	0x20000004
 8003100:	4ba0      	ldr	r3, [pc, #640]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a9f      	ldr	r2, [pc, #636]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b9d      	ldr	r3, [pc, #628]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a9c      	ldr	r2, [pc, #624]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fd fec4 	bl	8000eac <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fd fec0 	bl	8000eac <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e2ae      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313a:	4b92      	ldr	r3, [pc, #584]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x2a8>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7fd feb0 	bl	8000eac <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7fd feac 	bl	8000eac <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e29a      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003162:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x2d0>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d060      	beq.n	8003240 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b04      	cmp	r3, #4
 8003182:	d005      	beq.n	8003190 <HAL_RCC_OscConfig+0x310>
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d119      	bne.n	80031be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d116      	bne.n	80031be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003190:	4b7c      	ldr	r3, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_OscConfig+0x328>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e277      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a8:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	061b      	lsls	r3, r3, #24
 80031b6:	4973      	ldr	r1, [pc, #460]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031bc:	e040      	b.n	8003240 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d023      	beq.n	800320e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c6:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a6e      	ldr	r2, [pc, #440]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fd fe6b 	bl	8000eac <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031da:	f7fd fe67 	bl	8000eac <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e255      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031ec:	4b65      	ldr	r3, [pc, #404]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b62      	ldr	r3, [pc, #392]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	495f      	ldr	r1, [pc, #380]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
 800320c:	e018      	b.n	8003240 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320e:	4b5d      	ldr	r3, [pc, #372]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a5c      	ldr	r2, [pc, #368]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fd fe47 	bl	8000eac <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7fd fe43 	bl	8000eac <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e231      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003234:	4b53      	ldr	r3, [pc, #332]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d03c      	beq.n	80032c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01c      	beq.n	800328e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003254:	4b4b      	ldr	r3, [pc, #300]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325a:	4a4a      	ldr	r2, [pc, #296]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fd fe22 	bl	8000eac <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326c:	f7fd fe1e 	bl	8000eac <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e20c      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327e:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ef      	beq.n	800326c <HAL_RCC_OscConfig+0x3ec>
 800328c:	e01b      	b.n	80032c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328e:	4b3d      	ldr	r3, [pc, #244]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003294:	4a3b      	ldr	r2, [pc, #236]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fd fe05 	bl	8000eac <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a6:	f7fd fe01 	bl	8000eac <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e1ef      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b8:	4b32      	ldr	r3, [pc, #200]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1ef      	bne.n	80032a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80a6 	beq.w	8003420 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032d8:	4b2a      	ldr	r3, [pc, #168]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10d      	bne.n	8003300 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	4a26      	ldr	r2, [pc, #152]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80032ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ee:	6593      	str	r3, [r2, #88]	; 0x58
 80032f0:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f8:	60bb      	str	r3, [r7, #8]
 80032fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fc:	2301      	movs	r3, #1
 80032fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003300:	4b21      	ldr	r3, [pc, #132]	; (8003388 <HAL_RCC_OscConfig+0x508>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d118      	bne.n	800333e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800330c:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <HAL_RCC_OscConfig+0x508>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <HAL_RCC_OscConfig+0x508>)
 8003312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003318:	f7fd fdc8 	bl	8000eac <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003320:	f7fd fdc4 	bl	8000eac <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e1b2      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_RCC_OscConfig+0x508>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d0f0      	beq.n	8003320 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d108      	bne.n	8003358 <HAL_RCC_OscConfig+0x4d8>
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	4a0d      	ldr	r2, [pc, #52]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003356:	e029      	b.n	80033ac <HAL_RCC_OscConfig+0x52c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d115      	bne.n	800338c <HAL_RCC_OscConfig+0x50c>
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	4a07      	ldr	r2, [pc, #28]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003368:	f043 0304 	orr.w	r3, r3, #4
 800336c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003370:	4b04      	ldr	r3, [pc, #16]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	4a03      	ldr	r2, [pc, #12]	; (8003384 <HAL_RCC_OscConfig+0x504>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003380:	e014      	b.n	80033ac <HAL_RCC_OscConfig+0x52c>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	40007000 	.word	0x40007000
 800338c:	4b9a      	ldr	r3, [pc, #616]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	4a99      	ldr	r2, [pc, #612]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800339c:	4b96      	ldr	r3, [pc, #600]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a2:	4a95      	ldr	r2, [pc, #596]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 80033a4:	f023 0304 	bic.w	r3, r3, #4
 80033a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d016      	beq.n	80033e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fd fd7a 	bl	8000eac <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fd fd76 	bl	8000eac <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e162      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d2:	4b89      	ldr	r3, [pc, #548]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 80033d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0ed      	beq.n	80033bc <HAL_RCC_OscConfig+0x53c>
 80033e0:	e015      	b.n	800340e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7fd fd63 	bl	8000eac <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fd fd5f 	bl	8000eac <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e14b      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003400:	4b7d      	ldr	r3, [pc, #500]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ed      	bne.n	80033ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340e:	7ffb      	ldrb	r3, [r7, #31]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b78      	ldr	r3, [pc, #480]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	4a77      	ldr	r2, [pc, #476]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d03c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01c      	beq.n	800346e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003434:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800343a:	4a6f      	ldr	r2, [pc, #444]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fd fd32 	bl	8000eac <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800344c:	f7fd fd2e 	bl	8000eac <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e11c      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800345e:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003460:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ef      	beq.n	800344c <HAL_RCC_OscConfig+0x5cc>
 800346c:	e01b      	b.n	80034a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800346e:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003470:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003474:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fd fd15 	bl	8000eac <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003486:	f7fd fd11 	bl	8000eac <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e0ff      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003498:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 800349a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1ef      	bne.n	8003486 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 80f3 	beq.w	8003696 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	f040 80c9 	bne.w	800364c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034ba:	4b4f      	ldr	r3, [pc, #316]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f003 0203 	and.w	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d12c      	bne.n	8003528 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	3b01      	subs	r3, #1
 80034da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d123      	bne.n	8003528 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d11b      	bne.n	8003528 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d113      	bne.n	8003528 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	3b01      	subs	r3, #1
 800350e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003510:	429a      	cmp	r2, r3
 8003512:	d109      	bne.n	8003528 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	3b01      	subs	r3, #1
 8003522:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d06b      	beq.n	8003600 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d062      	beq.n	80035f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800352e:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0ac      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800353e:	4b2e      	ldr	r3, [pc, #184]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2d      	ldr	r2, [pc, #180]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003544:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003548:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800354a:	f7fd fcaf 	bl	8000eac <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003552:	f7fd fcab 	bl	8000eac <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e099      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f0      	bne.n	8003552 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	4b21      	ldr	r3, [pc, #132]	; (80035fc <HAL_RCC_OscConfig+0x77c>)
 8003576:	4013      	ands	r3, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003580:	3a01      	subs	r2, #1
 8003582:	0112      	lsls	r2, r2, #4
 8003584:	4311      	orrs	r1, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800358a:	0212      	lsls	r2, r2, #8
 800358c:	4311      	orrs	r1, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003592:	0852      	lsrs	r2, r2, #1
 8003594:	3a01      	subs	r2, #1
 8003596:	0552      	lsls	r2, r2, #21
 8003598:	4311      	orrs	r1, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800359e:	0852      	lsrs	r2, r2, #1
 80035a0:	3a01      	subs	r2, #1
 80035a2:	0652      	lsls	r2, r2, #25
 80035a4:	4311      	orrs	r1, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035aa:	06d2      	lsls	r2, r2, #27
 80035ac:	430a      	orrs	r2, r1
 80035ae:	4912      	ldr	r1, [pc, #72]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0f      	ldr	r2, [pc, #60]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 80035c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035cc:	f7fd fc6e 	bl	8000eac <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fd fc6a 	bl	8000eac <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e058      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e6:	4b04      	ldr	r3, [pc, #16]	; (80035f8 <HAL_RCC_OscConfig+0x778>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035f2:	e050      	b.n	8003696 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e04f      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
 80035f8:	40021000 	.word	0x40021000
 80035fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d144      	bne.n	8003696 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800360c:	4b24      	ldr	r3, [pc, #144]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a23      	ldr	r2, [pc, #140]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003616:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	4a20      	ldr	r2, [pc, #128]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 800361e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003622:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003624:	f7fd fc42 	bl	8000eac <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800362c:	f7fd fc3e 	bl	8000eac <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e02c      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363e:	4b18      	ldr	r3, [pc, #96]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0x7ac>
 800364a:	e024      	b.n	8003696 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d01f      	beq.n	8003692 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003652:	4b13      	ldr	r3, [pc, #76]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a12      	ldr	r2, [pc, #72]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 8003658:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800365c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fd fc25 	bl	8000eac <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003666:	f7fd fc21 	bl	8000eac <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e00f      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003678:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f0      	bne.n	8003666 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	4905      	ldr	r1, [pc, #20]	; (80036a0 <HAL_RCC_OscConfig+0x820>)
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_RCC_OscConfig+0x824>)
 800368c:	4013      	ands	r3, r2
 800368e:	60cb      	str	r3, [r1, #12]
 8003690:	e001      	b.n	8003696 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3720      	adds	r7, #32
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40021000 	.word	0x40021000
 80036a4:	feeefffc 	.word	0xfeeefffc

080036a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0e7      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036bc:	4b75      	ldr	r3, [pc, #468]	; (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d910      	bls.n	80036ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b72      	ldr	r3, [pc, #456]	; (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 0207 	bic.w	r2, r3, #7
 80036d2:	4970      	ldr	r1, [pc, #448]	; (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b6e      	ldr	r3, [pc, #440]	; (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0cf      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d010      	beq.n	800371a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	4b66      	ldr	r3, [pc, #408]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003704:	429a      	cmp	r2, r3
 8003706:	d908      	bls.n	800371a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003708:	4b63      	ldr	r3, [pc, #396]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4960      	ldr	r1, [pc, #384]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d04c      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b03      	cmp	r3, #3
 800372c:	d107      	bne.n	800373e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372e:	4b5a      	ldr	r3, [pc, #360]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d121      	bne.n	800377e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e0a6      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d107      	bne.n	8003756 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003746:	4b54      	ldr	r3, [pc, #336]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d115      	bne.n	800377e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e09a      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800375e:	4b4e      	ldr	r3, [pc, #312]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e08e      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376e:	4b4a      	ldr	r3, [pc, #296]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e086      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b46      	ldr	r3, [pc, #280]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4943      	ldr	r1, [pc, #268]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 800378c:	4313      	orrs	r3, r2
 800378e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003790:	f7fd fb8c 	bl	8000eac <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7fd fb88 	bl	8000eac <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e06e      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b3a      	ldr	r3, [pc, #232]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	4b31      	ldr	r3, [pc, #196]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d8:	429a      	cmp	r2, r3
 80037da:	d208      	bcs.n	80037ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	492b      	ldr	r1, [pc, #172]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d210      	bcs.n	800381e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fc:	4b25      	ldr	r3, [pc, #148]	; (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f023 0207 	bic.w	r2, r3, #7
 8003804:	4923      	ldr	r1, [pc, #140]	; (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380c:	4b21      	ldr	r3, [pc, #132]	; (8003894 <HAL_RCC_ClockConfig+0x1ec>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e036      	b.n	800388c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800382a:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4918      	ldr	r1, [pc, #96]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d009      	beq.n	800385c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003848:	4b13      	ldr	r3, [pc, #76]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	4910      	ldr	r1, [pc, #64]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003858:	4313      	orrs	r3, r2
 800385a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800385c:	f000 f824 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8003860:	4602      	mov	r2, r0
 8003862:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	490b      	ldr	r1, [pc, #44]	; (800389c <HAL_RCC_ClockConfig+0x1f4>)
 800386e:	5ccb      	ldrb	r3, [r1, r3]
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	fa22 f303 	lsr.w	r3, r2, r3
 8003878:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <HAL_RCC_ClockConfig+0x1f8>)
 800387a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_RCC_ClockConfig+0x1fc>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd fac3 	bl	8000e0c <HAL_InitTick>
 8003886:	4603      	mov	r3, r0
 8003888:	72fb      	strb	r3, [r7, #11]

  return status;
 800388a:	7afb      	ldrb	r3, [r7, #11]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40022000 	.word	0x40022000
 8003898:	40021000 	.word	0x40021000
 800389c:	08004b54 	.word	0x08004b54
 80038a0:	20000000 	.word	0x20000000
 80038a4:	20000004 	.word	0x20000004

080038a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b089      	sub	sp, #36	; 0x24
 80038ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b6:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x34>
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d121      	bne.n	800391a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d11e      	bne.n	800391a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80038dc:	4b34      	ldr	r3, [pc, #208]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d107      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80038e8:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	e005      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80038f8:	4b2d      	ldr	r3, [pc, #180]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003904:	4a2b      	ldr	r2, [pc, #172]	; (80039b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10d      	bne.n	8003930 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003918:	e00a      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b04      	cmp	r3, #4
 800391e:	d102      	bne.n	8003926 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003922:	61bb      	str	r3, [r7, #24]
 8003924:	e004      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b08      	cmp	r3, #8
 800392a:	d101      	bne.n	8003930 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800392c:	4b23      	ldr	r3, [pc, #140]	; (80039bc <HAL_RCC_GetSysClockFreq+0x114>)
 800392e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d134      	bne.n	80039a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003936:	4b1e      	ldr	r3, [pc, #120]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0xa6>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b03      	cmp	r3, #3
 800394a:	d003      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0xac>
 800394c:	e005      	b.n	800395a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800394e:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003950:	617b      	str	r3, [r7, #20]
      break;
 8003952:	e005      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <HAL_RCC_GetSysClockFreq+0x114>)
 8003956:	617b      	str	r3, [r7, #20]
      break;
 8003958:	e002      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	617b      	str	r3, [r7, #20]
      break;
 800395e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003960:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	3301      	adds	r3, #1
 800396c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	fb03 f202 	mul.w	r2, r3, r2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003986:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	0e5b      	lsrs	r3, r3, #25
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	3301      	adds	r3, #1
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	fbb2 f3f3 	udiv	r3, r2, r3
 800399e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039a0:	69bb      	ldr	r3, [r7, #24]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000
 80039b4:	08004b6c 	.word	0x08004b6c
 80039b8:	00f42400 	.word	0x00f42400
 80039bc:	007a1200 	.word	0x007a1200

080039c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000000 	.word	0x20000000

080039d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039dc:	f7ff fff0 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4904      	ldr	r1, [pc, #16]	; (8003a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	08004b64 	.word	0x08004b64

08003a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a08:	f7ff ffda 	bl	80039c0 <HAL_RCC_GetHCLKFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	0adb      	lsrs	r3, r3, #11
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	4904      	ldr	r1, [pc, #16]	; (8003a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	08004b64 	.word	0x08004b64

08003a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a3c:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a48:	f7ff f9b6 	bl	8002db8 <HAL_PWREx_GetVoltageRange>
 8003a4c:	6178      	str	r0, [r7, #20]
 8003a4e:	e014      	b.n	8003a7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a50:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	4a24      	ldr	r2, [pc, #144]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a68:	f7ff f9a6 	bl	8002db8 <HAL_PWREx_GetVoltageRange>
 8003a6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a72:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a80:	d10b      	bne.n	8003a9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b80      	cmp	r3, #128	; 0x80
 8003a86:	d919      	bls.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2ba0      	cmp	r3, #160	; 0xa0
 8003a8c:	d902      	bls.n	8003a94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a8e:	2302      	movs	r3, #2
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	e013      	b.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a94:	2301      	movs	r3, #1
 8003a96:	613b      	str	r3, [r7, #16]
 8003a98:	e010      	b.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b80      	cmp	r3, #128	; 0x80
 8003a9e:	d902      	bls.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	613b      	str	r3, [r7, #16]
 8003aa4:	e00a      	b.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b80      	cmp	r3, #128	; 0x80
 8003aaa:	d102      	bne.n	8003ab2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003aac:	2302      	movs	r3, #2
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	e004      	b.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b70      	cmp	r3, #112	; 0x70
 8003ab6:	d101      	bne.n	8003abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ab8:	2301      	movs	r3, #1
 8003aba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 0207 	bic.w	r2, r3, #7
 8003ac4:	4909      	ldr	r1, [pc, #36]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d001      	beq.n	8003ade <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	40022000 	.word	0x40022000

08003af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003af8:	2300      	movs	r3, #0
 8003afa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003afc:	2300      	movs	r3, #0
 8003afe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d031      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b14:	d01a      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b1a:	d814      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b24:	d10f      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b26:	4b5d      	ldr	r3, [pc, #372]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	4a5c      	ldr	r2, [pc, #368]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b32:	e00c      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	2100      	movs	r1, #0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fa22 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b44:	e003      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	74fb      	strb	r3, [r7, #19]
      break;
 8003b4a:	e000      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b4e:	7cfb      	ldrb	r3, [r7, #19]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b54:	4b51      	ldr	r3, [pc, #324]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	494e      	ldr	r1, [pc, #312]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b6a:	e001      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 809e 	beq.w	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b82:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00d      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4b40      	ldr	r3, [pc, #256]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	4a3f      	ldr	r2, [pc, #252]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba4:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bb4:	4b3a      	ldr	r3, [pc, #232]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a39      	ldr	r2, [pc, #228]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bc0:	f7fd f974 	bl	8000eac <HAL_GetTick>
 8003bc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bc6:	e009      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc8:	f7fd f970 	bl	8000eac <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d902      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	74fb      	strb	r3, [r7, #19]
        break;
 8003bda:	e005      	b.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bdc:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0ef      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d15a      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01e      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d019      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	4a1f      	ldr	r2, [pc, #124]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c26:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	4a1b      	ldr	r2, [pc, #108]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c36:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d016      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd f930 	bl	8000eac <HAL_GetTick>
 8003c4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4e:	e00b      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fd f92c 	bl	8000eac <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d902      	bls.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	74fb      	strb	r3, [r7, #19]
            break;
 8003c66:	e006      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0ec      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c76:	7cfb      	ldrb	r3, [r7, #19]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c7c:	4b07      	ldr	r3, [pc, #28]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	4904      	ldr	r1, [pc, #16]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c92:	e009      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	74bb      	strb	r3, [r7, #18]
 8003c98:	e006      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003c9a:	bf00      	nop
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
 8003ca6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca8:	7c7b      	ldrb	r3, [r7, #17]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d105      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cae:	4b8d      	ldr	r3, [pc, #564]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb2:	4a8c      	ldr	r2, [pc, #560]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cc6:	4b87      	ldr	r3, [pc, #540]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f023 0203 	bic.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	4983      	ldr	r1, [pc, #524]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ce8:	4b7e      	ldr	r3, [pc, #504]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 020c 	bic.w	r2, r3, #12
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	497b      	ldr	r1, [pc, #492]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d0a:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	4972      	ldr	r1, [pc, #456]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d2c:	4b6d      	ldr	r3, [pc, #436]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	496a      	ldr	r1, [pc, #424]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d4e:	4b65      	ldr	r3, [pc, #404]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	4961      	ldr	r1, [pc, #388]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d70:	4b5c      	ldr	r3, [pc, #368]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4959      	ldr	r1, [pc, #356]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d92:	4b54      	ldr	r3, [pc, #336]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4950      	ldr	r1, [pc, #320]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003db4:	4b4b      	ldr	r3, [pc, #300]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc2:	4948      	ldr	r1, [pc, #288]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dd6:	4b43      	ldr	r3, [pc, #268]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	493f      	ldr	r1, [pc, #252]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d028      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003df8:	4b3a      	ldr	r3, [pc, #232]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e06:	4937      	ldr	r1, [pc, #220]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e16:	d106      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e18:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a31      	ldr	r2, [pc, #196]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e22:	60d3      	str	r3, [r2, #12]
 8003e24:	e011      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	2101      	movs	r1, #1
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f8a4 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d028      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e56:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e64:	491f      	ldr	r1, [pc, #124]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e74:	d106      	bne.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e76:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e80:	60d3      	str	r3, [r2, #12]
 8003e82:	e011      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3304      	adds	r3, #4
 8003e92:	2101      	movs	r1, #1
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f875 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d02b      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec2:	4908      	ldr	r1, [pc, #32]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ece:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ed2:	d109      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a02      	ldr	r2, [pc, #8]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ede:	60d3      	str	r3, [r2, #12]
 8003ee0:	e014      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ef0:	d10c      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f843 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f02:	7cfb      	ldrb	r3, [r7, #19]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003f08:	7cfb      	ldrb	r3, [r7, #19]
 8003f0a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01c      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f26:	4916      	ldr	r1, [pc, #88]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f36:	d10c      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f820 	bl	8003f84 <RCCEx_PLLSAI1_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003f4e:	7cfb      	ldrb	r3, [r7, #19]
 8003f50:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f5e:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6c:	4904      	ldr	r1, [pc, #16]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f74:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000

08003f84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f92:	4b74      	ldr	r3, [pc, #464]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f9e:	4b71      	ldr	r3, [pc, #452]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f003 0203 	and.w	r2, r3, #3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d10d      	bne.n	8003fca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003fb6:	4b6b      	ldr	r3, [pc, #428]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d047      	beq.n	800405a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e044      	b.n	800405a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d018      	beq.n	800400a <RCCEx_PLLSAI1_Config+0x86>
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d825      	bhi.n	8004028 <RCCEx_PLLSAI1_Config+0xa4>
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d002      	beq.n	8003fe6 <RCCEx_PLLSAI1_Config+0x62>
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d009      	beq.n	8003ff8 <RCCEx_PLLSAI1_Config+0x74>
 8003fe4:	e020      	b.n	8004028 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d11d      	bne.n	800402e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff6:	e01a      	b.n	800402e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ff8:	4b5a      	ldr	r3, [pc, #360]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004000:	2b00      	cmp	r3, #0
 8004002:	d116      	bne.n	8004032 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004008:	e013      	b.n	8004032 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800400a:	4b56      	ldr	r3, [pc, #344]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004016:	4b53      	ldr	r3, [pc, #332]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004026:	e006      	b.n	8004036 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
      break;
 800402c:	e004      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004036:	bf00      	nop
    }

    if(status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10d      	bne.n	800405a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800403e:	4b49      	ldr	r3, [pc, #292]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	430b      	orrs	r3, r1
 8004054:	4943      	ldr	r1, [pc, #268]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004056:	4313      	orrs	r3, r2
 8004058:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d17c      	bne.n	800415a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004060:	4b40      	ldr	r3, [pc, #256]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a3f      	ldr	r2, [pc, #252]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004066:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800406a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406c:	f7fc ff1e 	bl	8000eac <HAL_GetTick>
 8004070:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004072:	e009      	b.n	8004088 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004074:	f7fc ff1a 	bl	8000eac <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d902      	bls.n	8004088 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	73fb      	strb	r3, [r7, #15]
        break;
 8004086:	e005      	b.n	8004094 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ef      	bne.n	8004074 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d15f      	bne.n	800415a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d110      	bne.n	80040c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a0:	4b30      	ldr	r3, [pc, #192]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80040a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6892      	ldr	r2, [r2, #8]
 80040b0:	0211      	lsls	r1, r2, #8
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68d2      	ldr	r2, [r2, #12]
 80040b6:	06d2      	lsls	r2, r2, #27
 80040b8:	430a      	orrs	r2, r1
 80040ba:	492a      	ldr	r1, [pc, #168]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	610b      	str	r3, [r1, #16]
 80040c0:	e027      	b.n	8004112 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d112      	bne.n	80040ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040c8:	4b26      	ldr	r3, [pc, #152]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80040d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6892      	ldr	r2, [r2, #8]
 80040d8:	0211      	lsls	r1, r2, #8
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6912      	ldr	r2, [r2, #16]
 80040de:	0852      	lsrs	r2, r2, #1
 80040e0:	3a01      	subs	r2, #1
 80040e2:	0552      	lsls	r2, r2, #21
 80040e4:	430a      	orrs	r2, r1
 80040e6:	491f      	ldr	r1, [pc, #124]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	610b      	str	r3, [r1, #16]
 80040ec:	e011      	b.n	8004112 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6892      	ldr	r2, [r2, #8]
 80040fe:	0211      	lsls	r1, r2, #8
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6952      	ldr	r2, [r2, #20]
 8004104:	0852      	lsrs	r2, r2, #1
 8004106:	3a01      	subs	r2, #1
 8004108:	0652      	lsls	r2, r2, #25
 800410a:	430a      	orrs	r2, r1
 800410c:	4915      	ldr	r1, [pc, #84]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410e:	4313      	orrs	r3, r2
 8004110:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004112:	4b14      	ldr	r3, [pc, #80]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a13      	ldr	r2, [pc, #76]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004118:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800411c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411e:	f7fc fec5 	bl	8000eac <HAL_GetTick>
 8004122:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004124:	e009      	b.n	800413a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004126:	f7fc fec1 	bl	8000eac <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d902      	bls.n	800413a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	73fb      	strb	r3, [r7, #15]
          break;
 8004138:	e005      	b.n	8004146 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0ef      	beq.n	8004126 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d106      	bne.n	800415a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	4903      	ldr	r1, [pc, #12]	; (8004164 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004156:	4313      	orrs	r3, r2
 8004158:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800415a:	7bfb      	ldrb	r3, [r7, #15]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40021000 	.word	0x40021000

08004168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e040      	b.n	80041fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fc fd5e 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2224      	movs	r2, #36	; 0x24
 8004194:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fa82 	bl	80046b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f825 	bl	8004204 <UART_SetConfig>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e01b      	b.n	80041fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fb01 	bl	80047fc <UART_CheckIdleState>
 80041fa:	4603      	mov	r3, r0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004208:	b08a      	sub	sp, #40	; 0x28
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	431a      	orrs	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4313      	orrs	r3, r2
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b9e      	ldr	r3, [pc, #632]	; (80044ac <UART_SetConfig+0x2a8>)
 8004234:	4013      	ands	r3, r2
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	6812      	ldr	r2, [r2, #0]
 800423a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800423c:	430b      	orrs	r3, r1
 800423e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a93      	ldr	r2, [pc, #588]	; (80044b0 <UART_SetConfig+0x2ac>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426c:	4313      	orrs	r3, r2
 800426e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004280:	430a      	orrs	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a8a      	ldr	r2, [pc, #552]	; (80044b4 <UART_SetConfig+0x2b0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d126      	bne.n	80042dc <UART_SetConfig+0xd8>
 800428e:	4b8a      	ldr	r3, [pc, #552]	; (80044b8 <UART_SetConfig+0x2b4>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b03      	cmp	r3, #3
 800429a:	d81b      	bhi.n	80042d4 <UART_SetConfig+0xd0>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <UART_SetConfig+0xa0>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042b5 	.word	0x080042b5
 80042a8:	080042c5 	.word	0x080042c5
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042cd 	.word	0x080042cd
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ba:	e0ab      	b.n	8004414 <UART_SetConfig+0x210>
 80042bc:	2302      	movs	r3, #2
 80042be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c2:	e0a7      	b.n	8004414 <UART_SetConfig+0x210>
 80042c4:	2304      	movs	r3, #4
 80042c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ca:	e0a3      	b.n	8004414 <UART_SetConfig+0x210>
 80042cc:	2308      	movs	r3, #8
 80042ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d2:	e09f      	b.n	8004414 <UART_SetConfig+0x210>
 80042d4:	2310      	movs	r3, #16
 80042d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042da:	e09b      	b.n	8004414 <UART_SetConfig+0x210>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a76      	ldr	r2, [pc, #472]	; (80044bc <UART_SetConfig+0x2b8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d138      	bne.n	8004358 <UART_SetConfig+0x154>
 80042e6:	4b74      	ldr	r3, [pc, #464]	; (80044b8 <UART_SetConfig+0x2b4>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f003 030c 	and.w	r3, r3, #12
 80042f0:	2b0c      	cmp	r3, #12
 80042f2:	d82d      	bhi.n	8004350 <UART_SetConfig+0x14c>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <UART_SetConfig+0xf8>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004331 	.word	0x08004331
 8004300:	08004351 	.word	0x08004351
 8004304:	08004351 	.word	0x08004351
 8004308:	08004351 	.word	0x08004351
 800430c:	08004341 	.word	0x08004341
 8004310:	08004351 	.word	0x08004351
 8004314:	08004351 	.word	0x08004351
 8004318:	08004351 	.word	0x08004351
 800431c:	08004339 	.word	0x08004339
 8004320:	08004351 	.word	0x08004351
 8004324:	08004351 	.word	0x08004351
 8004328:	08004351 	.word	0x08004351
 800432c:	08004349 	.word	0x08004349
 8004330:	2300      	movs	r3, #0
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e06d      	b.n	8004414 <UART_SetConfig+0x210>
 8004338:	2302      	movs	r3, #2
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e069      	b.n	8004414 <UART_SetConfig+0x210>
 8004340:	2304      	movs	r3, #4
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e065      	b.n	8004414 <UART_SetConfig+0x210>
 8004348:	2308      	movs	r3, #8
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e061      	b.n	8004414 <UART_SetConfig+0x210>
 8004350:	2310      	movs	r3, #16
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e05d      	b.n	8004414 <UART_SetConfig+0x210>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a58      	ldr	r2, [pc, #352]	; (80044c0 <UART_SetConfig+0x2bc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d125      	bne.n	80043ae <UART_SetConfig+0x1aa>
 8004362:	4b55      	ldr	r3, [pc, #340]	; (80044b8 <UART_SetConfig+0x2b4>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d016      	beq.n	800439e <UART_SetConfig+0x19a>
 8004370:	2b30      	cmp	r3, #48	; 0x30
 8004372:	d818      	bhi.n	80043a6 <UART_SetConfig+0x1a2>
 8004374:	2b20      	cmp	r3, #32
 8004376:	d00a      	beq.n	800438e <UART_SetConfig+0x18a>
 8004378:	2b20      	cmp	r3, #32
 800437a:	d814      	bhi.n	80043a6 <UART_SetConfig+0x1a2>
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <UART_SetConfig+0x182>
 8004380:	2b10      	cmp	r3, #16
 8004382:	d008      	beq.n	8004396 <UART_SetConfig+0x192>
 8004384:	e00f      	b.n	80043a6 <UART_SetConfig+0x1a2>
 8004386:	2300      	movs	r3, #0
 8004388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438c:	e042      	b.n	8004414 <UART_SetConfig+0x210>
 800438e:	2302      	movs	r3, #2
 8004390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004394:	e03e      	b.n	8004414 <UART_SetConfig+0x210>
 8004396:	2304      	movs	r3, #4
 8004398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439c:	e03a      	b.n	8004414 <UART_SetConfig+0x210>
 800439e:	2308      	movs	r3, #8
 80043a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a4:	e036      	b.n	8004414 <UART_SetConfig+0x210>
 80043a6:	2310      	movs	r3, #16
 80043a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ac:	e032      	b.n	8004414 <UART_SetConfig+0x210>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a3f      	ldr	r2, [pc, #252]	; (80044b0 <UART_SetConfig+0x2ac>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d12a      	bne.n	800440e <UART_SetConfig+0x20a>
 80043b8:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <UART_SetConfig+0x2b4>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043c6:	d01a      	beq.n	80043fe <UART_SetConfig+0x1fa>
 80043c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043cc:	d81b      	bhi.n	8004406 <UART_SetConfig+0x202>
 80043ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d2:	d00c      	beq.n	80043ee <UART_SetConfig+0x1ea>
 80043d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d8:	d815      	bhi.n	8004406 <UART_SetConfig+0x202>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <UART_SetConfig+0x1e2>
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e2:	d008      	beq.n	80043f6 <UART_SetConfig+0x1f2>
 80043e4:	e00f      	b.n	8004406 <UART_SetConfig+0x202>
 80043e6:	2300      	movs	r3, #0
 80043e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ec:	e012      	b.n	8004414 <UART_SetConfig+0x210>
 80043ee:	2302      	movs	r3, #2
 80043f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f4:	e00e      	b.n	8004414 <UART_SetConfig+0x210>
 80043f6:	2304      	movs	r3, #4
 80043f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043fc:	e00a      	b.n	8004414 <UART_SetConfig+0x210>
 80043fe:	2308      	movs	r3, #8
 8004400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004404:	e006      	b.n	8004414 <UART_SetConfig+0x210>
 8004406:	2310      	movs	r3, #16
 8004408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440c:	e002      	b.n	8004414 <UART_SetConfig+0x210>
 800440e:	2310      	movs	r3, #16
 8004410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <UART_SetConfig+0x2ac>)
 800441a:	4293      	cmp	r3, r2
 800441c:	f040 808a 	bne.w	8004534 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004420:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004424:	2b08      	cmp	r3, #8
 8004426:	d824      	bhi.n	8004472 <UART_SetConfig+0x26e>
 8004428:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <UART_SetConfig+0x22c>)
 800442a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442e:	bf00      	nop
 8004430:	08004455 	.word	0x08004455
 8004434:	08004473 	.word	0x08004473
 8004438:	0800445d 	.word	0x0800445d
 800443c:	08004473 	.word	0x08004473
 8004440:	08004463 	.word	0x08004463
 8004444:	08004473 	.word	0x08004473
 8004448:	08004473 	.word	0x08004473
 800444c:	08004473 	.word	0x08004473
 8004450:	0800446b 	.word	0x0800446b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004454:	f7ff fac0 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8004458:	61f8      	str	r0, [r7, #28]
        break;
 800445a:	e010      	b.n	800447e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <UART_SetConfig+0x2c0>)
 800445e:	61fb      	str	r3, [r7, #28]
        break;
 8004460:	e00d      	b.n	800447e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7ff fa21 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8004466:	61f8      	str	r0, [r7, #28]
        break;
 8004468:	e009      	b.n	800447e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	61fb      	str	r3, [r7, #28]
        break;
 8004470:	e005      	b.n	800447e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800447c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8109 	beq.w	8004698 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	4413      	add	r3, r2
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	429a      	cmp	r2, r3
 8004494:	d305      	bcc.n	80044a2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d912      	bls.n	80044c8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044a8:	e0f6      	b.n	8004698 <UART_SetConfig+0x494>
 80044aa:	bf00      	nop
 80044ac:	efff69f3 	.word	0xefff69f3
 80044b0:	40008000 	.word	0x40008000
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40004400 	.word	0x40004400
 80044c0:	40004800 	.word	0x40004800
 80044c4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	2200      	movs	r2, #0
 80044cc:	461c      	mov	r4, r3
 80044ce:	4615      	mov	r5, r2
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	022b      	lsls	r3, r5, #8
 80044da:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044de:	0222      	lsls	r2, r4, #8
 80044e0:	68f9      	ldr	r1, [r7, #12]
 80044e2:	6849      	ldr	r1, [r1, #4]
 80044e4:	0849      	lsrs	r1, r1, #1
 80044e6:	2000      	movs	r0, #0
 80044e8:	4688      	mov	r8, r1
 80044ea:	4681      	mov	r9, r0
 80044ec:	eb12 0a08 	adds.w	sl, r2, r8
 80044f0:	eb43 0b09 	adc.w	fp, r3, r9
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004502:	4650      	mov	r0, sl
 8004504:	4659      	mov	r1, fp
 8004506:	f7fb fe61 	bl	80001cc <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4613      	mov	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004518:	d308      	bcc.n	800452c <UART_SetConfig+0x328>
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004520:	d204      	bcs.n	800452c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	e0b5      	b.n	8004698 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004532:	e0b1      	b.n	8004698 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800453c:	d15d      	bne.n	80045fa <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800453e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004542:	2b08      	cmp	r3, #8
 8004544:	d827      	bhi.n	8004596 <UART_SetConfig+0x392>
 8004546:	a201      	add	r2, pc, #4	; (adr r2, 800454c <UART_SetConfig+0x348>)
 8004548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7ff fa32 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8004574:	61f8      	str	r0, [r7, #28]
        break;
 8004576:	e014      	b.n	80045a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7ff fa44 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 800457c:	61f8      	str	r0, [r7, #28]
        break;
 800457e:	e010      	b.n	80045a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b4c      	ldr	r3, [pc, #304]	; (80046b4 <UART_SetConfig+0x4b0>)
 8004582:	61fb      	str	r3, [r7, #28]
        break;
 8004584:	e00d      	b.n	80045a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7ff f98f 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 800458a:	61f8      	str	r0, [r7, #28]
        break;
 800458c:	e009      	b.n	80045a2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004592:	61fb      	str	r3, [r7, #28]
        break;
 8004594:	e005      	b.n	80045a2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d077      	beq.n	8004698 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005a      	lsls	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	441a      	add	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b0f      	cmp	r3, #15
 80045c2:	d916      	bls.n	80045f2 <UART_SetConfig+0x3ee>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ca:	d212      	bcs.n	80045f2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f023 030f 	bic.w	r3, r3, #15
 80045d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	8afa      	ldrh	r2, [r7, #22]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e052      	b.n	8004698 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80045f8:	e04e      	b.n	8004698 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d827      	bhi.n	8004652 <UART_SetConfig+0x44e>
 8004602:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <UART_SetConfig+0x404>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	0800462d 	.word	0x0800462d
 800460c:	08004635 	.word	0x08004635
 8004610:	0800463d 	.word	0x0800463d
 8004614:	08004653 	.word	0x08004653
 8004618:	08004643 	.word	0x08004643
 800461c:	08004653 	.word	0x08004653
 8004620:	08004653 	.word	0x08004653
 8004624:	08004653 	.word	0x08004653
 8004628:	0800464b 	.word	0x0800464b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7ff f9d4 	bl	80039d8 <HAL_RCC_GetPCLK1Freq>
 8004630:	61f8      	str	r0, [r7, #28]
        break;
 8004632:	e014      	b.n	800465e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004634:	f7ff f9e6 	bl	8003a04 <HAL_RCC_GetPCLK2Freq>
 8004638:	61f8      	str	r0, [r7, #28]
        break;
 800463a:	e010      	b.n	800465e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800463c:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <UART_SetConfig+0x4b0>)
 800463e:	61fb      	str	r3, [r7, #28]
        break;
 8004640:	e00d      	b.n	800465e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004642:	f7ff f931 	bl	80038a8 <HAL_RCC_GetSysClockFreq>
 8004646:	61f8      	str	r0, [r7, #28]
        break;
 8004648:	e009      	b.n	800465e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464e:	61fb      	str	r3, [r7, #28]
        break;
 8004650:	e005      	b.n	800465e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800465c:	bf00      	nop
    }

    if (pclk != 0U)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d019      	beq.n	8004698 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	085a      	lsrs	r2, r3, #1
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	441a      	add	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b0f      	cmp	r3, #15
 800467c:	d909      	bls.n	8004692 <UART_SetConfig+0x48e>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004684:	d205      	bcs.n	8004692 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e002      	b.n	8004698 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80046a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	; 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b2:	bf00      	nop
 80046b4:	00f42400 	.word	0x00f42400

080046b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00a      	beq.n	8004726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00a      	beq.n	800476a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01a      	beq.n	80047ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b6:	d10a      	bne.n	80047ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b098      	sub	sp, #96	; 0x60
 8004800:	af02      	add	r7, sp, #8
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800480c:	f7fc fb4e 	bl	8000eac <HAL_GetTick>
 8004810:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b08      	cmp	r3, #8
 800481e:	d12e      	bne.n	800487e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004828:	2200      	movs	r2, #0
 800482a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f88c 	bl	800494c <UART_WaitOnFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d021      	beq.n	800487e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004842:	e853 3f00 	ldrex	r3, [r3]
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800484e:	653b      	str	r3, [r7, #80]	; 0x50
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004858:	647b      	str	r3, [r7, #68]	; 0x44
 800485a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800485e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004860:	e841 2300 	strex	r3, r2, [r1]
 8004864:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1e6      	bne.n	800483a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e062      	b.n	8004944 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b04      	cmp	r3, #4
 800488a:	d149      	bne.n	8004920 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800488c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004894:	2200      	movs	r2, #0
 8004896:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f856 	bl	800494c <UART_WaitOnFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03c      	beq.n	8004920 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	623b      	str	r3, [r7, #32]
   return(result);
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c4:	633b      	str	r3, [r7, #48]	; 0x30
 80048c6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e6      	bne.n	80048a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048f8:	61fa      	str	r2, [r7, #28]
 80048fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	69b9      	ldr	r1, [r7, #24]
 80048fe:	69fa      	ldr	r2, [r7, #28]
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	617b      	str	r3, [r7, #20]
   return(result);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2220      	movs	r2, #32
 8004910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e011      	b.n	8004944 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3758      	adds	r7, #88	; 0x58
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	e049      	b.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004964:	d045      	beq.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7fc faa1 	bl	8000eac <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <UART_WaitOnFlagUntilTimeout+0x30>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e048      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d031      	beq.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b08      	cmp	r3, #8
 800499a:	d110      	bne.n	80049be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2208      	movs	r2, #8
 80049a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f838 	bl	8004a1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2208      	movs	r2, #8
 80049ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e029      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049cc:	d111      	bne.n	80049f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f81e 	bl	8004a1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2220      	movs	r2, #32
 80049e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e00f      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	4013      	ands	r3, r2
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	bf0c      	ite	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	2300      	movne	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	461a      	mov	r2, r3
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d0a6      	beq.n	800495e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b095      	sub	sp, #84	; 0x54
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a40:	643b      	str	r3, [r7, #64]	; 0x40
 8004a42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e6      	bne.n	8004a22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3308      	adds	r3, #8
 8004a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e5      	bne.n	8004a54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d118      	bne.n	8004ac2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	e853 3f00 	ldrex	r3, [r3]
 8004a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f023 0310 	bic.w	r3, r3, #16
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	461a      	mov	r2, r3
 8004aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aae:	61bb      	str	r3, [r7, #24]
 8004ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab2:	6979      	ldr	r1, [r7, #20]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	e841 2300 	strex	r3, r2, [r1]
 8004aba:	613b      	str	r3, [r7, #16]
   return(result);
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1e6      	bne.n	8004a90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004ad6:	bf00      	nop
 8004ad8:	3754      	adds	r7, #84	; 0x54
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <memset>:
 8004ae2:	4402      	add	r2, r0
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d100      	bne.n	8004aec <memset+0xa>
 8004aea:	4770      	bx	lr
 8004aec:	f803 1b01 	strb.w	r1, [r3], #1
 8004af0:	e7f9      	b.n	8004ae6 <memset+0x4>
	...

08004af4 <__libc_init_array>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	4d0d      	ldr	r5, [pc, #52]	; (8004b2c <__libc_init_array+0x38>)
 8004af8:	4c0d      	ldr	r4, [pc, #52]	; (8004b30 <__libc_init_array+0x3c>)
 8004afa:	1b64      	subs	r4, r4, r5
 8004afc:	10a4      	asrs	r4, r4, #2
 8004afe:	2600      	movs	r6, #0
 8004b00:	42a6      	cmp	r6, r4
 8004b02:	d109      	bne.n	8004b18 <__libc_init_array+0x24>
 8004b04:	4d0b      	ldr	r5, [pc, #44]	; (8004b34 <__libc_init_array+0x40>)
 8004b06:	4c0c      	ldr	r4, [pc, #48]	; (8004b38 <__libc_init_array+0x44>)
 8004b08:	f000 f818 	bl	8004b3c <_init>
 8004b0c:	1b64      	subs	r4, r4, r5
 8004b0e:	10a4      	asrs	r4, r4, #2
 8004b10:	2600      	movs	r6, #0
 8004b12:	42a6      	cmp	r6, r4
 8004b14:	d105      	bne.n	8004b22 <__libc_init_array+0x2e>
 8004b16:	bd70      	pop	{r4, r5, r6, pc}
 8004b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b1c:	4798      	blx	r3
 8004b1e:	3601      	adds	r6, #1
 8004b20:	e7ee      	b.n	8004b00 <__libc_init_array+0xc>
 8004b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b26:	4798      	blx	r3
 8004b28:	3601      	adds	r6, #1
 8004b2a:	e7f2      	b.n	8004b12 <__libc_init_array+0x1e>
 8004b2c:	08004ba4 	.word	0x08004ba4
 8004b30:	08004ba4 	.word	0x08004ba4
 8004b34:	08004ba4 	.word	0x08004ba4
 8004b38:	08004ba8 	.word	0x08004ba8

08004b3c <_init>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr

08004b48 <_fini>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	bf00      	nop
 8004b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4e:	bc08      	pop	{r3}
 8004b50:	469e      	mov	lr, r3
 8004b52:	4770      	bx	lr
