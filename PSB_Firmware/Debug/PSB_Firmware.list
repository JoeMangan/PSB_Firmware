
PSB_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc4  08007fc4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc4  08007fc4  00017fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fcc  08007fcc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000010  08007fe0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08007fe0  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014649  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000251c  00000000  00000000  000346c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00036be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f41  00000000  00000000  00037f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bf9  00000000  00000000  00038e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c02  00000000  00000000  0003ba72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d980d  00000000  00000000  00051674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052f0  00000000  00000000  0012ae84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00130174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08007f5c 	.word	0x08007f5c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08007f5c 	.word	0x08007f5c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f002 fd51 	bl	8002f74 <HAL_Init>
  /* USER CODE BEGIN Init */
  //HAL_I2C_MspInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8d3 	bl	800067c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fa63 	bl	80009a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 fa31 	bl	8000940 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80004de:	f000 f99f 	bl	8000820 <MX_I2C3_Init>
  MX_I2C2_Init();
 80004e2:	f000 f95d 	bl	80007a0 <MX_I2C2_Init>
  MX_I2C1_Init();
 80004e6:	f000 f91b 	bl	8000720 <MX_I2C1_Init>
  MX_TIM2_Init();
 80004ea:	f000 f9d9 	bl	80008a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Initialize the system
  i2c_slv_init(); // Initialize the I2C slave module
 80004ee:	f002 fa21 	bl	8002934 <i2c_slv_init>

  // A PROPER INITIALISATION MUST GO HERE!!!
  //while(1);


  bool ijc_init_status = ijc_detector_init();
 80004f2:	f000 ff37 	bl	8001364 <ijc_detector_init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	71fb      	strb	r3, [r7, #7]
  bool cea_init_status = cea_detector_init();
 80004fa:	f000 ff65 	bl	80013c8 <cea_detector_init>
 80004fe:	4603      	mov	r3, r0
 8000500:	71bb      	strb	r3, [r7, #6]


  if(ijc_init_status == EXIT_FAILURE)
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d000      	beq.n	800050a <main+0x42>
  {
	  while(1);
 8000508:	e7fe      	b.n	8000508 <main+0x40>
  }

  if(cea_init_status == EXIT_FAILURE)
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d000      	beq.n	8000512 <main+0x4a>
  {
	  while(1);
 8000510:	e7fe      	b.n	8000510 <main+0x48>
  }

  // Start the timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000512:	4851      	ldr	r0, [pc, #324]	; (8000658 <main+0x190>)
 8000514:	f006 fc6e 	bl	8006df4 <HAL_TIM_Base_Start_IT>

  // Configure the timeout for the I2C Bus 1
  hi2c1.Instance->TIMEOUTR = 0x0F00; 					// Set the timeout value
 8000518:	4b50      	ldr	r3, [pc, #320]	; (800065c <main+0x194>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000520:	615a      	str	r2, [r3, #20]
  hi2c1.Instance->TIMEOUTR |= I2C_TIMEOUTR_TEXTEN; 		// Enable TEXTEN
 8000522:	4b4e      	ldr	r3, [pc, #312]	; (800065c <main+0x194>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	695a      	ldr	r2, [r3, #20]
 8000528:	4b4c      	ldr	r3, [pc, #304]	; (800065c <main+0x194>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000530:	615a      	str	r2, [r3, #20]
  hi2c1.Instance->TIMEOUTR |= I2C_TIMEOUTR_TIMOUTEN;    // Enable the timeout TIMOUTEN
 8000532:	4b4a      	ldr	r3, [pc, #296]	; (800065c <main+0x194>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	4b48      	ldr	r3, [pc, #288]	; (800065c <main+0x194>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000540:	615a      	str	r2, [r3, #20]
  hi2c1.Instance->CR1 |= I2C_CR1_ERRIE;					// Enable interrupts on CR1 ERR - This does not seem to work correctly
 8000542:	4b46      	ldr	r3, [pc, #280]	; (800065c <main+0x194>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b44      	ldr	r3, [pc, #272]	; (800065c <main+0x194>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000550:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ijc_dssd_ramp_loop();
 8000552:	f000 fc6d 	bl	8000e30 <ijc_dssd_ramp_loop>
	  cea_dssd_ramp_loop();
 8000556:	f000 fd05 	bl	8000f64 <cea_dssd_ramp_loop>

	  //HAL_I2C_StateTypeDef status_state = HAL_I2C_GetState(&hi2c1);
	  //HAL_I2C_StateTypeDef status_mode  = HAL_I2C_GetMode(&hi2c1);
	  //HAL_I2C_StateTypeDef status_error = HAL_I2C_GetError(&hi2c1);

	  if (Xfer_Complete ==1)                            // Check for the I2C read complete to have been executed
 800055a:	4b41      	ldr	r3, [pc, #260]	; (8000660 <main+0x198>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d10f      	bne.n	8000582 <main+0xba>
	  {

		  i2c_slv_cmd_rx_tx_handle();
 8000562:	f001 fabd 	bl	8001ae0 <i2c_slv_cmd_rx_tx_handle>

		  HAL_Delay(1); 								// Delay for 1 ms
 8000566:	2001      	movs	r0, #1
 8000568:	f002 fd80 	bl	800306c <HAL_Delay>
		  if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK) // Put I2C peripheral in listen mode process
 800056c:	483b      	ldr	r0, [pc, #236]	; (800065c <main+0x194>)
 800056e:	f003 fcd3 	bl	8003f18 <HAL_I2C_EnableListen_IT>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <main+0xb4>
		  {
			  Error_Handler();
 8000578:	f002 fad2 	bl	8002b20 <Error_Handler>
		  }
		  Xfer_Complete =0;
 800057c:	4b38      	ldr	r3, [pc, #224]	; (8000660 <main+0x198>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
	  }

	  if(ijc_detector.making_safe_inprogress && general_loop_flg == true)
 8000582:	4b38      	ldr	r3, [pc, #224]	; (8000664 <main+0x19c>)
 8000584:	7cdb      	ldrb	r3, [r3, #19]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d006      	beq.n	8000598 <main+0xd0>
 800058a:	4b37      	ldr	r3, [pc, #220]	; (8000668 <main+0x1a0>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <main+0xd0>
	  {
		  // Make the IJC detector safe
		  make_ijc_dssd_safe();
 8000592:	f000 fd81 	bl	8001098 <make_ijc_dssd_safe>
 8000596:	e009      	b.n	80005ac <main+0xe4>
	  }
	  else if (cea_detector.making_safe_inprogress && general_loop_flg == true)
 8000598:	4b34      	ldr	r3, [pc, #208]	; (800066c <main+0x1a4>)
 800059a:	7cdb      	ldrb	r3, [r3, #19]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d005      	beq.n	80005ac <main+0xe4>
 80005a0:	4b31      	ldr	r3, [pc, #196]	; (8000668 <main+0x1a0>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <main+0xe4>
	  {
		  make_cea_dssd_safe();
 80005a8:	f000 fdec 	bl	8001184 <make_cea_dssd_safe>
	  }

	  if (general_loop_flg == true)
 80005ac:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <main+0x1a0>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d004      	beq.n	80005be <main+0xf6>
	  {
		  run_complete_readout();
 80005b4:	f001 fa54 	bl	8001a60 <run_complete_readout>
		  general_loop_flg = false;
 80005b8:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <main+0x1a0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
	  }

	  if (I2C1->ISR & I2C_FLAG_TIMEOUT)
 80005be:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <main+0x1a8>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d0c3      	beq.n	8000552 <main+0x8a>
	  {

		// Perform I2C software reset
		hi2c1.Instance->CR1 &= ~I2C_CR1_PE;  			    // Write PE=0
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <main+0x194>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <main+0x194>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f022 0201 	bic.w	r2, r2, #1
 80005d8:	601a      	str	r2, [r3, #0]
		// Added after flight
		hi2c2.Instance->CR1 &= ~I2C_CR1_PE;  			    // Write PE=0
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <main+0x1ac>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <main+0x1ac>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f022 0201 	bic.w	r2, r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
		hi2c3.Instance->CR1 &= ~I2C_CR1_PE;  			    // Write PE=0
 80005ea:	4b23      	ldr	r3, [pc, #140]	; (8000678 <main+0x1b0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <main+0x1b0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f022 0201 	bic.w	r2, r2, #1
 80005f8:	601a      	str	r2, [r3, #0]

		HAL_Delay(500);
 80005fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fe:	f002 fd35 	bl	800306c <HAL_Delay>
		while (hi2c1.Instance->CR1 & I2C_CR1_PE) {} 		// Wait until PE bit becomes 0 (waiting is optional but recommended)
 8000602:	bf00      	nop
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <main+0x194>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f8      	bne.n	8000604 <main+0x13c>
		HAL_Delay(500);
 8000612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000616:	f002 fd29 	bl	800306c <HAL_Delay>

		hi2c1.Instance->CR1 |= I2C_CR1_PE;                  // Write PE=1
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <main+0x194>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <main+0x194>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f042 0201 	orr.w	r2, r2, #1
 8000628:	601a      	str	r2, [r3, #0]
		// Added after the flight
		hi2c2.Instance->CR1 |= I2C_CR1_PE;                  // Write PE=1
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0x1ac>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <main+0x1ac>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f042 0201 	orr.w	r2, r2, #1
 8000638:	601a      	str	r2, [r3, #0]
		hi2c3.Instance->CR1 |= I2C_CR1_PE;                  // Write PE=1
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <main+0x1b0>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <main+0x1b0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f042 0201 	orr.w	r2, r2, #1
 8000648:	601a      	str	r2, [r3, #0]

		HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	; 0x64
 800064c:	f002 fd0e 	bl	800306c <HAL_Delay>
		HAL_I2C_EnableListen_IT(&hi2c1);
 8000650:	4802      	ldr	r0, [pc, #8]	; (800065c <main+0x194>)
 8000652:	f003 fc61 	bl	8003f18 <HAL_I2C_EnableListen_IT>
	  ijc_dssd_ramp_loop();
 8000656:	e77c      	b.n	8000552 <main+0x8a>
 8000658:	20000130 	.word	0x20000130
 800065c:	20000034 	.word	0x20000034
 8000660:	20000030 	.word	0x20000030
 8000664:	2000021c 	.word	0x2000021c
 8000668:	20000277 	.word	0x20000277
 800066c:	20000230 	.word	0x20000230
 8000670:	40005400 	.word	0x40005400
 8000674:	20000088 	.word	0x20000088
 8000678:	200000dc 	.word	0x200000dc

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b096      	sub	sp, #88	; 0x58
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	2244      	movs	r2, #68	; 0x44
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f007 fc39 	bl	8007f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a2:	f005 f985 	bl	80059b0 <HAL_PWREx_ControlVoltageScaling>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ac:	f002 fa38 	bl	8002b20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c2:	2302      	movs	r3, #2
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ca:	230a      	movs	r3, #10
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f005 f9bc 	bl	8005a5c <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006ea:	f002 fa19 	bl	8002b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fdbc 	bl	8006284 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f002 fa05 	bl	8002b20 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	; 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_I2C1_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_I2C1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_I2C1_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <MX_I2C1_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 50;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_I2C1_Init+0x74>)
 8000732:	2232      	movs	r2, #50	; 0x32
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_I2C1_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_I2C1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	; (8000794 <MX_I2C1_Init+0x74>)
 800075c:	f002 ffce 	bl	80036fc <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000766:	f002 f9db 	bl	8002b20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	; (8000794 <MX_I2C1_Init+0x74>)
 800076e:	f005 f879 	bl	8005864 <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000778:	f002 f9d2 	bl	8002b20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_I2C1_Init+0x74>)
 8000780:	f005 f8bb 	bl	80058fa <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078a:	f002 f9c9 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000034 	.word	0x20000034
 8000798:	40005400 	.word	0x40005400
 800079c:	10909cec 	.word	0x10909cec

080007a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_I2C2_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <MX_I2C2_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_I2C2_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	; (800081c <MX_I2C2_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_I2C2_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_I2C2_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_I2C2_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_I2C2_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007da:	480e      	ldr	r0, [pc, #56]	; (8000814 <MX_I2C2_Init+0x74>)
 80007dc:	f002 ff8e 	bl	80036fc <HAL_I2C_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f002 f99b 	bl	8002b20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4809      	ldr	r0, [pc, #36]	; (8000814 <MX_I2C2_Init+0x74>)
 80007ee:	f005 f839 	bl	8005864 <HAL_I2CEx_ConfigAnalogFilter>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f002 f992 	bl	8002b20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_I2C2_Init+0x74>)
 8000800:	f005 f87b 	bl	80058fa <HAL_I2CEx_ConfigDigitalFilter>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800080a:	f002 f989 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000088 	.word	0x20000088
 8000818:	40005800 	.word	0x40005800
 800081c:	10909cec 	.word	0x10909cec

08000820 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_I2C3_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_I2C3_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_I2C3_Init+0x74>)
 800082c:	4a1b      	ldr	r2, [pc, #108]	; (800089c <MX_I2C3_Init+0x7c>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_I2C3_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_I2C3_Init+0x74>)
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_I2C3_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_I2C3_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2C3_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_I2C3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800085a:	480e      	ldr	r0, [pc, #56]	; (8000894 <MX_I2C3_Init+0x74>)
 800085c:	f002 ff4e 	bl	80036fc <HAL_I2C_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000866:	f002 f95b 	bl	8002b20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <MX_I2C3_Init+0x74>)
 800086e:	f004 fff9 	bl	8005864 <HAL_I2CEx_ConfigAnalogFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000878:	f002 f952 	bl	8002b20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_I2C3_Init+0x74>)
 8000880:	f005 f83b 	bl	80058fa <HAL_I2CEx_ConfigDigitalFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800088a:	f002 f949 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000dc 	.word	0x200000dc
 8000898:	40005c00 	.word	0x40005c00
 800089c:	10909cec 	.word	0x10909cec

080008a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <MX_TIM2_Init+0x98>)
 80008c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_TIM2_Init+0x98>)
 80008c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_TIM2_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80000;
 80008d4:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_TIM2_Init+0x98>)
 80008d6:	4a19      	ldr	r2, [pc, #100]	; (800093c <MX_TIM2_Init+0x9c>)
 80008d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_TIM2_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_TIM2_Init+0x98>)
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_TIM2_Init+0x98>)
 80008e8:	f006 fa2c 	bl	8006d44 <HAL_TIM_Base_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008f2:	f002 f915 	bl	8002b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_TIM2_Init+0x98>)
 8000904:	f006 fbcc 	bl	80070a0 <HAL_TIM_ConfigClockSource>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800090e:	f002 f907 	bl	8002b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_TIM2_Init+0x98>)
 8000920:	f006 fdae 	bl	8007480 <HAL_TIMEx_MasterConfigSynchronization>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800092a:	f002 f8f9 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000130 	.word	0x20000130
 800093c:	00013880 	.word	0x00013880

08000940 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <MX_USART2_UART_Init+0x5c>)
 8000948:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x58>)
 8000984:	f006 fe00 	bl	8007588 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800098e:	f002 f8c7 	bl	8002b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2000017c 	.word	0x2000017c
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b46      	ldr	r3, [pc, #280]	; (8000ad0 <MX_GPIO_Init+0x130>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a45      	ldr	r2, [pc, #276]	; (8000ad0 <MX_GPIO_Init+0x130>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <MX_GPIO_Init+0x130>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	4b40      	ldr	r3, [pc, #256]	; (8000ad0 <MX_GPIO_Init+0x130>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a3f      	ldr	r2, [pc, #252]	; (8000ad0 <MX_GPIO_Init+0x130>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <MX_GPIO_Init+0x130>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <MX_GPIO_Init+0x130>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a39      	ldr	r2, [pc, #228]	; (8000ad0 <MX_GPIO_Init+0x130>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <MX_GPIO_Init+0x130>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <MX_GPIO_Init+0x130>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a33      	ldr	r2, [pc, #204]	; (8000ad0 <MX_GPIO_Init+0x130>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <MX_GPIO_Init+0x130>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	21b0      	movs	r1, #176	; 0xb0
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f002 fe3b 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_HT_CEA_DSSD_Pin|LD4_Pin|ENABLE_HT_IJC_DSSD_Pin|ENABLE_2_IJC_Pin
 8000a22:	2200      	movs	r2, #0
 8000a24:	f243 31e0 	movw	r1, #13280	; 0x33e0
 8000a28:	482a      	ldr	r0, [pc, #168]	; (8000ad4 <MX_GPIO_Init+0x134>)
 8000a2a:	f002 fe35 	bl	8003698 <HAL_GPIO_WritePin>
                          |ENABLE_3_CEA_Pin|ENABLE_4_CAEN_Pin|ENABLE_5_UCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIMING_PIN_GPIO_Port, TIMING_PIN_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	4829      	ldr	r0, [pc, #164]	; (8000ad8 <MX_GPIO_Init+0x138>)
 8000a34:	f002 fe30 	bl	8003698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <MX_GPIO_Init+0x138>)
 8000a50:	f002 fc90 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin;
 8000a54:	23b0      	movs	r3, #176	; 0xb0
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f002 fc81 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a72:	2340      	movs	r3, #64	; 0x40
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f002 fc74 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_HT_CEA_DSSD_Pin LD4_Pin ENABLE_HT_IJC_DSSD_Pin ENABLE_2_IJC_Pin
                           ENABLE_3_CEA_Pin ENABLE_4_CAEN_Pin ENABLE_5_UCD_Pin */
  GPIO_InitStruct.Pin = ENABLE_HT_CEA_DSSD_Pin|LD4_Pin|ENABLE_HT_IJC_DSSD_Pin|ENABLE_2_IJC_Pin
 8000a8c:	f243 33e0 	movw	r3, #13280	; 0x33e0
 8000a90:	617b      	str	r3, [r7, #20]
                          |ENABLE_3_CEA_Pin|ENABLE_4_CAEN_Pin|ENABLE_5_UCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <MX_GPIO_Init+0x134>)
 8000aa6:	f002 fc65 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIMING_PIN_Pin */
  GPIO_InitStruct.Pin = TIMING_PIN_Pin;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TIMING_PIN_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_GPIO_Init+0x138>)
 8000ac2:	f002 fc57 	bl	8003374 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	48000800 	.word	0x48000800

08000adc <i2c_read>:
}
*/
// ###############################################

HAL_StatusTypeDef i2c_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af02      	add	r7, sp, #8
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	460b      	mov	r3, r1
 8000aea:	72fb      	strb	r3, [r7, #11]
 8000aec:	4613      	mov	r3, r2
 8000aee:	813b      	strh	r3, [r7, #8]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(hi2c, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 8000af0:	7afb      	ldrb	r3, [r7, #11]
 8000af2:	b299      	uxth	r1, r3
 8000af4:	893b      	ldrh	r3, [r7, #8]
 8000af6:	220a      	movs	r2, #10
 8000af8:	9200      	str	r2, [sp, #0]
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	68f8      	ldr	r0, [r7, #12]
 8000afe:	f002 ffb1 	bl	8003a64 <HAL_I2C_Master_Receive>
 8000b02:	4603      	mov	r3, r0
 8000b04:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}

08000b10 <i2c_write>:

HAL_StatusTypeDef i2c_write(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b088      	sub	sp, #32
 8000b14:	af02      	add	r7, sp, #8
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	72fb      	strb	r3, [r7, #11]
 8000b20:	4613      	mov	r3, r2
 8000b22:	813b      	strh	r3, [r7, #8]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8000b24:	7afb      	ldrb	r3, [r7, #11]
 8000b26:	b299      	uxth	r1, r3
 8000b28:	893b      	ldrh	r3, [r7, #8]
 8000b2a:	220a      	movs	r2, #10
 8000b2c:	9200      	str	r2, [sp, #0]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f002 fe7f 	bl	8003834 <HAL_I2C_Master_Transmit>
 8000b36:	4603      	mov	r3, r0
 8000b38:	75fb      	strb	r3, [r7, #23]
	return(ret);
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <i2c_write_read>:

HAL_StatusTypeDef i2c_write_read(I2C_HandleTypeDef *hi2c, uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	607a      	str	r2, [r7, #4]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	460b      	mov	r3, r1
 8000b52:	72fb      	strb	r3, [r7, #11]
 8000b54:	4613      	mov	r3, r2
 8000b56:	813b      	strh	r3, [r7, #8]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8000b5c:	2305      	movs	r3, #5
 8000b5e:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 8000b60:	2305      	movs	r3, #5
 8000b62:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 8000b64:	7dfb      	ldrb	r3, [r7, #23]
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d802      	bhi.n	8000b70 <i2c_write_read+0x2c>
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f002 fa7e 	bl	800306c <HAL_Delay>
		status = i2c_write(hi2c, dev_addr, out_ptr, countTX);						// Perform I2C operation
 8000b70:	893b      	ldrh	r3, [r7, #8]
 8000b72:	7af9      	ldrb	r1, [r7, #11]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff ffca 	bl	8000b10 <i2c_write>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 8000b80:	7dfb      	ldrb	r3, [r7, #23]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 8000b86:	7d7b      	ldrb	r3, [r7, #21]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d102      	bne.n	8000b92 <i2c_write_read+0x4e>
 8000b8c:	7dfb      	ldrb	r3, [r7, #23]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1e8      	bne.n	8000b64 <i2c_write_read+0x20>

	if(status == HAL_ERROR){return(status);}
 8000b92:	7d7b      	ldrb	r3, [r7, #21]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d101      	bne.n	8000b9c <i2c_write_read+0x58>
 8000b98:	7d7b      	ldrb	r3, [r7, #21]
 8000b9a:	e01a      	b.n	8000bd2 <i2c_write_read+0x8e>

	HAL_Delay(5);
 8000b9c:	2005      	movs	r0, #5
 8000b9e:	f002 fa65 	bl	800306c <HAL_Delay>

	do
	{
		// Read operation
		status =  i2c_read(hi2c, dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 8000ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ba4:	7af9      	ldrb	r1, [r7, #11]
 8000ba6:	6a3a      	ldr	r2, [r7, #32]
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff ff97 	bl	8000adc <i2c_read>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8000bb2:	7dbb      	ldrb	r3, [r7, #22]
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	d802      	bhi.n	8000bbe <i2c_write_read+0x7a>
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f002 fa57 	bl	800306c <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8000bbe:	7dbb      	ldrb	r3, [r7, #22]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8000bc4:	7d7b      	ldrb	r3, [r7, #21]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d102      	bne.n	8000bd0 <i2c_write_read+0x8c>
 8000bca:	7dbb      	ldrb	r3, [r7, #22]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1e8      	bne.n	8000ba2 <i2c_write_read+0x5e>

	return(status);
 8000bd0:	7d7b      	ldrb	r3, [r7, #21]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <dac7574_write>:
//        Chips and Devs
//************************************


bool dac7574_write(uint8_t channel, uint16_t data_bytes)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	460a      	mov	r2, r1
 8000be6:	71fb      	strb	r3, [r7, #7]
 8000be8:	4613      	mov	r3, r2
 8000bea:	80bb      	strh	r3, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t tx_data[3] = {0x00, 0x00, 0x00};
 8000bec:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <dac7574_write+0x5c>)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	8019      	strh	r1, [r3, #0]
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	0c12      	lsrs	r2, r2, #16
 8000bfc:	701a      	strb	r2, [r3, #0]

	// Split the data_bytes into two bytes and add the command to the TX data
	tx_data[0] = channel;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data_bytes >> 8) & 0xFF;
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data_bytes) & 0xFF;
 8000c0c:	88bb      	ldrh	r3, [r7, #4]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	73bb      	strb	r3, [r7, #14]

	status = ucd_i2c_write(ADDR_UCD_DAC, &tx_data[0], 3);
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	2203      	movs	r2, #3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	209e      	movs	r0, #158	; 0x9e
 8000c1c:	f000 fb88 	bl	8001330 <ucd_i2c_write>
 8000c20:	4603      	mov	r3, r0
 8000c22:	73fb      	strb	r3, [r7, #15]

	return(status);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bf14      	ite	ne
 8000c2a:	2301      	movne	r3, #1
 8000c2c:	2300      	moveq	r3, #0
 8000c2e:	b2db      	uxtb	r3, r3
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	08007f74 	.word	0x08007f74

08000c3c <max6911_read>:


uint16_t max6911_read(I2C_HandleTypeDef *hi2c, uint8_t device_addr, uint8_t cmd_msb, uint8_t cmd_lsb)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	4608      	mov	r0, r1
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	70fb      	strb	r3, [r7, #3]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	70bb      	strb	r3, [r7, #2]
 8000c52:	4613      	mov	r3, r2
 8000c54:	707b      	strb	r3, [r7, #1]
	uint16_t temp_data = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	81fb      	strh	r3, [r7, #14]
	uint8_t rx_data[2] = {0x00, 0x00};
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	81bb      	strh	r3, [r7, #12]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000c5e:	2300      	movs	r3, #0
 8000c60:	813b      	strh	r3, [r7, #8]

	// Init the device ctrl reg1
	max6911_set_ctrl1_register(INIT_WITH_CURRENT_GAIN_8);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f000 f864 	bl	8000d30 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000c68:	230a      	movs	r3, #10
 8000c6a:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000c6c:	4b2e      	ldr	r3, [pc, #184]	; (8000d28 <max6911_read+0xec>)
 8000c6e:	7b1b      	ldrb	r3, [r3, #12]
 8000c70:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000c72:	f107 0208 	add.w	r2, r7, #8
 8000c76:	78f9      	ldrb	r1, [r7, #3]
 8000c78:	2302      	movs	r3, #2
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff48 	bl	8000b10 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000c80:	230b      	movs	r3, #11
 8000c82:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <max6911_read+0xec>)
 8000c86:	7b5b      	ldrb	r3, [r3, #13]
 8000c88:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000c8a:	f107 0208 	add.w	r2, r7, #8
 8000c8e:	78f9      	ldrb	r1, [r7, #3]
 8000c90:	2302      	movs	r3, #2
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff3c 	bl	8000b10 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the device for normal fast read operation
	max6911_set_ctrl1_register(FASTREAD_NORMAL_OPERATION);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f000 f849 	bl	8000d30 <max6911_set_ctrl1_register>

	// Write to the control register 1 and 2
	tx_data[0] = CONTROL_REGISTER_1;
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_1.byte;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <max6911_read+0xec>)
 8000ca4:	7b1b      	ldrb	r3, [r3, #12]
 8000ca6:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000ca8:	f107 0208 	add.w	r2, r7, #8
 8000cac:	78f9      	ldrb	r1, [r7, #3]
 8000cae:	2302      	movs	r3, #2
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff2d 	bl	8000b10 <i2c_write>
	// -------------------------------------------
	tx_data[0] = CONTROL_REGISTER_2;
 8000cb6:	230b      	movs	r3, #11
 8000cb8:	723b      	strb	r3, [r7, #8]
	tx_data[1] = max6911.ctrl_reg_2.byte;
 8000cba:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <max6911_read+0xec>)
 8000cbc:	7b5b      	ldrb	r3, [r3, #13]
 8000cbe:	727b      	strb	r3, [r7, #9]
	i2c_write(hi2c, device_addr, &tx_data[0], 2);
 8000cc0:	f107 0208 	add.w	r2, r7, #8
 8000cc4:	78f9      	ldrb	r1, [r7, #3]
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff21 	bl	8000b10 <i2c_write>
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_1, &max6911.ctrl_reg_1.byte, 1);
	// status = i2c_write_cmd_data(hi2c, device_addr, CONTROL_REGISTER_2, &max6911.ctrl_reg_2.byte, 1);
	// #############################################################################

	// Set up the read for MSB and LSB
	status = i2c_write_read(hi2c, device_addr, &cmd_msb, 1, &rx_data[0], 1);
 8000cce:	1cba      	adds	r2, r7, #2
 8000cd0:	78f9      	ldrb	r1, [r7, #3]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff30 	bl	8000b44 <i2c_write_read>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <max6911_read+0xf0>)
 8000cea:	701a      	strb	r2, [r3, #0]
	status = i2c_write_read(hi2c, device_addr, &cmd_lsb, 1, &rx_data[1], 1);
 8000cec:	1c7a      	adds	r2, r7, #1
 8000cee:	78f9      	ldrb	r1, [r7, #3]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ff20 	bl	8000b44 <i2c_write_read>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <max6911_read+0xf0>)
 8000d0a:	701a      	strb	r2, [r3, #0]

	temp_data = (rx_data[0]<<8) | (rx_data[1]);
 8000d0c:	7b3b      	ldrb	r3, [r7, #12]
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	7b7b      	ldrb	r3, [r7, #13]
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	81fb      	strh	r3, [r7, #14]
	return(temp_data);
 8000d1c:	89fb      	ldrh	r3, [r7, #14]

}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000258 	.word	0x20000258
 8000d2c:	20000204 	.word	0x20000204

08000d30 <max6911_set_ctrl1_register>:


void max6911_set_ctrl1_register(_max6911_ctrl selector)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]

	switch(selector)
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d002      	beq.n	8000d46 <max6911_set_ctrl1_register+0x16>
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d020      	beq.n	8000d86 <max6911_set_ctrl1_register+0x56>
			break;
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		default:
			break;
 8000d44:	e03e      	b.n	8000dc4 <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000d46:	4a22      	ldr	r2, [pc, #136]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000d48:	7b13      	ldrb	r3, [r2, #12]
 8000d4a:	f36f 03c3 	bfc	r3, #3, #1
 8000d4e:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000d50:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000d52:	7b13      	ldrb	r3, [r2, #12]
 8000d54:	f36f 1304 	bfc	r3, #4, #1
 8000d58:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000d5c:	7b13      	ldrb	r3, [r2, #12]
 8000d5e:	f36f 1347 	bfc	r3, #5, #3
 8000d62:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_A_GAIN_8x_DEC;
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000d66:	7b13      	ldrb	r3, [r2, #12]
 8000d68:	2102      	movs	r1, #2
 8000d6a:	f361 0302 	bfi	r3, r1, #0, #3
 8000d6e:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000d72:	7b53      	ldrb	r3, [r2, #13]
 8000d74:	f36f 03c3 	bfc	r3, #3, #1
 8000d78:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000d7c:	7b53      	ldrb	r3, [r2, #13]
 8000d7e:	f36f 0382 	bfc	r3, #2, #1
 8000d82:	7353      	strb	r3, [r2, #13]
			break;
 8000d84:	e01e      	b.n	8000dc4 <max6911_set_ctrl1_register+0x94>
			max6911.ctrl_reg_1.bits.SHDN  = SHDN_NORMAL_OPERATION_DEC;
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000d88:	7b13      	ldrb	r3, [r2, #12]
 8000d8a:	f36f 03c3 	bfc	r3, #3, #1
 8000d8e:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.LR    = LD_NORMAL_OPERATION_DEC;
 8000d90:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000d92:	7b13      	ldrb	r3, [r2, #12]
 8000d94:	f36f 1304 	bfc	r3, #4, #1
 8000d98:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MODE  = AMP_COMP_NORMAL_OPERATION_DEC;
 8000d9a:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000d9c:	7b13      	ldrb	r3, [r2, #12]
 8000d9e:	f36f 1347 	bfc	r3, #5, #3
 8000da2:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_1.bits.MUX   = CHANNEL_FAST_READ_DEC;
 8000da4:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000da6:	7b13      	ldrb	r3, [r2, #12]
 8000da8:	f043 0307 	orr.w	r3, r3, #7
 8000dac:	7313      	strb	r3, [r2, #12]
			max6911.ctrl_reg_2.bits.DTIM  = DTIM_1_MS_BITS_DEC;
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000db0:	7b53      	ldrb	r3, [r2, #13]
 8000db2:	f36f 03c3 	bfc	r3, #3, #1
 8000db6:	7353      	strb	r3, [r2, #13]
			max6911.ctrl_reg_2.bits.RTIM  = RTIM_50_MS_BITS_DEC;
 8000db8:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <max6911_set_ctrl1_register+0xa0>)
 8000dba:	7b53      	ldrb	r3, [r2, #13]
 8000dbc:	f36f 0382 	bfc	r3, #2, #1
 8000dc0:	7353      	strb	r3, [r2, #13]
			break;
 8000dc2:	bf00      	nop
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	20000258 	.word	0x20000258

08000dd4 <ht_cea_enable_set>:
//            HV
//************************************

// Board enable functions
void ht_cea_enable_set(bool gpio_state)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_CEA_DSSD_GPIO_Port, ENABLE_HT_CEA_DSSD_Pin, gpio_state);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	461a      	mov	r2, r3
 8000de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <ht_cea_enable_set+0x28>)
 8000de8:	f002 fc56 	bl	8003698 <HAL_GPIO_WritePin>
	cea_detector.hv_enable_state  = gpio_state;
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <ht_cea_enable_set+0x2c>)
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	7493      	strb	r3, [r2, #18]

}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	20000230 	.word	0x20000230

08000e04 <ht_ijc_enable_set>:
	cea_detector.hv_enable_state = HAL_GPIO_ReadPin(ENABLE_HT_CEA_DSSD_GPIO_Port, ENABLE_HT_CEA_DSSD_Pin);
	return(cea_detector.hv_enable_state);
}

void ht_ijc_enable_set(bool gpio_state)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_HT_IJC_DSSD_GPIO_Port, ENABLE_HT_IJC_DSSD_Pin, gpio_state);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	461a      	mov	r2, r3
 8000e12:	2120      	movs	r1, #32
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <ht_ijc_enable_set+0x24>)
 8000e16:	f002 fc3f 	bl	8003698 <HAL_GPIO_WritePin>
	ijc_detector.hv_enable_state  = gpio_state;
 8000e1a:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <ht_ijc_enable_set+0x28>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	7493      	strb	r3, [r2, #18]

}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	2000021c 	.word	0x2000021c

08000e30 <ijc_dssd_ramp_loop>:
	return(ijc_detector.hv_enable_state);
}


void ijc_dssd_ramp_loop(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the IJC voltage

	uint16_t max6911_measured_voltage = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	803b      	strh	r3, [r7, #0]

	if(ijc_detector.ramp_flag == true && ijc_detector.hv_loop_enable == true)
 8000e3e:	4b45      	ldr	r3, [pc, #276]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8082 	beq.w	8000f4c <ijc_dssd_ramp_loop+0x11c>
 8000e48:	4b42      	ldr	r3, [pc, #264]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d07d      	beq.n	8000f4c <ijc_dssd_ramp_loop+0x11c>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000e50:	2303      	movs	r3, #3
 8000e52:	2202      	movs	r2, #2
 8000e54:	21e4      	movs	r1, #228	; 0xe4
 8000e56:	4840      	ldr	r0, [pc, #256]	; (8000f58 <ijc_dssd_ramp_loop+0x128>)
 8000e58:	f7ff fef0 	bl	8000c3c <max6911_read>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	80fb      	strh	r3, [r7, #6]

		// Get the current digipot value
		status = ijc_i2c_read(ADDR_IJC_DIGIPOT, &ijc_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000e66:	2201      	movs	r2, #1
 8000e68:	493c      	ldr	r1, [pc, #240]	; (8000f5c <ijc_dssd_ramp_loop+0x12c>)
 8000e6a:	2058      	movs	r0, #88	; 0x58
 8000e6c:	f000 fb6e 	bl	800154c <ijc_i2c_read>
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <ijc_dssd_ramp_loop+0x130>)
 8000e76:	701a      	strb	r2, [r3, #0]

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((ijc_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (ijc_detector.hv_targate_value - ijc_detector.hv_lower_deadband)))
 8000e78:	4b36      	ldr	r3, [pc, #216]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000e7a:	891b      	ldrh	r3, [r3, #8]
 8000e7c:	88fa      	ldrh	r2, [r7, #6]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d220      	bcs.n	8000ec4 <ijc_dssd_ramp_loop+0x94>
 8000e82:	88fa      	ldrh	r2, [r7, #6]
 8000e84:	4b33      	ldr	r3, [pc, #204]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000e86:	891b      	ldrh	r3, [r3, #8]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000e8c:	795b      	ldrb	r3, [r3, #5]
 8000e8e:	1acb      	subs	r3, r1, r3
 8000e90:	429a      	cmp	r2, r3
 8000e92:	da17      	bge.n	8000ec4 <ijc_dssd_ramp_loop+0x94>
		{
			// If the target is greater than the current value, increment the digipot value
			if (ijc_detector.hv_digipot_value <= 149)
 8000e94:	4b2f      	ldr	r3, [pc, #188]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000e96:	799b      	ldrb	r3, [r3, #6]
 8000e98:	2b95      	cmp	r3, #149	; 0x95
 8000e9a:	d854      	bhi.n	8000f46 <ijc_dssd_ramp_loop+0x116>
			{
				ijc_detector.hv_digipot_value ++;
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000e9e:	799b      	ldrb	r3, [r3, #6]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000ea6:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000eaa:	799b      	ldrb	r3, [r3, #6]
 8000eac:	707b      	strb	r3, [r7, #1]
				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000eae:	4639      	mov	r1, r7
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	9300      	str	r3, [sp, #0]
 8000eb4:	4b29      	ldr	r3, [pc, #164]	; (8000f5c <ijc_dssd_ramp_loop+0x12c>)
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	2058      	movs	r0, #88	; 0x58
 8000eba:	f000 fb61 	bl	8001580 <ijc_i2c_write_read>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	717b      	strb	r3, [r7, #5]
			if (ijc_detector.hv_digipot_value <= 149)
 8000ec2:	e040      	b.n	8000f46 <ijc_dssd_ramp_loop+0x116>
			}
		}
		else if ((ijc_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (ijc_detector.hv_targate_value + ijc_detector.hv_upper_deadband)))
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000ec6:	891b      	ldrh	r3, [r3, #8]
 8000ec8:	88fa      	ldrh	r2, [r7, #6]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d920      	bls.n	8000f10 <ijc_dssd_ramp_loop+0xe0>
 8000ece:	88fa      	ldrh	r2, [r7, #6]
 8000ed0:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000ed2:	891b      	ldrh	r3, [r3, #8]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	440b      	add	r3, r1
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dd17      	ble.n	8000f10 <ijc_dssd_ramp_loop+0xe0>
		{
			if (ijc_detector.hv_digipot_value >= 1)
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000ee2:	799b      	ldrb	r3, [r3, #6]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d02e      	beq.n	8000f46 <ijc_dssd_ramp_loop+0x116>
			{
				// If the target is less than the current value
				ijc_detector.hv_digipot_value --;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000eea:	799b      	ldrb	r3, [r3, #6]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000ef2:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = ijc_detector.hv_digipot_value;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000ef6:	799b      	ldrb	r3, [r3, #6]
 8000ef8:	707b      	strb	r3, [r7, #1]

				HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000efa:	4639      	mov	r1, r7
 8000efc:	2301      	movs	r3, #1
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <ijc_dssd_ramp_loop+0x12c>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	2058      	movs	r0, #88	; 0x58
 8000f06:	f000 fb3b 	bl	8001580 <ijc_i2c_write_read>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	713b      	strb	r3, [r7, #4]
			if (ijc_detector.hv_digipot_value >= 1)
 8000f0e:	e01a      	b.n	8000f46 <ijc_dssd_ramp_loop+0x116>
			}
		}
		else if((ijc_detector.hv_targate_value == 0) && (ijc_detector.hv_digipot_value > 0))
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000f12:	891b      	ldrh	r3, [r3, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d116      	bne.n	8000f46 <ijc_dssd_ramp_loop+0x116>
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000f1a:	799b      	ldrb	r3, [r3, #6]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d012      	beq.n	8000f46 <ijc_dssd_ramp_loop+0x116>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			ijc_detector.hv_digipot_value --;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000f22:	799b      	ldrb	r3, [r3, #6]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000f2a:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = ijc_detector.hv_digipot_value;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000f2e:	799b      	ldrb	r3, [r3, #6]
 8000f30:	707b      	strb	r3, [r7, #1]

			HAL_StatusTypeDef status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8000f32:	4639      	mov	r1, r7
 8000f34:	2301      	movs	r3, #1
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <ijc_dssd_ramp_loop+0x12c>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	2058      	movs	r0, #88	; 0x58
 8000f3e:	f000 fb1f 	bl	8001580 <ijc_i2c_write_read>
 8000f42:	4603      	mov	r3, r0
 8000f44:	70fb      	strb	r3, [r7, #3]
		}
		ijc_detector.ramp_flag  = false;
 8000f46:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <ijc_dssd_ramp_loop+0x124>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2000021c 	.word	0x2000021c
 8000f58:	20000088 	.word	0x20000088
 8000f5c:	20000222 	.word	0x20000222
 8000f60:	20000204 	.word	0x20000204

08000f64 <cea_dssd_ramp_loop>:




void cea_dssd_ramp_loop(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af02      	add	r7, sp, #8
	// Control for the ramp up/down of the CEA voltage

	uint16_t max6911_measured_voltage = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	uint8_t tx_data[2] = {0x00, 0x00};
 8000f6e:	2300      	movs	r3, #0
 8000f70:	803b      	strh	r3, [r7, #0]

	if(cea_detector.ramp_flag == true && cea_detector.hv_loop_enable == true)
 8000f72:	4b45      	ldr	r3, [pc, #276]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8082 	beq.w	8001080 <cea_dssd_ramp_loop+0x11c>
 8000f7c:	4b42      	ldr	r3, [pc, #264]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000f7e:	785b      	ldrb	r3, [r3, #1]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d07d      	beq.n	8001080 <cea_dssd_ramp_loop+0x11c>
	{
		// Read the MAX9611 voltage value
		max6911_measured_voltage = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8000f84:	2303      	movs	r3, #3
 8000f86:	2202      	movs	r2, #2
 8000f88:	21ee      	movs	r1, #238	; 0xee
 8000f8a:	4840      	ldr	r0, [pc, #256]	; (800108c <cea_dssd_ramp_loop+0x128>)
 8000f8c:	f7ff fe56 	bl	8000c3c <max6911_read>
 8000f90:	4603      	mov	r3, r0
 8000f92:	80fb      	strh	r3, [r7, #6]

		// Shift the measured voltage down by 4 bits
		max6911_measured_voltage = max6911_measured_voltage >> 4;
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	80fb      	strh	r3, [r7, #6]

		//HAL_Delay(100);

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1); 						// Delay if re-attempting I2C Operation
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	493c      	ldr	r1, [pc, #240]	; (8001090 <cea_dssd_ramp_loop+0x12c>)
 8000f9e:	2058      	movs	r0, #88	; 0x58
 8000fa0:	f000 fbc8 	bl	8001734 <cea_i2c_read>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <cea_dssd_ramp_loop+0x130>)
 8000faa:	701a      	strb	r2, [r3, #0]

		// Check if the read value is greater than or less than the target value
		// This gets the direction of the ramp (up/down)
		if((cea_detector.hv_targate_value > max6911_measured_voltage) && (max6911_measured_voltage < (cea_detector.hv_targate_value - cea_detector.hv_lower_deadband)))
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000fae:	891b      	ldrh	r3, [r3, #8]
 8000fb0:	88fa      	ldrh	r2, [r7, #6]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d220      	bcs.n	8000ff8 <cea_dssd_ramp_loop+0x94>
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	4b33      	ldr	r3, [pc, #204]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000fba:	891b      	ldrh	r3, [r3, #8]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4b32      	ldr	r3, [pc, #200]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000fc0:	795b      	ldrb	r3, [r3, #5]
 8000fc2:	1acb      	subs	r3, r1, r3
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	da17      	bge.n	8000ff8 <cea_dssd_ramp_loop+0x94>
		{
			// If the target is greater than the current value, increment the digipot value
			if (cea_detector.hv_digipot_value <= 149)
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000fca:	799b      	ldrb	r3, [r3, #6]
 8000fcc:	2b95      	cmp	r3, #149	; 0x95
 8000fce:	d854      	bhi.n	800107a <cea_dssd_ramp_loop+0x116>
			{
				cea_detector.hv_digipot_value ++;
 8000fd0:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000fd2:	799b      	ldrb	r3, [r3, #6]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000fda:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000fde:	799b      	ldrb	r3, [r3, #6]
 8000fe0:	707b      	strb	r3, [r7, #1]
				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8000fe2:	4639      	mov	r1, r7
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	4b29      	ldr	r3, [pc, #164]	; (8001090 <cea_dssd_ramp_loop+0x12c>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	2058      	movs	r0, #88	; 0x58
 8000fee:	f000 fbd1 	bl	8001794 <cea_i2c_write_read>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	717b      	strb	r3, [r7, #5]
			if (cea_detector.hv_digipot_value <= 149)
 8000ff6:	e040      	b.n	800107a <cea_dssd_ramp_loop+0x116>
			}
		}
		else if ((cea_detector.hv_targate_value < max6911_measured_voltage) && (max6911_measured_voltage > (cea_detector.hv_targate_value + cea_detector.hv_upper_deadband)))
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8000ffa:	891b      	ldrh	r3, [r3, #8]
 8000ffc:	88fa      	ldrh	r2, [r7, #6]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d920      	bls.n	8001044 <cea_dssd_ramp_loop+0xe0>
 8001002:	88fa      	ldrh	r2, [r7, #6]
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8001006:	891b      	ldrh	r3, [r3, #8]
 8001008:	4619      	mov	r1, r3
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	440b      	add	r3, r1
 8001010:	429a      	cmp	r2, r3
 8001012:	dd17      	ble.n	8001044 <cea_dssd_ramp_loop+0xe0>
		{
			if (cea_detector.hv_digipot_value >= 1)
 8001014:	4b1c      	ldr	r3, [pc, #112]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8001016:	799b      	ldrb	r3, [r3, #6]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d02e      	beq.n	800107a <cea_dssd_ramp_loop+0x116>
			{
				// If the target is less than the current value
				cea_detector.hv_digipot_value --;
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 800101e:	799b      	ldrb	r3, [r3, #6]
 8001020:	3b01      	subs	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8001026:	719a      	strb	r2, [r3, #6]

				// Write the digipot value - with 5 attempts
				tx_data[1] = cea_detector.hv_digipot_value;
 8001028:	4b17      	ldr	r3, [pc, #92]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 800102a:	799b      	ldrb	r3, [r3, #6]
 800102c:	707b      	strb	r3, [r7, #1]

				HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 800102e:	4639      	mov	r1, r7
 8001030:	2301      	movs	r3, #1
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <cea_dssd_ramp_loop+0x12c>)
 8001036:	2202      	movs	r2, #2
 8001038:	2058      	movs	r0, #88	; 0x58
 800103a:	f000 fbab 	bl	8001794 <cea_i2c_write_read>
 800103e:	4603      	mov	r3, r0
 8001040:	713b      	strb	r3, [r7, #4]
			if (cea_detector.hv_digipot_value >= 1)
 8001042:	e01a      	b.n	800107a <cea_dssd_ramp_loop+0x116>
			}
		}
		else if((cea_detector.hv_targate_value == 0) && (cea_detector.hv_digipot_value > 0))
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8001046:	891b      	ldrh	r3, [r3, #8]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d116      	bne.n	800107a <cea_dssd_ramp_loop+0x116>
 800104c:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 800104e:	799b      	ldrb	r3, [r3, #6]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d012      	beq.n	800107a <cea_dssd_ramp_loop+0x116>
		{
			// If the value is 0 - continue ramping down to 0 on the digipot
			cea_detector.hv_digipot_value --;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8001056:	799b      	ldrb	r3, [r3, #6]
 8001058:	3b01      	subs	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 800105e:	719a      	strb	r2, [r3, #6]

			// Write the digipot value - with 5 attempts
			tx_data[1] = cea_detector.hv_digipot_value;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 8001062:	799b      	ldrb	r3, [r3, #6]
 8001064:	707b      	strb	r3, [r7, #1]

			HAL_StatusTypeDef status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 8001066:	4639      	mov	r1, r7
 8001068:	2301      	movs	r3, #1
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <cea_dssd_ramp_loop+0x12c>)
 800106e:	2202      	movs	r2, #2
 8001070:	2058      	movs	r0, #88	; 0x58
 8001072:	f000 fb8f 	bl	8001794 <cea_i2c_write_read>
 8001076:	4603      	mov	r3, r0
 8001078:	70fb      	strb	r3, [r7, #3]
		}
		cea_detector.ramp_flag  = false;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <cea_dssd_ramp_loop+0x124>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
	}
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000230 	.word	0x20000230
 800108c:	200000dc 	.word	0x200000dc
 8001090:	20000236 	.word	0x20000236
 8001094:	20000204 	.word	0x20000204

08001098 <make_ijc_dssd_safe>:



bool make_ijc_dssd_safe(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	// To make the IJCLab DSSD detector safe

	bool status = EXIT_SUCCESS;
 800109e:	2300      	movs	r3, #0
 80010a0:	71fb      	strb	r3, [r7, #7]
	bool board_state;

	// Get the state of the IJCLab detector board
	board_state = ijc_board_enable_get();
 80010a2:	f000 fa21 	bl	80014e8 <ijc_board_enable_get>
 80010a6:	4603      	mov	r3, r0
 80010a8:	71bb      	strb	r3, [r7, #6]

	if(board_state == true)
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d04e      	beq.n	800114e <make_ijc_dssd_safe+0xb6>
	{
		// If the detector board is enabled - Make it safe from here by ramping down if necessary

		// Get the current digipot value
		status = ijc_i2c_read(ADDR_IJC_DIGIPOT, &ijc_detector.hv_digipot_value, 1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	4931      	ldr	r1, [pc, #196]	; (8001178 <make_ijc_dssd_safe+0xe0>)
 80010b4:	2058      	movs	r0, #88	; 0x58
 80010b6:	f000 fa49 	bl	800154c <ijc_i2c_read>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	bf14      	ite	ne
 80010c0:	2301      	movne	r3, #1
 80010c2:	2300      	moveq	r3, #0
 80010c4:	71fb      	strb	r3, [r7, #7]

		if(status == EXIT_SUCCESS && ijc_detector.hv_digipot_value > 0)
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f083 0301 	eor.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d010      	beq.n	80010f4 <make_ijc_dssd_safe+0x5c>
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <make_ijc_dssd_safe+0xe4>)
 80010d4:	799b      	ldrb	r3, [r3, #6]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00c      	beq.n	80010f4 <make_ijc_dssd_safe+0x5c>
		{
			// Begin ramp down
			// ----------------------------------------------------------------------------
			// Must enable the ramp enable flag
			ijc_detector.hv_loop_enable = true;
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <make_ijc_dssd_safe+0xe4>)
 80010dc:	2201      	movs	r2, #1
 80010de:	705a      	strb	r2, [r3, #1]

			// Must set the target value to 0
			ijc_detector.hv_targate_value = 0;
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <make_ijc_dssd_safe+0xe4>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	811a      	strh	r2, [r3, #8]

			// Set the flag to indicate that the IJCLab board is currently being made safe
			ijc_detector.making_safe_inprogress = true;
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <make_ijc_dssd_safe+0xe4>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	71fb      	strb	r3, [r7, #7]
			return(status);
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	e03d      	b.n	8001170 <make_ijc_dssd_safe+0xd8>
		}
		else if (status == EXIT_SUCCESS && ijc_detector.hv_digipot_value == 0)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f083 0301 	eor.w	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d015      	beq.n	800112c <make_ijc_dssd_safe+0x94>
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <make_ijc_dssd_safe+0xe4>)
 8001102:	799b      	ldrb	r3, [r3, #6]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d111      	bne.n	800112c <make_ijc_dssd_safe+0x94>
		{
			// Board is enabled but the digipot is in the 0 position
			ijc_detector.making_safe_inprogress = false;
 8001108:	4b1c      	ldr	r3, [pc, #112]	; (800117c <make_ijc_dssd_safe+0xe4>)
 800110a:	2200      	movs	r2, #0
 800110c:	74da      	strb	r2, [r3, #19]
			// The digipot is in a 0 state - the make safe was successful

			// Disable HV and disable the board
			ht_ijc_enable_set(GPIO_PIN_RESET);          							     // Reset the IJC HV SUPPLY
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fe78 	bl	8000e04 <ht_ijc_enable_set>
			HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, GPIO_PIN_RESET); // Disable the IJC Board
 8001114:	2200      	movs	r2, #0
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	4819      	ldr	r0, [pc, #100]	; (8001180 <make_ijc_dssd_safe+0xe8>)
 800111a:	f002 fabd 	bl	8003698 <HAL_GPIO_WritePin>
			ijc_detector.board_enable_state = 0;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <make_ijc_dssd_safe+0xe4>)
 8001120:	2200      	movs	r2, #0
 8001122:	821a      	strh	r2, [r3, #16]

			status = EXIT_SUCCESS;
 8001124:	2300      	movs	r3, #0
 8001126:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	e021      	b.n	8001170 <make_ijc_dssd_safe+0xd8>
		}
		else if (status == EXIT_FAILURE)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <make_ijc_dssd_safe+0xa8>
		{
			// Failed to make communication to the digipot device
			ijc_detector.making_safe_inprogress = false;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <make_ijc_dssd_safe+0xe4>)
 8001134:	2200      	movs	r2, #0
 8001136:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 8001138:	2301      	movs	r3, #1
 800113a:	71fb      	strb	r3, [r7, #7]
			return(status);
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	e017      	b.n	8001170 <make_ijc_dssd_safe+0xd8>
		}
		else
		{
			ijc_detector.making_safe_inprogress = false;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <make_ijc_dssd_safe+0xe4>)
 8001142:	2200      	movs	r2, #0
 8001144:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
			return(status);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	e010      	b.n	8001170 <make_ijc_dssd_safe+0xd8>
		}
	}
	else
	{
		ijc_detector.making_safe_inprogress = false;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <make_ijc_dssd_safe+0xe4>)
 8001150:	2200      	movs	r2, #0
 8001152:	74da      	strb	r2, [r3, #19]
		ht_ijc_enable_set(GPIO_PIN_RESET);          							     // Reset the IJC HV SUPPLY
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fe55 	bl	8000e04 <ht_ijc_enable_set>
		HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, GPIO_PIN_RESET); // Disable the IJC Board
 800115a:	2200      	movs	r2, #0
 800115c:	2140      	movs	r1, #64	; 0x40
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <make_ijc_dssd_safe+0xe8>)
 8001160:	f002 fa9a 	bl	8003698 <HAL_GPIO_WritePin>
		ijc_detector.board_enable_state = 0;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <make_ijc_dssd_safe+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	821a      	strh	r2, [r3, #16]
		// If board is disabled the board is already in a safe state
		status = EXIT_SUCCESS;
 800116a:	2300      	movs	r3, #0
 800116c:	71fb      	strb	r3, [r7, #7]
		return(status);
 800116e:	79fb      	ldrb	r3, [r7, #7]
	}

}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000222 	.word	0x20000222
 800117c:	2000021c 	.word	0x2000021c
 8001180:	48000400 	.word	0x48000400

08001184 <make_cea_dssd_safe>:



bool make_cea_dssd_safe(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
	// To make the CEA DSSD detector safe

	bool status = EXIT_SUCCESS;
 800118a:	2300      	movs	r3, #0
 800118c:	71fb      	strb	r3, [r7, #7]
	bool board_state;

	// Get the state of the CEA detector board
	board_state = cea_board_enable_get();
 800118e:	f000 fa9f 	bl	80016d0 <cea_board_enable_get>
 8001192:	4603      	mov	r3, r0
 8001194:	71bb      	strb	r3, [r7, #6]

	if(board_state == true)
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d04e      	beq.n	800123a <make_cea_dssd_safe+0xb6>
	{
		// If the detector board is enabled - Make it safe from here by ramping down if necessary

		// Get the current digipot value
		status = cea_i2c_read(ADDR_CEA_DIGIPOT, &cea_detector.hv_digipot_value, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	4931      	ldr	r1, [pc, #196]	; (8001264 <make_cea_dssd_safe+0xe0>)
 80011a0:	2058      	movs	r0, #88	; 0x58
 80011a2:	f000 fac7 	bl	8001734 <cea_i2c_read>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	bf14      	ite	ne
 80011ac:	2301      	movne	r3, #1
 80011ae:	2300      	moveq	r3, #0
 80011b0:	71fb      	strb	r3, [r7, #7]

		if(status == EXIT_SUCCESS && cea_detector.hv_digipot_value > 0)
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d010      	beq.n	80011e0 <make_cea_dssd_safe+0x5c>
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <make_cea_dssd_safe+0xe4>)
 80011c0:	799b      	ldrb	r3, [r3, #6]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00c      	beq.n	80011e0 <make_cea_dssd_safe+0x5c>
		{
			// Begin ramp down
			// ----------------------------------------------------------------------------
			// Must enable the ramp enable flag
			cea_detector.hv_loop_enable = true;
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <make_cea_dssd_safe+0xe4>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	705a      	strb	r2, [r3, #1]

			// Must set the target value to 0
			cea_detector.hv_targate_value = 0;
 80011cc:	4b26      	ldr	r3, [pc, #152]	; (8001268 <make_cea_dssd_safe+0xe4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	811a      	strh	r2, [r3, #8]

			// Set the flag to indicate that the CEA board is currently being made safe
			cea_detector.making_safe_inprogress = true;
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <make_cea_dssd_safe+0xe4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 80011d8:	2301      	movs	r3, #1
 80011da:	71fb      	strb	r3, [r7, #7]
			return(status);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	e03d      	b.n	800125c <make_cea_dssd_safe+0xd8>
		}
		else if (status == EXIT_SUCCESS && cea_detector.hv_digipot_value == 0)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f083 0301 	eor.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d015      	beq.n	8001218 <make_cea_dssd_safe+0x94>
 80011ec:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <make_cea_dssd_safe+0xe4>)
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d111      	bne.n	8001218 <make_cea_dssd_safe+0x94>
		{
			// Board is enabled but the digipot is in the 0 position
			cea_detector.making_safe_inprogress = false;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <make_cea_dssd_safe+0xe4>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	74da      	strb	r2, [r3, #19]
			// The digipot is in a 0 state - the make safe was successful

			// Disable HV and disable the board
			ht_cea_enable_set(GPIO_PIN_RESET);          							     // Reset the CEA HV SUPPLY
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff fdea 	bl	8000dd4 <ht_cea_enable_set>
			HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, GPIO_PIN_RESET); // Disable the CEA Board
 8001200:	2200      	movs	r2, #0
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	4819      	ldr	r0, [pc, #100]	; (800126c <make_cea_dssd_safe+0xe8>)
 8001206:	f002 fa47 	bl	8003698 <HAL_GPIO_WritePin>
			cea_detector.board_enable_state = 0;
 800120a:	4b17      	ldr	r3, [pc, #92]	; (8001268 <make_cea_dssd_safe+0xe4>)
 800120c:	2200      	movs	r2, #0
 800120e:	821a      	strh	r2, [r3, #16]

			status = EXIT_SUCCESS;
 8001210:	2300      	movs	r3, #0
 8001212:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	e021      	b.n	800125c <make_cea_dssd_safe+0xd8>
		}
		else if (status == EXIT_FAILURE)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <make_cea_dssd_safe+0xa8>
		{
			// Failed to make communication to the digipot device
			cea_detector.making_safe_inprogress = false;
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <make_cea_dssd_safe+0xe4>)
 8001220:	2200      	movs	r2, #0
 8001222:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 8001224:	2301      	movs	r3, #1
 8001226:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	e017      	b.n	800125c <make_cea_dssd_safe+0xd8>
		}
		else
		{
			cea_detector.making_safe_inprogress = false;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <make_cea_dssd_safe+0xe4>)
 800122e:	2200      	movs	r2, #0
 8001230:	74da      	strb	r2, [r3, #19]
			status = EXIT_FAILURE;
 8001232:	2301      	movs	r3, #1
 8001234:	71fb      	strb	r3, [r7, #7]
			return(status);
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	e010      	b.n	800125c <make_cea_dssd_safe+0xd8>
		}
	}
	else
	{
		cea_detector.making_safe_inprogress = false;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <make_cea_dssd_safe+0xe4>)
 800123c:	2200      	movs	r2, #0
 800123e:	74da      	strb	r2, [r3, #19]
		// If board is disabled the board is already in a safe state
		ht_cea_enable_set(GPIO_PIN_RESET);          							     // Reset the CEA HV SUPPLY
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fdc7 	bl	8000dd4 <ht_cea_enable_set>
		HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, GPIO_PIN_RESET); // Disable the CEA Board
 8001246:	2200      	movs	r2, #0
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	4808      	ldr	r0, [pc, #32]	; (800126c <make_cea_dssd_safe+0xe8>)
 800124c:	f002 fa24 	bl	8003698 <HAL_GPIO_WritePin>
		cea_detector.board_enable_state = 0;							 // Set the board state in the struct
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <make_cea_dssd_safe+0xe4>)
 8001252:	2200      	movs	r2, #0
 8001254:	821a      	strh	r2, [r3, #16]

		status = EXIT_SUCCESS;
 8001256:	2300      	movs	r3, #0
 8001258:	71fb      	strb	r3, [r7, #7]
		return(status);
 800125a:	79fb      	ldrb	r3, [r7, #7]
	}

}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000236 	.word	0x20000236
 8001268:	20000230 	.word	0x20000230
 800126c:	48000400 	.word	0x48000400

08001270 <caen_board_enable_set>:
//            CAEN PSB
//************************************

// Board enable functions
void caen_board_enable_set(bool gpio_state)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_4_CAEN_GPIO_Port, ENABLE_4_CAEN_Pin, gpio_state);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	461a      	mov	r2, r3
 800127e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <caen_board_enable_set+0x28>)
 8001284:	f002 fa08 	bl	8003698 <HAL_GPIO_WritePin>
	caen_detector.board_enable_state = gpio_state;
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <caen_board_enable_set+0x2c>)
 800128e:	821a      	strh	r2, [r3, #16]

}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	48000400 	.word	0x48000400
 800129c:	20000244 	.word	0x20000244

080012a0 <caen_board_enable_get>:

bool caen_board_enable_get(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
	caen_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_4_CAEN_GPIO_Port, ENABLE_4_CAEN_Pin);
 80012a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <caen_board_enable_get+0x28>)
 80012aa:	f002 f9dd 	bl	8003668 <HAL_GPIO_ReadPin>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29a      	uxth	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <caen_board_enable_get+0x2c>)
 80012b4:	821a      	strh	r2, [r3, #16]
	return(caen_detector.board_enable_state);
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <caen_board_enable_get+0x2c>)
 80012b8:	8a1b      	ldrh	r3, [r3, #16]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	bf14      	ite	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	2300      	moveq	r3, #0
 80012c2:	b2db      	uxtb	r3, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	48000400 	.word	0x48000400
 80012cc:	20000244 	.word	0x20000244

080012d0 <ucd_board_enable_set>:
//            UCD PSB
//************************************

// Board enable functions
void ucd_board_enable_set(bool gpio_state)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin, gpio_state);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	461a      	mov	r2, r3
 80012de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <ucd_board_enable_set+0x28>)
 80012e4:	f002 f9d8 	bl	8003698 <HAL_GPIO_WritePin>
	ucd_detector.board_enable_state = gpio_state;
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <ucd_board_enable_set+0x2c>)
 80012ee:	821a      	strh	r2, [r3, #16]

}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	48000400 	.word	0x48000400
 80012fc:	20000208 	.word	0x20000208

08001300 <ucd_board_enable_get>:

bool ucd_board_enable_get(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	ucd_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_5_UCD_GPIO_Port, ENABLE_5_UCD_Pin);
 8001304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <ucd_board_enable_get+0x28>)
 800130a:	f002 f9ad 	bl	8003668 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <ucd_board_enable_get+0x2c>)
 8001314:	821a      	strh	r2, [r3, #16]
	return(ucd_detector.board_enable_state);
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <ucd_board_enable_get+0x2c>)
 8001318:	8a1b      	ldrh	r3, [r3, #16]
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	bd80      	pop	{r7, pc}
 8001328:	48000400 	.word	0x48000400
 800132c:	20000208 	.word	0x20000208

08001330 <ucd_i2c_write>:

HAL_StatusTypeDef ucd_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af02      	add	r7, sp, #8
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c3, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	b299      	uxth	r1, r3
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	220a      	movs	r2, #10
 8001348:	9200      	str	r2, [sp, #0]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <ucd_i2c_write+0x30>)
 800134e:	f002 fa71 	bl	8003834 <HAL_I2C_Master_Transmit>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000dc 	.word	0x200000dc

08001364 <ijc_detector_init>:
//            IJC PSB
//************************************

// Init function
bool ijc_detector_init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 800136a:	2300      	movs	r3, #0
 800136c:	71fb      	strb	r3, [r7, #7]

	// Init the IJC lab detector
	ijc_detector.ramp_flag            = 0;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <ijc_detector_init+0x60>)
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]
	ijc_detector.hv_max_digipot_value = IJC_MAX_DIGIPOT_VALUE - 1;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <ijc_detector_init+0x60>)
 8001376:	2295      	movs	r2, #149	; 0x95
 8001378:	709a      	strb	r2, [r3, #2]
	ijc_detector.hv_min_digipot_value = IJC_MIN_DIGIPOT_VALUE - 1;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <ijc_detector_init+0x60>)
 800137c:	22ff      	movs	r2, #255	; 0xff
 800137e:	70da      	strb	r2, [r3, #3]
	ijc_detector.hv_lower_deadband 	  = IJC_LOWER_DEADBAND;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <ijc_detector_init+0x60>)
 8001382:	222b      	movs	r2, #43	; 0x2b
 8001384:	715a      	strb	r2, [r3, #5]
	ijc_detector.hv_upper_deadband 	  = IJC_UPPER_DEADBAND;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <ijc_detector_init+0x60>)
 8001388:	222b      	movs	r2, #43	; 0x2b
 800138a:	711a      	strb	r2, [r3, #4]
	ijc_detector.hv_digipot_value 	  = 0;
 800138c:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <ijc_detector_init+0x60>)
 800138e:	2200      	movs	r2, #0
 8001390:	719a      	strb	r2, [r3, #6]
	ijc_detector.hv_targate_value 	  = 0;
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <ijc_detector_init+0x60>)
 8001394:	2200      	movs	r2, #0
 8001396:	811a      	strh	r2, [r3, #8]
	ijc_detector.board_enable_state   = 0;
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <ijc_detector_init+0x60>)
 800139a:	2200      	movs	r2, #0
 800139c:	821a      	strh	r2, [r3, #16]
	ijc_detector.hv_enable_state	  = 0;
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <ijc_detector_init+0x60>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	749a      	strb	r2, [r3, #18]
	ijc_detector.hv_loop_enable 	  = 1;
 80013a4:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <ijc_detector_init+0x60>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	705a      	strb	r2, [r3, #1]
	ijc_detector.making_safe_inprogress = 0;
 80013aa:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <ijc_detector_init+0x60>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	74da      	strb	r2, [r3, #19]

	// Configure the board enable state
	ht_ijc_enable_set(GPIO_PIN_RESET);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff fd27 	bl	8000e04 <ht_ijc_enable_set>
//		status = EXIT_FAILURE;
//		return(status);
//	}
//	else
//	{
		status = EXIT_SUCCESS;
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
		return(status);
 80013ba:	79fb      	ldrb	r3, [r7, #7]
//	}
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000021c 	.word	0x2000021c

080013c8 <cea_detector_init>:


bool cea_detector_init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

	// TODO - Add a status return - this is very important incase the init fails and the HV is enabled high!!!

	bool status = EXIT_SUCCESS;
 80013ce:	2300      	movs	r3, #0
 80013d0:	71fb      	strb	r3, [r7, #7]

	// Init the CEA lab detector
	cea_detector.ramp_flag            = 0;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <cea_detector_init+0x60>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
	cea_detector.hv_max_digipot_value = CEA_MAX_DIGIPOT_VALUE - 1;
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <cea_detector_init+0x60>)
 80013da:	22c7      	movs	r2, #199	; 0xc7
 80013dc:	709a      	strb	r2, [r3, #2]
	cea_detector.hv_min_digipot_value = CEA_MIN_DIGIPOT_VALUE - 1;
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <cea_detector_init+0x60>)
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	70da      	strb	r2, [r3, #3]
	cea_detector.hv_lower_deadband 	  = CEA_LOWER_DEADBAND;
 80013e4:	4b10      	ldr	r3, [pc, #64]	; (8001428 <cea_detector_init+0x60>)
 80013e6:	222b      	movs	r2, #43	; 0x2b
 80013e8:	715a      	strb	r2, [r3, #5]
	cea_detector.hv_upper_deadband 	  = CEA_UPPER_DEADBAND;
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <cea_detector_init+0x60>)
 80013ec:	222b      	movs	r2, #43	; 0x2b
 80013ee:	711a      	strb	r2, [r3, #4]
	cea_detector.hv_digipot_value 	  = 0;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <cea_detector_init+0x60>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	719a      	strb	r2, [r3, #6]
	cea_detector.hv_targate_value 	  = 0;
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <cea_detector_init+0x60>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	811a      	strh	r2, [r3, #8]
	cea_detector.board_enable_state   = 0;
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <cea_detector_init+0x60>)
 80013fe:	2200      	movs	r2, #0
 8001400:	821a      	strh	r2, [r3, #16]
	cea_detector.hv_enable_state	  = 0;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <cea_detector_init+0x60>)
 8001404:	2200      	movs	r2, #0
 8001406:	749a      	strb	r2, [r3, #18]
	cea_detector.hv_loop_enable 	  = 1;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <cea_detector_init+0x60>)
 800140a:	2201      	movs	r2, #1
 800140c:	705a      	strb	r2, [r3, #1]
	cea_detector.making_safe_inprogress = 0;
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <cea_detector_init+0x60>)
 8001410:	2200      	movs	r2, #0
 8001412:	74da      	strb	r2, [r3, #19]

	// Configure the board enable state
	ht_cea_enable_set(GPIO_PIN_RESET);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fcdd 	bl	8000dd4 <ht_cea_enable_set>
//		status = EXIT_FAILURE;
//		return(status);
//	}
//	else
//	{
		status = EXIT_SUCCESS;
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]
		return(status);
 800141e:	79fb      	ldrb	r3, [r7, #7]
//	}
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000230 	.word	0x20000230

0800142c <ijc_board_enable_set>:


// Board enable functions
bool ijc_board_enable_set(bool gpio_state)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af02      	add	r7, sp, #8
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_digipot_status;
	uint8_t tx_data[2] = {0x00, 0x00};
 8001436:	2300      	movs	r3, #0
 8001438:	81bb      	strh	r3, [r7, #12]

	bool ijc_board_state = ijc_board_enable_get();								 // Get the current state of the board
 800143a:	f000 f855 	bl	80014e8 <ijc_board_enable_get>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]
	if (gpio_state == ENABLE && ijc_board_state == DISABLED) 					 // If the board is disabled
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d036      	beq.n	80014b6 <ijc_board_enable_set+0x8a>
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	f083 0301 	eor.w	r3, r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d030      	beq.n	80014b6 <ijc_board_enable_set+0x8a>
	{
		ht_ijc_enable_set(GPIO_PIN_RESET);          							 // Reset the ijc HV SUPPLY
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fcd5 	bl	8000e04 <ht_ijc_enable_set>
		HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, gpio_state); // Enable the ijc Board
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	461a      	mov	r2, r3
 800145e:	2140      	movs	r1, #64	; 0x40
 8001460:	481e      	ldr	r0, [pc, #120]	; (80014dc <ijc_board_enable_set+0xb0>)
 8001462:	f002 f919 	bl	8003698 <HAL_GPIO_WritePin>
		ijc_detector.board_enable_state = gpio_state;							 // Set the board state in the struct
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <ijc_board_enable_set+0xb4>)
 800146c:	821a      	strh	r2, [r3, #16]

		// Set the digipot to 0
		ijc_detector.hv_digipot_value = 0;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <ijc_board_enable_set+0xb4>)
 8001470:	2200      	movs	r2, #0
 8001472:	719a      	strb	r2, [r3, #6]
		i2c_digipot_status = ijc_i2c_write_read(ADDR_IJC_DIGIPOT, &tx_data[0], 2, &ijc_detector.hv_digipot_value, 1);
 8001474:	f107 010c 	add.w	r1, r7, #12
 8001478:	2301      	movs	r3, #1
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <ijc_board_enable_set+0xb8>)
 800147e:	2202      	movs	r2, #2
 8001480:	2058      	movs	r0, #88	; 0x58
 8001482:	f000 f87d 	bl	8001580 <ijc_i2c_write_read>
 8001486:	4603      	mov	r3, r0
 8001488:	73bb      	strb	r3, [r7, #14]

		if(i2c_digipot_status == HAL_OK && ijc_detector.hv_digipot_value == 0)
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d108      	bne.n	80014a2 <ijc_board_enable_set+0x76>
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <ijc_board_enable_set+0xb4>)
 8001492:	799b      	ldrb	r3, [r3, #6]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d104      	bne.n	80014a2 <ijc_board_enable_set+0x76>
		{
			// Enable the HV Supply
			ht_ijc_enable_set(GPIO_PIN_SET);          							 // Reset the IJC HV SUPPLY
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff fcb3 	bl	8000e04 <ht_ijc_enable_set>
			return(EXIT_SUCCESS);
 800149e:	2300      	movs	r3, #0
 80014a0:	e018      	b.n	80014d4 <ijc_board_enable_set+0xa8>
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin, 0);  // Enable the ijc Board
 80014a2:	2200      	movs	r2, #0
 80014a4:	2140      	movs	r1, #64	; 0x40
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <ijc_board_enable_set+0xb0>)
 80014a8:	f002 f8f6 	bl	8003698 <HAL_GPIO_WritePin>
			ijc_detector.board_enable_state = 0;							 // Set the board state in the struct
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <ijc_board_enable_set+0xb4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	821a      	strh	r2, [r3, #16]

			// Return fail
			return(EXIT_FAILURE);
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00e      	b.n	80014d4 <ijc_board_enable_set+0xa8>
		}
	}
	else if (gpio_state == DISABLE && ijc_board_state == ENABLED) 				 // If the board is enabled
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f083 0301 	eor.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <ijc_board_enable_set+0xa6>
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d004      	beq.n	80014d2 <ijc_board_enable_set+0xa6>
	{
		// Enable the ijc loop and set the target value to 0
		// Have a flag in the main loop then disable the HV and disable the board once the digipot is at 0
		ijc_detector.making_safe_inprogress = true;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <ijc_board_enable_set+0xb4>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	74da      	strb	r2, [r3, #19]
		return(EXIT_SUCCESS);
 80014ce:	2300      	movs	r3, #0
 80014d0:	e000      	b.n	80014d4 <ijc_board_enable_set+0xa8>
	}
	else
	{
		return(EXIT_SUCCESS);
 80014d2:	2300      	movs	r3, #0
	}
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	48000400 	.word	0x48000400
 80014e0:	2000021c 	.word	0x2000021c
 80014e4:	20000222 	.word	0x20000222

080014e8 <ijc_board_enable_get>:


bool ijc_board_enable_get(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	ijc_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_2_IJC_GPIO_Port, ENABLE_2_IJC_Pin);
 80014ec:	2140      	movs	r1, #64	; 0x40
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <ijc_board_enable_get+0x28>)
 80014f0:	f002 f8ba 	bl	8003668 <HAL_GPIO_ReadPin>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <ijc_board_enable_get+0x2c>)
 80014fa:	821a      	strh	r2, [r3, #16]
	return(ijc_detector.board_enable_state);
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <ijc_board_enable_get+0x2c>)
 80014fe:	8a1b      	ldrh	r3, [r3, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	bf14      	ite	ne
 8001504:	2301      	movne	r3, #1
 8001506:	2300      	moveq	r3, #0
 8001508:	b2db      	uxtb	r3, r3
}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	48000400 	.word	0x48000400
 8001514:	2000021c 	.word	0x2000021c

08001518 <ijc_i2c_write>:

HAL_StatusTypeDef ijc_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	4613      	mov	r3, r2
 8001526:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c2, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	b299      	uxth	r1, r3
 800152c:	88bb      	ldrh	r3, [r7, #4]
 800152e:	220a      	movs	r2, #10
 8001530:	9200      	str	r2, [sp, #0]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <ijc_i2c_write+0x30>)
 8001536:	f002 f97d 	bl	8003834 <HAL_I2C_Master_Transmit>
 800153a:	4603      	mov	r3, r0
 800153c:	73fb      	strb	r3, [r7, #15]
	return(ret);
 800153e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000088 	.word	0x20000088

0800154c <ijc_i2c_read>:

HAL_StatusTypeDef ijc_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af02      	add	r7, sp, #8
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	4613      	mov	r3, r2
 800155a:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c2, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	b299      	uxth	r1, r3
 8001560:	88bb      	ldrh	r3, [r7, #4]
 8001562:	220a      	movs	r2, #10
 8001564:	9200      	str	r2, [sp, #0]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <ijc_i2c_read+0x30>)
 800156a:	f002 fa7b 	bl	8003a64 <HAL_I2C_Master_Receive>
 800156e:	4603      	mov	r3, r0
 8001570:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000088 	.word	0x20000088

08001580 <ijc_i2c_write_read>:
}
*/
// ###############################################

HAL_StatusTypeDef ijc_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	4613      	mov	r3, r2
 8001590:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8001596:	2305      	movs	r3, #5
 8001598:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 800159a:	2305      	movs	r3, #5
 800159c:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 800159e:	7dfb      	ldrb	r3, [r7, #23]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d802      	bhi.n	80015aa <ijc_i2c_write_read+0x2a>
 80015a4:	2064      	movs	r0, #100	; 0x64
 80015a6:	f001 fd61 	bl	800306c <HAL_Delay>
		status = ijc_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 80015aa:	89ba      	ldrh	r2, [r7, #12]
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	68b9      	ldr	r1, [r7, #8]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ffb1 	bl	8001518 <ijc_i2c_write>
 80015b6:	4603      	mov	r3, r0
 80015b8:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	3b01      	subs	r3, #1
 80015be:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 80015c0:	7d7b      	ldrb	r3, [r7, #21]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d102      	bne.n	80015cc <ijc_i2c_write_read+0x4c>
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e8      	bne.n	800159e <ijc_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 80015cc:	7d7b      	ldrb	r3, [r7, #21]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <ijc_i2c_write_read+0x56>
 80015d2:	7d7b      	ldrb	r3, [r7, #21]
 80015d4:	e01a      	b.n	800160c <ijc_i2c_write_read+0x8c>

	HAL_Delay(5);
 80015d6:	2005      	movs	r0, #5
 80015d8:	f001 fd48 	bl	800306c <HAL_Delay>

	do
	{
		// Read operation
		status =  ijc_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 80015dc:	8c3a      	ldrh	r2, [r7, #32]
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ffb2 	bl	800154c <ijc_i2c_read>
 80015e8:	4603      	mov	r3, r0
 80015ea:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 80015ec:	7dbb      	ldrb	r3, [r7, #22]
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d802      	bhi.n	80015f8 <ijc_i2c_write_read+0x78>
 80015f2:	2064      	movs	r0, #100	; 0x64
 80015f4:	f001 fd3a 	bl	800306c <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 80015f8:	7dbb      	ldrb	r3, [r7, #22]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 80015fe:	7d7b      	ldrb	r3, [r7, #21]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d102      	bne.n	800160a <ijc_i2c_write_read+0x8a>
 8001604:	7dbb      	ldrb	r3, [r7, #22]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1e8      	bne.n	80015dc <ijc_i2c_write_read+0x5c>

	return(status);
 800160a:	7d7b      	ldrb	r3, [r7, #21]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <cea_board_enable_set>:
//            CEA PSB
//************************************

// Board enable functions
bool cea_board_enable_set(bool gpio_state)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af02      	add	r7, sp, #8
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef i2c_digipot_status;
	uint8_t tx_data[2] = {0x00, 0x00};
 800161e:	2300      	movs	r3, #0
 8001620:	81bb      	strh	r3, [r7, #12]

	bool cea_board_state = cea_board_enable_get();								 // Get the current state of the board
 8001622:	f000 f855 	bl	80016d0 <cea_board_enable_get>
 8001626:	4603      	mov	r3, r0
 8001628:	73fb      	strb	r3, [r7, #15]
	if (gpio_state == ENABLE && cea_board_state == DISABLED) 					 // If the board is disabled
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d036      	beq.n	800169e <cea_board_enable_set+0x8a>
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f083 0301 	eor.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d030      	beq.n	800169e <cea_board_enable_set+0x8a>
	{
		ht_cea_enable_set(GPIO_PIN_RESET);          							 // Reset the CEA HV SUPPLY
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fbc9 	bl	8000dd4 <ht_cea_enable_set>
		HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, gpio_state); // Enable the CEA Board
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	461a      	mov	r2, r3
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	481e      	ldr	r0, [pc, #120]	; (80016c4 <cea_board_enable_set+0xb0>)
 800164a:	f002 f825 	bl	8003698 <HAL_GPIO_WritePin>
		cea_detector.board_enable_state = gpio_state;							 // Set the board state in the struct
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b1d      	ldr	r3, [pc, #116]	; (80016c8 <cea_board_enable_set+0xb4>)
 8001654:	821a      	strh	r2, [r3, #16]

		// Set the digipot to 0
		cea_detector.hv_digipot_value = 0;
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <cea_board_enable_set+0xb4>)
 8001658:	2200      	movs	r2, #0
 800165a:	719a      	strb	r2, [r3, #6]
		i2c_digipot_status = cea_i2c_write_read(ADDR_CEA_DIGIPOT, &tx_data[0], 2, &cea_detector.hv_digipot_value, 1);
 800165c:	f107 010c 	add.w	r1, r7, #12
 8001660:	2301      	movs	r3, #1
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <cea_board_enable_set+0xb8>)
 8001666:	2202      	movs	r2, #2
 8001668:	2058      	movs	r0, #88	; 0x58
 800166a:	f000 f893 	bl	8001794 <cea_i2c_write_read>
 800166e:	4603      	mov	r3, r0
 8001670:	73bb      	strb	r3, [r7, #14]

		if(i2c_digipot_status == HAL_OK && cea_detector.hv_digipot_value == 0)
 8001672:	7bbb      	ldrb	r3, [r7, #14]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d108      	bne.n	800168a <cea_board_enable_set+0x76>
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <cea_board_enable_set+0xb4>)
 800167a:	799b      	ldrb	r3, [r3, #6]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d104      	bne.n	800168a <cea_board_enable_set+0x76>
		{
			// Enable the HV Supply
			ht_cea_enable_set(GPIO_PIN_SET);          							 // Reset the CEA HV SUPPLY
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff fba7 	bl	8000dd4 <ht_cea_enable_set>
			return(EXIT_SUCCESS);
 8001686:	2300      	movs	r3, #0
 8001688:	e018      	b.n	80016bc <cea_board_enable_set+0xa8>
		}
		else
		{
			HAL_GPIO_WritePin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin, 0); // Enable the CEA Board
 800168a:	2200      	movs	r2, #0
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	480d      	ldr	r0, [pc, #52]	; (80016c4 <cea_board_enable_set+0xb0>)
 8001690:	f002 f802 	bl	8003698 <HAL_GPIO_WritePin>
			cea_detector.board_enable_state = 0;							 // Set the board state in the struct
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <cea_board_enable_set+0xb4>)
 8001696:	2200      	movs	r2, #0
 8001698:	821a      	strh	r2, [r3, #16]

			// Return fail
			return(EXIT_FAILURE);
 800169a:	2301      	movs	r3, #1
 800169c:	e00e      	b.n	80016bc <cea_board_enable_set+0xa8>
		}
	}
	else if (gpio_state == DISABLE && cea_board_state == ENABLED) 				 // If the board is enabled
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <cea_board_enable_set+0xa6>
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <cea_board_enable_set+0xa6>
	{
		// Enable the CEA loop and set the target value to 0
		// Have a flag in the main loop then disable the HV and disable the board once the digipot is at 0
		cea_detector.making_safe_inprogress = true;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <cea_board_enable_set+0xb4>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	74da      	strb	r2, [r3, #19]
		return(EXIT_SUCCESS);
 80016b6:	2300      	movs	r3, #0
 80016b8:	e000      	b.n	80016bc <cea_board_enable_set+0xa8>
	}
	else
	{
		return(EXIT_SUCCESS);
 80016ba:	2300      	movs	r3, #0
	}
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	48000400 	.word	0x48000400
 80016c8:	20000230 	.word	0x20000230
 80016cc:	20000236 	.word	0x20000236

080016d0 <cea_board_enable_get>:

bool cea_board_enable_get(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	cea_detector.board_enable_state = HAL_GPIO_ReadPin(ENABLE_3_CEA_GPIO_Port, ENABLE_3_CEA_Pin);
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	4808      	ldr	r0, [pc, #32]	; (80016f8 <cea_board_enable_get+0x28>)
 80016d8:	f001 ffc6 	bl	8003668 <HAL_GPIO_ReadPin>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <cea_board_enable_get+0x2c>)
 80016e2:	821a      	strh	r2, [r3, #16]
	return(cea_detector.board_enable_state);
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <cea_board_enable_get+0x2c>)
 80016e6:	8a1b      	ldrh	r3, [r3, #16]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	bf14      	ite	ne
 80016ec:	2301      	movne	r3, #1
 80016ee:	2300      	moveq	r3, #0
 80016f0:	b2db      	uxtb	r3, r3
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	48000400 	.word	0x48000400
 80016fc:	20000230 	.word	0x20000230

08001700 <cea_i2c_write>:

HAL_StatusTypeDef cea_i2c_write(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af02      	add	r7, sp, #8
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4613      	mov	r3, r2
 800170e:	80bb      	strh	r3, [r7, #4]
	// Write bytes over I2C
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c3, dev_addr, out_ptr, countTX, I2C_TIMEOUT_DURATION);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	b299      	uxth	r1, r3
 8001714:	88bb      	ldrh	r3, [r7, #4]
 8001716:	220a      	movs	r2, #10
 8001718:	9200      	str	r2, [sp, #0]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <cea_i2c_write+0x30>)
 800171e:	f002 f889 	bl	8003834 <HAL_I2C_Master_Transmit>
 8001722:	4603      	mov	r3, r0
 8001724:	73fb      	strb	r3, [r7, #15]
	return(ret);
 8001726:	7bfb      	ldrb	r3, [r7, #15]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200000dc 	.word	0x200000dc

08001734 <cea_i2c_read>:

HAL_StatusTypeDef cea_i2c_read(uint8_t dev_addr, uint8_t *in_ptr, uint16_t countRX)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af02      	add	r7, sp, #8
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	4613      	mov	r3, r2
 8001742:	80bb      	strh	r3, [r7, #4]
	// Read bytes over I2C
	HAL_StatusTypeDef ret = HAL_OK;
 8001744:	2300      	movs	r3, #0
 8001746:	73bb      	strb	r3, [r7, #14]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 8001748:	2305      	movs	r3, #5
 800174a:	737b      	strb	r3, [r7, #13]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 800174c:	2305      	movs	r3, #5
 800174e:	73fb      	strb	r3, [r7, #15]

	//HAL_StatusTypeDef ret = HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION);
	do
	{
		// Read operation
		ret =  HAL_I2C_Master_Receive(&hi2c3, dev_addr, in_ptr, countRX, I2C_TIMEOUT_DURATION); // Delay if re-attempting I2C Operation
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	b299      	uxth	r1, r3
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	220a      	movs	r2, #10
 8001758:	9200      	str	r2, [sp, #0]
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <cea_i2c_read+0x5c>)
 800175e:	f002 f981 	bl	8003a64 <HAL_I2C_Master_Receive>
 8001762:	4603      	mov	r3, r0
 8001764:	73bb      	strb	r3, [r7, #14]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b04      	cmp	r3, #4
 800176a:	d802      	bhi.n	8001772 <cea_i2c_read+0x3e>
 800176c:	2064      	movs	r0, #100	; 0x64
 800176e:	f001 fc7d 	bl	800306c <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	3b01      	subs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
	}while((ret == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d102      	bne.n	8001784 <cea_i2c_read+0x50>
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e5      	bne.n	8001750 <cea_i2c_read+0x1c>

	return(ret);
 8001784:	7bbb      	ldrb	r3, [r7, #14]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000dc 	.word	0x200000dc

08001794 <cea_i2c_write_read>:

HAL_StatusTypeDef cea_i2c_write_read(uint8_t dev_addr, uint8_t *out_ptr, uint16_t countTX, uint8_t *in_ptr, uint16_t countRX)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4603      	mov	r3, r0
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	4613      	mov	r3, r2
 80017a4:	81bb      	strh	r3, [r7, #12]
	// The status used to indicate success/error
	HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	757b      	strb	r3, [r7, #21]
	uint8_t tx_attemps = I2C_TX_MAX_ATTEMPTS;
 80017aa:	2305      	movs	r3, #5
 80017ac:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_attemps = I2C_RX_MAX_ATTEMPTS;
 80017ae:	2305      	movs	r3, #5
 80017b0:	75bb      	strb	r3, [r7, #22]

	do
	{
		// Write operation
		if(tx_attemps < I2C_TX_MAX_ATTEMPTS){HAL_Delay(I2C_TX_ATTEMPT_PERIOD);} // Delay if re-attempting I2C Operation
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d802      	bhi.n	80017be <cea_i2c_write_read+0x2a>
 80017b8:	2064      	movs	r0, #100	; 0x64
 80017ba:	f001 fc57 	bl	800306c <HAL_Delay>
		status = cea_i2c_write(dev_addr, out_ptr, countTX);						// Perform I2C operation
 80017be:	89ba      	ldrh	r2, [r7, #12]
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	68b9      	ldr	r1, [r7, #8]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff9b 	bl	8001700 <cea_i2c_write>
 80017ca:	4603      	mov	r3, r0
 80017cc:	757b      	strb	r3, [r7, #21]
		tx_attemps --;															// Decrement the attempt counter
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	75fb      	strb	r3, [r7, #23]
	}while((status == HAL_ERROR) && (tx_attemps > 0));						    // Check the I2C operation status
 80017d4:	7d7b      	ldrb	r3, [r7, #21]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d102      	bne.n	80017e0 <cea_i2c_write_read+0x4c>
 80017da:	7dfb      	ldrb	r3, [r7, #23]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e8      	bne.n	80017b2 <cea_i2c_write_read+0x1e>

	if(status == HAL_ERROR){return(status);}
 80017e0:	7d7b      	ldrb	r3, [r7, #21]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <cea_i2c_write_read+0x56>
 80017e6:	7d7b      	ldrb	r3, [r7, #21]
 80017e8:	e01a      	b.n	8001820 <cea_i2c_write_read+0x8c>

	HAL_Delay(5);
 80017ea:	2005      	movs	r0, #5
 80017ec:	f001 fc3e 	bl	800306c <HAL_Delay>

	do
	{
		// Read operation
		status =  cea_i2c_read(dev_addr, in_ptr, countRX); 						// Delay if re-attempting I2C Operation
 80017f0:	8c3a      	ldrh	r2, [r7, #32]
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff9c 	bl	8001734 <cea_i2c_read>
 80017fc:	4603      	mov	r3, r0
 80017fe:	757b      	strb	r3, [r7, #21]
		if(rx_attemps < I2C_RX_MAX_ATTEMPTS){HAL_Delay(I2C_RX_ATTEMPT_PERIOD);}	// Perform I2C operation
 8001800:	7dbb      	ldrb	r3, [r7, #22]
 8001802:	2b04      	cmp	r3, #4
 8001804:	d802      	bhi.n	800180c <cea_i2c_write_read+0x78>
 8001806:	2064      	movs	r0, #100	; 0x64
 8001808:	f001 fc30 	bl	800306c <HAL_Delay>
		rx_attemps --;															// Decrement the attempt counter
 800180c:	7dbb      	ldrb	r3, [r7, #22]
 800180e:	3b01      	subs	r3, #1
 8001810:	75bb      	strb	r3, [r7, #22]
	}while((status == HAL_ERROR) && (rx_attemps > 0));							// Check the I2C operation status
 8001812:	7d7b      	ldrb	r3, [r7, #21]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d102      	bne.n	800181e <cea_i2c_write_read+0x8a>
 8001818:	7dbb      	ldrb	r3, [r7, #22]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1e8      	bne.n	80017f0 <cea_i2c_write_read+0x5c>

	return(status);
 800181e:	7d7b      	ldrb	r3, [r7, #21]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <i2c_pt_reset>:




bool i2c_pt_reset(I2C_HandleTypeDef *hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    // I2C command to reset the MS5611 module
    // A 3 ms delay should be placed after reset command is complete
    bool status = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
    uint8_t cmd = CMD_RESET;
 8001834:	231e      	movs	r3, #30
 8001836:	73bb      	strb	r3, [r7, #14]

    // Send the command
    status = i2c_write(hi2c, ADDR_PRESS_TEMP, &cmd, 1);
 8001838:	f107 020e 	add.w	r2, r7, #14
 800183c:	2301      	movs	r3, #1
 800183e:	21ee      	movs	r1, #238	; 0xee
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff f965 	bl	8000b10 <i2c_write>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf14      	ite	ne
 800184c:	2301      	movne	r3, #1
 800184e:	2300      	moveq	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(3);
 8001852:	2003      	movs	r0, #3
 8001854:	f001 fc0a 	bl	800306c <HAL_Delay>

    return(status);
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <i2c_pt_d1_pressure_conversion>:

    return(status);
}

bool i2c_pt_d1_pressure_conversion(I2C_HandleTypeDef *hi2c, uint8_t osr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	70fb      	strb	r3, [r7, #3]

    // Perform the I2C conversion for D1 - pressure sensor
    bool status = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]
    uint8_t command;

    switch(osr)
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	2b04      	cmp	r3, #4
 8001878:	d81b      	bhi.n	80018b2 <i2c_pt_d1_pressure_conversion+0x4e>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <i2c_pt_d1_pressure_conversion+0x1c>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	08001895 	.word	0x08001895
 8001884:	0800189b 	.word	0x0800189b
 8001888:	080018a1 	.word	0x080018a1
 800188c:	080018a7 	.word	0x080018a7
 8001890:	080018ad 	.word	0x080018ad
    {
        case OSR_256:
        	command = CMD_CONVERT_D1_OSR_256;
 8001894:	2340      	movs	r3, #64	; 0x40
 8001896:	73bb      	strb	r3, [r7, #14]
            break;
 8001898:	e00c      	b.n	80018b4 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_512:
        	command = CMD_CONVERT_D1_OSR_512;
 800189a:	2342      	movs	r3, #66	; 0x42
 800189c:	73bb      	strb	r3, [r7, #14]
            break;
 800189e:	e009      	b.n	80018b4 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_1024:
        	command = CMD_CONVERT_D1_OSR_1024;
 80018a0:	2344      	movs	r3, #68	; 0x44
 80018a2:	73bb      	strb	r3, [r7, #14]
            break;
 80018a4:	e006      	b.n	80018b4 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_2048:
        	command = CMD_CONVERT_D1_OSR_2048;
 80018a6:	2346      	movs	r3, #70	; 0x46
 80018a8:	73bb      	strb	r3, [r7, #14]
            break;
 80018aa:	e003      	b.n	80018b4 <i2c_pt_d1_pressure_conversion+0x50>
        case OSR_4096:
        	command = CMD_CONVERT_D1_OSR_4096;
 80018ac:	2348      	movs	r3, #72	; 0x48
 80018ae:	73bb      	strb	r3, [r7, #14]
            break;
 80018b0:	e000      	b.n	80018b4 <i2c_pt_d1_pressure_conversion+0x50>
        default:
            break;
 80018b2:	bf00      	nop
    }

    // Send the command
    status = i2c_write(hi2c, ADDR_PRESS_TEMP, &command, 1);
 80018b4:	f107 020e 	add.w	r2, r7, #14
 80018b8:	2301      	movs	r3, #1
 80018ba:	21ee      	movs	r1, #238	; 0xee
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff f927 	bl	8000b10 <i2c_write>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf14      	ite	ne
 80018c8:	2301      	movne	r3, #1
 80018ca:	2300      	moveq	r3, #0
 80018cc:	73fb      	strb	r3, [r7, #15]

    // Around 10ms for conversion
    HAL_Delay(10);
 80018ce:	200a      	movs	r0, #10
 80018d0:	f001 fbcc 	bl	800306c <HAL_Delay>

    return(status);
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop

080018e0 <i2c_pt_d2_temperature_conversion>:

bool i2c_pt_d2_temperature_conversion(I2C_HandleTypeDef *hi2c, uint8_t osr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	70fb      	strb	r3, [r7, #3]

    // Perform the I2C conversion for D2 - temperature sensor
    bool status = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
    uint8_t command;

    switch(osr)
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d81b      	bhi.n	800192e <i2c_pt_d2_temperature_conversion+0x4e>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <i2c_pt_d2_temperature_conversion+0x1c>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	08001911 	.word	0x08001911
 8001900:	08001917 	.word	0x08001917
 8001904:	0800191d 	.word	0x0800191d
 8001908:	08001923 	.word	0x08001923
 800190c:	08001929 	.word	0x08001929
    {
        case OSR_256:
            command = CMD_CONVERT_D2_OSR_256;
 8001910:	2350      	movs	r3, #80	; 0x50
 8001912:	73bb      	strb	r3, [r7, #14]
            break;
 8001914:	e00c      	b.n	8001930 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_512:
            command = CMD_CONVERT_D2_OSR_512;
 8001916:	2352      	movs	r3, #82	; 0x52
 8001918:	73bb      	strb	r3, [r7, #14]
            break;
 800191a:	e009      	b.n	8001930 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_1024:
            command = CMD_CONVERT_D2_OSR_1024;
 800191c:	2354      	movs	r3, #84	; 0x54
 800191e:	73bb      	strb	r3, [r7, #14]
            break;
 8001920:	e006      	b.n	8001930 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_2048:
            command = CMD_CONVERT_D2_OSR_2048;
 8001922:	2356      	movs	r3, #86	; 0x56
 8001924:	73bb      	strb	r3, [r7, #14]
            break;
 8001926:	e003      	b.n	8001930 <i2c_pt_d2_temperature_conversion+0x50>
        case OSR_4096:
            command = CMD_CONVERT_D2_OSR_4096;
 8001928:	2358      	movs	r3, #88	; 0x58
 800192a:	73bb      	strb	r3, [r7, #14]
            break;
 800192c:	e000      	b.n	8001930 <i2c_pt_d2_temperature_conversion+0x50>
        default:
            break;
 800192e:	bf00      	nop
    }

    // Send the command
    status = i2c_write(hi2c, ADDR_PRESS_TEMP, &command, 1);
 8001930:	f107 020e 	add.w	r2, r7, #14
 8001934:	2301      	movs	r3, #1
 8001936:	21ee      	movs	r1, #238	; 0xee
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff f8e9 	bl	8000b10 <i2c_write>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf14      	ite	ne
 8001944:	2301      	movne	r3, #1
 8001946:	2300      	moveq	r3, #0
 8001948:	73fb      	strb	r3, [r7, #15]

    HAL_Delay(10);
 800194a:	200a      	movs	r0, #10
 800194c:	f001 fb8e 	bl	800306c <HAL_Delay>

    return(status);
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop

0800195c <i2c_pt_measure_d2_temperature>:


bool i2c_pt_measure_d2_temperature(I2C_HandleTypeDef *hi2c, uint8_t osr, uint32_t *r_buffer)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	460b      	mov	r3, r1
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	72fb      	strb	r3, [r7, #11]

    // Should check that the ADC has actully measured something
    bool status = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]

    // Send the command to initiate the conversion
    if(status == 0) status = i2c_pt_d2_temperature_conversion(hi2c, osr);
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	f083 0301 	eor.w	r3, r3, #1
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <i2c_pt_measure_d2_temperature+0x2c>
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	4619      	mov	r1, r3
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7ff ffae 	bl	80018e0 <i2c_pt_d2_temperature_conversion>
 8001984:	4603      	mov	r3, r0
 8001986:	75fb      	strb	r3, [r7, #23]
    // Read the ADC
    if(status == 0) status = i2c_pt_adc_read_sequence(hi2c, r_buffer);
 8001988:	7dfb      	ldrb	r3, [r7, #23]
 800198a:	f083 0301 	eor.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <i2c_pt_measure_d2_temperature+0x44>
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f82e 	bl	80019f8 <i2c_pt_adc_read_sequence>
 800199c:	4603      	mov	r3, r0
 800199e:	75fb      	strb	r3, [r7, #23]

    return(status);
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <i2c_pt_measure_d1_pressure>:


bool i2c_pt_measure_d1_pressure(I2C_HandleTypeDef *hi2c, uint8_t osr, uint32_t *r_buffer)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	460b      	mov	r3, r1
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	72fb      	strb	r3, [r7, #11]

    // Should check that the ADC has actully measured something
    bool status = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	75fb      	strb	r3, [r7, #23]

    // Send the command to initiate the conversion
    if(status == 0) status = i2c_pt_d1_pressure_conversion(hi2c, osr);
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <i2c_pt_measure_d1_pressure+0x2c>
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	4619      	mov	r1, r3
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff ff49 	bl	8001864 <i2c_pt_d1_pressure_conversion>
 80019d2:	4603      	mov	r3, r0
 80019d4:	75fb      	strb	r3, [r7, #23]
    // Read the ADC
    if(status == 0) status = i2c_pt_adc_read_sequence(hi2c, r_buffer);
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	f083 0301 	eor.w	r3, r3, #1
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d005      	beq.n	80019ee <i2c_pt_measure_d1_pressure+0x44>
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f807 	bl	80019f8 <i2c_pt_adc_read_sequence>
 80019ea:	4603      	mov	r3, r0
 80019ec:	75fb      	strb	r3, [r7, #23]

    return(status);
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <i2c_pt_adc_read_sequence>:


bool i2c_pt_adc_read_sequence(I2C_HandleTypeDef *hi2c, uint32_t *r_buffer)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
    // Need to check the number of returned bytes is correct
    bool status = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
    uint8_t command = CMD_ADC_READ;
 8001a06:	2300      	movs	r3, #0
 8001a08:	737b      	strb	r3, [r7, #13]
    uint8_t number_of_bytes = 3;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	73bb      	strb	r3, [r7, #14]
    uint8_t read_buffer[3] = {0};
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <i2c_pt_adc_read_sequence+0x64>)
 8001a10:	881b      	ldrh	r3, [r3, #0]
 8001a12:	813b      	strh	r3, [r7, #8]
 8001a14:	2300      	movs	r3, #0
 8001a16:	72bb      	strb	r3, [r7, #10]


    // Send the command

    status = i2c_write_read(hi2c, ADDR_PRESS_TEMP, &command, 1, &read_buffer[0], number_of_bytes);
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	f107 020d 	add.w	r2, r7, #13
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	21ee      	movs	r1, #238	; 0xee
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff f889 	bl	8000b44 <i2c_write_read>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bf14      	ite	ne
 8001a38:	2301      	movne	r3, #1
 8001a3a:	2300      	moveq	r3, #0
 8001a3c:	73fb      	strb	r3, [r7, #15]

    //*r_buffer = *r_buffer | ((read_buffer[0]<<16 | read_buffer[1]<<8 | read_buffer[2]));
    *r_buffer = ((read_buffer[0]<<16 | read_buffer[1]<<8 | read_buffer[2]));
 8001a3e:	7a3b      	ldrb	r3, [r7, #8]
 8001a40:	041a      	lsls	r2, r3, #16
 8001a42:	7a7b      	ldrb	r3, [r7, #9]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	4313      	orrs	r3, r2
 8001a48:	7aba      	ldrb	r2, [r7, #10]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	601a      	str	r2, [r3, #0]

    return(status);
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	08007f78 	.word	0x08007f78

08001a60 <run_complete_readout>:


bool run_complete_readout()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
    bool status = EXIT_SUCCESS;      // A status record of the operation
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]

    // Attempt to reset the I2C device - add a delay at the end to allow the device to reset
    if(status == 0) status = i2c_pt_reset(&hi2c2);
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f083 0301 	eor.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <run_complete_readout+0x20>
 8001a76:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <run_complete_readout+0x78>)
 8001a78:	f7ff fed6 	bl	8001828 <i2c_pt_reset>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]

    // Attempt to read into memory all the I2C prom calibration bytes
    //if(status == 0) status = i2c_pt_prom_read_all(&hi2c2, &measurement.prom_regs[0]);

    // Attempt conversion sequence for pressure at OSR 4096 with conversion duration <9.04ms
    uint32_t rx_buffer = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	603b      	str	r3, [r7, #0]

    if(status == 0) status = i2c_pt_measure_d1_pressure(&hi2c2, OSR_4096, &rx_buffer);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f083 0301 	eor.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <run_complete_readout+0x40>
 8001a90:	463b      	mov	r3, r7
 8001a92:	461a      	mov	r2, r3
 8001a94:	2104      	movs	r1, #4
 8001a96:	4810      	ldr	r0, [pc, #64]	; (8001ad8 <run_complete_readout+0x78>)
 8001a98:	f7ff ff87 	bl	80019aa <i2c_pt_measure_d1_pressure>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
    measurement.uncomp_press = rx_buffer;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <run_complete_readout+0x7c>)
 8001aa4:	6053      	str	r3, [r2, #4]

    HAL_Delay(10);
 8001aa6:	200a      	movs	r0, #10
 8001aa8:	f001 fae0 	bl	800306c <HAL_Delay>

    // Attempt conversion sequence for temperature at OSR 4096 with conversion duration <9.04ms
    if(status == 0) status = i2c_pt_measure_d2_temperature(&hi2c2, OSR_4096, &rx_buffer);
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	f083 0301 	eor.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <run_complete_readout+0x68>
 8001ab8:	463b      	mov	r3, r7
 8001aba:	461a      	mov	r2, r3
 8001abc:	2104      	movs	r1, #4
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <run_complete_readout+0x78>)
 8001ac0:	f7ff ff4c 	bl	800195c <i2c_pt_measure_d2_temperature>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
    measurement.uncomp_temp = rx_buffer;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	4a04      	ldr	r2, [pc, #16]	; (8001adc <run_complete_readout+0x7c>)
 8001acc:	6013      	str	r3, [r2, #0]

    return(status);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000088 	.word	0x20000088
 8001adc:	20000278 	.word	0x20000278

08001ae0 <i2c_slv_cmd_rx_tx_handle>:
//************************************
//            I2C Slave
//************************************

bool i2c_slv_cmd_rx_tx_handle(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0
	bool status = EXIT_SUCCESS;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	// SOME FUNCTION HERE TO HANDLE RX/TX
	switch(i2c_slv_rx.bytes.cmd)
 8001aec:	4bdc      	ldr	r3, [pc, #880]	; (8001e60 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001aee:	78db      	ldrb	r3, [r3, #3]
 8001af0:	3b21      	subs	r3, #33	; 0x21
 8001af2:	2b93      	cmp	r3, #147	; 0x93
 8001af4:	f200 86c1 	bhi.w	800287a <i2c_slv_cmd_rx_tx_handle+0xd9a>
 8001af8:	a201      	add	r2, pc, #4	; (adr r2, 8001b00 <i2c_slv_cmd_rx_tx_handle+0x20>)
 8001afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afe:	bf00      	nop
 8001b00:	08001d51 	.word	0x08001d51
 8001b04:	08001d9b 	.word	0x08001d9b
 8001b08:	0800287b 	.word	0x0800287b
 8001b0c:	0800287b 	.word	0x0800287b
 8001b10:	0800287b 	.word	0x0800287b
 8001b14:	0800287b 	.word	0x0800287b
 8001b18:	0800287b 	.word	0x0800287b
 8001b1c:	0800287b 	.word	0x0800287b
 8001b20:	0800287b 	.word	0x0800287b
 8001b24:	0800287b 	.word	0x0800287b
 8001b28:	0800287b 	.word	0x0800287b
 8001b2c:	0800287b 	.word	0x0800287b
 8001b30:	0800287b 	.word	0x0800287b
 8001b34:	0800287b 	.word	0x0800287b
 8001b38:	0800287b 	.word	0x0800287b
 8001b3c:	0800287b 	.word	0x0800287b
 8001b40:	0800287b 	.word	0x0800287b
 8001b44:	0800287b 	.word	0x0800287b
 8001b48:	0800287b 	.word	0x0800287b
 8001b4c:	0800287b 	.word	0x0800287b
 8001b50:	0800287b 	.word	0x0800287b
 8001b54:	0800287b 	.word	0x0800287b
 8001b58:	0800287b 	.word	0x0800287b
 8001b5c:	0800287b 	.word	0x0800287b
 8001b60:	0800287b 	.word	0x0800287b
 8001b64:	0800287b 	.word	0x0800287b
 8001b68:	0800287b 	.word	0x0800287b
 8001b6c:	0800287b 	.word	0x0800287b
 8001b70:	0800287b 	.word	0x0800287b
 8001b74:	0800287b 	.word	0x0800287b
 8001b78:	0800287b 	.word	0x0800287b
 8001b7c:	080021bb 	.word	0x080021bb
 8001b80:	0800225b 	.word	0x0800225b
 8001b84:	080022c5 	.word	0x080022c5
 8001b88:	0800230b 	.word	0x0800230b
 8001b8c:	08002351 	.word	0x08002351
 8001b90:	0800287b 	.word	0x0800287b
 8001b94:	0800287b 	.word	0x0800287b
 8001b98:	0800287b 	.word	0x0800287b
 8001b9c:	0800287b 	.word	0x0800287b
 8001ba0:	0800287b 	.word	0x0800287b
 8001ba4:	0800287b 	.word	0x0800287b
 8001ba8:	0800287b 	.word	0x0800287b
 8001bac:	0800287b 	.word	0x0800287b
 8001bb0:	0800287b 	.word	0x0800287b
 8001bb4:	0800287b 	.word	0x0800287b
 8001bb8:	0800287b 	.word	0x0800287b
 8001bbc:	0800287b 	.word	0x0800287b
 8001bc0:	0800287b 	.word	0x0800287b
 8001bc4:	0800287b 	.word	0x0800287b
 8001bc8:	0800287b 	.word	0x0800287b
 8001bcc:	0800287b 	.word	0x0800287b
 8001bd0:	0800287b 	.word	0x0800287b
 8001bd4:	0800287b 	.word	0x0800287b
 8001bd8:	0800287b 	.word	0x0800287b
 8001bdc:	0800287b 	.word	0x0800287b
 8001be0:	0800287b 	.word	0x0800287b
 8001be4:	0800287b 	.word	0x0800287b
 8001be8:	0800287b 	.word	0x0800287b
 8001bec:	0800287b 	.word	0x0800287b
 8001bf0:	0800287b 	.word	0x0800287b
 8001bf4:	0800287b 	.word	0x0800287b
 8001bf8:	0800287b 	.word	0x0800287b
 8001bfc:	080023c7 	.word	0x080023c7
 8001c00:	08002467 	.word	0x08002467
 8001c04:	0800260d 	.word	0x0800260d
 8001c08:	08002653 	.word	0x08002653
 8001c0c:	08002699 	.word	0x08002699
 8001c10:	080024d1 	.word	0x080024d1
 8001c14:	08002517 	.word	0x08002517
 8001c18:	08002567 	.word	0x08002567
 8001c1c:	080025ad 	.word	0x080025ad
 8001c20:	080026f9 	.word	0x080026f9
 8001c24:	0800287b 	.word	0x0800287b
 8001c28:	0800287b 	.word	0x0800287b
 8001c2c:	0800287b 	.word	0x0800287b
 8001c30:	0800287b 	.word	0x0800287b
 8001c34:	0800287b 	.word	0x0800287b
 8001c38:	0800287b 	.word	0x0800287b
 8001c3c:	0800287b 	.word	0x0800287b
 8001c40:	0800287b 	.word	0x0800287b
 8001c44:	0800287b 	.word	0x0800287b
 8001c48:	0800287b 	.word	0x0800287b
 8001c4c:	0800287b 	.word	0x0800287b
 8001c50:	0800287b 	.word	0x0800287b
 8001c54:	0800287b 	.word	0x0800287b
 8001c58:	0800287b 	.word	0x0800287b
 8001c5c:	0800287b 	.word	0x0800287b
 8001c60:	0800287b 	.word	0x0800287b
 8001c64:	0800287b 	.word	0x0800287b
 8001c68:	0800287b 	.word	0x0800287b
 8001c6c:	0800287b 	.word	0x0800287b
 8001c70:	0800287b 	.word	0x0800287b
 8001c74:	0800287b 	.word	0x0800287b
 8001c78:	0800287b 	.word	0x0800287b
 8001c7c:	08001de5 	.word	0x08001de5
 8001c80:	08001f99 	.word	0x08001f99
 8001c84:	08001fe3 	.word	0x08001fe3
 8001c88:	0800287b 	.word	0x0800287b
 8001c8c:	0800202d 	.word	0x0800202d
 8001c90:	08002077 	.word	0x08002077
 8001c94:	08001e71 	.word	0x08001e71
 8001c98:	08001ebb 	.word	0x08001ebb
 8001c9c:	08001f05 	.word	0x08001f05
 8001ca0:	08001f4f 	.word	0x08001f4f
 8001ca4:	080020df 	.word	0x080020df
 8001ca8:	08002157 	.word	0x08002157
 8001cac:	0800287b 	.word	0x0800287b
 8001cb0:	0800287b 	.word	0x0800287b
 8001cb4:	0800287b 	.word	0x0800287b
 8001cb8:	0800287b 	.word	0x0800287b
 8001cbc:	0800287b 	.word	0x0800287b
 8001cc0:	0800287b 	.word	0x0800287b
 8001cc4:	0800287b 	.word	0x0800287b
 8001cc8:	0800287b 	.word	0x0800287b
 8001ccc:	0800287b 	.word	0x0800287b
 8001cd0:	0800287b 	.word	0x0800287b
 8001cd4:	0800287b 	.word	0x0800287b
 8001cd8:	0800287b 	.word	0x0800287b
 8001cdc:	0800287b 	.word	0x0800287b
 8001ce0:	0800287b 	.word	0x0800287b
 8001ce4:	0800287b 	.word	0x0800287b
 8001ce8:	0800287b 	.word	0x0800287b
 8001cec:	0800287b 	.word	0x0800287b
 8001cf0:	0800287b 	.word	0x0800287b
 8001cf4:	0800287b 	.word	0x0800287b
 8001cf8:	0800287b 	.word	0x0800287b
 8001cfc:	0800272f 	.word	0x0800272f
 8001d00:	0800287b 	.word	0x0800287b
 8001d04:	0800287b 	.word	0x0800287b
 8001d08:	0800287b 	.word	0x0800287b
 8001d0c:	0800287b 	.word	0x0800287b
 8001d10:	0800287b 	.word	0x0800287b
 8001d14:	0800287b 	.word	0x0800287b
 8001d18:	0800287b 	.word	0x0800287b
 8001d1c:	0800287b 	.word	0x0800287b
 8001d20:	0800287b 	.word	0x0800287b
 8001d24:	0800287b 	.word	0x0800287b
 8001d28:	0800287b 	.word	0x0800287b
 8001d2c:	0800287b 	.word	0x0800287b
 8001d30:	0800287b 	.word	0x0800287b
 8001d34:	0800287b 	.word	0x0800287b
 8001d38:	0800287b 	.word	0x0800287b
 8001d3c:	0800287b 	.word	0x0800287b
 8001d40:	080027a3 	.word	0x080027a3
 8001d44:	080027db 	.word	0x080027db
 8001d48:	08002811 	.word	0x08002811
 8001d4c:	08002847 	.word	0x08002847
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------

		case(CMD_FPGA_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001d50:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d52:	789b      	ldrb	r3, [r3, #2]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d110      	bne.n	8001d7a <i2c_slv_cmd_rx_tx_handle+0x29a>
			{
				uint16_t dataread = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	80bb      	strh	r3, [r7, #4]
				dataread = max6911_read(&hi2c3, ADDR_FPGA_MAX6911_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	2202      	movs	r2, #2
 8001d60:	21f2      	movs	r1, #242	; 0xf2
 8001d62:	4840      	ldr	r0, [pc, #256]	; (8001e64 <i2c_slv_cmd_rx_tx_handle+0x384>)
 8001d64:	f7fe ff6a 	bl	8000c3c <max6911_read>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	80bb      	strh	r3, [r7, #4]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001d6c:	4a3e      	ldr	r2, [pc, #248]	; (8001e68 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d6e:	88bb      	ldrh	r3, [r7, #4]
 8001d70:	8013      	strh	r3, [r2, #0]

				return(status);
 8001d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d76:	f000 bdd9 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001d7a:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d7c:	789b      	ldrb	r3, [r3, #2]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 8581 	bne.w	8002886 <i2c_slv_cmd_rx_tx_handle+0xda6>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001d84:	4b38      	ldr	r3, [pc, #224]	; (8001e68 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d8a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d96:	f000 bdc9 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
		case(CMD_FPGA_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001d9a:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001d9c:	789b      	ldrb	r3, [r3, #2]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d110      	bne.n	8001dc4 <i2c_slv_cmd_rx_tx_handle+0x2e4>
			{
				uint16_t dataread = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	80fb      	strh	r3, [r7, #6]
				dataread = max6911_read(&hi2c3, ADDR_FPGA_MAX6911_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001da6:	2301      	movs	r3, #1
 8001da8:	2200      	movs	r2, #0
 8001daa:	21f2      	movs	r1, #242	; 0xf2
 8001dac:	482d      	ldr	r0, [pc, #180]	; (8001e64 <i2c_slv_cmd_rx_tx_handle+0x384>)
 8001dae:	f7fe ff45 	bl	8000c3c <max6911_read>
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001db6:	4a2c      	ldr	r2, [pc, #176]	; (8001e68 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001db8:	88fb      	ldrh	r3, [r7, #6]
 8001dba:	8013      	strh	r3, [r2, #0]

				return(status);
 8001dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dc0:	f000 bdb4 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001dc4:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001dc6:	789b      	ldrb	r3, [r3, #2]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 855e 	bne.w	800288a <i2c_slv_cmd_rx_tx_handle+0xdaa>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001de0:	f000 bda4 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		//                     UCD Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001de6:	789b      	ldrb	r3, [r3, #2]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10d      	bne.n	8001e08 <i2c_slv_cmd_rx_tx_handle+0x328>
			{
				ucd_detector.board_enable_state = (uint16_t)ucd_board_enable_get(); // Read the state enable pin
 8001dec:	f7ff fa88 	bl	8001300 <ucd_board_enable_get>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <i2c_slv_cmd_rx_tx_handle+0x38c>)
 8001df6:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = ucd_detector.board_enable_state; 					// Prepare the date into the transmit
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <i2c_slv_cmd_rx_tx_handle+0x38c>)
 8001dfa:	8a1a      	ldrh	r2, [r3, #16]
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001dfe:	801a      	strh	r2, [r3, #0]
				return(status);
 8001e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e04:	f000 bd92 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001e0a:	789b      	ldrb	r3, [r3, #2]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f040 853e 	bne.w	800288e <i2c_slv_cmd_rx_tx_handle+0xdae>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 8001e12:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d109      	bne.n	8001e2e <i2c_slv_cmd_rx_tx_handle+0x34e>
				{
					ucd_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f7ff fa58 	bl	80012d0 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	801a      	strh	r2, [r3, #0]
					return(status);
 8001e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e2a:	f000 bd7f 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <i2c_slv_cmd_rx_tx_handle+0x380>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <i2c_slv_cmd_rx_tx_handle+0x36a>
				{
					ucd_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8001e36:	2000      	movs	r0, #0
 8001e38:	f7ff fa4a 	bl	80012d0 <ucd_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	801a      	strh	r2, [r3, #0]
					return(status);
 8001e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e46:	f000 bd71 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <i2c_slv_cmd_rx_tx_handle+0x388>)
 8001e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e50:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001e58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e5c:	f000 bd66 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
 8001e60:	20000270 	.word	0x20000270
 8001e64:	200000dc 	.word	0x200000dc
 8001e68:	20000274 	.word	0x20000274
 8001e6c:	20000208 	.word	0x20000208
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001e70:	4ba1      	ldr	r3, [pc, #644]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001e72:	789b      	ldrb	r3, [r3, #2]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d110      	bne.n	8001e9a <i2c_slv_cmd_rx_tx_handle+0x3ba>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	84bb      	strh	r3, [r7, #36]	; 0x24
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	2202      	movs	r2, #2
 8001e80:	21e4      	movs	r1, #228	; 0xe4
 8001e82:	489e      	ldr	r0, [pc, #632]	; (80020fc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001e84:	f7fe feda 	bl	8000c3c <max6911_read>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	84bb      	strh	r3, [r7, #36]	; 0x24

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001e8c:	4a9c      	ldr	r2, [pc, #624]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e90:	8013      	strh	r3, [r2, #0]

				return(status);
 8001e92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e96:	f000 bd49 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001e9a:	4b97      	ldr	r3, [pc, #604]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001e9c:	789b      	ldrb	r3, [r3, #2]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 8504 	bne.w	80028ac <i2c_slv_cmd_rx_tx_handle+0xdcc>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001ea4:	4b96      	ldr	r3, [pc, #600]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eaa:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001eb6:	f000 bd39 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_AVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001eba:	4b8f      	ldr	r3, [pc, #572]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001ebc:	789b      	ldrb	r3, [r3, #2]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d110      	bne.n	8001ee4 <i2c_slv_cmd_rx_tx_handle+0x404>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	84fb      	strh	r3, [r7, #38]	; 0x26
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_AVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	2200      	movs	r2, #0
 8001eca:	21e4      	movs	r1, #228	; 0xe4
 8001ecc:	488b      	ldr	r0, [pc, #556]	; (80020fc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001ece:	f7fe feb5 	bl	8000c3c <max6911_read>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	84fb      	strh	r3, [r7, #38]	; 0x26

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001ed6:	4a8a      	ldr	r2, [pc, #552]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001ed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001eda:	8013      	strh	r3, [r2, #0]

				return(status);
 8001edc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ee0:	f000 bd24 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001ee4:	4b84      	ldr	r3, [pc, #528]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001ee6:	789b      	ldrb	r3, [r3, #2]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 84e1 	bne.w	80028b0 <i2c_slv_cmd_rx_tx_handle+0xdd0>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001eee:	4b84      	ldr	r3, [pc, #528]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001ef0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ef4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001efc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f00:	f000 bd14 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_DVDD_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001f04:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001f06:	789b      	ldrb	r3, [r3, #2]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d110      	bne.n	8001f2e <i2c_slv_cmd_rx_tx_handle+0x44e>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	853b      	strh	r3, [r7, #40]	; 0x28
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_DVDD, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001f10:	2303      	movs	r3, #3
 8001f12:	2202      	movs	r2, #2
 8001f14:	21e2      	movs	r1, #226	; 0xe2
 8001f16:	4879      	ldr	r0, [pc, #484]	; (80020fc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f18:	f7fe fe90 	bl	8000c3c <max6911_read>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	853b      	strh	r3, [r7, #40]	; 0x28

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001f20:	4a77      	ldr	r2, [pc, #476]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001f22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f24:	8013      	strh	r3, [r2, #0]

				return(status);
 8001f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f2a:	f000 bcff 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001f2e:	4b72      	ldr	r3, [pc, #456]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001f30:	789b      	ldrb	r3, [r3, #2]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 84be 	bne.w	80028b4 <i2c_slv_cmd_rx_tx_handle+0xdd4>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001f38:	4b71      	ldr	r3, [pc, #452]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3e:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001f46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f4a:	f000 bcef 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_DVDD_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001f50:	789b      	ldrb	r3, [r3, #2]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d110      	bne.n	8001f78 <i2c_slv_cmd_rx_tx_handle+0x498>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	857b      	strh	r3, [r7, #42]	; 0x2a
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_DVDD, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	21e2      	movs	r1, #226	; 0xe2
 8001f60:	4866      	ldr	r0, [pc, #408]	; (80020fc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001f62:	f7fe fe6b 	bl	8000c3c <max6911_read>
 8001f66:	4603      	mov	r3, r0
 8001f68:	857b      	strh	r3, [r7, #42]	; 0x2a

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001f6a:	4a65      	ldr	r2, [pc, #404]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001f6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f6e:	8013      	strh	r3, [r2, #0]

				return(status);
 8001f70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f74:	f000 bcda 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001f78:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001f7a:	789b      	ldrb	r3, [r3, #2]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	f040 849b 	bne.w	80028b8 <i2c_slv_cmd_rx_tx_handle+0xdd8>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001f82:	4b5f      	ldr	r3, [pc, #380]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f88:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f94:	f000 bcca 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_POSITIVE_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001f98:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001f9a:	789b      	ldrb	r3, [r3, #2]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d110      	bne.n	8001fc2 <i2c_slv_cmd_rx_tx_handle+0x4e2>
			{
				uint16_t dataread = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	83bb      	strh	r3, [r7, #28]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_POSI, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	21e8      	movs	r1, #232	; 0xe8
 8001faa:	4854      	ldr	r0, [pc, #336]	; (80020fc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001fac:	f7fe fe46 	bl	8000c3c <max6911_read>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	83bb      	strh	r3, [r7, #28]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001fb4:	4a52      	ldr	r2, [pc, #328]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001fb6:	8bbb      	ldrh	r3, [r7, #28]
 8001fb8:	8013      	strh	r3, [r2, #0]

				return(status);
 8001fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fbe:	f000 bcb5 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8001fc2:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001fc4:	789b      	ldrb	r3, [r3, #2]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 8478 	bne.w	80028bc <i2c_slv_cmd_rx_tx_handle+0xddc>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8001fcc:	4b4c      	ldr	r3, [pc, #304]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8001fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fd2:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8001fda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fde:	f000 bca5 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_NEGITIVE_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8001fe2:	4b45      	ldr	r3, [pc, #276]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8001fe4:	789b      	ldrb	r3, [r3, #2]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d110      	bne.n	800200c <i2c_slv_cmd_rx_tx_handle+0x52c>
			{
				uint16_t dataread = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	83fb      	strh	r3, [r7, #30]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_NEGI, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8001fee:	2303      	movs	r3, #3
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	21e6      	movs	r1, #230	; 0xe6
 8001ff4:	4841      	ldr	r0, [pc, #260]	; (80020fc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8001ff6:	f7fe fe21 	bl	8000c3c <max6911_read>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	83fb      	strh	r3, [r7, #30]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8002000:	8bfb      	ldrh	r3, [r7, #30]
 8002002:	8013      	strh	r3, [r2, #0]

				return(status);
 8002004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002008:	f000 bc90 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800200c:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 800200e:	789b      	ldrb	r3, [r3, #2]
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 8455 	bne.w	80028c0 <i2c_slv_cmd_rx_tx_handle+0xde0>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002016:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8002018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201c:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002028:	f000 bc80 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 800202e:	789b      	ldrb	r3, [r3, #2]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d110      	bne.n	8002056 <i2c_slv_cmd_rx_tx_handle+0x576>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	843b      	strh	r3, [r7, #32]
				dataread = max6911_read(&hi2c3, ADDR_UCD_MAX9611_BCUR, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8002038:	2301      	movs	r3, #1
 800203a:	2200      	movs	r2, #0
 800203c:	21e8      	movs	r1, #232	; 0xe8
 800203e:	482f      	ldr	r0, [pc, #188]	; (80020fc <i2c_slv_cmd_rx_tx_handle+0x61c>)
 8002040:	f7fe fdfc 	bl	8000c3c <max6911_read>
 8002044:	4603      	mov	r3, r0
 8002046:	843b      	strh	r3, [r7, #32]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8002048:	4a2d      	ldr	r2, [pc, #180]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 800204a:	8c3b      	ldrh	r3, [r7, #32]
 800204c:	8013      	strh	r3, [r2, #0]

				return(status);
 800204e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002052:	f000 bc6b 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8002058:	789b      	ldrb	r3, [r3, #2]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f040 8432 	bne.w	80028c4 <i2c_slv_cmd_rx_tx_handle+0xde4>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8002062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002066:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800206e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002072:	f000 bc5b 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_BIAS_CTL):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8002078:	789b      	ldrb	r3, [r3, #2]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <i2c_slv_cmd_rx_tx_handle+0x5ae>
			{
				i2c_slv_tx.data = ucd_detector.voltage_target; 						// Prepare the date into the transmit
 800207e:	4b21      	ldr	r3, [pc, #132]	; (8002104 <i2c_slv_cmd_rx_tx_handle+0x624>)
 8002080:	895a      	ldrh	r2, [r3, #10]
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 8002084:	801a      	strh	r2, [r3, #0]
				return(status);
 8002086:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800208a:	f000 bc4f 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 8002090:	789b      	ldrb	r3, [r3, #2]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 8418 	bne.w	80028c8 <i2c_slv_cmd_rx_tx_handle+0xde8>
			{
				// Read the data from the buffer
				ucd_detector.voltage_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21a      	sxth	r2, r3
												 i2c_slv_rx.bytes.data_byte_lsb;
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	b21b      	sxth	r3, r3
				ucd_detector.voltage_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <i2c_slv_cmd_rx_tx_handle+0x624>)
 80020ae:	815a      	strh	r2, [r3, #10]

				HAL_StatusTypeDef status = dac7574_write(UCD_DAC_VBIAS_INDEX, ucd_detector.voltage_target);
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <i2c_slv_cmd_rx_tx_handle+0x624>)
 80020b2:	895b      	ldrh	r3, [r3, #10]
 80020b4:	4619      	mov	r1, r3
 80020b6:	2010      	movs	r0, #16
 80020b8:	f7fe fd90 	bl	8000bdc <dac7574_write>
 80020bc:	4603      	mov	r3, r0
 80020be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

				i2c_slv_tx.data = status;
 80020c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 80020ca:	801a      	strh	r2, [r3, #0]
				return(status);
 80020cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f000 bc27 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_MBIAS_1_CTRL):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <i2c_slv_cmd_rx_tx_handle+0x618>)
 80020e0:	789b      	ldrb	r3, [r3, #2]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d110      	bne.n	8002108 <i2c_slv_cmd_rx_tx_handle+0x628>
			{
				i2c_slv_tx.data = ucd_detector.mbias_1_target; 						// Prepare the date into the transmit
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <i2c_slv_cmd_rx_tx_handle+0x624>)
 80020e8:	899a      	ldrh	r2, [r3, #12]
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <i2c_slv_cmd_rx_tx_handle+0x620>)
 80020ec:	801a      	strh	r2, [r3, #0]
				return(status);
 80020ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020f2:	f000 bc1b 	b.w	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
 80020f6:	bf00      	nop
 80020f8:	20000270 	.word	0x20000270
 80020fc:	200000dc 	.word	0x200000dc
 8002100:	20000274 	.word	0x20000274
 8002104:	20000208 	.word	0x20000208
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002108:	4b97      	ldr	r3, [pc, #604]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800210a:	789b      	ldrb	r3, [r3, #2]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 83dd 	bne.w	80028cc <i2c_slv_cmd_rx_tx_handle+0xdec>
			{
				// Read the data from the buffer
				ucd_detector.mbias_1_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002112:	4b95      	ldr	r3, [pc, #596]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002114:	785b      	ldrb	r3, [r3, #1]
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	b21a      	sxth	r2, r3
												 i2c_slv_rx.bytes.data_byte_lsb;
 800211a:	4b93      	ldr	r3, [pc, #588]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b21b      	sxth	r3, r3
				ucd_detector.mbias_1_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002120:	4313      	orrs	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	b29a      	uxth	r2, r3
 8002126:	4b91      	ldr	r3, [pc, #580]	; (800236c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002128:	819a      	strh	r2, [r3, #12]

				HAL_StatusTypeDef status = dac7574_write(UCD_DAC_MBIAS_1_INDEX, ucd_detector.mbias_1_target);
 800212a:	4b90      	ldr	r3, [pc, #576]	; (800236c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 800212c:	899b      	ldrh	r3, [r3, #12]
 800212e:	4619      	mov	r1, r3
 8002130:	2012      	movs	r0, #18
 8002132:	f7fe fd53 	bl	8000bdc <dac7574_write>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				i2c_slv_tx.data = status;
 800213c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b8b      	ldr	r3, [pc, #556]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002144:	801a      	strh	r2, [r3, #0]
				return(status);
 8002146:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800214a:	2b00      	cmp	r3, #0
 800214c:	bf14      	ite	ne
 800214e:	2301      	movne	r3, #1
 8002150:	2300      	moveq	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	e3ea      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_UCD_MBIAS_2_CTRL):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002156:	4b84      	ldr	r3, [pc, #528]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002158:	789b      	ldrb	r3, [r3, #2]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d106      	bne.n	800216c <i2c_slv_cmd_rx_tx_handle+0x68c>
			{
				i2c_slv_tx.data = ucd_detector.mbias_2_target; 						// Prepare the date into the transmit
 800215e:	4b83      	ldr	r3, [pc, #524]	; (800236c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002160:	89da      	ldrh	r2, [r3, #14]
 8002162:	4b83      	ldr	r3, [pc, #524]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002164:	801a      	strh	r2, [r3, #0]
				return(status);
 8002166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800216a:	e3df      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800216c:	4b7e      	ldr	r3, [pc, #504]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800216e:	789b      	ldrb	r3, [r3, #2]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 83ad 	bne.w	80028d0 <i2c_slv_cmd_rx_tx_handle+0xdf0>
			{
				// Read the data from the buffer
				ucd_detector.mbias_2_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002176:	4b7c      	ldr	r3, [pc, #496]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002178:	785b      	ldrb	r3, [r3, #1]
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	b21a      	sxth	r2, r3
												 i2c_slv_rx.bytes.data_byte_lsb;
 800217e:	4b7a      	ldr	r3, [pc, #488]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b21b      	sxth	r3, r3
				ucd_detector.mbias_2_target =   (i2c_slv_rx.bytes.data_byte_msb << 8) |
 8002184:	4313      	orrs	r3, r2
 8002186:	b21b      	sxth	r3, r3
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b78      	ldr	r3, [pc, #480]	; (800236c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 800218c:	81da      	strh	r2, [r3, #14]

				HAL_StatusTypeDef status = dac7574_write(UCD_DAC_MBIAS_2_INDEX, ucd_detector.mbias_2_target);
 800218e:	4b77      	ldr	r3, [pc, #476]	; (800236c <i2c_slv_cmd_rx_tx_handle+0x88c>)
 8002190:	89db      	ldrh	r3, [r3, #14]
 8002192:	4619      	mov	r1, r3
 8002194:	2014      	movs	r0, #20
 8002196:	f7fe fd21 	bl	8000bdc <dac7574_write>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

				i2c_slv_tx.data = status;
 80021a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b72      	ldr	r3, [pc, #456]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 80021a8:	801a      	strh	r2, [r3, #0]
				return(status);
 80021aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	e3b8      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
    	//                     CEA Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80021ba:	4b6b      	ldr	r3, [pc, #428]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 80021bc:	789b      	ldrb	r3, [r3, #2]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10c      	bne.n	80021dc <i2c_slv_cmd_rx_tx_handle+0x6fc>
			{
				cea_detector.board_enable_state = (uint16_t)cea_board_enable_get(); // Read the state enable pin
 80021c2:	f7ff fa85 	bl	80016d0 <cea_board_enable_get>
 80021c6:	4603      	mov	r3, r0
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b6a      	ldr	r3, [pc, #424]	; (8002374 <i2c_slv_cmd_rx_tx_handle+0x894>)
 80021cc:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = cea_detector.board_enable_state; 					// Prepare the date into the transmit
 80021ce:	4b69      	ldr	r3, [pc, #420]	; (8002374 <i2c_slv_cmd_rx_tx_handle+0x894>)
 80021d0:	8a1a      	ldrh	r2, [r3, #16]
 80021d2:	4b67      	ldr	r3, [pc, #412]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 80021d4:	801a      	strh	r2, [r3, #0]
				return(status);
 80021d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021da:	e3a7      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80021dc:	4b62      	ldr	r3, [pc, #392]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 80021de:	789b      	ldrb	r3, [r3, #2]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f040 8377 	bne.w	80028d4 <i2c_slv_cmd_rx_tx_handle+0xdf4>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 80021e6:	4b60      	ldr	r3, [pc, #384]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d11e      	bne.n	800222c <i2c_slv_cmd_rx_tx_handle+0x74c>
				{
					bool enable_status = cea_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 80021ee:	2001      	movs	r0, #1
 80021f0:	f7ff fa10 	bl	8001614 <cea_board_enable_set>
 80021f4:	4603      	mov	r3, r0
 80021f6:	727b      	strb	r3, [r7, #9]
					if(enable_status == EXIT_SUCCESS)
 80021f8:	7a7b      	ldrb	r3, [r7, #9]
 80021fa:	f083 0301 	eor.w	r3, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d006      	beq.n	8002212 <i2c_slv_cmd_rx_tx_handle+0x732>
					{
						i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002204:	4b5a      	ldr	r3, [pc, #360]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002206:	2201      	movs	r2, #1
 8002208:	801a      	strh	r2, [r3, #0]
						status =  EXIT_SUCCESS;
 800220a:	2300      	movs	r3, #0
 800220c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002210:	e009      	b.n	8002226 <i2c_slv_cmd_rx_tx_handle+0x746>
					}
					else if (enable_status == EXIT_FAILURE)
 8002212:	7a7b      	ldrb	r3, [r7, #9]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <i2c_slv_cmd_rx_tx_handle+0x746>
					{
						status =  EXIT_FAILURE;
 8002218:	2301      	movs	r3, #1
 800221a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800221e:	4b54      	ldr	r3, [pc, #336]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002224:	801a      	strh	r2, [r3, #0]
					}
					return(status);
 8002226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800222a:	e37f      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 800222c:	4b4e      	ldr	r3, [pc, #312]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d108      	bne.n	8002246 <i2c_slv_cmd_rx_tx_handle+0x766>
				{
					cea_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff f9ed 	bl	8001614 <cea_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800223a:	4b4d      	ldr	r3, [pc, #308]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 800223c:	2201      	movs	r2, #1
 800223e:	801a      	strh	r2, [r3, #0]
					return(status);
 8002240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002244:	e372      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002246:	4b4a      	ldr	r3, [pc, #296]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224c:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002258:	e368      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800225a:	4b43      	ldr	r3, [pc, #268]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800225c:	789b      	ldrb	r3, [r3, #2]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d107      	bne.n	8002272 <i2c_slv_cmd_rx_tx_handle+0x792>
			{
				i2c_slv_tx.data = cea_detector.hv_loop_enable; 						// Prepare the date into the transmit
 8002262:	4b44      	ldr	r3, [pc, #272]	; (8002374 <i2c_slv_cmd_rx_tx_handle+0x894>)
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	b29a      	uxth	r2, r3
 8002268:	4b41      	ldr	r3, [pc, #260]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 800226a:	801a      	strh	r2, [r3, #0]
				return(status);
 800226c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002270:	e35c      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002274:	789b      	ldrb	r3, [r3, #2]
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 832e 	bne.w	80028d8 <i2c_slv_cmd_rx_tx_handle+0xdf8>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <i2c_slv_cmd_rx_tx_handle+0x7b6>
				{
					cea_detector.hv_loop_enable = true;								// Set the state of the flag
 8002284:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <i2c_slv_cmd_rx_tx_handle+0x894>)
 8002286:	2201      	movs	r2, #1
 8002288:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 800228a:	4b39      	ldr	r3, [pc, #228]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 800228c:	2201      	movs	r2, #1
 800228e:	801a      	strh	r2, [r3, #0]
					return(status);
 8002290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002294:	e34a      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 8002296:	4b34      	ldr	r3, [pc, #208]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d108      	bne.n	80022b0 <i2c_slv_cmd_rx_tx_handle+0x7d0>
				{
					cea_detector.hv_loop_enable = false;						    // Set the state of the flag
 800229e:	4b35      	ldr	r3, [pc, #212]	; (8002374 <i2c_slv_cmd_rx_tx_handle+0x894>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	801a      	strh	r2, [r3, #0]
					return(status);
 80022aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022ae:	e33d      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80022b0:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 80022b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b6:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80022be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022c2:	e333      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 80022c6:	789b      	ldrb	r3, [r3, #2]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d10f      	bne.n	80022ec <i2c_slv_cmd_rx_tx_handle+0x80c>
			{
				uint16_t dataread = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	817b      	strh	r3, [r7, #10]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80022d0:	2303      	movs	r3, #3
 80022d2:	2202      	movs	r2, #2
 80022d4:	21ee      	movs	r1, #238	; 0xee
 80022d6:	4828      	ldr	r0, [pc, #160]	; (8002378 <i2c_slv_cmd_rx_tx_handle+0x898>)
 80022d8:	f7fe fcb0 	bl	8000c3c <max6911_read>
 80022dc:	4603      	mov	r3, r0
 80022de:	817b      	strh	r3, [r7, #10]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80022e0:	4a23      	ldr	r2, [pc, #140]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	8013      	strh	r3, [r2, #0]

				return(status);
 80022e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022ea:	e31f      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80022ec:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 80022ee:	789b      	ldrb	r3, [r3, #2]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 82f3 	bne.w	80028dc <i2c_slv_cmd_rx_tx_handle+0xdfc>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80022f6:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 80022f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022fc:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80022fe:	2301      	movs	r3, #1
 8002300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002308:	e310      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 800230c:	789b      	ldrb	r3, [r3, #2]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d10f      	bne.n	8002332 <i2c_slv_cmd_rx_tx_handle+0x852>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	81bb      	strh	r3, [r7, #12]
				dataread = max6911_read(&hi2c3, ADDR_CEA_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8002316:	2301      	movs	r3, #1
 8002318:	2200      	movs	r2, #0
 800231a:	21f0      	movs	r1, #240	; 0xf0
 800231c:	4816      	ldr	r0, [pc, #88]	; (8002378 <i2c_slv_cmd_rx_tx_handle+0x898>)
 800231e:	f7fe fc8d 	bl	8000c3c <max6911_read>
 8002322:	4603      	mov	r3, r0
 8002324:	81bb      	strh	r3, [r7, #12]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8002326:	4a12      	ldr	r2, [pc, #72]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 8002328:	89bb      	ldrh	r3, [r7, #12]
 800232a:	8013      	strh	r3, [r2, #0]

				return(status);
 800232c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002330:	e2fc      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f040 82d2 	bne.w	80028e0 <i2c_slv_cmd_rx_tx_handle+0xe00>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 800233e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002342:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002344:	2301      	movs	r3, #1
 8002346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800234a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800234e:	e2ed      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_CEA_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <i2c_slv_cmd_rx_tx_handle+0x888>)
 8002352:	789b      	ldrb	r3, [r3, #2]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d111      	bne.n	800237c <i2c_slv_cmd_rx_tx_handle+0x89c>
			{
				i2c_slv_tx.data = cea_detector.hv_targate_value;        // Prepare the date into the transmit
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <i2c_slv_cmd_rx_tx_handle+0x894>)
 800235a:	891a      	ldrh	r2, [r3, #8]
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <i2c_slv_cmd_rx_tx_handle+0x890>)
 800235e:	801a      	strh	r2, [r3, #0]
				return(status);
 8002360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002364:	e2e2      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
 8002366:	bf00      	nop
 8002368:	20000270 	.word	0x20000270
 800236c:	20000208 	.word	0x20000208
 8002370:	20000274 	.word	0x20000274
 8002374:	20000230 	.word	0x20000230
 8002378:	200000dc 	.word	0x200000dc
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800237c:	4b9d      	ldr	r3, [pc, #628]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 800237e:	789b      	ldrb	r3, [r3, #2]
 8002380:	2b00      	cmp	r3, #0
 8002382:	f040 82af 	bne.w	80028e4 <i2c_slv_cmd_rx_tx_handle+0xe04>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 8002386:	4b9b      	ldr	r3, [pc, #620]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002388:	785b      	ldrb	r3, [r3, #1]
 800238a:	2b0f      	cmp	r3, #15
 800238c:	d811      	bhi.n	80023b2 <i2c_slv_cmd_rx_tx_handle+0x8d2>
				{
					// Read the data from the buffer
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 800238e:	4b99      	ldr	r3, [pc, #612]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002390:	785b      	ldrb	r3, [r3, #1]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 8002396:	4b97      	ldr	r3, [pc, #604]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b21b      	sxth	r3, r3
					cea_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 800239c:	4313      	orrs	r3, r2
 800239e:	b21b      	sxth	r3, r3
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4b95      	ldr	r3, [pc, #596]	; (80025f8 <i2c_slv_cmd_rx_tx_handle+0xb18>)
 80023a4:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80023a6:	4b95      	ldr	r3, [pc, #596]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	801a      	strh	r2, [r3, #0]
					return(status);
 80023ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023b0:	e2bc      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80023b2:	4b92      	ldr	r3, [pc, #584]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 80023b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b8:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					return(status);
 80023c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023c4:	e2b2      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
    	//                     IJC Detector Commands
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80023c6:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 80023c8:	789b      	ldrb	r3, [r3, #2]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10c      	bne.n	80023e8 <i2c_slv_cmd_rx_tx_handle+0x908>
			{
				ijc_detector.board_enable_state = (uint16_t)ijc_board_enable_get(); // Read the state enable pin
 80023ce:	f7ff f88b 	bl	80014e8 <ijc_board_enable_get>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b8a      	ldr	r3, [pc, #552]	; (8002600 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 80023d8:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = ijc_detector.board_enable_state; 					// Prepare the date into the transmit
 80023da:	4b89      	ldr	r3, [pc, #548]	; (8002600 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 80023dc:	8a1a      	ldrh	r2, [r3, #16]
 80023de:	4b87      	ldr	r3, [pc, #540]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 80023e0:	801a      	strh	r2, [r3, #0]
				return(status);
 80023e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023e6:	e2a1      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80023e8:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 80023ea:	789b      	ldrb	r3, [r3, #2]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 827b 	bne.w	80028e8 <i2c_slv_cmd_rx_tx_handle+0xe08>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 80023f2:	4b80      	ldr	r3, [pc, #512]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d11e      	bne.n	8002438 <i2c_slv_cmd_rx_tx_handle+0x958>
				{
					bool enable_status = ijc_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7ff f816 	bl	800142c <ijc_board_enable_set>
 8002400:	4603      	mov	r3, r0
 8002402:	73fb      	strb	r3, [r7, #15]
					if(enable_status == EXIT_SUCCESS)
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	f083 0301 	eor.w	r3, r3, #1
 800240a:	b2db      	uxtb	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <i2c_slv_cmd_rx_tx_handle+0x93e>
					{
						i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002410:	4b7a      	ldr	r3, [pc, #488]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002412:	2201      	movs	r2, #1
 8002414:	801a      	strh	r2, [r3, #0]
						status =  EXIT_SUCCESS;
 8002416:	2300      	movs	r3, #0
 8002418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800241c:	e009      	b.n	8002432 <i2c_slv_cmd_rx_tx_handle+0x952>
					}
					else if (enable_status == EXIT_FAILURE)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <i2c_slv_cmd_rx_tx_handle+0x952>
					{
						status =  EXIT_FAILURE;
 8002424:	2301      	movs	r3, #1
 8002426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800242a:	4b74      	ldr	r3, [pc, #464]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 800242c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002430:	801a      	strh	r2, [r3, #0]
					}
					return(status);
 8002432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002436:	e279      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8002438:	4b6e      	ldr	r3, [pc, #440]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d108      	bne.n	8002452 <i2c_slv_cmd_rx_tx_handle+0x972>
				{
					ijc_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe fff3 	bl	800142c <ijc_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002446:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002448:	2201      	movs	r2, #1
 800244a:	801a      	strh	r2, [r3, #0]
					return(status);
 800244c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002450:	e26c      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002452:	4b6a      	ldr	r3, [pc, #424]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002454:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002458:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800245a:	2301      	movs	r3, #1
 800245c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002464:	e262      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_LOOP_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002466:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002468:	789b      	ldrb	r3, [r3, #2]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <i2c_slv_cmd_rx_tx_handle+0x99e>
			{
				i2c_slv_tx.data = ijc_detector.hv_loop_enable; 						// Prepare the date into the transmit
 800246e:	4b64      	ldr	r3, [pc, #400]	; (8002600 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 8002470:	785b      	ldrb	r3, [r3, #1]
 8002472:	b29a      	uxth	r2, r3
 8002474:	4b61      	ldr	r3, [pc, #388]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002476:	801a      	strh	r2, [r3, #0]
				return(status);
 8002478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800247c:	e256      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800247e:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002480:	789b      	ldrb	r3, [r3, #2]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 8232 	bne.w	80028ec <i2c_slv_cmd_rx_tx_handle+0xe0c>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == 1)
 8002488:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d108      	bne.n	80024a2 <i2c_slv_cmd_rx_tx_handle+0x9c2>
				{
					ijc_detector.hv_loop_enable = true;								// Set the state of the flag
 8002490:	4b5b      	ldr	r3, [pc, #364]	; (8002600 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 8002492:	2201      	movs	r2, #1
 8002494:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002496:	4b59      	ldr	r3, [pc, #356]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002498:	2201      	movs	r2, #1
 800249a:	801a      	strh	r2, [r3, #0]
					return(status);
 800249c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024a0:	e244      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == 0)
 80024a2:	4b54      	ldr	r3, [pc, #336]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <i2c_slv_cmd_rx_tx_handle+0x9dc>
				{
					ijc_detector.hv_loop_enable = false;						    // Set the state of the flag
 80024aa:	4b55      	ldr	r3, [pc, #340]	; (8002600 <i2c_slv_cmd_rx_tx_handle+0xb20>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	705a      	strb	r2, [r3, #1]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80024b0:	4b52      	ldr	r3, [pc, #328]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	801a      	strh	r2, [r3, #0]
					return(status);
 80024b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024ba:	e237      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80024bc:	4b4f      	ldr	r3, [pc, #316]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 80024be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024c2:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80024ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024ce:	e22d      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80024d0:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 80024d2:	789b      	ldrb	r3, [r3, #2]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d10f      	bne.n	80024f8 <i2c_slv_cmd_rx_tx_handle+0xa18>
			{
				uint16_t dataread = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	82bb      	strh	r3, [r7, #20]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 80024dc:	2303      	movs	r3, #3
 80024de:	2202      	movs	r2, #2
 80024e0:	21e0      	movs	r1, #224	; 0xe0
 80024e2:	4848      	ldr	r0, [pc, #288]	; (8002604 <i2c_slv_cmd_rx_tx_handle+0xb24>)
 80024e4:	f7fe fbaa 	bl	8000c3c <max6911_read>
 80024e8:	4603      	mov	r3, r0
 80024ea:	82bb      	strh	r3, [r7, #20]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80024ec:	4a43      	ldr	r2, [pc, #268]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 80024ee:	8abb      	ldrh	r3, [r7, #20]
 80024f0:	8013      	strh	r3, [r2, #0]

				return(status);
 80024f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024f6:	e219      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80024f8:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 80024fa:	789b      	ldrb	r3, [r3, #2]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 81f7 	bne.w	80028f0 <i2c_slv_cmd_rx_tx_handle+0xe10>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002502:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002508:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002514:	e20a      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_1_5_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002516:	4b37      	ldr	r3, [pc, #220]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002518:	789b      	ldrb	r3, [r3, #2]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10f      	bne.n	800253e <i2c_slv_cmd_rx_tx_handle+0xa5e>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	82fb      	strh	r3, [r7, #22]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_1_5, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 8002522:	2301      	movs	r3, #1
 8002524:	2200      	movs	r2, #0
 8002526:	21e0      	movs	r1, #224	; 0xe0
 8002528:	4836      	ldr	r0, [pc, #216]	; (8002604 <i2c_slv_cmd_rx_tx_handle+0xb24>)
 800252a:	f7fe fb87 	bl	8000c3c <max6911_read>
 800252e:	4603      	mov	r3, r0
 8002530:	82fb      	strh	r3, [r7, #22]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8002532:	4a32      	ldr	r2, [pc, #200]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002534:	8afb      	ldrh	r3, [r7, #22]
 8002536:	8013      	strh	r3, [r2, #0]

				return(status);
 8002538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800253c:	e1f6      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800253e:	4b2d      	ldr	r3, [pc, #180]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002540:	789b      	ldrb	r3, [r3, #2]
 8002542:	2b00      	cmp	r3, #0
 8002544:	f040 81d6 	bne.w	80028f4 <i2c_slv_cmd_rx_tx_handle+0xe14>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002548:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 800254a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254e:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				{
				    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8002556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800255a:	482b      	ldr	r0, [pc, #172]	; (8002608 <i2c_slv_cmd_rx_tx_handle+0xb28>)
 800255c:	f001 f8b4 	bl	80036c8 <HAL_GPIO_TogglePin>
				}
				return(status);
 8002560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002564:	e1e2      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002566:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002568:	789b      	ldrb	r3, [r3, #2]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10f      	bne.n	800258e <i2c_slv_cmd_rx_tx_handle+0xaae>
			{
				uint16_t dataread = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	833b      	strh	r3, [r7, #24]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8002572:	2303      	movs	r3, #3
 8002574:	2202      	movs	r2, #2
 8002576:	21e2      	movs	r1, #226	; 0xe2
 8002578:	4822      	ldr	r0, [pc, #136]	; (8002604 <i2c_slv_cmd_rx_tx_handle+0xb24>)
 800257a:	f7fe fb5f 	bl	8000c3c <max6911_read>
 800257e:	4603      	mov	r3, r0
 8002580:	833b      	strh	r3, [r7, #24]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8002582:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 8002584:	8b3b      	ldrh	r3, [r7, #24]
 8002586:	8013      	strh	r3, [r2, #0]

				return(status);
 8002588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800258c:	e1ce      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 8002590:	789b      	ldrb	r3, [r3, #2]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 81b0 	bne.w	80028f8 <i2c_slv_cmd_rx_tx_handle+0xe18>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002598:	4b18      	ldr	r3, [pc, #96]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 800259a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800259e:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80025a0:	2301      	movs	r3, #1
 80025a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80025a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025aa:	e1bf      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_2_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 80025ae:	789b      	ldrb	r3, [r3, #2]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d10f      	bne.n	80025d4 <i2c_slv_cmd_rx_tx_handle+0xaf4>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	837b      	strh	r3, [r7, #26]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_2, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 80025b8:	2301      	movs	r3, #1
 80025ba:	2200      	movs	r2, #0
 80025bc:	21e2      	movs	r1, #226	; 0xe2
 80025be:	4811      	ldr	r0, [pc, #68]	; (8002604 <i2c_slv_cmd_rx_tx_handle+0xb24>)
 80025c0:	f7fe fb3c 	bl	8000c3c <max6911_read>
 80025c4:	4603      	mov	r3, r0
 80025c6:	837b      	strh	r3, [r7, #26]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 80025ca:	8b7b      	ldrh	r3, [r7, #26]
 80025cc:	8013      	strh	r3, [r2, #0]

				return(status);
 80025ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025d2:	e1ab      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <i2c_slv_cmd_rx_tx_handle+0xb14>)
 80025d6:	789b      	ldrb	r3, [r3, #2]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f040 818f 	bne.w	80028fc <i2c_slv_cmd_rx_tx_handle+0xe1c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80025de:	4b07      	ldr	r3, [pc, #28]	; (80025fc <i2c_slv_cmd_rx_tx_handle+0xb1c>)
 80025e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e4:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80025ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025f0:	e19c      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
 80025f2:	bf00      	nop
 80025f4:	20000270 	.word	0x20000270
 80025f8:	20000230 	.word	0x20000230
 80025fc:	20000274 	.word	0x20000274
 8002600:	2000021c 	.word	0x2000021c
 8002604:	20000088 	.word	0x20000088
 8002608:	48000400 	.word	0x48000400
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800260c:	4ba1      	ldr	r3, [pc, #644]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 800260e:	789b      	ldrb	r3, [r3, #2]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10f      	bne.n	8002634 <i2c_slv_cmd_rx_tx_handle+0xb54>
			{
				uint16_t dataread = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	823b      	strh	r3, [r7, #16]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_VOLTAGE, RSP_DATA_BYTE_MSB, RSP_DATA_BYTE_LSB);
 8002618:	2303      	movs	r3, #3
 800261a:	2202      	movs	r2, #2
 800261c:	21e4      	movs	r1, #228	; 0xe4
 800261e:	489e      	ldr	r0, [pc, #632]	; (8002898 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002620:	f7fe fb0c 	bl	8000c3c <max6911_read>
 8002624:	4603      	mov	r3, r0
 8002626:	823b      	strh	r3, [r7, #16]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 8002628:	4a9c      	ldr	r2, [pc, #624]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 800262a:	8a3b      	ldrh	r3, [r7, #16]
 800262c:	8013      	strh	r3, [r2, #0]

				return(status);
 800262e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002632:	e17b      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002634:	4b97      	ldr	r3, [pc, #604]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002636:	789b      	ldrb	r3, [r3, #2]
 8002638:	2b00      	cmp	r3, #0
 800263a:	f040 8161 	bne.w	8002900 <i2c_slv_cmd_rx_tx_handle+0xe20>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800263e:	4b97      	ldr	r3, [pc, #604]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002644:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800264c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002650:	e16c      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
		// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_CURRENT):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002652:	4b90      	ldr	r3, [pc, #576]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002654:	789b      	ldrb	r3, [r3, #2]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d10f      	bne.n	800267a <i2c_slv_cmd_rx_tx_handle+0xb9a>
			{
				// read the UCD max6911 AVDD device
				uint16_t dataread = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	827b      	strh	r3, [r7, #18]
				dataread = max6911_read(&hi2c2, ADDR_IJC_MAX9611_HV_CURRENT, CSA_DATA_BYTE_MSB, CSA_DATA_BYTE_LSB);
 800265e:	2301      	movs	r3, #1
 8002660:	2200      	movs	r2, #0
 8002662:	21e6      	movs	r1, #230	; 0xe6
 8002664:	488c      	ldr	r0, [pc, #560]	; (8002898 <i2c_slv_cmd_rx_tx_handle+0xdb8>)
 8002666:	f7fe fae9 	bl	8000c3c <max6911_read>
 800266a:	4603      	mov	r3, r0
 800266c:	827b      	strh	r3, [r7, #18]

				// Load the MSB and LSB into the TX register buffer
				i2c_slv_tx.data = dataread;  		                    // Prepare the date into the transmit
 800266e:	4a8b      	ldr	r2, [pc, #556]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002670:	8a7b      	ldrh	r3, [r7, #18]
 8002672:	8013      	strh	r3, [r2, #0]

				return(status);
 8002674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002678:	e158      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800267a:	4b86      	ldr	r3, [pc, #536]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 800267c:	789b      	ldrb	r3, [r3, #2]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 8140 	bne.w	8002904 <i2c_slv_cmd_rx_tx_handle+0xe24>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002684:	4b85      	ldr	r3, [pc, #532]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268a:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800268c:	2301      	movs	r3, #1
 800268e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002696:	e149      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_TARGET_HV_VOLTAGE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002698:	4b7e      	ldr	r3, [pc, #504]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 800269a:	789b      	ldrb	r3, [r3, #2]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d106      	bne.n	80026ae <i2c_slv_cmd_rx_tx_handle+0xbce>
			{
				i2c_slv_tx.data = ijc_detector.hv_targate_value;        // Prepare the date into the transmit
 80026a0:	4b7f      	ldr	r3, [pc, #508]	; (80028a0 <i2c_slv_cmd_rx_tx_handle+0xdc0>)
 80026a2:	891a      	ldrh	r2, [r3, #8]
 80026a4:	4b7d      	ldr	r3, [pc, #500]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 80026a6:	801a      	strh	r2, [r3, #0]
				return(status);
 80026a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026ac:	e13e      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80026ae:	4b79      	ldr	r3, [pc, #484]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80026b0:	789b      	ldrb	r3, [r3, #2]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 8128 	bne.w	8002908 <i2c_slv_cmd_rx_tx_handle+0xe28>
			{
				if(i2c_slv_rx.bytes.data_byte_msb <= 0x0F)
 80026b8:	4b76      	ldr	r3, [pc, #472]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d811      	bhi.n	80026e4 <i2c_slv_cmd_rx_tx_handle+0xc04>
				{
					// Read the data from the buffer
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80026c0:	4b74      	ldr	r3, [pc, #464]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b21a      	sxth	r2, r3
													 i2c_slv_rx.bytes.data_byte_lsb;
 80026c8:	4b72      	ldr	r3, [pc, #456]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b21b      	sxth	r3, r3
					ijc_detector.hv_targate_value = (i2c_slv_rx.bytes.data_byte_msb << 8) |
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	4b72      	ldr	r3, [pc, #456]	; (80028a0 <i2c_slv_cmd_rx_tx_handle+0xdc0>)
 80026d6:	811a      	strh	r2, [r3, #8]
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 80026d8:	4b70      	ldr	r3, [pc, #448]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 80026da:	2201      	movs	r2, #1
 80026dc:	801a      	strh	r2, [r3, #0]
					return(status);
 80026de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026e2:	e123      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				else
				{
					i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80026e4:	4b6d      	ldr	r3, [pc, #436]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 80026e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ea:	801a      	strh	r2, [r3, #0]
					status =  EXIT_FAILURE;
 80026ec:	2301      	movs	r3, #1
 80026ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					return(status);
 80026f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026f6:	e119      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_IJC_HV_DIGIPOT_SETTING):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80026f8:	4b66      	ldr	r3, [pc, #408]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80026fa:	789b      	ldrb	r3, [r3, #2]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <i2c_slv_cmd_rx_tx_handle+0xc30>
			{
				i2c_slv_tx.data = ijc_detector.hv_digipot_value;        // Prepare the date into the transmit
 8002700:	4b67      	ldr	r3, [pc, #412]	; (80028a0 <i2c_slv_cmd_rx_tx_handle+0xdc0>)
 8002702:	799b      	ldrb	r3, [r3, #6]
 8002704:	b29a      	uxth	r2, r3
 8002706:	4b65      	ldr	r3, [pc, #404]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002708:	801a      	strh	r2, [r3, #0]

				return(status);
 800270a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800270e:	e10d      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002710:	4b60      	ldr	r3, [pc, #384]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002712:	789b      	ldrb	r3, [r3, #2]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 80f9 	bne.w	800290c <i2c_slv_cmd_rx_tx_handle+0xe2c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 800271c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002720:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002722:	2301      	movs	r3, #1
 8002724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800272c:	e0fe      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
    	//                            CAEN MODULE BOARD
		// ---------------------------------------------------------------------
       	// ---------------------------------------------------------------------
    	case(CMD_CAEN_ENABLE):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 800272e:	4b59      	ldr	r3, [pc, #356]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002730:	789b      	ldrb	r3, [r3, #2]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10c      	bne.n	8002750 <i2c_slv_cmd_rx_tx_handle+0xc70>
			{
				caen_detector.board_enable_state = (uint16_t)caen_board_enable_get(); // Read the state enable pin
 8002736:	f7fe fdb3 	bl	80012a0 <caen_board_enable_get>
 800273a:	4603      	mov	r3, r0
 800273c:	b29a      	uxth	r2, r3
 800273e:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 8002740:	821a      	strh	r2, [r3, #16]
				i2c_slv_tx.data = caen_detector.board_enable_state; 					// Prepare the date into the transmit
 8002742:	4b58      	ldr	r3, [pc, #352]	; (80028a4 <i2c_slv_cmd_rx_tx_handle+0xdc4>)
 8002744:	8a1a      	ldrh	r2, [r3, #16]
 8002746:	4b55      	ldr	r3, [pc, #340]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002748:	801a      	strh	r2, [r3, #0]
				return(status);
 800274a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800274e:	e0ed      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002752:	789b      	ldrb	r3, [r3, #2]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f040 80db 	bne.w	8002910 <i2c_slv_cmd_rx_tx_handle+0xe30>
			{
				// Write the state of the enable pin
				if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_SET)
 800275a:	4b4e      	ldr	r3, [pc, #312]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d108      	bne.n	8002774 <i2c_slv_cmd_rx_tx_handle+0xc94>
				{
					caen_board_enable_set(GPIO_PIN_SET);								// Set the state of the pin
 8002762:	2001      	movs	r0, #1
 8002764:	f7fe fd84 	bl	8001270 <caen_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002768:	4b4c      	ldr	r3, [pc, #304]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 800276a:	2201      	movs	r2, #1
 800276c:	801a      	strh	r2, [r3, #0]
					return(status);
 800276e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002772:	e0db      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				else if(i2c_slv_rx.bytes.data_byte_lsb == GPIO_PIN_RESET)
 8002774:	4b47      	ldr	r3, [pc, #284]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d108      	bne.n	800278e <i2c_slv_cmd_rx_tx_handle+0xcae>
				{
					caen_board_enable_set(GPIO_PIN_RESET);                           // Set the state of the pin
 800277c:	2000      	movs	r0, #0
 800277e:	f7fe fd77 	bl	8001270 <caen_board_enable_set>
					i2c_slv_tx.data = CMD_SUCCESS_RESP;
 8002782:	4b46      	ldr	r3, [pc, #280]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002784:	2201      	movs	r2, #1
 8002786:	801a      	strh	r2, [r3, #0]
					return(status);
 8002788:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800278c:	e0ce      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
				}
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 800278e:	4b43      	ldr	r3, [pc, #268]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002794:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002796:	2301      	movs	r3, #1
 8002798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800279c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027a0:	e0c4      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
    	//                            TEMP PRESSURE
		// ---------------------------------------------------------------------
       	// ---------------------------------------------------------------------
    	case(CMD_TEMP_MSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80027a2:	4b3c      	ldr	r3, [pc, #240]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80027a4:	789b      	ldrb	r3, [r3, #2]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d108      	bne.n	80027bc <i2c_slv_cmd_rx_tx_handle+0xcdc>
			{
				i2c_slv_tx.data = (measurement.uncomp_temp >> 16) & 0xFFFF;  	// Prepare the date into the transmit
 80027aa:	4b3f      	ldr	r3, [pc, #252]	; (80028a8 <i2c_slv_cmd_rx_tx_handle+0xdc8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b3a      	ldr	r3, [pc, #232]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 80027b4:	801a      	strh	r2, [r3, #0]
				return(status);
 80027b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027ba:	e0b7      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80027be:	789b      	ldrb	r3, [r3, #2]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 80a7 	bne.w	8002914 <i2c_slv_cmd_rx_tx_handle+0xe34>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80027c6:	4b35      	ldr	r3, [pc, #212]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 80027c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027cc:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 80027d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027d8:	e0a8      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_TEMP_LSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 80027da:	4b2e      	ldr	r3, [pc, #184]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80027dc:	789b      	ldrb	r3, [r3, #2]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d107      	bne.n	80027f2 <i2c_slv_cmd_rx_tx_handle+0xd12>
			{
				i2c_slv_tx.data = (measurement.uncomp_temp) & 0xFFFF;  	// Prepare the date into the transmit
 80027e2:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <i2c_slv_cmd_rx_tx_handle+0xdc8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4b2c      	ldr	r3, [pc, #176]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 80027ea:	801a      	strh	r2, [r3, #0]
				return(status);
 80027ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027f0:	e09c      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 80027f2:	4b28      	ldr	r3, [pc, #160]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 80027f4:	789b      	ldrb	r3, [r3, #2]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 808e 	bne.w	8002918 <i2c_slv_cmd_rx_tx_handle+0xe38>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 80027fc:	4b27      	ldr	r3, [pc, #156]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 80027fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002802:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 800280a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800280e:	e08d      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>

    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_PRES_MSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002812:	789b      	ldrb	r3, [r3, #2]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d108      	bne.n	800282a <i2c_slv_cmd_rx_tx_handle+0xd4a>
			{
				i2c_slv_tx.data = (measurement.uncomp_press >> 16) & 0xFFFF;  	// Prepare the date into the transmit
 8002818:	4b23      	ldr	r3, [pc, #140]	; (80028a8 <i2c_slv_cmd_rx_tx_handle+0xdc8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0c1b      	lsrs	r3, r3, #16
 800281e:	b29a      	uxth	r2, r3
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002822:	801a      	strh	r2, [r3, #0]
				return(status);
 8002824:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002828:	e080      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 800282c:	789b      	ldrb	r3, [r3, #2]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d174      	bne.n	800291c <i2c_slv_cmd_rx_tx_handle+0xe3c>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002832:	4b1a      	ldr	r3, [pc, #104]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002838:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800283a:	2301      	movs	r3, #1
 800283c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002844:	e072      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	case(CMD_PRES_LSB):
		{
			if(i2c_slv_rx.bytes.rw_state == CMD_READ)
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002848:	789b      	ldrb	r3, [r3, #2]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d107      	bne.n	800285e <i2c_slv_cmd_rx_tx_handle+0xd7e>
			{
				i2c_slv_tx.data = (measurement.uncomp_press) & 0xFFFF;  	// Prepare the date into the transmit
 800284e:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <i2c_slv_cmd_rx_tx_handle+0xdc8>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002856:	801a      	strh	r2, [r3, #0]
				return(status);
 8002858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800285c:	e066      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			}
			else if (i2c_slv_rx.bytes.rw_state == CMD_WRITE)
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <i2c_slv_cmd_rx_tx_handle+0xdb4>)
 8002860:	789b      	ldrb	r3, [r3, #2]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d15c      	bne.n	8002920 <i2c_slv_cmd_rx_tx_handle+0xe40>
			{
				i2c_slv_tx.data = CMD_FAIL_OP_RESP;
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <i2c_slv_cmd_rx_tx_handle+0xdbc>)
 8002868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800286c:	801a      	strh	r2, [r3, #0]
				status =  EXIT_FAILURE;
 800286e:	2301      	movs	r3, #1
 8002870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				return(status);
 8002874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002878:	e058      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			break;
		}
    	// ---------------------------------------------------------------------
		// ---------------------------------------------------------------------
    	default:
			status =  EXIT_FAILURE;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			return(status);
 8002880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002884:	e052      	b.n	800292c <i2c_slv_cmd_rx_tx_handle+0xe4c>
			break;
 8002886:	bf00      	nop
 8002888:	e04b      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 800288a:	bf00      	nop
 800288c:	e049      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 800288e:	bf00      	nop
 8002890:	e047      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
 8002892:	bf00      	nop
 8002894:	20000270 	.word	0x20000270
 8002898:	20000088 	.word	0x20000088
 800289c:	20000274 	.word	0x20000274
 80028a0:	2000021c 	.word	0x2000021c
 80028a4:	20000244 	.word	0x20000244
 80028a8:	20000278 	.word	0x20000278
			break;
 80028ac:	bf00      	nop
 80028ae:	e038      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028b0:	bf00      	nop
 80028b2:	e036      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028b4:	bf00      	nop
 80028b6:	e034      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028b8:	bf00      	nop
 80028ba:	e032      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028bc:	bf00      	nop
 80028be:	e030      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028c0:	bf00      	nop
 80028c2:	e02e      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028c4:	bf00      	nop
 80028c6:	e02c      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028c8:	bf00      	nop
 80028ca:	e02a      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028cc:	bf00      	nop
 80028ce:	e028      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028d0:	bf00      	nop
 80028d2:	e026      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028d4:	bf00      	nop
 80028d6:	e024      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028d8:	bf00      	nop
 80028da:	e022      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028dc:	bf00      	nop
 80028de:	e020      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028e0:	bf00      	nop
 80028e2:	e01e      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028e4:	bf00      	nop
 80028e6:	e01c      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028e8:	bf00      	nop
 80028ea:	e01a      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028ec:	bf00      	nop
 80028ee:	e018      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028f0:	bf00      	nop
 80028f2:	e016      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028f4:	bf00      	nop
 80028f6:	e014      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028f8:	bf00      	nop
 80028fa:	e012      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 80028fc:	bf00      	nop
 80028fe:	e010      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 8002900:	bf00      	nop
 8002902:	e00e      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 8002904:	bf00      	nop
 8002906:	e00c      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 8002908:	bf00      	nop
 800290a:	e00a      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 800290c:	bf00      	nop
 800290e:	e008      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 8002910:	bf00      	nop
 8002912:	e006      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 8002914:	bf00      	nop
 8002916:	e004      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 8002918:	bf00      	nop
 800291a:	e002      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 800291c:	bf00      	nop
 800291e:	e000      	b.n	8002922 <i2c_slv_cmd_rx_tx_handle+0xe42>
			break;
 8002920:	bf00      	nop
	}

    // If no command is matched - return failure
	status =  EXIT_FAILURE;
 8002922:	2301      	movs	r3, #1
 8002924:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	return(status);
 8002928:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800292c:	4618      	mov	r0, r3
 800292e:	3730      	adds	r7, #48	; 0x30
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <i2c_slv_init>:



void i2c_slv_init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	// Clear the Tx and Rx buffers before use
	i2c_slv_clear_buffer(&i2c_tx_buffer[0], TXBUFFERSIZE);
 8002938:	2102      	movs	r1, #2
 800293a:	4808      	ldr	r0, [pc, #32]	; (800295c <i2c_slv_init+0x28>)
 800293c:	f000 f814 	bl	8002968 <i2c_slv_clear_buffer>
	i2c_slv_clear_buffer(&i2c_rx_buffer[0], RXBUFFERSIZE);
 8002940:	2104      	movs	r1, #4
 8002942:	4807      	ldr	r0, [pc, #28]	; (8002960 <i2c_slv_init+0x2c>)
 8002944:	f000 f810 	bl	8002968 <i2c_slv_clear_buffer>

	if(HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK)
 8002948:	4806      	ldr	r0, [pc, #24]	; (8002964 <i2c_slv_init+0x30>)
 800294a:	f001 fae5 	bl	8003f18 <HAL_I2C_EnableListen_IT>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <i2c_slv_init+0x24>
	{
		/* Transfer error in reception process */
		Error_Handler();
 8002954:	f000 f8e4 	bl	8002b20 <Error_Handler>
	}
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000268 	.word	0x20000268
 8002960:	2000026c 	.word	0x2000026c
 8002964:	20000034 	.word	0x20000034

08002968 <i2c_slv_clear_buffer>:


void i2c_slv_clear_buffer(uint8_t* buffer, uint8_t size)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]

	uint8_t idx = 0; // An index
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]

	for(idx = 0; idx < size; idx++)
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
 800297c:	e008      	b.n	8002990 <i2c_slv_clear_buffer+0x28>
	{
		// Cycle through and clear the buffer array
		*buffer = 0x00;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	701a      	strb	r2, [r3, #0]
		buffer++;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3301      	adds	r3, #1
 8002988:	607b      	str	r3, [r7, #4]
	for(idx = 0; idx < size; idx++)
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	3301      	adds	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	78fb      	ldrb	r3, [r7, #3]
 8002994:	429a      	cmp	r2, r3
 8002996:	d3f2      	bcc.n	800297e <i2c_slv_clear_buffer+0x16>
	}

}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	Xfer_Complete = 1;        // Set flag for RX completion
 80029b0:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000030 	.word	0x20000030

080029c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *I2cHandle)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	// Handle the I2C receive callback complete
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	061a      	lsls	r2, r3, #24
					| (i2c_rx_buffer[1] << 16)
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80029d8:	785b      	ldrb	r3, [r3, #1]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	431a      	orrs	r2, r3
					| (i2c_rx_buffer[2] << 8)
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80029e0:	789b      	ldrb	r3, [r3, #2]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	4313      	orrs	r3, r2
					| (i2c_rx_buffer[3]);
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_I2C_SlaveRxCpltCallback+0x44>)
 80029e8:	78d2      	ldrb	r2, [r2, #3]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	461a      	mov	r2, r3
	i2c_slv_rx.data = (i2c_rx_buffer[0] << 24) 	 // Load the data from the RX buffer
 80029ee:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 80029f0:	601a      	str	r2, [r3, #0]

	// Load the init/fail value into the tx buffer
	i2c_slv_tx.data = CMD_FAIL_OP_INPROG_RESP;
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 80029f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80029f8:	801a      	strh	r2, [r3, #0]

	Xfer_Complete = 1;                           // Set flag for RX completion
 80029fa:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	2000026c 	.word	0x2000026c
 8002a10:	20000270 	.word	0x20000270
 8002a14:	20000274 	.word	0x20000274
 8002a18:	20000030 	.word	0x20000030

08002a1c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read), value of @ref I2C_XferOptions_definition
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	70fb      	strb	r3, [r7, #3]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	803b      	strh	r3, [r7, #0]
  Transfer_Direction = TransferDirection;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <HAL_I2C_AddrCallback+0x68>)
 8002a30:	6013      	str	r3, [r2, #0]
  if (Transfer_Direction != 0)
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <HAL_I2C_AddrCallback+0x68>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d014      	beq.n	8002a64 <HAL_I2C_AddrCallback+0x48>
	/*##- Start the transmission process #####################################*/
	/* While the I2C in reception process, user can transmit data through
	"i2c_tx_buffer" buffer */

	// Update the TX buffer
	i2c_tx_buffer[0] = i2c_slv_tx.bytes.byte_1;
 8002a3a:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <HAL_I2C_AddrCallback+0x6c>)
 8002a3c:	785a      	ldrb	r2, [r3, #1]
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_I2C_AddrCallback+0x70>)
 8002a40:	701a      	strb	r2, [r3, #0]
	i2c_tx_buffer[1] = i2c_slv_tx.bytes.byte_2;
 8002a42:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <HAL_I2C_AddrCallback+0x6c>)
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <HAL_I2C_AddrCallback+0x70>)
 8002a48:	705a      	strb	r2, [r3, #1]
	//copy_array(&i2c_slv_tx.bytes.byte_1, i2c_tx_buffer[0], TXBUFFERSIZE);

	if (HAL_I2C_Slave_Seq_Transmit_IT(&hi2c1, (uint8_t *)i2c_tx_buffer, TXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8002a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a4e:	2202      	movs	r2, #2
 8002a50:	490e      	ldr	r1, [pc, #56]	; (8002a8c <HAL_I2C_AddrCallback+0x70>)
 8002a52:	480f      	ldr	r0, [pc, #60]	; (8002a90 <HAL_I2C_AddrCallback+0x74>)
 8002a54:	f001 f8fc 	bl	8003c50 <HAL_I2C_Slave_Seq_Transmit_IT>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00e      	beq.n	8002a7c <HAL_I2C_AddrCallback+0x60>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 8002a5e:	f000 f85f 	bl	8002b20 <Error_Handler>
	}

  }
  //Xfer_Complete =1;

}
 8002a62:	e00b      	b.n	8002a7c <HAL_I2C_AddrCallback+0x60>
	if (HAL_I2C_Slave_Seq_Receive_IT(&hi2c1, (uint8_t *)i2c_rx_buffer, RXBUFFERSIZE, I2C_FIRST_AND_LAST_FRAME) != HAL_OK)
 8002a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a68:	2204      	movs	r2, #4
 8002a6a:	490a      	ldr	r1, [pc, #40]	; (8002a94 <HAL_I2C_AddrCallback+0x78>)
 8002a6c:	4808      	ldr	r0, [pc, #32]	; (8002a90 <HAL_I2C_AddrCallback+0x74>)
 8002a6e:	f001 f9a1 	bl	8003db4 <HAL_I2C_Slave_Seq_Receive_IT>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_AddrCallback+0x60>
		Error_Handler();
 8002a78:	f000 f852 	bl	8002b20 <Error_Handler>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000002c 	.word	0x2000002c
 8002a88:	20000274 	.word	0x20000274
 8002a8c:	20000268 	.word	0x20000268
 8002a90:	20000034 	.word	0x20000034
 8002a94:	2000026c 	.word	0x2000026c

08002a98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	//HAL_I2C_EnableListen_IT(&hi2c1);
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *I2cHandle)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
    * 1- When Slave doesn't acknowledge its address, Master restarts communication.
    * 2- When Master doesn't acknowledge the last data transferred, Slave doesn't care in this example.
    */
  if (HAL_I2C_GetError(I2cHandle) != HAL_I2C_ERROR_AF)
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f001 faf6 	bl	80040a6 <HAL_I2C_GetError>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d001      	beq.n	8002ac4 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 8002ac0:	f000 f82e 	bl	8002b20 <Error_Handler>
  }
  // This addition is harmless but does nothing
  if (I2cHandle->ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d102      	bne.n	8002ad2 <HAL_I2C_ErrorCallback+0x26>
      HAL_Delay(10);
 8002acc:	200a      	movs	r0, #10
 8002ace:	f000 facd 	bl	800306c <HAL_Delay>
	  //I2C_TimeoutInterruptHandler();
  }

}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	counter ++;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b08      	ldr	r3, [pc, #32]	; (8002b10 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002aee:	701a      	strb	r2, [r3, #0]

	// Set the flags responsable for running through the DSSD loop
	ijc_detector.ramp_flag = true;
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
	cea_detector.ramp_flag = true;
 8002af6:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
	general_loop_flg = true;
 8002afc:	4b07      	ldr	r3, [pc, #28]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	701a      	strb	r2, [r3, #0]
	//HAL_GPIO_WritePin(TIMING_PIN_GPIO_Port, TIMING_PIN_Pin, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(TIMING_PIN_GPIO_Port, TIMING_PIN_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000276 	.word	0x20000276
 8002b14:	2000021c 	.word	0x2000021c
 8002b18:	20000230 	.word	0x20000230
 8002b1c:	20000277 	.word	0x20000277

08002b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b24:	b672      	cpsid	i
}
 8002b26:	bf00      	nop
	  error ++;

  }
  */
  /* USER CODE END Error_Handler_Debug */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3a:	4b0f      	ldr	r3, [pc, #60]	; (8002b78 <HAL_MspInit+0x44>)
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <HAL_MspInit+0x44>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6613      	str	r3, [r2, #96]	; 0x60
 8002b46:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <HAL_MspInit+0x44>)
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_MspInit+0x44>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b56:	4a08      	ldr	r2, [pc, #32]	; (8002b78 <HAL_MspInit+0x44>)
 8002b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_MspInit+0x44>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	603b      	str	r3, [r7, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0a6      	sub	sp, #152	; 0x98
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b98:	2260      	movs	r2, #96	; 0x60
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f005 f9b0 	bl	8007f02 <memset>
  if(hi2c->Instance==I2C1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6c      	ldr	r2, [pc, #432]	; (8002d58 <HAL_I2C_MspInit+0x1dc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d14d      	bne.n	8002c48 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002bac:	2340      	movs	r3, #64	; 0x40
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fd87 	bl	80066cc <HAL_RCCEx_PeriphCLKConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002bc4:	f7ff ffac 	bl	8002b20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc8:	4b64      	ldr	r3, [pc, #400]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	4a63      	ldr	r2, [pc, #396]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd4:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	623b      	str	r3, [r7, #32]
 8002bde:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002be0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be8:	2312      	movs	r3, #18
 8002bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002c04:	4619      	mov	r1, r3
 8002c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c0a:	f000 fbb3 	bl	8003374 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c0e:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c18:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1a:	4b50      	ldr	r3, [pc, #320]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c22:	61fb      	str	r3, [r7, #28]
 8002c24:	69fb      	ldr	r3, [r7, #28]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	201f      	movs	r0, #31
 8002c2c:	f000 fb1d 	bl	800326a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002c30:	201f      	movs	r0, #31
 8002c32:	f000 fb36 	bl	80032a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2020      	movs	r0, #32
 8002c3c:	f000 fb15 	bl	800326a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002c40:	2020      	movs	r0, #32
 8002c42:	f000 fb2e 	bl	80032a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c46:	e082      	b.n	8002d4e <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C2)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a44      	ldr	r2, [pc, #272]	; (8002d60 <HAL_I2C_MspInit+0x1e4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d13c      	bne.n	8002ccc <HAL_I2C_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c56:	2300      	movs	r3, #0
 8002c58:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fd34 	bl	80066cc <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8002c6a:	f7ff ff59 	bl	8002b20 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c72:	4a3a      	ldr	r2, [pc, #232]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c8e:	2312      	movs	r3, #18
 8002c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002caa:	4619      	mov	r1, r3
 8002cac:	482d      	ldr	r0, [pc, #180]	; (8002d64 <HAL_I2C_MspInit+0x1e8>)
 8002cae:	f000 fb61 	bl	8003374 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cb2:	4b2a      	ldr	r3, [pc, #168]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	4a29      	ldr	r2, [pc, #164]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8002cbe:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697b      	ldr	r3, [r7, #20]
}
 8002cca:	e040      	b.n	8002d4e <HAL_I2C_MspInit+0x1d2>
  else if(hi2c->Instance==I2C3)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <HAL_I2C_MspInit+0x1ec>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d13b      	bne.n	8002d4e <HAL_I2C_MspInit+0x1d2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f003 fcf1 	bl	80066cc <HAL_RCCEx_PeriphCLKConfig>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_MspInit+0x178>
      Error_Handler();
 8002cf0:	f7ff ff16 	bl	8002b20 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf4:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002cfa:	f043 0304 	orr.w	r3, r3, #4
 8002cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d00:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d12:	2312      	movs	r3, #18
 8002d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d24:	2304      	movs	r3, #4
 8002d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d2a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480e      	ldr	r0, [pc, #56]	; (8002d6c <HAL_I2C_MspInit+0x1f0>)
 8002d32:	f000 fb1f 	bl	8003374 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d36:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d40:	6593      	str	r3, [r2, #88]	; 0x58
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_I2C_MspInit+0x1e0>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
}
 8002d4e:	bf00      	nop
 8002d50:	3798      	adds	r7, #152	; 0x98
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40005400 	.word	0x40005400
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	40005800 	.word	0x40005800
 8002d64:	48000400 	.word	0x48000400
 8002d68:	40005c00 	.word	0x40005c00
 8002d6c:	48000800 	.word	0x48000800

08002d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d113      	bne.n	8002daa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d82:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_TIM_Base_MspInit+0x44>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <HAL_TIM_Base_MspInit+0x44>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d8e:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_TIM_Base_MspInit+0x44>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	201c      	movs	r0, #28
 8002da0:	f000 fa63 	bl	800326a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002da4:	201c      	movs	r0, #28
 8002da6:	f000 fa7c 	bl	80032a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002daa:	bf00      	nop
 8002dac:	3710      	adds	r7, #16
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000

08002db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b0a2      	sub	sp, #136	; 0x88
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	609a      	str	r2, [r3, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
 8002dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2260      	movs	r2, #96	; 0x60
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f005 f892 	bl	8007f02 <memset>
  if(huart->Instance==USART2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <HAL_UART_MspInit+0xac>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d138      	bne.n	8002e5a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002de8:	2302      	movs	r3, #2
 8002dea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002dec:	2300      	movs	r3, #0
 8002dee:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df0:	f107 0314 	add.w	r3, r7, #20
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fc69 	bl	80066cc <HAL_RCCEx_PeriphCLKConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e00:	f7ff fe8e 	bl	8002b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <HAL_UART_MspInit+0xb0>)
 8002e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_UART_MspInit+0xb0>)
 8002e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e10:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_UART_MspInit+0xb0>)
 8002e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	4b12      	ldr	r3, [pc, #72]	; (8002e68 <HAL_UART_MspInit+0xb0>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e20:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_UART_MspInit+0xb0>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <HAL_UART_MspInit+0xb0>)
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e34:	230c      	movs	r3, #12
 8002e36:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e46:	2307      	movs	r3, #7
 8002e48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e50:	4619      	mov	r1, r3
 8002e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e56:	f000 fa8d 	bl	8003374 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e5a:	bf00      	nop
 8002e5c:	3788      	adds	r7, #136	; 0x88
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40004400 	.word	0x40004400
 8002e68:	40021000 	.word	0x40021000

08002e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e70:	e7fe      	b.n	8002e70 <NMI_Handler+0x4>

08002e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e76:	e7fe      	b.n	8002e76 <HardFault_Handler+0x4>

08002e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e7c:	e7fe      	b.n	8002e7c <MemManage_Handler+0x4>

08002e7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e82:	e7fe      	b.n	8002e82 <BusFault_Handler+0x4>

08002e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e88:	e7fe      	b.n	8002e88 <UsageFault_Handler+0x4>

08002e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002eb8:	f000 f8b8 	bl	800302c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ebc:	bf00      	nop
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ec4:	4802      	ldr	r0, [pc, #8]	; (8002ed0 <TIM2_IRQHandler+0x10>)
 8002ec6:	f003 ffe9 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	20000130 	.word	0x20000130

08002ed4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ed8:	4802      	ldr	r0, [pc, #8]	; (8002ee4 <I2C1_EV_IRQHandler+0x10>)
 8002eda:	f001 f83d 	bl	8003f58 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000034 	.word	0x20000034

08002ee8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002eec:	4802      	ldr	r0, [pc, #8]	; (8002ef8 <I2C1_ER_IRQHandler+0x10>)
 8002eee:	f001 f84d 	bl	8003f8c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000034 	.word	0x20000034

08002efc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <SystemInit+0x20>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f06:	4a05      	ldr	r2, [pc, #20]	; (8002f1c <SystemInit+0x20>)
 8002f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f24:	f7ff ffea 	bl	8002efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f28:	480c      	ldr	r0, [pc, #48]	; (8002f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f2a:	490d      	ldr	r1, [pc, #52]	; (8002f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	; (8002f64 <LoopForever+0xe>)
  movs r3, #0
 8002f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f30:	e002      	b.n	8002f38 <LoopCopyDataInit>

08002f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f36:	3304      	adds	r3, #4

08002f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f3c:	d3f9      	bcc.n	8002f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f3e:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f40:	4c0a      	ldr	r4, [pc, #40]	; (8002f6c <LoopForever+0x16>)
  movs r3, #0
 8002f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f44:	e001      	b.n	8002f4a <LoopFillZerobss>

08002f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f48:	3204      	adds	r2, #4

08002f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f4c:	d3fb      	bcc.n	8002f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f4e:	f004 ffe1 	bl	8007f14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f52:	f7fd fab9 	bl	80004c8 <main>

08002f56 <LoopForever>:

LoopForever:
    b LoopForever
 8002f56:	e7fe      	b.n	8002f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002f64:	08007fd4 	.word	0x08007fd4
  ldr r2, =_sbss
 8002f68:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002f6c:	200002d4 	.word	0x200002d4

08002f70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f70:	e7fe      	b.n	8002f70 <ADC1_IRQHandler>
	...

08002f74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <HAL_Init+0x3c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a0b      	ldr	r2, [pc, #44]	; (8002fb0 <HAL_Init+0x3c>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f8a:	2003      	movs	r0, #3
 8002f8c:	f000 f962 	bl	8003254 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f90:	2000      	movs	r0, #0
 8002f92:	f000 f80f 	bl	8002fb4 <HAL_InitTick>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	71fb      	strb	r3, [r7, #7]
 8002fa0:	e001      	b.n	8002fa6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fa2:	f7ff fdc7 	bl	8002b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40022000 	.word	0x40022000

08002fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_InitTick+0x6c>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d023      	beq.n	8003010 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fc8:	4b16      	ldr	r3, [pc, #88]	; (8003024 <HAL_InitTick+0x70>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_InitTick+0x6c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 f96d 	bl	80032be <HAL_SYSTICK_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0f      	cmp	r3, #15
 8002fee:	d809      	bhi.n	8003004 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ff8:	f000 f937 	bl	800326a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_InitTick+0x74>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e007      	b.n	8003014 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	e004      	b.n	8003014 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
 800300e:	e001      	b.n	8003014 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000008 	.word	0x20000008
 8003024:	20000000 	.word	0x20000000
 8003028:	20000004 	.word	0x20000004

0800302c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_IncTick+0x20>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	461a      	mov	r2, r3
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <HAL_IncTick+0x24>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4413      	add	r3, r2
 800303c:	4a04      	ldr	r2, [pc, #16]	; (8003050 <HAL_IncTick+0x24>)
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000008 	.word	0x20000008
 8003050:	200002d0 	.word	0x200002d0

08003054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  return uwTick;
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_GetTick+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	200002d0 	.word	0x200002d0

0800306c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003074:	f7ff ffee 	bl	8003054 <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003084:	d005      	beq.n	8003092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003086:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <HAL_Delay+0x44>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003092:	bf00      	nop
 8003094:	f7ff ffde 	bl	8003054 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d8f7      	bhi.n	8003094 <HAL_Delay+0x28>
  {
  }
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000008 	.word	0x20000008

080030b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d0:	4013      	ands	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e6:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <__NVIC_SetPriorityGrouping+0x44>)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	60d3      	str	r3, [r2, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003100:	4b04      	ldr	r3, [pc, #16]	; (8003114 <__NVIC_GetPriorityGrouping+0x18>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	0a1b      	lsrs	r3, r3, #8
 8003106:	f003 0307 	and.w	r3, r3, #7
}
 800310a:	4618      	mov	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db0b      	blt.n	8003142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	f003 021f 	and.w	r2, r3, #31
 8003130:	4907      	ldr	r1, [pc, #28]	; (8003150 <__NVIC_EnableIRQ+0x38>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2001      	movs	r0, #1
 800313a:	fa00 f202 	lsl.w	r2, r0, r2
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000e100 	.word	0xe000e100

08003154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	6039      	str	r1, [r7, #0]
 800315e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003164:	2b00      	cmp	r3, #0
 8003166:	db0a      	blt.n	800317e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	490c      	ldr	r1, [pc, #48]	; (80031a0 <__NVIC_SetPriority+0x4c>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	b2d2      	uxtb	r2, r2
 8003176:	440b      	add	r3, r1
 8003178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800317c:	e00a      	b.n	8003194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4908      	ldr	r1, [pc, #32]	; (80031a4 <__NVIC_SetPriority+0x50>)
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	3b04      	subs	r3, #4
 800318c:	0112      	lsls	r2, r2, #4
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	440b      	add	r3, r1
 8003192:	761a      	strb	r2, [r3, #24]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000e100 	.word	0xe000e100
 80031a4:	e000ed00 	.word	0xe000ed00

080031a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f1c3 0307 	rsb	r3, r3, #7
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	bf28      	it	cs
 80031c6:	2304      	movcs	r3, #4
 80031c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	3304      	adds	r3, #4
 80031ce:	2b06      	cmp	r3, #6
 80031d0:	d902      	bls.n	80031d8 <NVIC_EncodePriority+0x30>
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3b03      	subs	r3, #3
 80031d6:	e000      	b.n	80031da <NVIC_EncodePriority+0x32>
 80031d8:	2300      	movs	r3, #0
 80031da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	401a      	ands	r2, r3
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	43d9      	mvns	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003200:	4313      	orrs	r3, r2
         );
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003220:	d301      	bcc.n	8003226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003222:	2301      	movs	r3, #1
 8003224:	e00f      	b.n	8003246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <SysTick_Config+0x40>)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800322e:	210f      	movs	r1, #15
 8003230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003234:	f7ff ff8e 	bl	8003154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <SysTick_Config+0x40>)
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <SysTick_Config+0x40>)
 8003240:	2207      	movs	r2, #7
 8003242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	e000e010 	.word	0xe000e010

08003254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff29 	bl	80030b4 <__NVIC_SetPriorityGrouping>
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af00      	add	r7, sp, #0
 8003270:	4603      	mov	r3, r0
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800327c:	f7ff ff3e 	bl	80030fc <__NVIC_GetPriorityGrouping>
 8003280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	6978      	ldr	r0, [r7, #20]
 8003288:	f7ff ff8e 	bl	80031a8 <NVIC_EncodePriority>
 800328c:	4602      	mov	r2, r0
 800328e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003292:	4611      	mov	r1, r2
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff5d 	bl	8003154 <__NVIC_SetPriority>
}
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff31 	bl	8003118 <__NVIC_EnableIRQ>
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff ffa2 	bl	8003210 <SysTick_Config>
 80032cc:	4603      	mov	r3, r0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b084      	sub	sp, #16
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d005      	beq.n	80032fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2204      	movs	r2, #4
 80032f2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e029      	b.n	800334e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 020e 	bic.w	r2, r2, #14
 8003308:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0201 	bic.w	r2, r2, #1
 8003318:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	f003 021c 	and.w	r2, r3, #28
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f202 	lsl.w	r2, r1, r2
 800332c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
    }
  }
  return status;
 800334e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003366:	b2db      	uxtb	r3, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003382:	e154      	b.n	800362e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8146 	beq.w	8003628 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d005      	beq.n	80033b4 <HAL_GPIO_Init+0x40>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d130      	bne.n	8003416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ea:	2201      	movs	r2, #1
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f003 0201 	and.w	r2, r3, #1
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b03      	cmp	r3, #3
 8003420:	d017      	beq.n	8003452 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2203      	movs	r2, #3
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d123      	bne.n	80034a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	08da      	lsrs	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3208      	adds	r2, #8
 8003466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	6939      	ldr	r1, [r7, #16]
 80034a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	2203      	movs	r2, #3
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0203 	and.w	r2, r3, #3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80a0 	beq.w	8003628 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e8:	4b58      	ldr	r3, [pc, #352]	; (800364c <HAL_GPIO_Init+0x2d8>)
 80034ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ec:	4a57      	ldr	r2, [pc, #348]	; (800364c <HAL_GPIO_Init+0x2d8>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6613      	str	r3, [r2, #96]	; 0x60
 80034f4:	4b55      	ldr	r3, [pc, #340]	; (800364c <HAL_GPIO_Init+0x2d8>)
 80034f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003500:	4a53      	ldr	r2, [pc, #332]	; (8003650 <HAL_GPIO_Init+0x2dc>)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	220f      	movs	r2, #15
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800352a:	d019      	beq.n	8003560 <HAL_GPIO_Init+0x1ec>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a49      	ldr	r2, [pc, #292]	; (8003654 <HAL_GPIO_Init+0x2e0>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <HAL_GPIO_Init+0x1e8>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a48      	ldr	r2, [pc, #288]	; (8003658 <HAL_GPIO_Init+0x2e4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00d      	beq.n	8003558 <HAL_GPIO_Init+0x1e4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a47      	ldr	r2, [pc, #284]	; (800365c <HAL_GPIO_Init+0x2e8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d007      	beq.n	8003554 <HAL_GPIO_Init+0x1e0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a46      	ldr	r2, [pc, #280]	; (8003660 <HAL_GPIO_Init+0x2ec>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d101      	bne.n	8003550 <HAL_GPIO_Init+0x1dc>
 800354c:	2304      	movs	r3, #4
 800354e:	e008      	b.n	8003562 <HAL_GPIO_Init+0x1ee>
 8003550:	2307      	movs	r3, #7
 8003552:	e006      	b.n	8003562 <HAL_GPIO_Init+0x1ee>
 8003554:	2303      	movs	r3, #3
 8003556:	e004      	b.n	8003562 <HAL_GPIO_Init+0x1ee>
 8003558:	2302      	movs	r3, #2
 800355a:	e002      	b.n	8003562 <HAL_GPIO_Init+0x1ee>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <HAL_GPIO_Init+0x1ee>
 8003560:	2300      	movs	r3, #0
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	f002 0203 	and.w	r2, r2, #3
 8003568:	0092      	lsls	r2, r2, #2
 800356a:	4093      	lsls	r3, r2
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003572:	4937      	ldr	r1, [pc, #220]	; (8003650 <HAL_GPIO_Init+0x2dc>)
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	3302      	adds	r3, #2
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003580:	4b38      	ldr	r3, [pc, #224]	; (8003664 <HAL_GPIO_Init+0x2f0>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	43db      	mvns	r3, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035a4:	4a2f      	ldr	r2, [pc, #188]	; (8003664 <HAL_GPIO_Init+0x2f0>)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035aa:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <HAL_GPIO_Init+0x2f0>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	43db      	mvns	r3, r3
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4013      	ands	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ce:	4a25      	ldr	r2, [pc, #148]	; (8003664 <HAL_GPIO_Init+0x2f0>)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035d4:	4b23      	ldr	r3, [pc, #140]	; (8003664 <HAL_GPIO_Init+0x2f0>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43db      	mvns	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035f8:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_GPIO_Init+0x2f0>)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035fe:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_GPIO_Init+0x2f0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	43db      	mvns	r3, r3
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4013      	ands	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003622:	4a10      	ldr	r2, [pc, #64]	; (8003664 <HAL_GPIO_Init+0x2f0>)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	3301      	adds	r3, #1
 800362c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	fa22 f303 	lsr.w	r3, r2, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	f47f aea3 	bne.w	8003384 <HAL_GPIO_Init+0x10>
  }
}
 800363e:	bf00      	nop
 8003640:	bf00      	nop
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	40021000 	.word	0x40021000
 8003650:	40010000 	.word	0x40010000
 8003654:	48000400 	.word	0x48000400
 8003658:	48000800 	.word	0x48000800
 800365c:	48000c00 	.word	0x48000c00
 8003660:	48001000 	.word	0x48001000
 8003664:	40010400 	.word	0x40010400

08003668 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691a      	ldr	r2, [r3, #16]
 8003678:	887b      	ldrh	r3, [r7, #2]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
 8003684:	e001      	b.n	800368a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
 80036a4:	4613      	mov	r3, r2
 80036a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036a8:	787b      	ldrb	r3, [r7, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036ae:	887a      	ldrh	r2, [r7, #2]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036b4:	e002      	b.n	80036bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036b6:	887a      	ldrh	r2, [r7, #2]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	041a      	lsls	r2, r3, #16
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	43d9      	mvns	r1, r3
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	400b      	ands	r3, r1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	619a      	str	r2, [r3, #24]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e08d      	b.n	800382a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff fa2a 	bl	8002b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	; 0x24
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800374c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d107      	bne.n	8003776 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	e006      	b.n	8003784 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003782:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d108      	bne.n	800379e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800379a:	605a      	str	r2, [r3, #4]
 800379c:	e007      	b.n	80037ae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69d9      	ldr	r1, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b088      	sub	sp, #32
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	461a      	mov	r2, r3
 8003840:	460b      	mov	r3, r1
 8003842:	817b      	strh	r3, [r7, #10]
 8003844:	4613      	mov	r3, r2
 8003846:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b20      	cmp	r3, #32
 8003852:	f040 80fd 	bne.w	8003a50 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_I2C_Master_Transmit+0x30>
 8003860:	2302      	movs	r3, #2
 8003862:	e0f6      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x21e>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800386c:	f7ff fbf2 	bl	8003054 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2319      	movs	r3, #25
 8003878:	2201      	movs	r2, #1
 800387a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f001 fca1 	bl	80051c6 <I2C_WaitOnFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e0e1      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2221      	movs	r2, #33	; 0x21
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2210      	movs	r2, #16
 800389a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	893a      	ldrh	r2, [r7, #8]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2bff      	cmp	r3, #255	; 0xff
 80038be:	d906      	bls.n	80038ce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	22ff      	movs	r2, #255	; 0xff
 80038c4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80038c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e007      	b.n	80038de <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80038d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d024      	beq.n	8003930 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	781a      	ldrb	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	b2db      	uxtb	r3, r3
 800391c:	3301      	adds	r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	8979      	ldrh	r1, [r7, #10]
 8003922:	4b4e      	ldr	r3, [pc, #312]	; (8003a5c <HAL_I2C_Master_Transmit+0x228>)
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f001 fe87 	bl	800563c <I2C_TransferConfig>
 800392e:	e066      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	b2da      	uxtb	r2, r3
 8003936:	8979      	ldrh	r1, [r7, #10]
 8003938:	4b48      	ldr	r3, [pc, #288]	; (8003a5c <HAL_I2C_Master_Transmit+0x228>)
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f001 fe7c 	bl	800563c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003944:	e05b      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	6a39      	ldr	r1, [r7, #32]
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f001 fc8a 	bl	8005264 <I2C_WaitOnTXISFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e07b      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003982:	3b01      	subs	r3, #1
 8003984:	b29a      	uxth	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d034      	beq.n	80039fe <HAL_I2C_Master_Transmit+0x1ca>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	2b00      	cmp	r3, #0
 800399a:	d130      	bne.n	80039fe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	2200      	movs	r2, #0
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f001 fc0d 	bl	80051c6 <I2C_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e04d      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2bff      	cmp	r3, #255	; 0xff
 80039be:	d90e      	bls.n	80039de <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	22ff      	movs	r2, #255	; 0xff
 80039c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	8979      	ldrh	r1, [r7, #10]
 80039ce:	2300      	movs	r3, #0
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f001 fe30 	bl	800563c <I2C_TransferConfig>
 80039dc:	e00f      	b.n	80039fe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	8979      	ldrh	r1, [r7, #10]
 80039f0:	2300      	movs	r3, #0
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f001 fe1f 	bl	800563c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d19e      	bne.n	8003946 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	6a39      	ldr	r1, [r7, #32]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f001 fc70 	bl	80052f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e01a      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2220      	movs	r2, #32
 8003a22:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6859      	ldr	r1, [r3, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_I2C_Master_Transmit+0x22c>)
 8003a30:	400b      	ands	r3, r1
 8003a32:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
  }
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	80002000 	.word	0x80002000
 8003a60:	fe00e800 	.word	0xfe00e800

08003a64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	460b      	mov	r3, r1
 8003a72:	817b      	strh	r3, [r7, #10]
 8003a74:	4613      	mov	r3, r2
 8003a76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	f040 80db 	bne.w	8003c3c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2C_Master_Receive+0x30>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e0d4      	b.n	8003c3e <HAL_I2C_Master_Receive+0x1da>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a9c:	f7ff fada 	bl	8003054 <HAL_GetTick>
 8003aa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	2319      	movs	r3, #25
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f001 fb89 	bl	80051c6 <I2C_WaitOnFlagUntilTimeout>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e0bf      	b.n	8003c3e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2222      	movs	r2, #34	; 0x22
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2210      	movs	r2, #16
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	893a      	ldrh	r2, [r7, #8]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2bff      	cmp	r3, #255	; 0xff
 8003aee:	d90e      	bls.n	8003b0e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	22ff      	movs	r2, #255	; 0xff
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	8979      	ldrh	r1, [r7, #10]
 8003afe:	4b52      	ldr	r3, [pc, #328]	; (8003c48 <HAL_I2C_Master_Receive+0x1e4>)
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f001 fd98 	bl	800563c <I2C_TransferConfig>
 8003b0c:	e06d      	b.n	8003bea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	8979      	ldrh	r1, [r7, #10]
 8003b20:	4b49      	ldr	r3, [pc, #292]	; (8003c48 <HAL_I2C_Master_Receive+0x1e4>)
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f001 fd87 	bl	800563c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003b2e:	e05c      	b.n	8003bea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	6a39      	ldr	r1, [r7, #32]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f001 fc1f 	bl	8005378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e07c      	b.n	8003c3e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	1c5a      	adds	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d034      	beq.n	8003bea <HAL_I2C_Master_Receive+0x186>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d130      	bne.n	8003bea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	2180      	movs	r1, #128	; 0x80
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f001 fb17 	bl	80051c6 <I2C_WaitOnFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e04d      	b.n	8003c3e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	2bff      	cmp	r3, #255	; 0xff
 8003baa:	d90e      	bls.n	8003bca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	22ff      	movs	r2, #255	; 0xff
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	8979      	ldrh	r1, [r7, #10]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f001 fd3a 	bl	800563c <I2C_TransferConfig>
 8003bc8:	e00f      	b.n	8003bea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	8979      	ldrh	r1, [r7, #10]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f001 fd29 	bl	800563c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d19d      	bne.n	8003b30 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	6a39      	ldr	r1, [r7, #32]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f001 fb7a 	bl	80052f2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e01a      	b.n	8003c3e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6859      	ldr	r1, [r3, #4]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <HAL_I2C_Master_Receive+0x1e8>)
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	80002400 	.word	0x80002400
 8003c4c:	fe00e800 	.word	0xfe00e800

08003c50 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c6c:	2b28      	cmp	r3, #40	; 0x28
 8003c6e:	f040 8098 	bne.w	8003da2 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d105      	bne.n	8003c8a <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e08c      	b.n	8003da4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c8a:	f248 0101 	movw	r1, #32769	; 0x8001
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f001 fd8a 	bl	80057a8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e080      	b.n	8003da4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb4:	d12a      	bne.n	8003d0c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f001 fd75 	bl	80057a8 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ccc:	d11e      	bne.n	8003d0c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cdc:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d012      	beq.n	8003d0c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cea:	4a30      	ldr	r2, [pc, #192]	; (8003dac <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff faef 	bl	80032d6 <HAL_DMA_Abort_IT>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d006      	beq.n	8003d0c <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2229      	movs	r2, #41	; 0x29
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d30:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	88fa      	ldrh	r2, [r7, #6]
 8003d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8003d52:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d106      	bne.n	8003d8c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003d94:	f248 0101 	movw	r1, #32769	; 0x8001
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f001 fc81 	bl	80056a0 <I2C_Enable_IRQ>

    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	0800518b 	.word	0x0800518b
 8003db0:	080040bf 	.word	0x080040bf

08003db4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003dd0:	2b28      	cmp	r3, #40	; 0x28
 8003dd2:	f040 8098 	bne.w	8003f06 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d105      	bne.n	8003dee <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003de8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e08c      	b.n	8003f08 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003dee:	f248 0102 	movw	r1, #32770	; 0x8002
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f001 fcd8 	bl	80057a8 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e080      	b.n	8003f08 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b29      	cmp	r3, #41	; 0x29
 8003e18:	d12a      	bne.n	8003e70 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f001 fcc3 	bl	80057a8 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e30:	d11e      	bne.n	8003e70 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e40:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d012      	beq.n	8003e70 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	4a30      	ldr	r2, [pc, #192]	; (8003f10 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fa3d 	bl	80032d6 <HAL_DMA_Abort_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d006      	beq.n	8003e70 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	222a      	movs	r2, #42	; 0x2a
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e94:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	88fa      	ldrh	r2, [r7, #6]
 8003ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2208      	movs	r2, #8
 8003eee:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003ef8:	f248 0102 	movw	r1, #32770	; 0x8002
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f001 fbcf 	bl	80056a0 <I2C_Enable_IRQ>

    return HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	e000      	b.n	8003f08 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
  }
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3718      	adds	r7, #24
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	0800518b 	.word	0x0800518b
 8003f14:	080040bf 	.word	0x080040bf

08003f18 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d10d      	bne.n	8003f48 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2228      	movs	r2, #40	; 0x28
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_I2C_EnableListen_IT+0x3c>)
 8003f38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f001 fbae 	bl	80056a0 <I2C_Enable_IRQ>

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	080040bf 	.word	0x080040bf

08003f58 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	68f9      	ldr	r1, [r7, #12]
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
  }
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00f      	beq.n	8003fce <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	f043 0201 	orr.w	r2, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fcc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00f      	beq.n	8003ff8 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f043 0208 	orr.w	r2, r3, #8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ff6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00f      	beq.n	8004022 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	f043 0202 	orr.w	r2, r3, #2
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004020:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 030b 	and.w	r3, r3, #11
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 ff6d 	bl	8004f14 <I2C_ITError>
  }
}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004072:	bf00      	nop
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b086      	sub	sp, #24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <I2C_Slave_ISR_IT+0x24>
 80040de:	2302      	movs	r3, #2
 80040e0:	e0e1      	b.n	80042a6 <I2C_Slave_ISR_IT+0x1e8>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d008      	beq.n	8004106 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80040fe:	6939      	ldr	r1, [r7, #16]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fda1 	bl	8004c48 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b00      	cmp	r3, #0
 800410e:	d04b      	beq.n	80041a8 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004116:	2b00      	cmp	r3, #0
 8004118:	d046      	beq.n	80041a8 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d128      	bne.n	8004176 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b28      	cmp	r3, #40	; 0x28
 800412e:	d108      	bne.n	8004142 <I2C_Slave_ISR_IT+0x84>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004136:	d104      	bne.n	8004142 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004138:	6939      	ldr	r1, [r7, #16]
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fe96 	bl	8004e6c <I2C_ITListenCplt>
 8004140:	e031      	b.n	80041a6 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b29      	cmp	r3, #41	; 0x29
 800414c:	d10e      	bne.n	800416c <I2C_Slave_ISR_IT+0xae>
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004154:	d00a      	beq.n	800416c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2210      	movs	r2, #16
 800415c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 ffef 	bl	8005142 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 fc4a 	bl	80049fe <I2C_ITSlaveSeqCplt>
 800416a:	e01c      	b.n	80041a6 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2210      	movs	r2, #16
 8004172:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004174:	e08f      	b.n	8004296 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004182:	f043 0204 	orr.w	r2, r3, #4
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <I2C_Slave_ISR_IT+0xda>
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004196:	d17e      	bne.n	8004296 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	4619      	mov	r1, r3
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 feb8 	bl	8004f14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80041a4:	e077      	b.n	8004296 <I2C_Slave_ISR_IT+0x1d8>
 80041a6:	e076      	b.n	8004296 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d02f      	beq.n	8004212 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d02a      	beq.n	8004212 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d018      	beq.n	80041f8 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d14b      	bne.n	800429a <I2C_Slave_ISR_IT+0x1dc>
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004208:	d047      	beq.n	800429a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fbf7 	bl	80049fe <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004210:	e043      	b.n	800429a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d009      	beq.n	8004230 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004222:	2b00      	cmp	r3, #0
 8004224:	d004      	beq.n	8004230 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004226:	6939      	ldr	r1, [r7, #16]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fb27 	bl	800487c <I2C_ITAddrCplt>
 800422e:	e035      	b.n	800429c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d030      	beq.n	800429c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02b      	beq.n	800429c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d018      	beq.n	8004280 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	781a      	ldrb	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	; 0x28
 800427e:	e00d      	b.n	800429c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004286:	d002      	beq.n	800428e <I2C_Slave_ISR_IT+0x1d0>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 fbb5 	bl	80049fe <I2C_ITSlaveSeqCplt>
 8004294:	e002      	b.n	800429c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004296:	bf00      	nop
 8004298:	e000      	b.n	800429c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800429a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b088      	sub	sp, #32
 80042b2:	af02      	add	r7, sp, #8
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <I2C_Master_ISR_DMA+0x1a>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e0d9      	b.n	800447c <I2C_Master_ISR_DMA+0x1ce>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 0310 	and.w	r3, r3, #16
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d016      	beq.n	8004308 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d011      	beq.n	8004308 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2210      	movs	r2, #16
 80042ea:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	f043 0204 	orr.w	r2, r3, #4
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80042f8:	2120      	movs	r1, #32
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f001 f9d0 	bl	80056a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f000 ff1e 	bl	8005142 <I2C_Flush_TXDR>
 8004306:	e0b4      	b.n	8004472 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800430e:	2b00      	cmp	r3, #0
 8004310:	d071      	beq.n	80043f6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004318:	2b00      	cmp	r3, #0
 800431a:	d06c      	beq.n	80043f6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800432a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04e      	beq.n	80043d4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004342:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2bff      	cmp	r3, #255	; 0xff
 800434c:	d906      	bls.n	800435c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	22ff      	movs	r2, #255	; 0xff
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8004354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	e010      	b.n	800437e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800436e:	d003      	beq.n	8004378 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e002      	b.n	800437e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004378:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800437c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004382:	b2da      	uxtb	r2, r3
 8004384:	8a79      	ldrh	r1, [r7, #18]
 8004386:	2300      	movs	r3, #0
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f001 f955 	bl	800563c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	b29a      	uxth	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b22      	cmp	r3, #34	; 0x22
 80043ae:	d108      	bne.n	80043c2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043be:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80043c0:	e057      	b.n	8004472 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80043d2:	e04e      	b.n	8004472 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043e2:	d003      	beq.n	80043ec <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 facd 	bl	8004984 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80043ea:	e042      	b.n	8004472 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80043ec:	2140      	movs	r1, #64	; 0x40
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 fd90 	bl	8004f14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80043f4:	e03d      	b.n	8004472 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d028      	beq.n	8004452 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004406:	2b00      	cmp	r3, #0
 8004408:	d023      	beq.n	8004452 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d119      	bne.n	8004448 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004422:	d025      	beq.n	8004470 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800442c:	d108      	bne.n	8004440 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800443c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800443e:	e017      	b.n	8004470 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 fa9f 	bl	8004984 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004446:	e013      	b.n	8004470 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004448:	2140      	movs	r1, #64	; 0x40
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fd62 	bl	8004f14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004450:	e00e      	b.n	8004470 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fb25 	bl	8004ab8 <I2C_ITMasterCplt>
 800446e:	e000      	b.n	8004472 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004470:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004490:	4b8d      	ldr	r3, [pc, #564]	; (80046c8 <I2C_Mem_ISR_DMA+0x244>)
 8004492:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <I2C_Mem_ISR_DMA+0x1e>
 800449e:	2302      	movs	r3, #2
 80044a0:	e10e      	b.n	80046c0 <I2C_Mem_ISR_DMA+0x23c>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d016      	beq.n	80044e2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d011      	beq.n	80044e2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2210      	movs	r2, #16
 80044c4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	f043 0204 	orr.w	r2, r3, #4
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80044d2:	2120      	movs	r1, #32
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f001 f8e3 	bl	80056a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fe31 	bl	8005142 <I2C_Flush_TXDR>
 80044e0:	e0e9      	b.n	80046b6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d009      	beq.n	800450a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004506:	651a      	str	r2, [r3, #80]	; 0x50
 8004508:	e0d5      	b.n	80046b6 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004510:	2b00      	cmp	r3, #0
 8004512:	d05f      	beq.n	80045d4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800451a:	2b00      	cmp	r3, #0
 800451c:	d05a      	beq.n	80045d4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800451e:	2101      	movs	r1, #1
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f001 f941 	bl	80057a8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004526:	2110      	movs	r1, #16
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f001 f8b9 	bl	80056a0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d048      	beq.n	80045ca <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453c:	b29b      	uxth	r3, r3
 800453e:	2bff      	cmp	r3, #255	; 0xff
 8004540:	d910      	bls.n	8004564 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	22ff      	movs	r2, #255	; 0xff
 8004546:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454c:	b299      	uxth	r1, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004552:	b2da      	uxtb	r2, r3
 8004554:	2300      	movs	r3, #0
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f001 f86d 	bl	800563c <I2C_TransferConfig>
 8004562:	e011      	b.n	8004588 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	b299      	uxth	r1, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	b2da      	uxtb	r2, r3
 800457a:	2300      	movs	r3, #0
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f001 f85a 	bl	800563c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29a      	uxth	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b22      	cmp	r3, #34	; 0x22
 80045a4:	d108      	bne.n	80045b8 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045b4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80045b6:	e07e      	b.n	80046b6 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045c6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80045c8:	e075      	b.n	80046b6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80045ca:	2140      	movs	r1, #64	; 0x40
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fca1 	bl	8004f14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80045d2:	e070      	b.n	80046b6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d05d      	beq.n	800469a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d058      	beq.n	800469a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045e8:	2101      	movs	r1, #1
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f001 f8dc 	bl	80057a8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80045f0:	2110      	movs	r1, #16
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f001 f854 	bl	80056a0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b22      	cmp	r3, #34	; 0x22
 8004602:	d101      	bne.n	8004608 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004604:	4b31      	ldr	r3, [pc, #196]	; (80046cc <I2C_Mem_ISR_DMA+0x248>)
 8004606:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	2bff      	cmp	r3, #255	; 0xff
 8004610:	d910      	bls.n	8004634 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	22ff      	movs	r2, #255	; 0xff
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461c:	b299      	uxth	r1, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004622:	b2da      	uxtb	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f001 f805 	bl	800563c <I2C_TransferConfig>
 8004632:	e011      	b.n	8004658 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004642:	b299      	uxth	r1, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	b2da      	uxtb	r2, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fff2 	bl	800563c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b22      	cmp	r3, #34	; 0x22
 8004674:	d108      	bne.n	8004688 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004684:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004686:	e016      	b.n	80046b6 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004696:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004698:	e00d      	b.n	80046b6 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fa01 	bl	8004ab8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	80002000 	.word	0x80002000
 80046cc:	80002400 	.word	0x80002400

080046d0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <I2C_Slave_ISR_DMA+0x24>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e0bf      	b.n	8004874 <I2C_Slave_ISR_DMA+0x1a4>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 fa98 	bl	8004c48 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f003 0310 	and.w	r3, r3, #16
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8095 	beq.w	800484e <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 808f 	beq.w	800484e <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d104      	bne.n	8004744 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004740:	2b00      	cmp	r3, #0
 8004742:	d07d      	beq.n	8004840 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00c      	beq.n	8004766 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8004762:	2301      	movs	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d007      	beq.n	8004788 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8004784:	2301      	movs	r3, #1
 8004786:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d128      	bne.n	80047e0 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b28      	cmp	r3, #40	; 0x28
 8004798:	d108      	bne.n	80047ac <I2C_Slave_ISR_DMA+0xdc>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047a0:	d104      	bne.n	80047ac <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fb61 	bl	8004e6c <I2C_ITListenCplt>
 80047aa:	e048      	b.n	800483e <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b29      	cmp	r3, #41	; 0x29
 80047b6:	d10e      	bne.n	80047d6 <I2C_Slave_ISR_DMA+0x106>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047be:	d00a      	beq.n	80047d6 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2210      	movs	r2, #16
 80047c6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 fcba 	bl	8005142 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 f915 	bl	80049fe <I2C_ITSlaveSeqCplt>
 80047d4:	e033      	b.n	800483e <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2210      	movs	r2, #16
 80047dc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80047de:	e034      	b.n	800484a <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2210      	movs	r2, #16
 80047e6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ec:	f043 0204 	orr.w	r2, r3, #4
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fa:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d003      	beq.n	800480a <I2C_Slave_ISR_DMA+0x13a>
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004808:	d11f      	bne.n	800484a <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	2b21      	cmp	r3, #33	; 0x21
 800480e:	d002      	beq.n	8004816 <I2C_Slave_ISR_DMA+0x146>
 8004810:	7dfb      	ldrb	r3, [r7, #23]
 8004812:	2b29      	cmp	r3, #41	; 0x29
 8004814:	d103      	bne.n	800481e <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2221      	movs	r2, #33	; 0x21
 800481a:	631a      	str	r2, [r3, #48]	; 0x30
 800481c:	e008      	b.n	8004830 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800481e:	7dfb      	ldrb	r3, [r7, #23]
 8004820:	2b22      	cmp	r3, #34	; 0x22
 8004822:	d002      	beq.n	800482a <I2C_Slave_ISR_DMA+0x15a>
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	2b2a      	cmp	r3, #42	; 0x2a
 8004828:	d102      	bne.n	8004830 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2222      	movs	r2, #34	; 0x22
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004834:	4619      	mov	r1, r3
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fb6c 	bl	8004f14 <I2C_ITError>
      if (treatdmanack == 1U)
 800483c:	e005      	b.n	800484a <I2C_Slave_ISR_DMA+0x17a>
 800483e:	e004      	b.n	800484a <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004848:	e00f      	b.n	800486a <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 800484a:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800484c:	e00d      	b.n	800486a <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 f809 	bl	800487c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004892:	2b28      	cmp	r3, #40	; 0x28
 8004894:	d16a      	bne.n	800496c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	0c1b      	lsrs	r3, r3, #16
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80048b4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80048d0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d138      	bne.n	800494c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80048da:	897b      	ldrh	r3, [r7, #10]
 80048dc:	09db      	lsrs	r3, r3, #7
 80048de:	b29a      	uxth	r2, r3
 80048e0:	89bb      	ldrh	r3, [r7, #12]
 80048e2:	4053      	eors	r3, r2
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	f003 0306 	and.w	r3, r3, #6
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d11c      	bne.n	8004928 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80048ee:	897b      	ldrh	r3, [r7, #10]
 80048f0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004900:	2b02      	cmp	r3, #2
 8004902:	d13b      	bne.n	800497c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2208      	movs	r2, #8
 8004910:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800491a:	89ba      	ldrh	r2, [r7, #12]
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7fe f87b 	bl	8002a1c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004926:	e029      	b.n	800497c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004928:	893b      	ldrh	r3, [r7, #8]
 800492a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800492c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 ff39 	bl	80057a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800493e:	89ba      	ldrh	r2, [r7, #12]
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7fe f869 	bl	8002a1c <HAL_I2C_AddrCallback>
}
 800494a:	e017      	b.n	800497c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800494c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 ff29 	bl	80057a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800495e:	89ba      	ldrh	r2, [r7, #12]
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fe f859 	bl	8002a1c <HAL_I2C_AddrCallback>
}
 800496a:	e007      	b.n	800497c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2208      	movs	r2, #8
 8004972:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b21      	cmp	r3, #33	; 0x21
 800499e:	d115      	bne.n	80049cc <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2211      	movs	r2, #17
 80049ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80049b4:	2101      	movs	r1, #1
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fef6 	bl	80057a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7ff fb3c 	bl	8004042 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049ca:	e014      	b.n	80049f6 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2212      	movs	r2, #18
 80049d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80049e0:	2102      	movs	r1, #2
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fee0 	bl	80057a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fb30 	bl	8004056 <HAL_I2C_MasterRxCpltCallback>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	e00c      	b.n	8004a4c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d007      	beq.n	8004a4c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a4a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b29      	cmp	r3, #41	; 0x29
 8004a56:	d112      	bne.n	8004a7e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2228      	movs	r2, #40	; 0x28
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2221      	movs	r2, #33	; 0x21
 8004a64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a66:	2101      	movs	r1, #1
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fe9d 	bl	80057a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd ff96 	bl	80029a8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004a7c:	e017      	b.n	8004aae <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b2a      	cmp	r3, #42	; 0x2a
 8004a88:	d111      	bne.n	8004aae <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2228      	movs	r2, #40	; 0x28
 8004a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2222      	movs	r2, #34	; 0x22
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004a98:	2102      	movs	r1, #2
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fe84 	bl	80057a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fd ff8d 	bl	80029c8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2220      	movs	r2, #32
 8004acc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b21      	cmp	r3, #33	; 0x21
 8004ad8:	d107      	bne.n	8004aea <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ada:	2101      	movs	r1, #1
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fe63 	bl	80057a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2211      	movs	r2, #17
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ae8:	e00c      	b.n	8004b04 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b22      	cmp	r3, #34	; 0x22
 8004af4:	d106      	bne.n	8004b04 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004af6:	2102      	movs	r1, #2
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 fe55 	bl	80057a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2212      	movs	r2, #18
 8004b02:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	4b4c      	ldr	r3, [pc, #304]	; (8004c40 <I2C_ITMasterCplt+0x188>)
 8004b10:	400b      	ands	r3, r1
 8004b12:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a49      	ldr	r2, [pc, #292]	; (8004c44 <I2C_ITMasterCplt+0x18c>)
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f043 0204 	orr.w	r2, r3, #4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b60      	cmp	r3, #96	; 0x60
 8004b48:	d10a      	bne.n	8004b60 <I2C_ITMasterCplt+0xa8>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 faee 	bl	8005142 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b60      	cmp	r3, #96	; 0x60
 8004b76:	d002      	beq.n	8004b7e <I2C_ITMasterCplt+0xc6>
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d006      	beq.n	8004b8c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f9c5 	bl	8004f14 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004b8a:	e054      	b.n	8004c36 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b21      	cmp	r3, #33	; 0x21
 8004b96:	d124      	bne.n	8004be2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b40      	cmp	r3, #64	; 0x40
 8004bb0:	d10b      	bne.n	8004bca <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7ff fa51 	bl	800406a <HAL_I2C_MemTxCpltCallback>
}
 8004bc8:	e035      	b.n	8004c36 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fa31 	bl	8004042 <HAL_I2C_MasterTxCpltCallback>
}
 8004be0:	e029      	b.n	8004c36 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b22      	cmp	r3, #34	; 0x22
 8004bec:	d123      	bne.n	8004c36 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d10b      	bne.n	8004c20 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff fa30 	bl	800407e <HAL_I2C_MemRxCpltCallback>
}
 8004c1e:	e00a      	b.n	8004c36 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fa10 	bl	8004056 <HAL_I2C_MasterRxCpltCallback>
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	fe00e800 	.word	0xfe00e800
 8004c44:	ffff0000 	.word	0xffff0000

08004c48 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c64:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c6e:	7bfb      	ldrb	r3, [r7, #15]
 8004c70:	2b21      	cmp	r3, #33	; 0x21
 8004c72:	d002      	beq.n	8004c7a <I2C_ITSlaveCplt+0x32>
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b29      	cmp	r3, #41	; 0x29
 8004c78:	d108      	bne.n	8004c8c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004c7a:	f248 0101 	movw	r1, #32769	; 0x8001
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fd92 	bl	80057a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2221      	movs	r2, #33	; 0x21
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30
 8004c8a:	e019      	b.n	8004cc0 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b22      	cmp	r3, #34	; 0x22
 8004c90:	d002      	beq.n	8004c98 <I2C_ITSlaveCplt+0x50>
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b2a      	cmp	r3, #42	; 0x2a
 8004c96:	d108      	bne.n	8004caa <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004c98:	f248 0102 	movw	r1, #32770	; 0x8002
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fd83 	bl	80057a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2222      	movs	r2, #34	; 0x22
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca8:	e00a      	b.n	8004cc0 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b28      	cmp	r3, #40	; 0x28
 8004cae:	d107      	bne.n	8004cc0 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004cb0:	f248 0103 	movw	r1, #32771	; 0x8003
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fd77 	bl	80057a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6859      	ldr	r1, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b62      	ldr	r3, [pc, #392]	; (8004e64 <I2C_ITSlaveCplt+0x21c>)
 8004cdc:	400b      	ands	r3, r1
 8004cde:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fa2e 	bl	8005142 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d013      	beq.n	8004d18 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cfe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01f      	beq.n	8004d48 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d16:	e017      	b.n	8004d48 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d012      	beq.n	8004d48 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d30:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d006      	beq.n	8004d48 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d020      	beq.n	8004d94 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f023 0304 	bic.w	r3, r3, #4
 8004d58:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00c      	beq.n	8004d94 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f043 0204 	orr.w	r2, r3, #4
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d010      	beq.n	8004de2 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f8a4 	bl	8004f14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2b28      	cmp	r3, #40	; 0x28
 8004dd6:	d141      	bne.n	8004e5c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004dd8:	6979      	ldr	r1, [r7, #20]
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f846 	bl	8004e6c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004de0:	e03c      	b.n	8004e5c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dea:	d014      	beq.n	8004e16 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7ff fe06 	bl	80049fe <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a1c      	ldr	r2, [pc, #112]	; (8004e68 <I2C_ITSlaveCplt+0x220>)
 8004df6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f7fd fe42 	bl	8002a98 <HAL_I2C_ListenCpltCallback>
}
 8004e14:	e022      	b.n	8004e5c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b22      	cmp	r3, #34	; 0x22
 8004e20:	d10e      	bne.n	8004e40 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fd fdc5 	bl	80029c8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e3e:	e00d      	b.n	8004e5c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fd fda6 	bl	80029a8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e5c:	bf00      	nop
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	fe00e800 	.word	0xfe00e800
 8004e68:	ffff0000 	.word	0xffff0000

08004e6c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a25      	ldr	r2, [pc, #148]	; (8004f10 <I2C_ITListenCplt+0xa4>)
 8004e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d022      	beq.n	8004ee8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d012      	beq.n	8004ee8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee0:	f043 0204 	orr.w	r2, r3, #4
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ee8:	f248 0103 	movw	r1, #32771	; 0x8003
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fc5b 	bl	80057a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2210      	movs	r2, #16
 8004ef8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fd fdc8 	bl	8002a98 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004f08:	bf00      	nop
 8004f0a:	3708      	adds	r7, #8
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	ffff0000 	.word	0xffff0000

08004f14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f24:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a6d      	ldr	r2, [pc, #436]	; (80050e8 <I2C_ITError+0x1d4>)
 8004f32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
 8004f48:	2b28      	cmp	r3, #40	; 0x28
 8004f4a:	d005      	beq.n	8004f58 <I2C_ITError+0x44>
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b29      	cmp	r3, #41	; 0x29
 8004f50:	d002      	beq.n	8004f58 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	2b2a      	cmp	r3, #42	; 0x2a
 8004f56:	d10b      	bne.n	8004f70 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f58:	2103      	movs	r1, #3
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fc24 	bl	80057a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2228      	movs	r2, #40	; 0x28
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a60      	ldr	r2, [pc, #384]	; (80050ec <I2C_ITError+0x1d8>)
 8004f6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f6e:	e030      	b.n	8004fd2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f70:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fc17 	bl	80057a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f8e1 	bl	8005142 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b60      	cmp	r3, #96	; 0x60
 8004f8a:	d01f      	beq.n	8004fcc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d114      	bne.n	8004fcc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d109      	bne.n	8004fc4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2210      	movs	r2, #16
 8004fb6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbc:	f043 0204 	orr.w	r2, r3, #4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d039      	beq.n	8005054 <I2C_ITError+0x140>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b11      	cmp	r3, #17
 8004fe4:	d002      	beq.n	8004fec <I2C_ITError+0xd8>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b21      	cmp	r3, #33	; 0x21
 8004fea:	d133      	bne.n	8005054 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ffa:	d107      	bne.n	800500c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800500a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe f9a1 	bl	8003358 <HAL_DMA_GetState>
 8005016:	4603      	mov	r3, r0
 8005018:	2b01      	cmp	r3, #1
 800501a:	d017      	beq.n	800504c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	4a33      	ldr	r2, [pc, #204]	; (80050f0 <I2C_ITError+0x1dc>)
 8005022:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe f950 	bl	80032d6 <HAL_DMA_Abort_IT>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d04d      	beq.n	80050d8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005046:	4610      	mov	r0, r2
 8005048:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800504a:	e045      	b.n	80050d8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f851 	bl	80050f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005052:	e041      	b.n	80050d8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	d039      	beq.n	80050d0 <I2C_ITError+0x1bc>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b12      	cmp	r3, #18
 8005060:	d002      	beq.n	8005068 <I2C_ITError+0x154>
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b22      	cmp	r3, #34	; 0x22
 8005066:	d133      	bne.n	80050d0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005076:	d107      	bne.n	8005088 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005086:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe f963 	bl	8003358 <HAL_DMA_GetState>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d017      	beq.n	80050c8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	4a14      	ldr	r2, [pc, #80]	; (80050f0 <I2C_ITError+0x1dc>)
 800509e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe f912 	bl	80032d6 <HAL_DMA_Abort_IT>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d011      	beq.n	80050dc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050c2:	4610      	mov	r0, r2
 80050c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050c6:	e009      	b.n	80050dc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f813 	bl	80050f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050ce:	e005      	b.n	80050dc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f80f 	bl	80050f4 <I2C_TreatErrorCallback>
  }
}
 80050d6:	e002      	b.n	80050de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050d8:	bf00      	nop
 80050da:	e000      	b.n	80050de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050dc:	bf00      	nop
}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	ffff0000 	.word	0xffff0000
 80050ec:	080040bf 	.word	0x080040bf
 80050f0:	0800518b 	.word	0x0800518b

080050f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b60      	cmp	r3, #96	; 0x60
 8005106:	d10e      	bne.n	8005126 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7fe ffb7 	bl	8004092 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005124:	e009      	b.n	800513a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7fd fcb9 	bl	8002aac <HAL_I2C_ErrorCallback>
}
 800513a:	bf00      	nop
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b02      	cmp	r3, #2
 8005156:	d103      	bne.n	8005160 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2200      	movs	r2, #0
 800515e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b01      	cmp	r3, #1
 800516c:	d007      	beq.n	800517e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699a      	ldr	r2, [r3, #24]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	619a      	str	r2, [r3, #24]
  }
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	2200      	movs	r2, #0
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	2200      	movs	r2, #0
 80051b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f7ff ff9b 	bl	80050f4 <I2C_TreatErrorCallback>
}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b084      	sub	sp, #16
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	60f8      	str	r0, [r7, #12]
 80051ce:	60b9      	str	r1, [r7, #8]
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	4613      	mov	r3, r2
 80051d4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d6:	e031      	b.n	800523c <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051de:	d02d      	beq.n	800523c <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e0:	f7fd ff38 	bl	8003054 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d302      	bcc.n	80051f6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d122      	bne.n	800523c <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	699a      	ldr	r2, [r3, #24]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4013      	ands	r3, r2
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	429a      	cmp	r2, r3
 8005204:	bf0c      	ite	eq
 8005206:	2301      	moveq	r3, #1
 8005208:	2300      	movne	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	429a      	cmp	r2, r3
 8005212:	d113      	bne.n	800523c <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	f043 0220 	orr.w	r2, r3, #32
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e00f      	b.n	800525c <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	4013      	ands	r3, r2
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	429a      	cmp	r2, r3
 800524a:	bf0c      	ite	eq
 800524c:	2301      	moveq	r3, #1
 800524e:	2300      	movne	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	429a      	cmp	r2, r3
 8005258:	d0be      	beq.n	80051d8 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005270:	e033      	b.n	80052da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f900 	bl	800547c <I2C_IsErrorOccurred>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e031      	b.n	80052ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800528c:	d025      	beq.n	80052da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fd fee1 	bl	8003054 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d11a      	bne.n	80052da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f003 0302 	and.w	r3, r3, #2
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d013      	beq.n	80052da <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	f043 0220 	orr.w	r2, r3, #32
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e007      	b.n	80052ea <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d1c4      	bne.n	8005272 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b084      	sub	sp, #16
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052fe:	e02f      	b.n	8005360 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f8b9 	bl	800547c <I2C_IsErrorOccurred>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e02d      	b.n	8005370 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fd fe9e 	bl	8003054 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d11a      	bne.n	8005360 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b20      	cmp	r3, #32
 8005336:	d013      	beq.n	8005360 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533c:	f043 0220 	orr.w	r2, r3, #32
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e007      	b.n	8005370 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b20      	cmp	r3, #32
 800536c:	d1c8      	bne.n	8005300 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3710      	adds	r7, #16
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005384:	e06b      	b.n	800545e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f876 	bl	800547c <I2C_IsErrorOccurred>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e069      	b.n	800546e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d138      	bne.n	800541a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d105      	bne.n	80053c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	e055      	b.n	800546e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d107      	bne.n	80053e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2210      	movs	r2, #16
 80053d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2204      	movs	r2, #4
 80053dc:	645a      	str	r2, [r3, #68]	; 0x44
 80053de:	e002      	b.n	80053e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2200      	movs	r2, #0
 80053e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2220      	movs	r2, #32
 80053ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6859      	ldr	r1, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	4b1f      	ldr	r3, [pc, #124]	; (8005478 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80053fa:	400b      	ands	r3, r1
 80053fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e029      	b.n	800546e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7fd fe1b 	bl	8003054 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d116      	bne.n	800545e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b04      	cmp	r3, #4
 800543c:	d00f      	beq.n	800545e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005442:	f043 0220 	orr.w	r2, r3, #32
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e007      	b.n	800546e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b04      	cmp	r3, #4
 800546a:	d18c      	bne.n	8005386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	fe00e800 	.word	0xfe00e800

0800547c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08a      	sub	sp, #40	; 0x28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f003 0310 	and.w	r3, r3, #16
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d068      	beq.n	800557a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2210      	movs	r2, #16
 80054ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054b0:	e049      	b.n	8005546 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054b8:	d045      	beq.n	8005546 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fd fdcb 	bl	8003054 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <I2C_IsErrorOccurred+0x54>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d13a      	bne.n	8005546 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f2:	d121      	bne.n	8005538 <I2C_IsErrorOccurred+0xbc>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054fa:	d01d      	beq.n	8005538 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80054fc:	7cfb      	ldrb	r3, [r7, #19]
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d01a      	beq.n	8005538 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005510:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005512:	f7fd fd9f 	bl	8003054 <HAL_GetTick>
 8005516:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005518:	e00e      	b.n	8005538 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800551a:	f7fd fd9b 	bl	8003054 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b19      	cmp	r3, #25
 8005526:	d907      	bls.n	8005538 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	f043 0320 	orr.w	r3, r3, #32
 800552e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005536:	e006      	b.n	8005546 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	d1e9      	bne.n	800551a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b20      	cmp	r3, #32
 8005552:	d003      	beq.n	800555c <I2C_IsErrorOccurred+0xe0>
 8005554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0aa      	beq.n	80054b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800555c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2220      	movs	r2, #32
 800556a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	f043 0304 	orr.w	r3, r3, #4
 8005572:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	f043 0308 	orr.w	r3, r3, #8
 80055b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00b      	beq.n	80055e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	f043 0302 	orr.w	r3, r3, #2
 80055d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80055e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01c      	beq.n	800562a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f7ff fda6 	bl	8005142 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <I2C_IsErrorOccurred+0x1bc>)
 8005602:	400b      	ands	r3, r1
 8005604:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	431a      	orrs	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800562a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800562e:	4618      	mov	r0, r3
 8005630:	3728      	adds	r7, #40	; 0x28
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	fe00e800 	.word	0xfe00e800

0800563c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	607b      	str	r3, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	817b      	strh	r3, [r7, #10]
 800564a:	4613      	mov	r3, r2
 800564c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800564e:	897b      	ldrh	r3, [r7, #10]
 8005650:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005654:	7a7b      	ldrb	r3, [r7, #9]
 8005656:	041b      	lsls	r3, r3, #16
 8005658:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800565c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	4313      	orrs	r3, r2
 8005666:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800566a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	0d5b      	lsrs	r3, r3, #21
 8005676:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800567a:	4b08      	ldr	r3, [pc, #32]	; (800569c <I2C_TransferConfig+0x60>)
 800567c:	430b      	orrs	r3, r1
 800567e:	43db      	mvns	r3, r3
 8005680:	ea02 0103 	and.w	r1, r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	03ff63ff 	.word	0x03ff63ff

080056a0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b4:	4a39      	ldr	r2, [pc, #228]	; (800579c <I2C_Enable_IRQ+0xfc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d032      	beq.n	8005720 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80056be:	4a38      	ldr	r2, [pc, #224]	; (80057a0 <I2C_Enable_IRQ+0x100>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d02d      	beq.n	8005720 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80056c8:	4a36      	ldr	r2, [pc, #216]	; (80057a4 <I2C_Enable_IRQ+0x104>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d028      	beq.n	8005720 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80056ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	da03      	bge.n	80056de <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80056dc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80056de:	887b      	ldrh	r3, [r7, #2]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80056ee:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80056f0:	887b      	ldrh	r3, [r7, #2]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005700:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005702:	887b      	ldrh	r3, [r7, #2]
 8005704:	2b10      	cmp	r3, #16
 8005706:	d103      	bne.n	8005710 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800570e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005710:	887b      	ldrh	r3, [r7, #2]
 8005712:	2b20      	cmp	r3, #32
 8005714:	d133      	bne.n	800577e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f043 0320 	orr.w	r3, r3, #32
 800571c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800571e:	e02e      	b.n	800577e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005720:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005724:	2b00      	cmp	r3, #0
 8005726:	da03      	bge.n	8005730 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800572e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8005740:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005742:	887b      	ldrh	r3, [r7, #2]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8005752:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005754:	887b      	ldrh	r3, [r7, #2]
 8005756:	2b10      	cmp	r3, #16
 8005758:	d103      	bne.n	8005762 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005760:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005762:	887b      	ldrh	r3, [r7, #2]
 8005764:	2b20      	cmp	r3, #32
 8005766:	d103      	bne.n	8005770 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800576e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005770:	887b      	ldrh	r3, [r7, #2]
 8005772:	2b40      	cmp	r3, #64	; 0x40
 8005774:	d103      	bne.n	800577e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800577c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6819      	ldr	r1, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	430a      	orrs	r2, r1
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	080042af 	.word	0x080042af
 80057a0:	080046d1 	.word	0x080046d1
 80057a4:	08004485 	.word	0x08004485

080057a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80057b8:	887b      	ldrh	r3, [r7, #2]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00f      	beq.n	80057e2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80057c8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80057d6:	2b28      	cmp	r3, #40	; 0x28
 80057d8:	d003      	beq.n	80057e2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80057e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80057e2:	887b      	ldrh	r3, [r7, #2]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00f      	beq.n	800580c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80057f2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005800:	2b28      	cmp	r3, #40	; 0x28
 8005802:	d003      	beq.n	800580c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800580a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800580c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005810:	2b00      	cmp	r3, #0
 8005812:	da03      	bge.n	800581c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800581a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800581c:	887b      	ldrh	r3, [r7, #2]
 800581e:	2b10      	cmp	r3, #16
 8005820:	d103      	bne.n	800582a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005828:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800582a:	887b      	ldrh	r3, [r7, #2]
 800582c:	2b20      	cmp	r3, #32
 800582e:	d103      	bne.n	8005838 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f043 0320 	orr.w	r3, r3, #32
 8005836:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005838:	887b      	ldrh	r3, [r7, #2]
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d103      	bne.n	8005846 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005844:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6819      	ldr	r1, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	43da      	mvns	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	400a      	ands	r2, r1
 8005856:	601a      	str	r2, [r3, #0]
}
 8005858:	bf00      	nop
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b20      	cmp	r3, #32
 8005878:	d138      	bne.n	80058ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005884:	2302      	movs	r3, #2
 8005886:	e032      	b.n	80058ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2224      	movs	r2, #36	; 0x24
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0201 	bic.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6819      	ldr	r1, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e000      	b.n	80058ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058ec:	2302      	movs	r3, #2
  }
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b085      	sub	sp, #20
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b20      	cmp	r3, #32
 800590e:	d139      	bne.n	8005984 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005916:	2b01      	cmp	r3, #1
 8005918:	d101      	bne.n	800591e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800591a:	2302      	movs	r3, #2
 800591c:	e033      	b.n	8005986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2224      	movs	r2, #36	; 0x24
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0201 	bic.w	r2, r2, #1
 800593c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800594c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3714      	adds	r7, #20
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005998:	4b04      	ldr	r3, [pc, #16]	; (80059ac <HAL_PWREx_GetVoltageRange+0x18>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40007000 	.word	0x40007000

080059b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059be:	d130      	bne.n	8005a22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80059c0:	4b23      	ldr	r3, [pc, #140]	; (8005a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059cc:	d038      	beq.n	8005a40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80059ce:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80059d6:	4a1e      	ldr	r2, [pc, #120]	; (8005a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80059de:	4b1d      	ldr	r3, [pc, #116]	; (8005a54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2232      	movs	r2, #50	; 0x32
 80059e4:	fb02 f303 	mul.w	r3, r2, r3
 80059e8:	4a1b      	ldr	r2, [pc, #108]	; (8005a58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80059ea:	fba2 2303 	umull	r2, r3, r2, r3
 80059ee:	0c9b      	lsrs	r3, r3, #18
 80059f0:	3301      	adds	r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059f4:	e002      	b.n	80059fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059fc:	4b14      	ldr	r3, [pc, #80]	; (8005a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a08:	d102      	bne.n	8005a10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f2      	bne.n	80059f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a10:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a1c:	d110      	bne.n	8005a40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e00f      	b.n	8005a42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a2e:	d007      	beq.n	8005a40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a38:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40007000 	.word	0x40007000
 8005a54:	20000000 	.word	0x20000000
 8005a58:	431bde83 	.word	0x431bde83

08005a5c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f000 bc02 	b.w	8006274 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a70:	4b96      	ldr	r3, [pc, #600]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 030c 	and.w	r3, r3, #12
 8005a78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a7a:	4b94      	ldr	r3, [pc, #592]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 80e4 	beq.w	8005c5a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d007      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x4c>
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	2b0c      	cmp	r3, #12
 8005a9c:	f040 808b 	bne.w	8005bb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	f040 8087 	bne.w	8005bb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005aa8:	4b88      	ldr	r3, [pc, #544]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x64>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e3d9      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1a      	ldr	r2, [r3, #32]
 8005ac4:	4b81      	ldr	r3, [pc, #516]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0308 	and.w	r3, r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <HAL_RCC_OscConfig+0x7e>
 8005ad0:	4b7e      	ldr	r3, [pc, #504]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad8:	e005      	b.n	8005ae6 <HAL_RCC_OscConfig+0x8a>
 8005ada:	4b7c      	ldr	r3, [pc, #496]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ae0:	091b      	lsrs	r3, r3, #4
 8005ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d223      	bcs.n	8005b32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fd8c 	bl	800660c <RCC_SetFlashLatencyFromMSIRange>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e3ba      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005afe:	4b73      	ldr	r3, [pc, #460]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a72      	ldr	r2, [pc, #456]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b04:	f043 0308 	orr.w	r3, r3, #8
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	4b70      	ldr	r3, [pc, #448]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	496d      	ldr	r1, [pc, #436]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b1c:	4b6b      	ldr	r3, [pc, #428]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	4968      	ldr	r1, [pc, #416]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]
 8005b30:	e025      	b.n	8005b7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b32:	4b66      	ldr	r3, [pc, #408]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a65      	ldr	r2, [pc, #404]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b38:	f043 0308 	orr.w	r3, r3, #8
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	4b63      	ldr	r3, [pc, #396]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	4960      	ldr	r1, [pc, #384]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b50:	4b5e      	ldr	r3, [pc, #376]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	69db      	ldr	r3, [r3, #28]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	495b      	ldr	r1, [pc, #364]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fd4c 	bl	800660c <RCC_SetFlashLatencyFromMSIRange>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e37a      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b7e:	f000 fc81 	bl	8006484 <HAL_RCC_GetSysClockFreq>
 8005b82:	4602      	mov	r2, r0
 8005b84:	4b51      	ldr	r3, [pc, #324]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	091b      	lsrs	r3, r3, #4
 8005b8a:	f003 030f 	and.w	r3, r3, #15
 8005b8e:	4950      	ldr	r1, [pc, #320]	; (8005cd0 <HAL_RCC_OscConfig+0x274>)
 8005b90:	5ccb      	ldrb	r3, [r1, r3]
 8005b92:	f003 031f 	and.w	r3, r3, #31
 8005b96:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9a:	4a4e      	ldr	r2, [pc, #312]	; (8005cd4 <HAL_RCC_OscConfig+0x278>)
 8005b9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b9e:	4b4e      	ldr	r3, [pc, #312]	; (8005cd8 <HAL_RCC_OscConfig+0x27c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fd fa06 	bl	8002fb4 <HAL_InitTick>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d052      	beq.n	8005c58 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	e35e      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d032      	beq.n	8005c24 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005bbe:	4b43      	ldr	r3, [pc, #268]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a42      	ldr	r2, [pc, #264]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bca:	f7fd fa43 	bl	8003054 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bd2:	f7fd fa3f 	bl	8003054 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e347      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005be4:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005bf0:	4b36      	ldr	r3, [pc, #216]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a35      	ldr	r2, [pc, #212]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005bf6:	f043 0308 	orr.w	r3, r3, #8
 8005bfa:	6013      	str	r3, [r2, #0]
 8005bfc:	4b33      	ldr	r3, [pc, #204]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	4930      	ldr	r1, [pc, #192]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c0e:	4b2f      	ldr	r3, [pc, #188]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	021b      	lsls	r3, r3, #8
 8005c1c:	492b      	ldr	r1, [pc, #172]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	604b      	str	r3, [r1, #4]
 8005c22:	e01a      	b.n	8005c5a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c24:	4b29      	ldr	r3, [pc, #164]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a28      	ldr	r2, [pc, #160]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005c2a:	f023 0301 	bic.w	r3, r3, #1
 8005c2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c30:	f7fd fa10 	bl	8003054 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c38:	f7fd fa0c 	bl	8003054 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e314      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c4a:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f0      	bne.n	8005c38 <HAL_RCC_OscConfig+0x1dc>
 8005c56:	e000      	b.n	8005c5a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d073      	beq.n	8005d4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_OscConfig+0x21c>
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	2b0c      	cmp	r3, #12
 8005c70:	d10e      	bne.n	8005c90 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d10b      	bne.n	8005c90 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c78:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d063      	beq.n	8005d4c <HAL_RCC_OscConfig+0x2f0>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d15f      	bne.n	8005d4c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e2f1      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c98:	d106      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x24c>
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a0b      	ldr	r2, [pc, #44]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca4:	6013      	str	r3, [r2, #0]
 8005ca6:	e025      	b.n	8005cf4 <HAL_RCC_OscConfig+0x298>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cb0:	d114      	bne.n	8005cdc <HAL_RCC_OscConfig+0x280>
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a05      	ldr	r2, [pc, #20]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a02      	ldr	r2, [pc, #8]	; (8005ccc <HAL_RCC_OscConfig+0x270>)
 8005cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	e013      	b.n	8005cf4 <HAL_RCC_OscConfig+0x298>
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	08007f7c 	.word	0x08007f7c
 8005cd4:	20000000 	.word	0x20000000
 8005cd8:	20000004 	.word	0x20000004
 8005cdc:	4ba0      	ldr	r3, [pc, #640]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a9f      	ldr	r2, [pc, #636]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ce6:	6013      	str	r3, [r2, #0]
 8005ce8:	4b9d      	ldr	r3, [pc, #628]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a9c      	ldr	r2, [pc, #624]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d013      	beq.n	8005d24 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfc:	f7fd f9aa 	bl	8003054 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d04:	f7fd f9a6 	bl	8003054 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b64      	cmp	r3, #100	; 0x64
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e2ae      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d16:	4b92      	ldr	r3, [pc, #584]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <HAL_RCC_OscConfig+0x2a8>
 8005d22:	e014      	b.n	8005d4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d24:	f7fd f996 	bl	8003054 <HAL_GetTick>
 8005d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d2a:	e008      	b.n	8005d3e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d2c:	f7fd f992 	bl	8003054 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b64      	cmp	r3, #100	; 0x64
 8005d38:	d901      	bls.n	8005d3e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e29a      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d3e:	4b88      	ldr	r3, [pc, #544]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1f0      	bne.n	8005d2c <HAL_RCC_OscConfig+0x2d0>
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d060      	beq.n	8005e1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d005      	beq.n	8005d6c <HAL_RCC_OscConfig+0x310>
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	2b0c      	cmp	r3, #12
 8005d64:	d119      	bne.n	8005d9a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d116      	bne.n	8005d9a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d6c:	4b7c      	ldr	r3, [pc, #496]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <HAL_RCC_OscConfig+0x328>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e277      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d84:	4b76      	ldr	r3, [pc, #472]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	061b      	lsls	r3, r3, #24
 8005d92:	4973      	ldr	r1, [pc, #460]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d98:	e040      	b.n	8005e1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d023      	beq.n	8005dea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005da2:	4b6f      	ldr	r3, [pc, #444]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a6e      	ldr	r2, [pc, #440]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dae:	f7fd f951 	bl	8003054 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005db6:	f7fd f94d 	bl	8003054 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e255      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dc8:	4b65      	ldr	r3, [pc, #404]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd4:	4b62      	ldr	r3, [pc, #392]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	061b      	lsls	r3, r3, #24
 8005de2:	495f      	ldr	r1, [pc, #380]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	604b      	str	r3, [r1, #4]
 8005de8:	e018      	b.n	8005e1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dea:	4b5d      	ldr	r3, [pc, #372]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5c      	ldr	r2, [pc, #368]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df6:	f7fd f92d 	bl	8003054 <HAL_GetTick>
 8005dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dfe:	f7fd f929 	bl	8003054 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e231      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e10:	4b53      	ldr	r3, [pc, #332]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1f0      	bne.n	8005dfe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d03c      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01c      	beq.n	8005e6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e30:	4b4b      	ldr	r3, [pc, #300]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e36:	4a4a      	ldr	r2, [pc, #296]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005e38:	f043 0301 	orr.w	r3, r3, #1
 8005e3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e40:	f7fd f908 	bl	8003054 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e48:	f7fd f904 	bl	8003054 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e20c      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e5a:	4b41      	ldr	r3, [pc, #260]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0ef      	beq.n	8005e48 <HAL_RCC_OscConfig+0x3ec>
 8005e68:	e01b      	b.n	8005ea2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e6a:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005e6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e70:	4a3b      	ldr	r2, [pc, #236]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005e72:	f023 0301 	bic.w	r3, r3, #1
 8005e76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7a:	f7fd f8eb 	bl	8003054 <HAL_GetTick>
 8005e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e80:	e008      	b.n	8005e94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e82:	f7fd f8e7 	bl	8003054 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d901      	bls.n	8005e94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e1ef      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e94:	4b32      	ldr	r3, [pc, #200]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1ef      	bne.n	8005e82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80a6 	beq.w	8005ffc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005eb4:	4b2a      	ldr	r3, [pc, #168]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10d      	bne.n	8005edc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ec0:	4b27      	ldr	r3, [pc, #156]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec4:	4a26      	ldr	r2, [pc, #152]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eca:	6593      	str	r3, [r2, #88]	; 0x58
 8005ecc:	4b24      	ldr	r3, [pc, #144]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005edc:	4b21      	ldr	r3, [pc, #132]	; (8005f64 <HAL_RCC_OscConfig+0x508>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d118      	bne.n	8005f1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ee8:	4b1e      	ldr	r3, [pc, #120]	; (8005f64 <HAL_RCC_OscConfig+0x508>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <HAL_RCC_OscConfig+0x508>)
 8005eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ef2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ef4:	f7fd f8ae 	bl	8003054 <HAL_GetTick>
 8005ef8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005efa:	e008      	b.n	8005f0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005efc:	f7fd f8aa 	bl	8003054 <HAL_GetTick>
 8005f00:	4602      	mov	r2, r0
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e1b2      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <HAL_RCC_OscConfig+0x508>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0f0      	beq.n	8005efc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d108      	bne.n	8005f34 <HAL_RCC_OscConfig+0x4d8>
 8005f22:	4b0f      	ldr	r3, [pc, #60]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f28:	4a0d      	ldr	r2, [pc, #52]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f32:	e029      	b.n	8005f88 <HAL_RCC_OscConfig+0x52c>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	2b05      	cmp	r3, #5
 8005f3a:	d115      	bne.n	8005f68 <HAL_RCC_OscConfig+0x50c>
 8005f3c:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f42:	4a07      	ldr	r2, [pc, #28]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005f44:	f043 0304 	orr.w	r3, r3, #4
 8005f48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f4c:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f52:	4a03      	ldr	r2, [pc, #12]	; (8005f60 <HAL_RCC_OscConfig+0x504>)
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f5c:	e014      	b.n	8005f88 <HAL_RCC_OscConfig+0x52c>
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000
 8005f64:	40007000 	.word	0x40007000
 8005f68:	4b9a      	ldr	r3, [pc, #616]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8005f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6e:	4a99      	ldr	r2, [pc, #612]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8005f70:	f023 0301 	bic.w	r3, r3, #1
 8005f74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f78:	4b96      	ldr	r3, [pc, #600]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	4a95      	ldr	r2, [pc, #596]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8005f80:	f023 0304 	bic.w	r3, r3, #4
 8005f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d016      	beq.n	8005fbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7fd f860 	bl	8003054 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f96:	e00a      	b.n	8005fae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f98:	f7fd f85c 	bl	8003054 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e162      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fae:	4b89      	ldr	r3, [pc, #548]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d0ed      	beq.n	8005f98 <HAL_RCC_OscConfig+0x53c>
 8005fbc:	e015      	b.n	8005fea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fbe:	f7fd f849 	bl	8003054 <HAL_GetTick>
 8005fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fc4:	e00a      	b.n	8005fdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc6:	f7fd f845 	bl	8003054 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e14b      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005fdc:	4b7d      	ldr	r3, [pc, #500]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8005fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1ed      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fea:	7ffb      	ldrb	r3, [r7, #31]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d105      	bne.n	8005ffc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ff0:	4b78      	ldr	r3, [pc, #480]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff4:	4a77      	ldr	r2, [pc, #476]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8005ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ffa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d03c      	beq.n	8006082 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01c      	beq.n	800604a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006010:	4b70      	ldr	r3, [pc, #448]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8006012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006016:	4a6f      	ldr	r2, [pc, #444]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8006018:	f043 0301 	orr.w	r3, r3, #1
 800601c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006020:	f7fd f818 	bl	8003054 <HAL_GetTick>
 8006024:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006026:	e008      	b.n	800603a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006028:	f7fd f814 	bl	8003054 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d901      	bls.n	800603a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e11c      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800603a:	4b66      	ldr	r3, [pc, #408]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 800603c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0ef      	beq.n	8006028 <HAL_RCC_OscConfig+0x5cc>
 8006048:	e01b      	b.n	8006082 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800604a:	4b62      	ldr	r3, [pc, #392]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 800604c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006050:	4a60      	ldr	r2, [pc, #384]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800605a:	f7fc fffb 	bl	8003054 <HAL_GetTick>
 800605e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006062:	f7fc fff7 	bl	8003054 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e0ff      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006074:	4b57      	ldr	r3, [pc, #348]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8006076:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1ef      	bne.n	8006062 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 80f3 	beq.w	8006272 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	2b02      	cmp	r3, #2
 8006092:	f040 80c9 	bne.w	8006228 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006096:	4b4f      	ldr	r3, [pc, #316]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	f003 0203 	and.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d12c      	bne.n	8006104 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	3b01      	subs	r3, #1
 80060b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d123      	bne.n	8006104 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d11b      	bne.n	8006104 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060d8:	429a      	cmp	r2, r3
 80060da:	d113      	bne.n	8006104 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	3b01      	subs	r3, #1
 80060ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d109      	bne.n	8006104 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	085b      	lsrs	r3, r3, #1
 80060fc:	3b01      	subs	r3, #1
 80060fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006100:	429a      	cmp	r2, r3
 8006102:	d06b      	beq.n	80061dc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b0c      	cmp	r3, #12
 8006108:	d062      	beq.n	80061d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800610a:	4b32      	ldr	r3, [pc, #200]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e0ac      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800611a:	4b2e      	ldr	r3, [pc, #184]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a2d      	ldr	r2, [pc, #180]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8006120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006124:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006126:	f7fc ff95 	bl	8003054 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612e:	f7fc ff91 	bl	8003054 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e099      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006140:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1f0      	bne.n	800612e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800614c:	4b21      	ldr	r3, [pc, #132]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	4b21      	ldr	r3, [pc, #132]	; (80061d8 <HAL_RCC_OscConfig+0x77c>)
 8006152:	4013      	ands	r3, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800615c:	3a01      	subs	r2, #1
 800615e:	0112      	lsls	r2, r2, #4
 8006160:	4311      	orrs	r1, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006166:	0212      	lsls	r2, r2, #8
 8006168:	4311      	orrs	r1, r2
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800616e:	0852      	lsrs	r2, r2, #1
 8006170:	3a01      	subs	r2, #1
 8006172:	0552      	lsls	r2, r2, #21
 8006174:	4311      	orrs	r1, r2
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800617a:	0852      	lsrs	r2, r2, #1
 800617c:	3a01      	subs	r2, #1
 800617e:	0652      	lsls	r2, r2, #25
 8006180:	4311      	orrs	r1, r2
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006186:	06d2      	lsls	r2, r2, #27
 8006188:	430a      	orrs	r2, r1
 800618a:	4912      	ldr	r1, [pc, #72]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 800618c:	4313      	orrs	r3, r2
 800618e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006190:	4b10      	ldr	r3, [pc, #64]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a0f      	ldr	r2, [pc, #60]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 8006196:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800619a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800619c:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a0c      	ldr	r2, [pc, #48]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 80061a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061a8:	f7fc ff54 	bl	8003054 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b0:	f7fc ff50 	bl	8003054 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e058      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061c2:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <HAL_RCC_OscConfig+0x778>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f0      	beq.n	80061b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061ce:	e050      	b.n	8006272 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e04f      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
 80061d4:	40021000 	.word	0x40021000
 80061d8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061dc:	4b27      	ldr	r3, [pc, #156]	; (800627c <HAL_RCC_OscConfig+0x820>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d144      	bne.n	8006272 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80061e8:	4b24      	ldr	r3, [pc, #144]	; (800627c <HAL_RCC_OscConfig+0x820>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a23      	ldr	r2, [pc, #140]	; (800627c <HAL_RCC_OscConfig+0x820>)
 80061ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061f4:	4b21      	ldr	r3, [pc, #132]	; (800627c <HAL_RCC_OscConfig+0x820>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	4a20      	ldr	r2, [pc, #128]	; (800627c <HAL_RCC_OscConfig+0x820>)
 80061fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006200:	f7fc ff28 	bl	8003054 <HAL_GetTick>
 8006204:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006208:	f7fc ff24 	bl	8003054 <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e02c      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800621a:	4b18      	ldr	r3, [pc, #96]	; (800627c <HAL_RCC_OscConfig+0x820>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0f0      	beq.n	8006208 <HAL_RCC_OscConfig+0x7ac>
 8006226:	e024      	b.n	8006272 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2b0c      	cmp	r3, #12
 800622c:	d01f      	beq.n	800626e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <HAL_RCC_OscConfig+0x820>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a12      	ldr	r2, [pc, #72]	; (800627c <HAL_RCC_OscConfig+0x820>)
 8006234:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623a:	f7fc ff0b 	bl	8003054 <HAL_GetTick>
 800623e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006240:	e008      	b.n	8006254 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006242:	f7fc ff07 	bl	8003054 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e00f      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006254:	4b09      	ldr	r3, [pc, #36]	; (800627c <HAL_RCC_OscConfig+0x820>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f0      	bne.n	8006242 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <HAL_RCC_OscConfig+0x820>)
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	4905      	ldr	r1, [pc, #20]	; (800627c <HAL_RCC_OscConfig+0x820>)
 8006266:	4b06      	ldr	r3, [pc, #24]	; (8006280 <HAL_RCC_OscConfig+0x824>)
 8006268:	4013      	ands	r3, r2
 800626a:	60cb      	str	r3, [r1, #12]
 800626c:	e001      	b.n	8006272 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3720      	adds	r7, #32
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40021000 	.word	0x40021000
 8006280:	feeefffc 	.word	0xfeeefffc

08006284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b084      	sub	sp, #16
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0e7      	b.n	8006468 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006298:	4b75      	ldr	r3, [pc, #468]	; (8006470 <HAL_RCC_ClockConfig+0x1ec>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d910      	bls.n	80062c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a6:	4b72      	ldr	r3, [pc, #456]	; (8006470 <HAL_RCC_ClockConfig+0x1ec>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f023 0207 	bic.w	r2, r3, #7
 80062ae:	4970      	ldr	r1, [pc, #448]	; (8006470 <HAL_RCC_ClockConfig+0x1ec>)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b6:	4b6e      	ldr	r3, [pc, #440]	; (8006470 <HAL_RCC_ClockConfig+0x1ec>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e0cf      	b.n	8006468 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d010      	beq.n	80062f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	4b66      	ldr	r3, [pc, #408]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d908      	bls.n	80062f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e4:	4b63      	ldr	r3, [pc, #396]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4960      	ldr	r1, [pc, #384]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d04c      	beq.n	800639c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b03      	cmp	r3, #3
 8006308:	d107      	bne.n	800631a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800630a:	4b5a      	ldr	r3, [pc, #360]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d121      	bne.n	800635a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e0a6      	b.n	8006468 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b02      	cmp	r3, #2
 8006320:	d107      	bne.n	8006332 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006322:	4b54      	ldr	r3, [pc, #336]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d115      	bne.n	800635a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e09a      	b.n	8006468 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d107      	bne.n	800634a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800633a:	4b4e      	ldr	r3, [pc, #312]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e08e      	b.n	8006468 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800634a:	4b4a      	ldr	r3, [pc, #296]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e086      	b.n	8006468 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800635a:	4b46      	ldr	r3, [pc, #280]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f023 0203 	bic.w	r2, r3, #3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	4943      	ldr	r1, [pc, #268]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 8006368:	4313      	orrs	r3, r2
 800636a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636c:	f7fc fe72 	bl	8003054 <HAL_GetTick>
 8006370:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006372:	e00a      	b.n	800638a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006374:	f7fc fe6e 	bl	8003054 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e06e      	b.n	8006468 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800638a:	4b3a      	ldr	r3, [pc, #232]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 020c 	and.w	r2, r3, #12
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	429a      	cmp	r2, r3
 800639a:	d1eb      	bne.n	8006374 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d010      	beq.n	80063ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	4b31      	ldr	r3, [pc, #196]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d208      	bcs.n	80063ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063b8:	4b2e      	ldr	r3, [pc, #184]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	492b      	ldr	r1, [pc, #172]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063ca:	4b29      	ldr	r3, [pc, #164]	; (8006470 <HAL_RCC_ClockConfig+0x1ec>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d210      	bcs.n	80063fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d8:	4b25      	ldr	r3, [pc, #148]	; (8006470 <HAL_RCC_ClockConfig+0x1ec>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f023 0207 	bic.w	r2, r3, #7
 80063e0:	4923      	ldr	r1, [pc, #140]	; (8006470 <HAL_RCC_ClockConfig+0x1ec>)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063e8:	4b21      	ldr	r3, [pc, #132]	; (8006470 <HAL_RCC_ClockConfig+0x1ec>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d001      	beq.n	80063fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e036      	b.n	8006468 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0304 	and.w	r3, r3, #4
 8006402:	2b00      	cmp	r3, #0
 8006404:	d008      	beq.n	8006418 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006406:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	4918      	ldr	r1, [pc, #96]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 8006414:	4313      	orrs	r3, r2
 8006416:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0308 	and.w	r3, r3, #8
 8006420:	2b00      	cmp	r3, #0
 8006422:	d009      	beq.n	8006438 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4910      	ldr	r1, [pc, #64]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 8006434:	4313      	orrs	r3, r2
 8006436:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006438:	f000 f824 	bl	8006484 <HAL_RCC_GetSysClockFreq>
 800643c:	4602      	mov	r2, r0
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <HAL_RCC_ClockConfig+0x1f0>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	091b      	lsrs	r3, r3, #4
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	490b      	ldr	r1, [pc, #44]	; (8006478 <HAL_RCC_ClockConfig+0x1f4>)
 800644a:	5ccb      	ldrb	r3, [r1, r3]
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
 8006454:	4a09      	ldr	r2, [pc, #36]	; (800647c <HAL_RCC_ClockConfig+0x1f8>)
 8006456:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006458:	4b09      	ldr	r3, [pc, #36]	; (8006480 <HAL_RCC_ClockConfig+0x1fc>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4618      	mov	r0, r3
 800645e:	f7fc fda9 	bl	8002fb4 <HAL_InitTick>
 8006462:	4603      	mov	r3, r0
 8006464:	72fb      	strb	r3, [r7, #11]

  return status;
 8006466:	7afb      	ldrb	r3, [r7, #11]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40022000 	.word	0x40022000
 8006474:	40021000 	.word	0x40021000
 8006478:	08007f7c 	.word	0x08007f7c
 800647c:	20000000 	.word	0x20000000
 8006480:	20000004 	.word	0x20000004

08006484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006484:	b480      	push	{r7}
 8006486:	b089      	sub	sp, #36	; 0x24
 8006488:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	61fb      	str	r3, [r7, #28]
 800648e:	2300      	movs	r3, #0
 8006490:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006492:	4b3e      	ldr	r3, [pc, #248]	; (800658c <HAL_RCC_GetSysClockFreq+0x108>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 030c 	and.w	r3, r3, #12
 800649a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800649c:	4b3b      	ldr	r3, [pc, #236]	; (800658c <HAL_RCC_GetSysClockFreq+0x108>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0303 	and.w	r3, r3, #3
 80064a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_GetSysClockFreq+0x34>
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b0c      	cmp	r3, #12
 80064b0:	d121      	bne.n	80064f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d11e      	bne.n	80064f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80064b8:	4b34      	ldr	r3, [pc, #208]	; (800658c <HAL_RCC_GetSysClockFreq+0x108>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d107      	bne.n	80064d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80064c4:	4b31      	ldr	r3, [pc, #196]	; (800658c <HAL_RCC_GetSysClockFreq+0x108>)
 80064c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ca:	0a1b      	lsrs	r3, r3, #8
 80064cc:	f003 030f 	and.w	r3, r3, #15
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	e005      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80064d4:	4b2d      	ldr	r3, [pc, #180]	; (800658c <HAL_RCC_GetSysClockFreq+0x108>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80064e0:	4a2b      	ldr	r2, [pc, #172]	; (8006590 <HAL_RCC_GetSysClockFreq+0x10c>)
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10d      	bne.n	800650c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064f4:	e00a      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d102      	bne.n	8006502 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064fc:	4b25      	ldr	r3, [pc, #148]	; (8006594 <HAL_RCC_GetSysClockFreq+0x110>)
 80064fe:	61bb      	str	r3, [r7, #24]
 8006500:	e004      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d101      	bne.n	800650c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006508:	4b23      	ldr	r3, [pc, #140]	; (8006598 <HAL_RCC_GetSysClockFreq+0x114>)
 800650a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b0c      	cmp	r3, #12
 8006510:	d134      	bne.n	800657c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006512:	4b1e      	ldr	r3, [pc, #120]	; (800658c <HAL_RCC_GetSysClockFreq+0x108>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d003      	beq.n	800652a <HAL_RCC_GetSysClockFreq+0xa6>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b03      	cmp	r3, #3
 8006526:	d003      	beq.n	8006530 <HAL_RCC_GetSysClockFreq+0xac>
 8006528:	e005      	b.n	8006536 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800652a:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <HAL_RCC_GetSysClockFreq+0x110>)
 800652c:	617b      	str	r3, [r7, #20]
      break;
 800652e:	e005      	b.n	800653c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006530:	4b19      	ldr	r3, [pc, #100]	; (8006598 <HAL_RCC_GetSysClockFreq+0x114>)
 8006532:	617b      	str	r3, [r7, #20]
      break;
 8006534:	e002      	b.n	800653c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	617b      	str	r3, [r7, #20]
      break;
 800653a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800653c:	4b13      	ldr	r3, [pc, #76]	; (800658c <HAL_RCC_GetSysClockFreq+0x108>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	091b      	lsrs	r3, r3, #4
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	3301      	adds	r3, #1
 8006548:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800654a:	4b10      	ldr	r3, [pc, #64]	; (800658c <HAL_RCC_GetSysClockFreq+0x108>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	0a1b      	lsrs	r3, r3, #8
 8006550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	fb03 f202 	mul.w	r2, r3, r2
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006560:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <HAL_RCC_GetSysClockFreq+0x108>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	0e5b      	lsrs	r3, r3, #25
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	3301      	adds	r3, #1
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	fbb2 f3f3 	udiv	r3, r2, r3
 800657a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800657c:	69bb      	ldr	r3, [r7, #24]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3724      	adds	r7, #36	; 0x24
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40021000 	.word	0x40021000
 8006590:	08007f94 	.word	0x08007f94
 8006594:	00f42400 	.word	0x00f42400
 8006598:	007a1200 	.word	0x007a1200

0800659c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065a0:	4b03      	ldr	r3, [pc, #12]	; (80065b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80065a2:	681b      	ldr	r3, [r3, #0]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000000 	.word	0x20000000

080065b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80065b8:	f7ff fff0 	bl	800659c <HAL_RCC_GetHCLKFreq>
 80065bc:	4602      	mov	r2, r0
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	0a1b      	lsrs	r3, r3, #8
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	4904      	ldr	r1, [pc, #16]	; (80065dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80065ca:	5ccb      	ldrb	r3, [r1, r3]
 80065cc:	f003 031f 	and.w	r3, r3, #31
 80065d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40021000 	.word	0x40021000
 80065dc:	08007f8c 	.word	0x08007f8c

080065e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80065e4:	f7ff ffda 	bl	800659c <HAL_RCC_GetHCLKFreq>
 80065e8:	4602      	mov	r2, r0
 80065ea:	4b06      	ldr	r3, [pc, #24]	; (8006604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	0adb      	lsrs	r3, r3, #11
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	4904      	ldr	r1, [pc, #16]	; (8006608 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065f6:	5ccb      	ldrb	r3, [r1, r3]
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006600:	4618      	mov	r0, r3
 8006602:	bd80      	pop	{r7, pc}
 8006604:	40021000 	.word	0x40021000
 8006608:	08007f8c 	.word	0x08007f8c

0800660c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006618:	4b2a      	ldr	r3, [pc, #168]	; (80066c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800661a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006624:	f7ff f9b6 	bl	8005994 <HAL_PWREx_GetVoltageRange>
 8006628:	6178      	str	r0, [r7, #20]
 800662a:	e014      	b.n	8006656 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800662c:	4b25      	ldr	r3, [pc, #148]	; (80066c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800662e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006630:	4a24      	ldr	r2, [pc, #144]	; (80066c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006636:	6593      	str	r3, [r2, #88]	; 0x58
 8006638:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800663c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006644:	f7ff f9a6 	bl	8005994 <HAL_PWREx_GetVoltageRange>
 8006648:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800664a:	4b1e      	ldr	r3, [pc, #120]	; (80066c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800664c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664e:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006654:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665c:	d10b      	bne.n	8006676 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d919      	bls.n	8006698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2ba0      	cmp	r3, #160	; 0xa0
 8006668:	d902      	bls.n	8006670 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800666a:	2302      	movs	r3, #2
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	e013      	b.n	8006698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006670:	2301      	movs	r3, #1
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	e010      	b.n	8006698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b80      	cmp	r3, #128	; 0x80
 800667a:	d902      	bls.n	8006682 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800667c:	2303      	movs	r3, #3
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	e00a      	b.n	8006698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b80      	cmp	r3, #128	; 0x80
 8006686:	d102      	bne.n	800668e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006688:	2302      	movs	r3, #2
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	e004      	b.n	8006698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b70      	cmp	r3, #112	; 0x70
 8006692:	d101      	bne.n	8006698 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006694:	2301      	movs	r3, #1
 8006696:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006698:	4b0b      	ldr	r3, [pc, #44]	; (80066c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f023 0207 	bic.w	r2, r3, #7
 80066a0:	4909      	ldr	r1, [pc, #36]	; (80066c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d001      	beq.n	80066ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	40021000 	.word	0x40021000
 80066c8:	40022000 	.word	0x40022000

080066cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066d4:	2300      	movs	r3, #0
 80066d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066d8:	2300      	movs	r3, #0
 80066da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d031      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066f0:	d01a      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80066f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066f6:	d814      	bhi.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80066fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006700:	d10f      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006702:	4b5d      	ldr	r3, [pc, #372]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	4a5c      	ldr	r2, [pc, #368]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800670e:	e00c      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	3304      	adds	r3, #4
 8006714:	2100      	movs	r1, #0
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fa22 	bl	8006b60 <RCCEx_PLLSAI1_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006720:	e003      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	74fb      	strb	r3, [r7, #19]
      break;
 8006726:	e000      	b.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800672a:	7cfb      	ldrb	r3, [r7, #19]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10b      	bne.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006730:	4b51      	ldr	r3, [pc, #324]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	494e      	ldr	r1, [pc, #312]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006740:	4313      	orrs	r3, r2
 8006742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006746:	e001      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006748:	7cfb      	ldrb	r3, [r7, #19]
 800674a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 809e 	beq.w	8006896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800675a:	2300      	movs	r3, #0
 800675c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800675e:	4b46      	ldr	r3, [pc, #280]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800676a:	2301      	movs	r3, #1
 800676c:	e000      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800676e:	2300      	movs	r3, #0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00d      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006774:	4b40      	ldr	r3, [pc, #256]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006778:	4a3f      	ldr	r2, [pc, #252]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800677a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800677e:	6593      	str	r3, [r2, #88]	; 0x58
 8006780:	4b3d      	ldr	r3, [pc, #244]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800678c:	2301      	movs	r3, #1
 800678e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006790:	4b3a      	ldr	r3, [pc, #232]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a39      	ldr	r2, [pc, #228]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800679a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800679c:	f7fc fc5a 	bl	8003054 <HAL_GetTick>
 80067a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80067a2:	e009      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a4:	f7fc fc56 	bl	8003054 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d902      	bls.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	74fb      	strb	r3, [r7, #19]
        break;
 80067b6:	e005      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80067b8:	4b30      	ldr	r3, [pc, #192]	; (800687c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d0ef      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80067c4:	7cfb      	ldrb	r3, [r7, #19]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d15a      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067ca:	4b2b      	ldr	r3, [pc, #172]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d01e      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d019      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067e6:	4b24      	ldr	r3, [pc, #144]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067f2:	4b21      	ldr	r3, [pc, #132]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f8:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006802:	4b1d      	ldr	r3, [pc, #116]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006808:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800680a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006812:	4a19      	ldr	r2, [pc, #100]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d016      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fc fc16 	bl	8003054 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800682a:	e00b      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682c:	f7fc fc12 	bl	8003054 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f241 3288 	movw	r2, #5000	; 0x1388
 800683a:	4293      	cmp	r3, r2
 800683c:	d902      	bls.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	74fb      	strb	r3, [r7, #19]
            break;
 8006842:	e006      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006844:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d0ec      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006852:	7cfb      	ldrb	r3, [r7, #19]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006858:	4b07      	ldr	r3, [pc, #28]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006866:	4904      	ldr	r1, [pc, #16]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800686e:	e009      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	74bb      	strb	r3, [r7, #18]
 8006874:	e006      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006876:	bf00      	nop
 8006878:	40021000 	.word	0x40021000
 800687c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	7cfb      	ldrb	r3, [r7, #19]
 8006882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006884:	7c7b      	ldrb	r3, [r7, #17]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688a:	4b8d      	ldr	r3, [pc, #564]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800688c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688e:	4a8c      	ldr	r2, [pc, #560]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068a2:	4b87      	ldr	r3, [pc, #540]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a8:	f023 0203 	bic.w	r2, r3, #3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a1b      	ldr	r3, [r3, #32]
 80068b0:	4983      	ldr	r1, [pc, #524]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068c4:	4b7e      	ldr	r3, [pc, #504]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ca:	f023 020c 	bic.w	r2, r3, #12
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	497b      	ldr	r1, [pc, #492]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068e6:	4b76      	ldr	r3, [pc, #472]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	4972      	ldr	r1, [pc, #456]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006908:	4b6d      	ldr	r3, [pc, #436]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800690a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	496a      	ldr	r1, [pc, #424]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006918:	4313      	orrs	r3, r2
 800691a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800692a:	4b65      	ldr	r3, [pc, #404]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800692c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	4961      	ldr	r1, [pc, #388]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800694c:	4b5c      	ldr	r3, [pc, #368]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	4959      	ldr	r1, [pc, #356]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800695c:	4313      	orrs	r3, r2
 800695e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800696e:	4b54      	ldr	r3, [pc, #336]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697c:	4950      	ldr	r1, [pc, #320]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006990:	4b4b      	ldr	r3, [pc, #300]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699e:	4948      	ldr	r1, [pc, #288]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069b2:	4b43      	ldr	r3, [pc, #268]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	493f      	ldr	r1, [pc, #252]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d028      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069d4:	4b3a      	ldr	r3, [pc, #232]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e2:	4937      	ldr	r1, [pc, #220]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069f2:	d106      	bne.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069f4:	4b32      	ldr	r3, [pc, #200]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	4a31      	ldr	r2, [pc, #196]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80069fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069fe:	60d3      	str	r3, [r2, #12]
 8006a00:	e011      	b.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a0a:	d10c      	bne.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	2101      	movs	r1, #1
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f8a4 	bl	8006b60 <RCCEx_PLLSAI1_Config>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006a1c:	7cfb      	ldrb	r3, [r7, #19]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8006a22:	7cfb      	ldrb	r3, [r7, #19]
 8006a24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d028      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a32:	4b23      	ldr	r3, [pc, #140]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a40:	491f      	ldr	r1, [pc, #124]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a50:	d106      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a52:	4b1b      	ldr	r3, [pc, #108]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	4a1a      	ldr	r2, [pc, #104]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a5c:	60d3      	str	r3, [r2, #12]
 8006a5e:	e011      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 f875 	bl	8006b60 <RCCEx_PLLSAI1_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a7a:	7cfb      	ldrb	r3, [r7, #19]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006a80:	7cfb      	ldrb	r3, [r7, #19]
 8006a82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d02b      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a9e:	4908      	ldr	r1, [pc, #32]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aae:	d109      	bne.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ab0:	4b03      	ldr	r3, [pc, #12]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	4a02      	ldr	r2, [pc, #8]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8006ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aba:	60d3      	str	r3, [r2, #12]
 8006abc:	e014      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006abe:	bf00      	nop
 8006ac0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006acc:	d10c      	bne.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 f843 	bl	8006b60 <RCCEx_PLLSAI1_Config>
 8006ada:	4603      	mov	r3, r0
 8006adc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ade:	7cfb      	ldrb	r3, [r7, #19]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8006ae4:	7cfb      	ldrb	r3, [r7, #19]
 8006ae6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d01c      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006af4:	4b19      	ldr	r3, [pc, #100]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006afa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b02:	4916      	ldr	r1, [pc, #88]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b04:	4313      	orrs	r3, r2
 8006b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b12:	d10c      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3304      	adds	r3, #4
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f820 	bl	8006b60 <RCCEx_PLLSAI1_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b24:	7cfb      	ldrb	r3, [r7, #19]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8006b2a:	7cfb      	ldrb	r3, [r7, #19]
 8006b2c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b3a:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b40:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b48:	4904      	ldr	r1, [pc, #16]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b50:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	40021000 	.word	0x40021000

08006b60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b6e:	4b74      	ldr	r3, [pc, #464]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f003 0303 	and.w	r3, r3, #3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d018      	beq.n	8006bac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b7a:	4b71      	ldr	r3, [pc, #452]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f003 0203 	and.w	r2, r3, #3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d10d      	bne.n	8006ba6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
       ||
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d009      	beq.n	8006ba6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006b92:	4b6b      	ldr	r3, [pc, #428]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
       ||
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d047      	beq.n	8006c36 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	73fb      	strb	r3, [r7, #15]
 8006baa:	e044      	b.n	8006c36 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d018      	beq.n	8006be6 <RCCEx_PLLSAI1_Config+0x86>
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d825      	bhi.n	8006c04 <RCCEx_PLLSAI1_Config+0xa4>
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d002      	beq.n	8006bc2 <RCCEx_PLLSAI1_Config+0x62>
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d009      	beq.n	8006bd4 <RCCEx_PLLSAI1_Config+0x74>
 8006bc0:	e020      	b.n	8006c04 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bc2:	4b5f      	ldr	r3, [pc, #380]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d11d      	bne.n	8006c0a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bd2:	e01a      	b.n	8006c0a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bd4:	4b5a      	ldr	r3, [pc, #360]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d116      	bne.n	8006c0e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006be4:	e013      	b.n	8006c0e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006be6:	4b56      	ldr	r3, [pc, #344]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10f      	bne.n	8006c12 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006bf2:	4b53      	ldr	r3, [pc, #332]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c02:	e006      	b.n	8006c12 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
      break;
 8006c08:	e004      	b.n	8006c14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c0a:	bf00      	nop
 8006c0c:	e002      	b.n	8006c14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c0e:	bf00      	nop
 8006c10:	e000      	b.n	8006c14 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c12:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10d      	bne.n	8006c36 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c1a:	4b49      	ldr	r3, [pc, #292]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6819      	ldr	r1, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	011b      	lsls	r3, r3, #4
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	4943      	ldr	r1, [pc, #268]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d17c      	bne.n	8006d36 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c3c:	4b40      	ldr	r3, [pc, #256]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a3f      	ldr	r2, [pc, #252]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c48:	f7fc fa04 	bl	8003054 <HAL_GetTick>
 8006c4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c4e:	e009      	b.n	8006c64 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c50:	f7fc fa00 	bl	8003054 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d902      	bls.n	8006c64 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	73fb      	strb	r3, [r7, #15]
        break;
 8006c62:	e005      	b.n	8006c70 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c64:	4b36      	ldr	r3, [pc, #216]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1ef      	bne.n	8006c50 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d15f      	bne.n	8006d36 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d110      	bne.n	8006c9e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c7c:	4b30      	ldr	r3, [pc, #192]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006c84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6892      	ldr	r2, [r2, #8]
 8006c8c:	0211      	lsls	r1, r2, #8
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	68d2      	ldr	r2, [r2, #12]
 8006c92:	06d2      	lsls	r2, r2, #27
 8006c94:	430a      	orrs	r2, r1
 8006c96:	492a      	ldr	r1, [pc, #168]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	610b      	str	r3, [r1, #16]
 8006c9c:	e027      	b.n	8006cee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d112      	bne.n	8006cca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ca4:	4b26      	ldr	r3, [pc, #152]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006cac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6892      	ldr	r2, [r2, #8]
 8006cb4:	0211      	lsls	r1, r2, #8
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6912      	ldr	r2, [r2, #16]
 8006cba:	0852      	lsrs	r2, r2, #1
 8006cbc:	3a01      	subs	r2, #1
 8006cbe:	0552      	lsls	r2, r2, #21
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	491f      	ldr	r1, [pc, #124]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	610b      	str	r3, [r1, #16]
 8006cc8:	e011      	b.n	8006cee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cca:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006cd2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	6892      	ldr	r2, [r2, #8]
 8006cda:	0211      	lsls	r1, r2, #8
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6952      	ldr	r2, [r2, #20]
 8006ce0:	0852      	lsrs	r2, r2, #1
 8006ce2:	3a01      	subs	r2, #1
 8006ce4:	0652      	lsls	r2, r2, #25
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	4915      	ldr	r1, [pc, #84]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a13      	ldr	r2, [pc, #76]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cf4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006cf8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfa:	f7fc f9ab 	bl	8003054 <HAL_GetTick>
 8006cfe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d00:	e009      	b.n	8006d16 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d02:	f7fc f9a7 	bl	8003054 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d902      	bls.n	8006d16 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	73fb      	strb	r3, [r7, #15]
          break;
 8006d14:	e005      	b.n	8006d22 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d16:	4b0a      	ldr	r3, [pc, #40]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0ef      	beq.n	8006d02 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	4903      	ldr	r1, [pc, #12]	; (8006d40 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40021000 	.word	0x40021000

08006d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e049      	b.n	8006dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fc f800 	bl	8002d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f000 fa7e 	bl	8007284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d001      	beq.n	8006e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e03b      	b.n	8006e84 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a19      	ldr	r2, [pc, #100]	; (8006e90 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_TIM_Base_Start_IT+0x4e>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e36:	d004      	beq.n	8006e42 <HAL_TIM_Base_Start_IT+0x4e>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a15      	ldr	r2, [pc, #84]	; (8006e94 <HAL_TIM_Base_Start_IT+0xa0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d115      	bne.n	8006e6e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	4b13      	ldr	r3, [pc, #76]	; (8006e98 <HAL_TIM_Base_Start_IT+0xa4>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2b06      	cmp	r3, #6
 8006e52:	d015      	beq.n	8006e80 <HAL_TIM_Base_Start_IT+0x8c>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5a:	d011      	beq.n	8006e80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6c:	e008      	b.n	8006e80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f042 0201 	orr.w	r2, r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e000      	b.n	8006e82 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40014000 	.word	0x40014000
 8006e98:	00010007 	.word	0x00010007

08006e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f003 0302 	and.w	r3, r3, #2
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d020      	beq.n	8006f00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01b      	beq.n	8006f00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0202 	mvn.w	r2, #2
 8006ed0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f9ad 	bl	8007246 <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f99f 	bl	8007232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f9b0 	bl	800725a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d020      	beq.n	8006f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0204 	mvn.w	r2, #4
 8006f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f987 	bl	8007246 <HAL_TIM_IC_CaptureCallback>
 8006f38:	e005      	b.n	8006f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f979 	bl	8007232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f98a 	bl	800725a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d020      	beq.n	8006f98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01b      	beq.n	8006f98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0208 	mvn.w	r2, #8
 8006f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f961 	bl	8007246 <HAL_TIM_IC_CaptureCallback>
 8006f84:	e005      	b.n	8006f92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f953 	bl	8007232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f964 	bl	800725a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0310 	and.w	r3, r3, #16
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d020      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01b      	beq.n	8006fe4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0210 	mvn.w	r2, #16
 8006fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f93b 	bl	8007246 <HAL_TIM_IC_CaptureCallback>
 8006fd0:	e005      	b.n	8006fde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f92d 	bl	8007232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f93e 	bl	800725a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00c      	beq.n	8007008 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d007      	beq.n	8007008 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f06f 0201 	mvn.w	r2, #1
 8007000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f7fb fd6a 	bl	8002adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00c      	beq.n	800702c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa9a 	bl	8007560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00c      	beq.n	8007050 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fa92 	bl	8007574 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00c      	beq.n	8007074 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d007      	beq.n	8007074 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f8fd 	bl	800726e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f003 0320 	and.w	r3, r3, #32
 8007084:	2b00      	cmp	r3, #0
 8007086:	d007      	beq.n	8007098 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0220 	mvn.w	r2, #32
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa5a 	bl	800754c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d101      	bne.n	80070bc <HAL_TIM_ConfigClockSource+0x1c>
 80070b8:	2302      	movs	r3, #2
 80070ba:	e0b6      	b.n	800722a <HAL_TIM_ConfigClockSource+0x18a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f8:	d03e      	beq.n	8007178 <HAL_TIM_ConfigClockSource+0xd8>
 80070fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fe:	f200 8087 	bhi.w	8007210 <HAL_TIM_ConfigClockSource+0x170>
 8007102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007106:	f000 8086 	beq.w	8007216 <HAL_TIM_ConfigClockSource+0x176>
 800710a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710e:	d87f      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x170>
 8007110:	2b70      	cmp	r3, #112	; 0x70
 8007112:	d01a      	beq.n	800714a <HAL_TIM_ConfigClockSource+0xaa>
 8007114:	2b70      	cmp	r3, #112	; 0x70
 8007116:	d87b      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x170>
 8007118:	2b60      	cmp	r3, #96	; 0x60
 800711a:	d050      	beq.n	80071be <HAL_TIM_ConfigClockSource+0x11e>
 800711c:	2b60      	cmp	r3, #96	; 0x60
 800711e:	d877      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x170>
 8007120:	2b50      	cmp	r3, #80	; 0x50
 8007122:	d03c      	beq.n	800719e <HAL_TIM_ConfigClockSource+0xfe>
 8007124:	2b50      	cmp	r3, #80	; 0x50
 8007126:	d873      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x170>
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d058      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x13e>
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d86f      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x170>
 8007130:	2b30      	cmp	r3, #48	; 0x30
 8007132:	d064      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x15e>
 8007134:	2b30      	cmp	r3, #48	; 0x30
 8007136:	d86b      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x170>
 8007138:	2b20      	cmp	r3, #32
 800713a:	d060      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x15e>
 800713c:	2b20      	cmp	r3, #32
 800713e:	d867      	bhi.n	8007210 <HAL_TIM_ConfigClockSource+0x170>
 8007140:	2b00      	cmp	r3, #0
 8007142:	d05c      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x15e>
 8007144:	2b10      	cmp	r3, #16
 8007146:	d05a      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x15e>
 8007148:	e062      	b.n	8007210 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800715a:	f000 f971 	bl	8007440 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800716c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	609a      	str	r2, [r3, #8]
      break;
 8007176:	e04f      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007188:	f000 f95a 	bl	8007440 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800719a:	609a      	str	r2, [r3, #8]
      break;
 800719c:	e03c      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071aa:	461a      	mov	r2, r3
 80071ac:	f000 f8ce 	bl	800734c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2150      	movs	r1, #80	; 0x50
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 f927 	bl	800740a <TIM_ITRx_SetConfig>
      break;
 80071bc:	e02c      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071ca:	461a      	mov	r2, r3
 80071cc:	f000 f8ed 	bl	80073aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2160      	movs	r1, #96	; 0x60
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f917 	bl	800740a <TIM_ITRx_SetConfig>
      break;
 80071dc:	e01c      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ea:	461a      	mov	r2, r3
 80071ec:	f000 f8ae 	bl	800734c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2140      	movs	r1, #64	; 0x40
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 f907 	bl	800740a <TIM_ITRx_SetConfig>
      break;
 80071fc:	e00c      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4619      	mov	r1, r3
 8007208:	4610      	mov	r0, r2
 800720a:	f000 f8fe 	bl	800740a <TIM_ITRx_SetConfig>
      break;
 800720e:	e003      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	73fb      	strb	r3, [r7, #15]
      break;
 8007214:	e000      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007228:	7bfb      	ldrb	r3, [r7, #15]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800723a:	bf00      	nop
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
	...

08007284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a2a      	ldr	r2, [pc, #168]	; (8007340 <TIM_Base_SetConfig+0xbc>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_Base_SetConfig+0x20>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a2:	d108      	bne.n	80072b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a21      	ldr	r2, [pc, #132]	; (8007340 <TIM_Base_SetConfig+0xbc>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00b      	beq.n	80072d6 <TIM_Base_SetConfig+0x52>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072c4:	d007      	beq.n	80072d6 <TIM_Base_SetConfig+0x52>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a1e      	ldr	r2, [pc, #120]	; (8007344 <TIM_Base_SetConfig+0xc0>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d003      	beq.n	80072d6 <TIM_Base_SetConfig+0x52>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a1d      	ldr	r2, [pc, #116]	; (8007348 <TIM_Base_SetConfig+0xc4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d108      	bne.n	80072e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a0c      	ldr	r2, [pc, #48]	; (8007340 <TIM_Base_SetConfig+0xbc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d007      	beq.n	8007324 <TIM_Base_SetConfig+0xa0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a0b      	ldr	r2, [pc, #44]	; (8007344 <TIM_Base_SetConfig+0xc0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d003      	beq.n	8007324 <TIM_Base_SetConfig+0xa0>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a0a      	ldr	r2, [pc, #40]	; (8007348 <TIM_Base_SetConfig+0xc4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d103      	bne.n	800732c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	615a      	str	r2, [r3, #20]
}
 8007332:	bf00      	nop
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40012c00 	.word	0x40012c00
 8007344:	40014000 	.word	0x40014000
 8007348:	40014400 	.word	0x40014400

0800734c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	f023 0201 	bic.w	r2, r3, #1
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4313      	orrs	r3, r2
 8007380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f023 030a 	bic.w	r3, r3, #10
 8007388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800738a:	697a      	ldr	r2, [r7, #20]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	4313      	orrs	r3, r2
 8007390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	621a      	str	r2, [r3, #32]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b087      	sub	sp, #28
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1b      	ldr	r3, [r3, #32]
 80073c0:	f023 0210 	bic.w	r2, r3, #16
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	031b      	lsls	r3, r3, #12
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	4313      	orrs	r3, r2
 80073de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	621a      	str	r2, [r3, #32]
}
 80073fe:	bf00      	nop
 8007400:	371c      	adds	r7, #28
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800740a:	b480      	push	{r7}
 800740c:	b085      	sub	sp, #20
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4313      	orrs	r3, r2
 8007428:	f043 0307 	orr.w	r3, r3, #7
 800742c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	609a      	str	r2, [r3, #8]
}
 8007434:	bf00      	nop
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007440:	b480      	push	{r7}
 8007442:	b087      	sub	sp, #28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800745a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	021a      	lsls	r2, r3, #8
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	431a      	orrs	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4313      	orrs	r3, r2
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	4313      	orrs	r3, r2
 800746c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	609a      	str	r2, [r3, #8]
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007494:	2302      	movs	r3, #2
 8007496:	e04f      	b.n	8007538 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a21      	ldr	r2, [pc, #132]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d108      	bne.n	80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a14      	ldr	r2, [pc, #80]	; (8007544 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d009      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007500:	d004      	beq.n	800750c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a10      	ldr	r2, [pc, #64]	; (8007548 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d10c      	bne.n	8007526 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007512:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	4313      	orrs	r3, r2
 800751c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	40012c00 	.word	0x40012c00
 8007548:	40014000 	.word	0x40014000

0800754c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e040      	b.n	800761c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fb fc04 	bl	8002db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2224      	movs	r2, #36	; 0x24
 80075b4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0201 	bic.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa82 	bl	8007ad8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f825 	bl	8007624 <UART_SetConfig>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e01b      	b.n	800761c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007602:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0201 	orr.w	r2, r2, #1
 8007612:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fb01 	bl	8007c1c <UART_CheckIdleState>
 800761a:	4603      	mov	r3, r0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007628:	b08a      	sub	sp, #40	; 0x28
 800762a:	af00      	add	r7, sp, #0
 800762c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	431a      	orrs	r2, r3
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	431a      	orrs	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	4313      	orrs	r3, r2
 800764a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b9e      	ldr	r3, [pc, #632]	; (80078cc <UART_SetConfig+0x2a8>)
 8007654:	4013      	ands	r3, r2
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	6812      	ldr	r2, [r2, #0]
 800765a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800765c:	430b      	orrs	r3, r1
 800765e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	68da      	ldr	r2, [r3, #12]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a93      	ldr	r2, [pc, #588]	; (80078d0 <UART_SetConfig+0x2ac>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d004      	beq.n	8007690 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768c:	4313      	orrs	r3, r2
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a0:	430a      	orrs	r2, r1
 80076a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a8a      	ldr	r2, [pc, #552]	; (80078d4 <UART_SetConfig+0x2b0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d126      	bne.n	80076fc <UART_SetConfig+0xd8>
 80076ae:	4b8a      	ldr	r3, [pc, #552]	; (80078d8 <UART_SetConfig+0x2b4>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d81b      	bhi.n	80076f4 <UART_SetConfig+0xd0>
 80076bc:	a201      	add	r2, pc, #4	; (adr r2, 80076c4 <UART_SetConfig+0xa0>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076d5 	.word	0x080076d5
 80076c8:	080076e5 	.word	0x080076e5
 80076cc:	080076dd 	.word	0x080076dd
 80076d0:	080076ed 	.word	0x080076ed
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076da:	e0ab      	b.n	8007834 <UART_SetConfig+0x210>
 80076dc:	2302      	movs	r3, #2
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076e2:	e0a7      	b.n	8007834 <UART_SetConfig+0x210>
 80076e4:	2304      	movs	r3, #4
 80076e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ea:	e0a3      	b.n	8007834 <UART_SetConfig+0x210>
 80076ec:	2308      	movs	r3, #8
 80076ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076f2:	e09f      	b.n	8007834 <UART_SetConfig+0x210>
 80076f4:	2310      	movs	r3, #16
 80076f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fa:	e09b      	b.n	8007834 <UART_SetConfig+0x210>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a76      	ldr	r2, [pc, #472]	; (80078dc <UART_SetConfig+0x2b8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d138      	bne.n	8007778 <UART_SetConfig+0x154>
 8007706:	4b74      	ldr	r3, [pc, #464]	; (80078d8 <UART_SetConfig+0x2b4>)
 8007708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770c:	f003 030c 	and.w	r3, r3, #12
 8007710:	2b0c      	cmp	r3, #12
 8007712:	d82d      	bhi.n	8007770 <UART_SetConfig+0x14c>
 8007714:	a201      	add	r2, pc, #4	; (adr r2, 800771c <UART_SetConfig+0xf8>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	08007751 	.word	0x08007751
 8007720:	08007771 	.word	0x08007771
 8007724:	08007771 	.word	0x08007771
 8007728:	08007771 	.word	0x08007771
 800772c:	08007761 	.word	0x08007761
 8007730:	08007771 	.word	0x08007771
 8007734:	08007771 	.word	0x08007771
 8007738:	08007771 	.word	0x08007771
 800773c:	08007759 	.word	0x08007759
 8007740:	08007771 	.word	0x08007771
 8007744:	08007771 	.word	0x08007771
 8007748:	08007771 	.word	0x08007771
 800774c:	08007769 	.word	0x08007769
 8007750:	2300      	movs	r3, #0
 8007752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007756:	e06d      	b.n	8007834 <UART_SetConfig+0x210>
 8007758:	2302      	movs	r3, #2
 800775a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800775e:	e069      	b.n	8007834 <UART_SetConfig+0x210>
 8007760:	2304      	movs	r3, #4
 8007762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007766:	e065      	b.n	8007834 <UART_SetConfig+0x210>
 8007768:	2308      	movs	r3, #8
 800776a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800776e:	e061      	b.n	8007834 <UART_SetConfig+0x210>
 8007770:	2310      	movs	r3, #16
 8007772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007776:	e05d      	b.n	8007834 <UART_SetConfig+0x210>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a58      	ldr	r2, [pc, #352]	; (80078e0 <UART_SetConfig+0x2bc>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d125      	bne.n	80077ce <UART_SetConfig+0x1aa>
 8007782:	4b55      	ldr	r3, [pc, #340]	; (80078d8 <UART_SetConfig+0x2b4>)
 8007784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007788:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800778c:	2b30      	cmp	r3, #48	; 0x30
 800778e:	d016      	beq.n	80077be <UART_SetConfig+0x19a>
 8007790:	2b30      	cmp	r3, #48	; 0x30
 8007792:	d818      	bhi.n	80077c6 <UART_SetConfig+0x1a2>
 8007794:	2b20      	cmp	r3, #32
 8007796:	d00a      	beq.n	80077ae <UART_SetConfig+0x18a>
 8007798:	2b20      	cmp	r3, #32
 800779a:	d814      	bhi.n	80077c6 <UART_SetConfig+0x1a2>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <UART_SetConfig+0x182>
 80077a0:	2b10      	cmp	r3, #16
 80077a2:	d008      	beq.n	80077b6 <UART_SetConfig+0x192>
 80077a4:	e00f      	b.n	80077c6 <UART_SetConfig+0x1a2>
 80077a6:	2300      	movs	r3, #0
 80077a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ac:	e042      	b.n	8007834 <UART_SetConfig+0x210>
 80077ae:	2302      	movs	r3, #2
 80077b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077b4:	e03e      	b.n	8007834 <UART_SetConfig+0x210>
 80077b6:	2304      	movs	r3, #4
 80077b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077bc:	e03a      	b.n	8007834 <UART_SetConfig+0x210>
 80077be:	2308      	movs	r3, #8
 80077c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c4:	e036      	b.n	8007834 <UART_SetConfig+0x210>
 80077c6:	2310      	movs	r3, #16
 80077c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077cc:	e032      	b.n	8007834 <UART_SetConfig+0x210>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3f      	ldr	r2, [pc, #252]	; (80078d0 <UART_SetConfig+0x2ac>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d12a      	bne.n	800782e <UART_SetConfig+0x20a>
 80077d8:	4b3f      	ldr	r3, [pc, #252]	; (80078d8 <UART_SetConfig+0x2b4>)
 80077da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077de:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077e6:	d01a      	beq.n	800781e <UART_SetConfig+0x1fa>
 80077e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077ec:	d81b      	bhi.n	8007826 <UART_SetConfig+0x202>
 80077ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077f2:	d00c      	beq.n	800780e <UART_SetConfig+0x1ea>
 80077f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077f8:	d815      	bhi.n	8007826 <UART_SetConfig+0x202>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <UART_SetConfig+0x1e2>
 80077fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007802:	d008      	beq.n	8007816 <UART_SetConfig+0x1f2>
 8007804:	e00f      	b.n	8007826 <UART_SetConfig+0x202>
 8007806:	2300      	movs	r3, #0
 8007808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800780c:	e012      	b.n	8007834 <UART_SetConfig+0x210>
 800780e:	2302      	movs	r3, #2
 8007810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007814:	e00e      	b.n	8007834 <UART_SetConfig+0x210>
 8007816:	2304      	movs	r3, #4
 8007818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781c:	e00a      	b.n	8007834 <UART_SetConfig+0x210>
 800781e:	2308      	movs	r3, #8
 8007820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007824:	e006      	b.n	8007834 <UART_SetConfig+0x210>
 8007826:	2310      	movs	r3, #16
 8007828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782c:	e002      	b.n	8007834 <UART_SetConfig+0x210>
 800782e:	2310      	movs	r3, #16
 8007830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a25      	ldr	r2, [pc, #148]	; (80078d0 <UART_SetConfig+0x2ac>)
 800783a:	4293      	cmp	r3, r2
 800783c:	f040 808a 	bne.w	8007954 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007840:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007844:	2b08      	cmp	r3, #8
 8007846:	d824      	bhi.n	8007892 <UART_SetConfig+0x26e>
 8007848:	a201      	add	r2, pc, #4	; (adr r2, 8007850 <UART_SetConfig+0x22c>)
 800784a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784e:	bf00      	nop
 8007850:	08007875 	.word	0x08007875
 8007854:	08007893 	.word	0x08007893
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007893 	.word	0x08007893
 8007860:	08007883 	.word	0x08007883
 8007864:	08007893 	.word	0x08007893
 8007868:	08007893 	.word	0x08007893
 800786c:	08007893 	.word	0x08007893
 8007870:	0800788b 	.word	0x0800788b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007874:	f7fe fe9e 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8007878:	61f8      	str	r0, [r7, #28]
        break;
 800787a:	e010      	b.n	800789e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800787c:	4b19      	ldr	r3, [pc, #100]	; (80078e4 <UART_SetConfig+0x2c0>)
 800787e:	61fb      	str	r3, [r7, #28]
        break;
 8007880:	e00d      	b.n	800789e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007882:	f7fe fdff 	bl	8006484 <HAL_RCC_GetSysClockFreq>
 8007886:	61f8      	str	r0, [r7, #28]
        break;
 8007888:	e009      	b.n	800789e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800788a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788e:	61fb      	str	r3, [r7, #28]
        break;
 8007890:	e005      	b.n	800789e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800789c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f000 8109 	beq.w	8007ab8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	4613      	mov	r3, r2
 80078ac:	005b      	lsls	r3, r3, #1
 80078ae:	4413      	add	r3, r2
 80078b0:	69fa      	ldr	r2, [r7, #28]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d305      	bcc.n	80078c2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d912      	bls.n	80078e8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80078c8:	e0f6      	b.n	8007ab8 <UART_SetConfig+0x494>
 80078ca:	bf00      	nop
 80078cc:	efff69f3 	.word	0xefff69f3
 80078d0:	40008000 	.word	0x40008000
 80078d4:	40013800 	.word	0x40013800
 80078d8:	40021000 	.word	0x40021000
 80078dc:	40004400 	.word	0x40004400
 80078e0:	40004800 	.word	0x40004800
 80078e4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	2200      	movs	r2, #0
 80078ec:	461c      	mov	r4, r3
 80078ee:	4615      	mov	r5, r2
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	022b      	lsls	r3, r5, #8
 80078fa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80078fe:	0222      	lsls	r2, r4, #8
 8007900:	68f9      	ldr	r1, [r7, #12]
 8007902:	6849      	ldr	r1, [r1, #4]
 8007904:	0849      	lsrs	r1, r1, #1
 8007906:	2000      	movs	r0, #0
 8007908:	4688      	mov	r8, r1
 800790a:	4681      	mov	r9, r0
 800790c:	eb12 0a08 	adds.w	sl, r2, r8
 8007910:	eb43 0b09 	adc.w	fp, r3, r9
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007922:	4650      	mov	r0, sl
 8007924:	4659      	mov	r1, fp
 8007926:	f7f8 fc51 	bl	80001cc <__aeabi_uldivmod>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	4613      	mov	r3, r2
 8007930:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007938:	d308      	bcc.n	800794c <UART_SetConfig+0x328>
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007940:	d204      	bcs.n	800794c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69ba      	ldr	r2, [r7, #24]
 8007948:	60da      	str	r2, [r3, #12]
 800794a:	e0b5      	b.n	8007ab8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007952:	e0b1      	b.n	8007ab8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800795c:	d15d      	bne.n	8007a1a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800795e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007962:	2b08      	cmp	r3, #8
 8007964:	d827      	bhi.n	80079b6 <UART_SetConfig+0x392>
 8007966:	a201      	add	r2, pc, #4	; (adr r2, 800796c <UART_SetConfig+0x348>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	08007991 	.word	0x08007991
 8007970:	08007999 	.word	0x08007999
 8007974:	080079a1 	.word	0x080079a1
 8007978:	080079b7 	.word	0x080079b7
 800797c:	080079a7 	.word	0x080079a7
 8007980:	080079b7 	.word	0x080079b7
 8007984:	080079b7 	.word	0x080079b7
 8007988:	080079b7 	.word	0x080079b7
 800798c:	080079af 	.word	0x080079af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007990:	f7fe fe10 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8007994:	61f8      	str	r0, [r7, #28]
        break;
 8007996:	e014      	b.n	80079c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007998:	f7fe fe22 	bl	80065e0 <HAL_RCC_GetPCLK2Freq>
 800799c:	61f8      	str	r0, [r7, #28]
        break;
 800799e:	e010      	b.n	80079c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079a0:	4b4c      	ldr	r3, [pc, #304]	; (8007ad4 <UART_SetConfig+0x4b0>)
 80079a2:	61fb      	str	r3, [r7, #28]
        break;
 80079a4:	e00d      	b.n	80079c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079a6:	f7fe fd6d 	bl	8006484 <HAL_RCC_GetSysClockFreq>
 80079aa:	61f8      	str	r0, [r7, #28]
        break;
 80079ac:	e009      	b.n	80079c2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079b2:	61fb      	str	r3, [r7, #28]
        break;
 80079b4:	e005      	b.n	80079c2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d077      	beq.n	8007ab8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	005a      	lsls	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	085b      	lsrs	r3, r3, #1
 80079d2:	441a      	add	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	2b0f      	cmp	r3, #15
 80079e2:	d916      	bls.n	8007a12 <UART_SetConfig+0x3ee>
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ea:	d212      	bcs.n	8007a12 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	f023 030f 	bic.w	r3, r3, #15
 80079f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	085b      	lsrs	r3, r3, #1
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	8afb      	ldrh	r3, [r7, #22]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	8afa      	ldrh	r2, [r7, #22]
 8007a0e:	60da      	str	r2, [r3, #12]
 8007a10:	e052      	b.n	8007ab8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a18:	e04e      	b.n	8007ab8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d827      	bhi.n	8007a72 <UART_SetConfig+0x44e>
 8007a22:	a201      	add	r2, pc, #4	; (adr r2, 8007a28 <UART_SetConfig+0x404>)
 8007a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a55 	.word	0x08007a55
 8007a30:	08007a5d 	.word	0x08007a5d
 8007a34:	08007a73 	.word	0x08007a73
 8007a38:	08007a63 	.word	0x08007a63
 8007a3c:	08007a73 	.word	0x08007a73
 8007a40:	08007a73 	.word	0x08007a73
 8007a44:	08007a73 	.word	0x08007a73
 8007a48:	08007a6b 	.word	0x08007a6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a4c:	f7fe fdb2 	bl	80065b4 <HAL_RCC_GetPCLK1Freq>
 8007a50:	61f8      	str	r0, [r7, #28]
        break;
 8007a52:	e014      	b.n	8007a7e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a54:	f7fe fdc4 	bl	80065e0 <HAL_RCC_GetPCLK2Freq>
 8007a58:	61f8      	str	r0, [r7, #28]
        break;
 8007a5a:	e010      	b.n	8007a7e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a5c:	4b1d      	ldr	r3, [pc, #116]	; (8007ad4 <UART_SetConfig+0x4b0>)
 8007a5e:	61fb      	str	r3, [r7, #28]
        break;
 8007a60:	e00d      	b.n	8007a7e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a62:	f7fe fd0f 	bl	8006484 <HAL_RCC_GetSysClockFreq>
 8007a66:	61f8      	str	r0, [r7, #28]
        break;
 8007a68:	e009      	b.n	8007a7e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a6e:	61fb      	str	r3, [r7, #28]
        break;
 8007a70:	e005      	b.n	8007a7e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a7c:	bf00      	nop
    }

    if (pclk != 0U)
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d019      	beq.n	8007ab8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	085a      	lsrs	r2, r3, #1
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	441a      	add	r2, r3
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	2b0f      	cmp	r3, #15
 8007a9c:	d909      	bls.n	8007ab2 <UART_SetConfig+0x48e>
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa4:	d205      	bcs.n	8007ab2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	60da      	str	r2, [r3, #12]
 8007ab0:	e002      	b.n	8007ab8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ac4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3728      	adds	r7, #40	; 0x28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ad2:	bf00      	nop
 8007ad4:	00f42400 	.word	0x00f42400

08007ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00a      	beq.n	8007b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00a      	beq.n	8007b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00a      	beq.n	8007b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	430a      	orrs	r2, r1
 8007b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00a      	beq.n	8007b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01a      	beq.n	8007bee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bd6:	d10a      	bne.n	8007bee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  }
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b098      	sub	sp, #96	; 0x60
 8007c20:	af02      	add	r7, sp, #8
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c2c:	f7fb fa12 	bl	8003054 <HAL_GetTick>
 8007c30:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0308 	and.w	r3, r3, #8
 8007c3c:	2b08      	cmp	r3, #8
 8007c3e:	d12e      	bne.n	8007c9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f88c 	bl	8007d6c <UART_WaitOnFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d021      	beq.n	8007c9e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c78:	647b      	str	r3, [r7, #68]	; 0x44
 8007c7a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e6      	bne.n	8007c5a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e062      	b.n	8007d64 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d149      	bne.n	8007d40 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cb0:	9300      	str	r3, [sp, #0]
 8007cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f856 	bl	8007d6c <UART_WaitOnFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d03c      	beq.n	8007d40 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	623b      	str	r3, [r7, #32]
   return(result);
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ce4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ce6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cec:	e841 2300 	strex	r3, r2, [r1]
 8007cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1e6      	bne.n	8007cc6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	e853 3f00 	ldrex	r3, [r3]
 8007d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0301 	bic.w	r3, r3, #1
 8007d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d18:	61fa      	str	r2, [r7, #28]
 8007d1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	69b9      	ldr	r1, [r7, #24]
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	617b      	str	r3, [r7, #20]
   return(result);
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e5      	bne.n	8007cf8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e011      	b.n	8007d64 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2220      	movs	r2, #32
 8007d44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3758      	adds	r7, #88	; 0x58
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	603b      	str	r3, [r7, #0]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d7c:	e049      	b.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d84:	d045      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d86:	f7fb f965 	bl	8003054 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	69ba      	ldr	r2, [r7, #24]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d302      	bcc.n	8007d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e048      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0304 	and.w	r3, r3, #4
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d031      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69db      	ldr	r3, [r3, #28]
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b08      	cmp	r3, #8
 8007dba:	d110      	bne.n	8007dde <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f000 f838 	bl	8007e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2208      	movs	r2, #8
 8007dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e029      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dec:	d111      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 f81e 	bl	8007e3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2220      	movs	r2, #32
 8007e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e00f      	b.n	8007e32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d0a6      	beq.n	8007d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b095      	sub	sp, #84	; 0x54
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4a:	e853 3f00 	ldrex	r3, [r3]
 8007e4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	643b      	str	r3, [r7, #64]	; 0x40
 8007e62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e6      	bne.n	8007e42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3308      	adds	r3, #8
 8007e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	e853 3f00 	ldrex	r3, [r3]
 8007e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3308      	adds	r3, #8
 8007e92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e9c:	e841 2300 	strex	r3, r2, [r1]
 8007ea0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e5      	bne.n	8007e74 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d118      	bne.n	8007ee2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	f023 0310 	bic.w	r3, r3, #16
 8007ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ece:	61bb      	str	r3, [r7, #24]
 8007ed0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6979      	ldr	r1, [r7, #20]
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	613b      	str	r3, [r7, #16]
   return(result);
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e6      	bne.n	8007eb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007ef6:	bf00      	nop
 8007ef8:	3754      	adds	r7, #84	; 0x54
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <memset>:
 8007f02:	4402      	add	r2, r0
 8007f04:	4603      	mov	r3, r0
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d100      	bne.n	8007f0c <memset+0xa>
 8007f0a:	4770      	bx	lr
 8007f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8007f10:	e7f9      	b.n	8007f06 <memset+0x4>
	...

08007f14 <__libc_init_array>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	4d0d      	ldr	r5, [pc, #52]	; (8007f4c <__libc_init_array+0x38>)
 8007f18:	4c0d      	ldr	r4, [pc, #52]	; (8007f50 <__libc_init_array+0x3c>)
 8007f1a:	1b64      	subs	r4, r4, r5
 8007f1c:	10a4      	asrs	r4, r4, #2
 8007f1e:	2600      	movs	r6, #0
 8007f20:	42a6      	cmp	r6, r4
 8007f22:	d109      	bne.n	8007f38 <__libc_init_array+0x24>
 8007f24:	4d0b      	ldr	r5, [pc, #44]	; (8007f54 <__libc_init_array+0x40>)
 8007f26:	4c0c      	ldr	r4, [pc, #48]	; (8007f58 <__libc_init_array+0x44>)
 8007f28:	f000 f818 	bl	8007f5c <_init>
 8007f2c:	1b64      	subs	r4, r4, r5
 8007f2e:	10a4      	asrs	r4, r4, #2
 8007f30:	2600      	movs	r6, #0
 8007f32:	42a6      	cmp	r6, r4
 8007f34:	d105      	bne.n	8007f42 <__libc_init_array+0x2e>
 8007f36:	bd70      	pop	{r4, r5, r6, pc}
 8007f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f3c:	4798      	blx	r3
 8007f3e:	3601      	adds	r6, #1
 8007f40:	e7ee      	b.n	8007f20 <__libc_init_array+0xc>
 8007f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f46:	4798      	blx	r3
 8007f48:	3601      	adds	r6, #1
 8007f4a:	e7f2      	b.n	8007f32 <__libc_init_array+0x1e>
 8007f4c:	08007fcc 	.word	0x08007fcc
 8007f50:	08007fcc 	.word	0x08007fcc
 8007f54:	08007fcc 	.word	0x08007fcc
 8007f58:	08007fd0 	.word	0x08007fd0

08007f5c <_init>:
 8007f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5e:	bf00      	nop
 8007f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f62:	bc08      	pop	{r3}
 8007f64:	469e      	mov	lr, r3
 8007f66:	4770      	bx	lr

08007f68 <_fini>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	bf00      	nop
 8007f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6e:	bc08      	pop	{r3}
 8007f70:	469e      	mov	lr, r3
 8007f72:	4770      	bx	lr
